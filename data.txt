public boolean autoRegUpdate(String appNum, Connection conn) throws Exception {
    	log(7, "Begin AutoRegistrationBO.autoRegPEUpdate() " + appNum);
    	try {
    	    
    		updateArAppforAidTable(appNum);
    	    if (autoRegScheduledSw == 'Y') {
    		if ((autoRegT1002Cargo.getFsRqstSw() == 'Y' || autoRegT1002Cargo.getCashRqstSw() == 'Y')) {
    		    log(7, "Auto schedule appointments - Auto Reg");
    		    if (autoRegShAppCargo != null) {
    			log(7, autoRegShAppCargo.toString());
    		    } else {
    			log(7, "autoRegShAppCargo is null!");
    		    }
    		    updateShAppointmentsTable();
    		    updateShAppointmentProgramsTable();
    		    generateCorrespondance(appNum, DIConstants.DOC_ID_FXX412, "", this.con);
    		}
    	    }
    	    
    	    return true;
    	    
    	} catch (Exception e) {
			log(ILog.ERROR, "Exception in AutoRegistrationBO.autoRegUpdate() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
    	    hasExceptionOccurred = true;
    	    if (this.con != null) {
    		this.con.rollback();
    	    }
    	    updateAutoRegExcpTable(appNum, AppRegConstants.AUTO_REG_PROCESS_DB, AppRegConstants.AUTO_REG_EXCP_STATUS_EX);
    	    if (this.con != null) {
    		this.con.commit();
    	    }
    	    throw e;
    	}
       }
    
    
    public boolean autoRegPEUpdate(String appNum, Connection conn) throws Exception {
    	log(7, "Begin AutoRegistrationBO.autoRegPEUpdate() " + appNum);
    	try {
    	    
    	     if (appMACategory) {
    				updateArCpeEligDetailTable(appNum);
    				cpeMMISTrigger(appNum);
    		}
    		

    	    if (appHPECategory) {
    		
    		if (autoRegT1060HPECargoArray != null && autoRegT1060HPECargoArray.length > 0) {
    		    updateArHpeEligDetailTable(autoRegT1060HPECargoArray[0]);
    		    updateArHpeEligDetailIndvTable(autoRegT1060HPECargoArray);
    		    updateArHpeAssociationTable(autoRegT1060HPECargoArray[0]);
    		}
    		if (this.con != null) {
    			this.con.commit();
    		    }
    		// Adding message to queue for IRDB web service call
    		sendMessageToIRDBQueue(appNum);
    		generateCorrespondance(appNum, DIConstants.DOC_ID_FXX418, "HPE", this.con);
    		hpeMMISTrigger(appNum);
    	    }
    	    
    	    if (appMPECategory || appFPPECategory) {
    	    	String status=updateArMpeEligDetailTable(); //Pre-filling for MPE or FPPE tables
	    		if("P7true".equalsIgnoreCase(status)){
	    			generateCorrespondance(appNum, DIConstants.DOC_ID_FXX421, "MPE", this.con);
	    		}else if("P7false".equalsIgnoreCase(status) && !appFPPECategory){
	    			generateCorrespondance(appNum, DIConstants.DOC_ID_FXX418, "MPE", this.con);
		    		mpeMMISTrigger(appNum);
	    		}else if("P7false".equalsIgnoreCase(status) && appFPPECategory){
	    			fppeMMISTrigger(appNum);
	    		}
    	    }
    	    
    	    return true;
    	    
    	} catch (Exception e) {
			log(ILog.ERROR, "Exception in AutoRegistrationBO.autoRegPEUpdate() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
    	    hasExceptionOccurred = true;
    	    if (this.con != null) {
    		this.con.rollback();
    	    }
    	    updateAutoRegExcpTable(appNum, AppRegConstants.AUTO_REG_PROCESS_DB, AppRegConstants.AUTO_REG_EXCP_STATUS_EX);
    	    if (this.con != null) {
    		this.con.commit();
    	    }
    	    throw e;
    	}
       }
    
    
    public long generateIndvId() throws Exception {
	log(7, "Begin AutoRegistrationBO.generateIndvId() ");
	DcIndvCollection primaryKeyColl = new DcIndvCollection(connection);
	DcIndvCargo dcIndvCargo = new DcIndvCargo();
	DcIndvCargo[] dcIndCarArray = null;
	
	try {
	    
	    primaryKeyColl.setCargo(dcIndvCargo);
	    dcIndCarArray = (DcIndvCargo[]) primaryKeyColl.select("findByRetrievePrimaryKey");
	    if (dcIndCarArray != null && dcIndCarArray.length > 0) {
		dcIndvCargo.setIndvId(dcIndCarArray[0].getIndvId());
	    }
	    String finalResult = "";
	    if (dcIndvCargo.getIndvId() != 0) {
		String calcValue = "";
		String countString = "";
		countString = String.valueOf("" + dcIndvCargo.getIndvId());
		int countDigits = countString.trim().length();
		if (countDigits < 9) {
		    ArrayList vMesg = new ArrayList();
		    ArrayList vEmpty = new ArrayList();
		    vMesg.add("21592");
		    throw new TIERSValidationException(vMesg, vEmpty);
		}
		calcValue = calculatedValue(dcIndvCargo.getIndvId());
		if (!(calcValue.equals("10"))) {
		    if (calcValue.equals("11"))
			calcValue = "0";
		    finalResult = String.valueOf(dcIndvCargo.getIndvId()) + calcValue;
		} else {
		    do {
			dcIndvCargo.setIndvId(0);
			primaryKeyColl.setCargo(dcIndvCargo);
			dcIndCarArray = (DcIndvCargo[]) primaryKeyColl.select("findByRetrievePrimaryKey");
			if (dcIndCarArray != null && dcIndCarArray.length > 0) {
			    dcIndvCargo.setIndvId(dcIndCarArray[0].getIndvId());
			}
			calcValue = calculatedValue(dcIndvCargo.getIndvId());
		    } while (calcValue.equals("10"));
		    if (calcValue.equals("11"))
			calcValue = "0";
		    finalResult = String.valueOf(dcIndvCargo.getIndvId()) + calcValue;
		}
		
	    }
	    return Long.parseLong(finalResult);
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.generateIndvId():" + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    primaryKeyColl = null;
	    dcIndvCargo = null;
	    dcIndCarArray = null;
	}
    }
    
    /**
     * Method calculatedValue takes the individualId passed and processes the MCI. Check Digit Logic and returns the calculated value.
     * 
     * @param individualId
     *            -- contains the individual number
     * @return String -- returns the calculated value
     */
    public String calculatedValue(long individualId) {
	String testString = "";
	testString = String.valueOf("" + individualId);
	int sumSequence = 0, remainderSeq = 0;
	String calcValue = null;
	int[] numArray = new int[9];
	for (int i = 0; i < 9; i++) {
	    numArray[i] = Character.getNumericValue(testString.charAt(i));
	}
	for (int i = 0; i < 9; i++) {
	    sumSequence += (9 - i) * numArray[i];
	}
	remainderSeq = sumSequence % 11;
	calcValue = String.valueOf(11 - remainderSeq);
	
	return calcValue;
    }
    
    public boolean updateT1004AppIndvTable(T1004AppIndvCargo t1004Cargo) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateT1004AppIndvTable() ");
	T1004AppIndvCollection t1004AppIndvColl = null;
	
	try {
	    
	    t1004AppIndvColl = new T1004AppIndvCollection(connection);
	    if (t1004Cargo == null) {
		return false;
	    }
	    t1004AppIndvColl.setCargo(t1004Cargo);
	    t1004AppIndvColl.select("updateBatchIndByAppNum");
	    
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateT1004AppIndvTable():" + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    t1004AppIndvColl = null;
	}
    }
    
    public boolean updateSsInterfacesSummaryTable(HashMap<Integer, String> ssaValidationSwMap) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateSsInterfacesSummaryTable() ");
	SsInterfacesSummaryCargo ssIntSummaryCargo = null;
	SsInterfacesSummaryCollection ssIntSummaryColl = new SsInterfacesSummaryCollection(connection);
	
	SsAbeInterfacesSummaryCargo ssAbeIntSummaryCargo = new SsAbeInterfacesSummaryCargo();
	SsAbeInterfacesSummaryCollection ssAbeInterfacesSummaryCollection = new SsAbeInterfacesSummaryCollection(connection);
	SsAbeInterfacesSummaryCargo[] ssAbeIntSummaryCargoArray = null;
	
	try {
	    
	    Object args[] = { autoRegT1001Cargo.getSsAppNum() };
	    ssAbeIntSummaryCargoArray = (SsAbeInterfacesSummaryCargo[]) ssAbeInterfacesSummaryCollection.select("findByAppNumAndMaxRunDate", args);
	    log(7, "AutoRegistrationBO.updateSsInterfacesSummaryTable() :: SsAbeInterfacesSummaryDao.findByAppNumAndMaxRunDate() called");
	    if (ssAbeIntSummaryCargoArray != null && ssAbeIntSummaryCargoArray.length > 0) {
		log(7, "AutoRegistrationBO.updateSsInterfacesSummaryTable() :: ssAbeIntSummaryCargoArray.length---" + ssAbeIntSummaryCargoArray.length);
		for (int i = 0; i < ssAbeIntSummaryCargoArray.length; i++) {
		    for (int j = 0; j < autoRegT1004CargoArray.length; j++) {
			if (ssAbeIntSummaryCargoArray[i].getIndvSeqNum() == autoRegT1004CargoArray[j].getIndvSeqNum()) {
			    log(7, "AutoRegistrationBO.updateSsInterfacesSummaryTable() :: autoRegT1004CargoArray[i].getBridgesIndvId()--" + autoRegT1004CargoArray[i].getBridgesIndvId());
			    ssAbeIntSummaryCargo = ssAbeIntSummaryCargoArray[i];
			    
			    ssIntSummaryCargo = new SsInterfacesSummaryCargo();
			    ssIntSummaryCargo.setAwvsLastUpdatedDt(ssAbeIntSummaryCargo.getAwvsLastUpdatedDt());
			    ssIntSummaryCargo.setTwnEmpMstRecHireDt(ssAbeIntSummaryCargo.getTwnEmpMstRecHireDt());
			    ssIntSummaryCargo.setKidsEmpInfoFoundInd(ssAbeIntSummaryCargo.getKidsEmpInfoFoundInd());
			    ssIntSummaryCargo.setSummarySsn(ssAbeIntSummaryCargo.getSummarySsn());
			    ssIntSummaryCargo.setKidsChildSupportInfoFoundInd(ssAbeIntSummaryCargo.getKidsChildSupportInfoFoundInd());
			    ssIntSummaryCargo.setRegistrationNum(ssAbeIntSummaryCargo.getRegistrationNum());
			    ssIntSummaryCargo.setTwnNumOfEmpyr(ssAbeIntSummaryCargo.getTwnNumOfEmpyr());
			    ssIntSummaryCargo.setDrsLastUpdatedDt(ssAbeIntSummaryCargo.getDrsLastUpdatedDt());
			    ssIntSummaryCargo.setAwvsYearNum(ssAbeIntSummaryCargo.getAwvsYearNum());
			    ssIntSummaryCargo.setSolqSsnVerificationStsFlg(ssAbeIntSummaryCargo.getSolqSsnVerificationStsFlg());
			    ssIntSummaryCargo.setKidsChildInfoFoundInd(ssAbeIntSummaryCargo.getKidsChildInfoFoundInd());
			    ssIntSummaryCargo.setSsaSummarySeqNo(ssAbeIntSummaryCargo.getSsaSummarySeqNo());
			    ssIntSummaryCargo.setSosSeqNum(ssAbeIntSummaryCargo.getSosSeqNum());
			    ssIntSummaryCargo.setLawfulPresenceLastUpdatedDt(ssAbeIntSummaryCargo.getLawfulPresenceLastUpdatedDt());
			    ssIntSummaryCargo.setSummaryDobDt(ssAbeIntSummaryCargo.getSummaryDobDt());
			    ssIntSummaryCargo.setDrsDisqualificationPresentInd(ssAbeIntSummaryCargo.getDrsDisqualificationPresentInd());
			    ssIntSummaryCargo.setTwnLastUpdatedDt(ssAbeIntSummaryCargo.getTwnLastUpdatedDt());
			    ssIntSummaryCargo.setDrsSeqNum(ssAbeIntSummaryCargo.getDrsSeqNum());
			    ssIntSummaryCargo.setCreateDt(currentTime);
			    ssIntSummaryCargo.setSsaIncarcerationInd(ssAbeIntSummaryCargo.getSsaIncarcerationInd());
			    ssIntSummaryCargo.setSsaLastUpdatedDt(ssAbeIntSummaryCargo.getSsaLastUpdatedDt());
			    ssIntSummaryCargo.setSsaSsnVerificationInd(ssAbeIntSummaryCargo.getSsaSsnVerificationInd());
			    ssIntSummaryCargo.setSosStatusFlg(ssAbeIntSummaryCargo.getSosStatusFlg());
			    ssIntSummaryCargo.setSsGender(ssAbeIntSummaryCargo.getSsGender());
			    ssIntSummaryCargo.setLastName(ssAbeIntSummaryCargo.getLastName());
			    ssIntSummaryCargo.setKidsLastUpdatedDt(ssAbeIntSummaryCargo.getKidsLastUpdatedDt());
			    ssIntSummaryCargo.setSsaLawfulPresenceInd(ssAbeIntSummaryCargo.getSsaLawfulPresenceInd());
			    ssIntSummaryCargo.setSevisId(ssAbeIntSummaryCargo.getSevisId());
			    ssIntSummaryCargo.setTplvSeqNum(ssAbeIntSummaryCargo.getTplvSeqNum());
			    ssIntSummaryCargo.setUniqueTransId(ssAbeIntSummaryCargo.getUniqueTransId());
			    ssIntSummaryCargo.setSolqLastUpdatedDt(ssAbeIntSummaryCargo.getSolqLastUpdatedDt());
			    ssIntSummaryCargo.setAwvsAmt(ssAbeIntSummaryCargo.getAwvsAmt());
			    ssIntSummaryCargo.setSolqTitle16CurNmpAmt(ssAbeIntSummaryCargo.getSolqTitle16CurNmpAmt());
			    ssIntSummaryCargo.setTwnEmpPayDt(ssAbeIntSummaryCargo.getTwnEmpPayDt());
			    ssIntSummaryCargo.setFirstName(ssAbeIntSummaryCargo.getFirstName());
			    ssIntSummaryCargo.setTwnEmpyrInfoFndSw(ssAbeIntSummaryCargo.getTwnEmpyrInfoFndSw());
			    ssIntSummaryCargo.setSosLastUpdatedDt(ssAbeIntSummaryCargo.getSosLastUpdatedDt());
			    ssIntSummaryCargo.setTwnActEmpyrSw(ssAbeIntSummaryCargo.getTwnActEmpyrSw());
			    ssIntSummaryCargo.setTplvSegCount(ssAbeIntSummaryCargo.getTplvSegCount());
			    ssIntSummaryCargo.setLawfulPresenceVerifiedInd(ssAbeIntSummaryCargo.getLawfulPresenceVerifiedInd());
			    ssIntSummaryCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    ssIntSummaryCargo.setSsaIdentityVerificationInd(ssAbeIntSummaryCargo.getSsaIdentityVerificationInd());
			    ssIntSummaryCargo.setAwvsQuarterInd(ssAbeIntSummaryCargo.getAwvsQuarterInd());
			    ssIntSummaryCargo.setSolqSeqNum(ssAbeIntSummaryCargo.getSolqSeqNum());
			    ssIntSummaryCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    ssIntSummaryCargo.setKidsSeqNum(ssAbeIntSummaryCargo.getKidsSeqNum());
			    ssIntSummaryCargo.setDocumentType(ssAbeIntSummaryCargo.getDocumentType());
			    ssIntSummaryCargo.setKidsChildSupportExpensesFoundInd(ssAbeIntSummaryCargo.getKidsChildSupportExpensesFoundInd());
			    ssIntSummaryCargo.setAwvsSeqNum(ssAbeIntSummaryCargo.getAwvsSeqNum());
			    ssIntSummaryCargo.setRunDt(ssAbeIntSummaryCargo.getRunDt());
			    ssIntSummaryCargo.setSsaCitizenshipInd(ssAbeIntSummaryCargo.getSsaCitizenshipInd());
			    ssIntSummaryCargo.setSolqTitle2CurNmpAmt(ssAbeIntSummaryCargo.getSolqTitle2CurNmpAmt());
			    ssIntSummaryCargo.setLawfulPresenceSeqNum(ssAbeIntSummaryCargo.getLawfulPresenceSeqNum());
			    // PMD_Override - R10 - The casting of this numeric/byte type does not need to be addressed because it will not exceed the int value.
			    PMDRules.markApprovedStatement("R10");
			    ssaValidationSwMap.put((int) ssAbeIntSummaryCargo.getIndvSeqNum(), "" + ssAbeIntSummaryCargo.getSsaIdentityVerificationInd());
			    
			    SsInterfacesSummaryCollection ssIntSummaryTempColl = new SsInterfacesSummaryCollection(connection);
			    ssIntSummaryTempColl.add(ssIntSummaryCargo);
			    SsInterfacesSummaryCargo[] ssIntSummaryCargoArray = (SsInterfacesSummaryCargo[]) ssIntSummaryTempColl.select("findByIndvIdAndRunDt");
			    if (ssIntSummaryCargoArray == null || ssIntSummaryCargoArray.length == 0) {
				log(7, "AutoRegistrationBO.updateSsInterfacesSummaryTable() :: Inserting data into Ss_Interfaces_Summary table: Indv ID--" + ssIntSummaryCargo.getIndvId() + "--Run date--" + ssIntSummaryCargo.getRunDt());
				ssIntSummaryColl.add(ssIntSummaryCargo);
			    } else {
				log(7, "AutoRegistrationBO.updateSsInterfacesSummaryTable() :: Duplicate data--" + ssIntSummaryCargo.getIndvId() + "--Run date--" + ssIntSummaryCargo.getRunDt());
			    }
			}
		    }
		}
		ssIntSummaryColl.insert(ssIntSummaryColl);
	    }
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateSsInterfacesSummaryTable():" + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    ssIntSummaryCargo = null;
	    ssIntSummaryColl = null;
	    ssAbeIntSummaryCargo = null;
	    ssAbeInterfacesSummaryCollection = null;
	    ssAbeIntSummaryCargoArray = null;
	    
	}
    }
    
    public String getEthnicity(T1006AppInPermdCargo t1006AppInPermdCargo) throws Exception {
	log(7, "Begin AutoRegistrationBO.getEthnicity() ");
	
	try {
	    String ethnicity = "";
	    if (t1006AppInPermdCargo.getPrInd() != '0') {
		ethnicity = "PR";
	    } else if (t1006AppInPermdCargo.getMexInd() != '0') {
		ethnicity = "MX";
	    } else if (t1006AppInPermdCargo.getCubInd() != '0') {
		ethnicity = "CU";
	    } else if (t1006AppInPermdCargo.getHspcInd() != '0') {
		ethnicity = "HS";
	    } else if (t1006AppInPermdCargo.getNonHspcInd() != null && t1006AppInPermdCargo.getNonHspcInd().equals("N")) {
		ethnicity = "NH";
	    } else if (t1006AppInPermdCargo.getOtherEthnicityInd() != '0'){
		ethnicity = "OC";
	    }else if(t1006AppInPermdCargo.getPreferNotAnswerInd() != '0'){
	    ethnicity = "PN";
	    }else{
	    ethnicity = "UK";
	    }
	    
	    return ethnicity;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.getEthnicity():" + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	}
    }
    
    public String getRaceCode(T1006AppInPermdCargo t1006AppInPermdCargo) throws Exception {
	log(7, "Begin AutoRegistrationBO.getRaceCode() ");
	
	try {
	    String RaceCode = "";
	    if (t1006AppInPermdCargo.getAiInd() != '0') {
		RaceCode = "AI";
	    } else if (t1006AppInPermdCargo.getBlkInd() != '0') {
		RaceCode = "AA";
	    } else if (t1006AppInPermdCargo.getWhtInd() != '0') {
		RaceCode = "WH";
	    } else if (t1006AppInPermdCargo.getAsiaInd() != '0') {
		RaceCode = "AS";
	    } else if (t1006AppInPermdCargo.getPacIslInd() != '0') {
		RaceCode = "OP";
	    } else if (t1006AppInPermdCargo.getNatHawInd() != '0') {
		RaceCode = "NH";
	    } else if (t1006AppInPermdCargo.getAsIndnInd() != '0') {
		RaceCode = "AD";
	    } else if (t1006AppInPermdCargo.getChiInd() != '0') {
		RaceCode = "CH";
	    } else if (t1006AppInPermdCargo.getFilInd() != '0') {
		RaceCode = "FI";
	    } else if (t1006AppInPermdCargo.getGuamInd() != '0') {
		RaceCode = "GC";
	    } else if (t1006AppInPermdCargo.getJpInd() != '0') {
		RaceCode = "JP";
	    } else if (t1006AppInPermdCargo.getKorInd() != '0') {
		RaceCode = "KO";
	    } else if (t1006AppInPermdCargo.getSamInd() != '0') {
		RaceCode = "SA";
	    } else if (t1006AppInPermdCargo.getVtInd() != '0') {
		RaceCode = "VT";
	    } else if (t1006AppInPermdCargo.getEthUnkInd() != '0') {
		RaceCode = "UK";
	    } else if (t1006AppInPermdCargo.getAsianAmericanInd() != '0'){
	    RaceCode = "AM";
	    } else if (t1006AppInPermdCargo.getMidEastNorthAfrInd() != '0'){
	    RaceCode = "ME";
	    } else if (t1006AppInPermdCargo.getOtherRaceAloneInd() != '0'){
	    RaceCode = "OT";
	    } else {
		RaceCode = "UK";
	    }
	    
	    return RaceCode;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.getRaceCode():" + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	}
    }
    
    public void updateMSPCountyCd(String countyCd, String appNum) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateMSPCountyCd() for County Cd:: "+countyCd);
	T1001AppRqstCargo t1001Cargo = new T1001AppRqstCargo();
	T1001AppRqstCollection coll = new T1001AppRqstCollection(connection);
	T1001AppRqstCargo[] t1001AppRqstCargoArray = null;
	try {
		t1001Cargo.setAppNum(appNum);
		coll.setCargo(t1001Cargo);
		t1001AppRqstCargoArray = (T1001AppRqstCargo[]) coll.select("findByAppNum");
		if(t1001AppRqstCargoArray != null && t1001AppRqstCargoArray.length > 0){
			t1001AppRqstCargoArray[0].setCntyNum(Long.valueOf(countyCd));
			coll.clear();
			coll.setCargo(t1001AppRqstCargoArray[0]);
			coll.update(coll);
			log(7, "Update done in T1001_App_Rqst for County Cd:: "+countyCd);
		}
		
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateMSPCountyCd() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
		hasExceptionOccurred = true;
		throw e;
	}finally{
		t1001Cargo = null;
		coll = null;
		t1001AppRqstCargoArray = null;
	}
    }

    public boolean updateDcIndvTable(HashMap<Integer, String> ssaValidationSwMap, HashMap<Integer, String> legacyIndvMap, T1006AppInPermdCargo[] t1006AppInPermdCargoArray) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateDcIndvTable() ");
	DcIndvCargo dcIndvCargo = null;
	DcIndvCollection dcIndvColl = new DcIndvCollection(connection);
	T1004AppIndvCargo t1004Cargo = null;
	int currentCargo = -1;
	try {
	    
	    if (autoRegT1004CargoArray == null || autoRegT1004CargoArray.length == 0) {
		return false;
	    }
	    if (indvMap == null || indvMap.size() == 0) {
		return false;
	    }
	    int size = autoRegT1004CargoArray.length;
	    if (mSPAppStatus == null && t1006AppInPermdCargoArray.length != size) {
		return false;
	    }
	    
	    for (int i = 0; i < size; i++) {
		currentCargo = i;
		t1004Cargo = autoRegT1004CargoArray[i];
		if (indvMap.containsKey((int) t1004Cargo.getIndvSeqNum()) && indvMap.get((int) t1004Cargo.getIndvSeqNum()) == 0) {
		    
		    dcIndvCargo = new DcIndvCargo();
		    dcIndvCargo.setChipSeqNum(0);
		    dcIndvCargo.setClaimedSsn(0);
		    dcIndvCargo.setCreateDt(currentTime);
		    dcIndvCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    dcIndvCargo.setDeleteSw('N');
		    dcIndvCargo.setFedRcgnzdIndianTribeSw('N');
		    dcIndvCargo.setFileClearanceSw('Y');
		    dcIndvCargo.setInactiveInd('N');
		    dcIndvCargo.setDobDt(t1004Cargo.getBrthDt());
		    if (mSPAppStatus == null) {
			// ILIES-194873
			if (appMPECategory || appFPPECategory) {
			    dcIndvCargo.setEthnicityCd("UK");
			    dcIndvCargo.setRaceCd("UK");
			} else {
			    dcIndvCargo.setEthnicityCd(getEthnicity(t1006AppInPermdCargoArray[i]));
			    dcIndvCargo.setRaceCd(getRaceCode(t1006AppInPermdCargoArray[i]));
			}
		    }
		    
		    // ERJA new fields for sex, gender indigenous status
		    if(t1006AppInPermdCargoArray[i].getGenderIdentity() != null){
		    	String value = GENDER_IDENTITY_MAP.get(t1006AppInPermdCargoArray[i].getGenderIdentity());
		    	dcIndvCargo.setGenderIdentity(value != null ? value : "");
		    }
		    if(t1006AppInPermdCargoArray[i].getGenderIdentityDetails() != null){
		    	dcIndvCargo.setGenderIdentityDetails(t1006AppInPermdCargoArray[i].getGenderIdentityDetails());
		    }
		    if(t1006AppInPermdCargoArray[i].getSexAtBirth() != null){
		    	String value = SEX_AT_BIRTH_MAP.get(t1006AppInPermdCargoArray[i].getSexAtBirth());
		    	dcIndvCargo.setSexAtBirth(value != null ? value : "");
		    }
		    if(t1006AppInPermdCargoArray[i].getSexAtBirthDetails() != null){
		    	dcIndvCargo.setSexAtBirthDetails(t1006AppInPermdCargoArray[i].getSexAtBirthDetails());
		    }
		    if(t1006AppInPermdCargoArray[i].getSexualOrientation() != null){
		    	String value = SEXUAL_ORIENTATION_MAP.get(t1006AppInPermdCargoArray[i].getSexualOrientation());
		    	dcIndvCargo.setSexualOrientation(value != null ? value : "");
		    }
		    if(t1006AppInPermdCargoArray[i].getSexualOrientationDetails() != null){
		    	dcIndvCargo.setSexualOrientationDetails(t1006AppInPermdCargoArray[i].getSexualOrientationDetails());
		    }
		    if(!Character.toString(t1006AppInPermdCargoArray[i].getIndigenousStatus()).equals(null)){
		    	dcIndvCargo.setIndigenousStatus(t1006AppInPermdCargoArray[i].getIndigenousStatus());
		    }
		    // ERJA new fields for sex, gender indigenous status ends
		    
		    dcIndvCargo.setFirstName(t1004Cargo.getFstNam());
		    dcIndvCargo.setLastName(t1004Cargo.getLastNam());
		    if (t1004Cargo.getMidInit() != null) {
			dcIndvCargo.setMidName(t1004Cargo.getMidInit().trim());
		    }
		    dcIndvCargo.setGenderCd(t1004Cargo.getSexInd());
		    dcIndvCargo.setIndvId(t1004Cargo.getBridgesIndvId());
		    if (legacyIndvMap.containsKey((int) t1004Cargo.getIndvSeqNum())) {
			// PMD_Override - R10 - The casting of this numeric/byte type does not need to be addressed because it will not exceed the int value.
			PMDRules.markApprovedStatement("R10");
			dcIndvCargo.setLegacyIndvId(legacyIndvMap.get((int) t1004Cargo.getIndvSeqNum()));
		    }
		    dcIndvCargo.setSsn(t1004Cargo.getSsnNum());
		    dcIndvCargo.setGenderCd(t1004Cargo.getSexInd());
		    dcIndvCargo.setSufxName(t1004Cargo.getSfxNam());
		    int seqNum = (int) t1004Cargo.getIndvSeqNum();
		    if (ssaValidationSwMap.containsKey(seqNum) && ssaValidationSwMap.get(seqNum) != null && !ssaValidationSwMap.get(seqNum).equals("")) {
			dcIndvCargo.setSsaValidationSw(ssaValidationSwMap.get(seqNum).charAt(0));
			if (dcIndvCargo.getSsaValidationSw() == 'Y') {
			    dcIndvCargo.setSsaVrfCd("FED");
			} else {
			    dcIndvCargo.setSsnVrfCd("CS");
			}
		    } else {
			dcIndvCargo.setSsnVrfCd("CS");
		    }
		    
		    dcIndvColl.add(dcIndvCargo);
		}
	    }
	    dcIndvColl.insert(dcIndvColl);
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateDcIndvTable(): " + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    dcIndvCargo = null;
	    dcIndvColl = null;
	    t1004Cargo = null;
	}
    }
    
    public boolean updateCvDcMciIndvTable(HashMap<Integer, String> ssaValidationSwMap, HashMap<Integer, String> legacyIndvMap, T1006AppInPermdCargo[] t1006AppInPermdCargoArray) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateCvDcMciIndvTable() ");
	CvDcMciIndvCargo cvDcMciIndvCargo = null;
	;
	CvDcMciIndvCollection cvDcMciIndvColl = new CvDcMciIndvCollection(connection);
	T1004AppIndvCargo t1004Cargo = null;
	int currentCargo = -1;
	
	try {
	    
	    if (autoRegT1004CargoArray == null || autoRegT1004CargoArray.length == 0) {
		return false;
	    }
	    if (indvMap == null || indvMap.size() == 0) {
		return false;
	    }
	    // ILIES-183555
	    if (mSPAppStatus == null && t1006AppInPermdCargoArray.length != autoRegT1004CargoArray.length) {
		return false;
	    }
	    
	    for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
		currentCargo = i;
		t1004Cargo = autoRegT1004CargoArray[i];
		if (indvMap.containsKey((int) t1004Cargo.getIndvSeqNum()) && indvMap.get((int) t1004Cargo.getIndvSeqNum()) == 0) {
		    
		    cvDcMciIndvCargo = new CvDcMciIndvCargo();
		    cvDcMciIndvCargo.setCreateDt(currentTime);
		    cvDcMciIndvCargo.setCreateSystemCd("TI");
		    cvDcMciIndvCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    cvDcMciIndvCargo.setInactiveInd('N');
		    cvDcMciIndvCargo.setDobDt(t1004Cargo.getBrthDt());
		    cvDcMciIndvCargo.setFirstName(t1004Cargo.getFstNam());
		    cvDcMciIndvCargo.setLastName(t1004Cargo.getLastNam());
		    cvDcMciIndvCargo.setMidName(t1004Cargo.getMidInit());
		    cvDcMciIndvCargo.setGenderCd(t1004Cargo.getSexInd());
		    cvDcMciIndvCargo.setIndvId(t1004Cargo.getBridgesIndvId());
		    if (legacyIndvMap.containsKey((int) t1004Cargo.getIndvSeqNum())) {
			// PMD_Override - R10 - The casting of this numeric/byte type does not need to be addressed because it will not exceed the int value.
			PMDRules.markApprovedStatement("R10");
			cvDcMciIndvCargo.setLegacyIndvId(legacyIndvMap.get((int) t1004Cargo.getIndvSeqNum()));
		    }
		    if (mSPAppStatus == null) {
			if (appMPECategory || appFPPECategory) {
			    cvDcMciIndvCargo.setEthnicityCd("UK");
			    cvDcMciIndvCargo.setRaceCd("UK");
			} else {
			    cvDcMciIndvCargo.setEthnicityCd(getEthnicity(t1006AppInPermdCargoArray[i]));
			    cvDcMciIndvCargo.setRaceCd(getRaceCode(t1006AppInPermdCargoArray[i]));
			}
		    }
		    cvDcMciIndvCargo.setConversionCd('C');
		    cvDcMciIndvCargo.setSsn(t1004Cargo.getSsnNum());
		    cvDcMciIndvCargo.setGenderCd(t1004Cargo.getSexInd());
		    cvDcMciIndvCargo.setSufxName(t1004Cargo.getSfxNam());
		    int seqNum = (int) t1004Cargo.getIndvSeqNum();
		    if (ssaValidationSwMap.containsKey(seqNum) && ssaValidationSwMap.get(seqNum) != null && !ssaValidationSwMap.get(seqNum).equals("")) {
			cvDcMciIndvCargo.setSsaValidationSw(ssaValidationSwMap.get(seqNum).charAt(0));
		    }
		    
		    cvDcMciIndvColl.add(cvDcMciIndvCargo);
		}
	    }
	    cvDcMciIndvColl.insert(cvDcMciIndvColl);
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateCvDcMciIndvTable(): " + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    cvDcMciIndvCargo = null;
	    cvDcMciIndvColl = null;
	    t1004Cargo = null;
	    
	}
    }
    
    public boolean updateDcPregnanciesTable(HashMap<Integer, String> legacyIndvMap, T1006AppInPermdCargo[] t1006AppInPermdCargoArray) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateDcIndvTable() ");
	DcPregnanciesCargo dcPregCargo = null;
	DcPregnanciesCollection dcPregColl = new DcPregnanciesCollection(connection);
	T1004AppIndvCargo t1004Cargo = null;
	int currentCargo = -1;
	try {
	    if (autoRegT1004CargoArray == null || autoRegT1004CargoArray.length == 0) {
		return false;
	    }
	    if (t1006AppInPermdCargoArray == null || t1006AppInPermdCargoArray.length == 0) {
		if (mSPAppStatus == null) {
		    return false;
		}
	    }
	    
	    if (indvMap == null || indvMap.size() == 0) {
		return false;
	    }
	    int size = autoRegT1004CargoArray.length;
	    
	    for (int i = 0; i < size; i++) {
		currentCargo = i;
		t1004Cargo = autoRegT1004CargoArray[i];
		if (indvMap.containsKey((int) t1004Cargo.getIndvSeqNum()) && indvMap.get((int) t1004Cargo.getIndvSeqNum()) == 0) {
		    if (t1006AppInPermdCargoArray[i].getPregnancySw() == 'Y') {
			
			dcPregCargo = new DcPregnanciesCargo();
			dcPregCargo.setDueDt(t1006AppInPermdCargoArray[i].getPregnancyDueDt());
			dcPregCargo.setNbrOfBirthsExpected(t1006AppInPermdCargoArray[i].getNbrOfBirthsExpected());
			dcPregCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			dcPregCargo.setEffBeginDt(ALSOPUtil.truncate(autoRegT1001Cargo.getAppRcvDt()));
			dcPregCargo.setReportDt(currentTime);
			dcPregCargo.setIsProblemPregnancySw('N');
			dcPregCargo.setDiscoveryDt(currentTime);
			dcPregCargo.setIndvId(t1004Cargo.getBridgesIndvId());
			dcPregCargo.setCreateDt(currentTime);
			dcPregCargo.setExemptForWorkingCd("N");
			dcPregCargo.setTimelySw('Y');
			
			dcPregColl.add(dcPregCargo);
		    }
		}
	    }
	    dcPregColl.insert(dcPregColl);
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateDcPregnanciesTable(): " + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    dcPregCargo = null;
	    dcPregColl = null;
	    t1004Cargo = null;
	}
    }
    
    public boolean updateArApplicationForAidTable(String appNum, T1006AppInPermdCargo t1006AppInPermdCargo) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateArApplicationForAidTable() ");
	ArApplicationForAidCargo arAppForAidCargo = new ArApplicationForAidCargo();
	ArApplicationForAidCollection arAppForAidColl = new ArApplicationForAidCollection(connection);
	
	T2040AppAuthRepCargo t2040AppAuthRepCargo = new T2040AppAuthRepCargo();
	T2040AppAuthRepCollection t2040AppAuthRepCollection = new T2040AppAuthRepCollection(connection);
	T2040AppAuthRepCargo[] t2040AppAuthRepCargoArray = null;
	
	try {
	    
	    t2040AppAuthRepCargo.setAppNum(appNum);
	    t2040AppAuthRepCollection.setCargo(t2040AppAuthRepCargo);
	    t2040AppAuthRepCargoArray = (T2040AppAuthRepCargo[]) t2040AppAuthRepCollection.select("findAuthRepInfoByByAppNum");
	    
	    arAppForAidCargo.setApplicantHomelessSw(autoRegT1002Cargo.getHlessSw());
	    if (mSPAppStatus != null && mSPAppStatus.equals("DP")) {
		arAppForAidCargo.setApplicationStatusCd("DP");
	    } else {
		arAppForAidCargo.setApplicationStatusCd("AC");
	    }
	    
	    arAppForAidCargo.setApplicationSubDt(currentTime);
	    arAppForAidCargo.setApplicationStatusDt(autoRegT1001Cargo.getAppRcvDt());
	    arAppForAidCargo.setAppModeCd(autoRegT1001Cargo.getAppMode());
	    
		arAppForAidCargo.setAppMpeSw(appMPECategory && !appFPPECategory ? 'Y' : 'N'); //MPE is Y only if FPPE is not present
		arAppForAidCargo.setAppFppeSw(appFPPECategory ? 'Y' : 'N');
		arAppForAidCargo.setAppForaidSw(appMPECategory || appFPPECategory ? 'N' : 'Y'); //For non-PE apps default Y
	    arAppForAidCargo.setAppNum(autoRegT1001Cargo.getAppNum());
	    arAppForAidCargo.setAppRecvdDt(autoRegT1001Cargo.getAppRcvDt());
	    arAppForAidCargo.setAppTypeCd(autoRegT1001Cargo.getAppMode());
	    arAppForAidCargo.setCaseNum(0);
	    arAppForAidCargo.setCreateDt(currentTime);
	    arAppForAidCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
	    arAppForAidCargo.setEmpId(retrieveIntakeVirtualWkrId(autoRegT1001Cargo.getOfcNum()));
	    arAppForAidCargo.setExpeditedSw(autoRegT1001Cargo.getExpeditedFapSw());
	    if (null != autoRegT1001Cargo.getLangCd() && autoRegT1001Cargo.getLangCd().trim().length() > 0) {
		arAppForAidCargo.setLanguageCd(autoRegT1001Cargo.getLangCd());
	    } else {
		arAppForAidCargo.setLanguageCd("0");
	    }
	    
	    arAppForAidCargo.setOfficeNum(autoRegT1001Cargo.getOfcNum());
	    arAppForAidCargo.setPriorSnapSw('N');
	    
	    arAppForAidCargo.setPhnNumTyp(autoRegT1002Cargo.getPhnNumTyp().charAt(0));
	    arAppForAidCargo.setPhNum(autoRegT1002Cargo.getHshlPhnNum().trim());
	    // PMD_Override - R10 - The casting of this numeric/byte type does not need to be addressed because it will not exceed the short value.
	    PMDRules.markApprovedStatement("R10");
	    arAppForAidCargo.setPrefCntcInd((short) autoRegT1002Cargo.getPrefCntcInd());
	    arAppForAidCargo.setPrefCntcTmTxt(autoRegT1002Cargo.getPrefCntcTmTxt());
	    arAppForAidCargo.setPriorSnapSw('N');
	    if (autoRegT1002Cargo.getHshlCellPhnNum() != null && !autoRegT1002Cargo.getHshlCellPhnNum().trim().equals("")) {
		arAppForAidCargo.setOtherPhNum(autoRegT1002Cargo.getHshlCellPhnNum().trim());
	    }
	    
	    arAppForAidCargo.setMsgPhnNum(autoRegT1002Cargo.getMsgPhnNum().trim());
	    arAppForAidCargo.setEmail(autoRegT1002Cargo.getHshlEmailAdr().trim());
	    arAppForAidCargo.setValPhnNumCd(autoRegT1002Cargo.getValPhnNumCd());
	    arAppForAidCargo.setPhnTxtTypCd(autoRegT1002Cargo.getPhnTxtTypCd());
	    arAppForAidCargo.setProviderNumber(autoRegT1001Cargo.getProviderId());
	    arAppForAidCargo.setScheduledSw(autoRegScheduledSw);
	    arAppForAidCargo.setSpokenLanguageTypeCd(t1006AppInPermdCargo.getLangCd());
	    if (t2040AppAuthRepCargoArray == null || t2040AppAuthRepCargoArray.length == 0 || t2040AppAuthRepCargoArray[0].getAuthRepCd() == null || t2040AppAuthRepCargoArray[0].getAuthRepCd().trim().equals("") || t2040AppAuthRepCargoArray[0].getAuthRepCd().trim().equals("0")) {
		arAppForAidCargo.setAuthRepSw('N');
		arAppForAidCargo.setAuthRepInd('N');
	    } else {
		
		arAppForAidCargo.setAuthRepSw('Y');
		arAppForAidCargo.setAuthRepInd('Y');
	    }
	    
	    arAppForAidCargo.setWorkPhNum(autoRegT1002Cargo.getHshlWorkPhnNum().trim());
	    if (autoRegT1002Cargo.getWorkPhnExtnNum() != null && !autoRegT1002Cargo.getWorkPhnExtnNum().trim().equals("")) {
		arAppForAidCargo.setWorkPhNumExt(Long.parseLong(autoRegT1002Cargo.getWorkPhnExtnNum().trim()));
	    }
	    arAppForAidCargo.setAssociationSw('Y');
	    arAppForAidCargo.setVulnerableSw(autoRegT1002Cargo.getVulnerableSw());
	    System.out.println("VunlnerableSW in updateArApplicationForAidTable in autoRegBO "+arAppForAidCargo.getVulnerableSw()+ "Vul sw= " + autoRegT1002Cargo.getVulnerableSw());
	    arAppForAidColl.setCargo(arAppForAidCargo);
	    arAppForAidColl.insert(arAppForAidColl);
	    
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArApplicationForAidTable() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    arAppForAidCargo = null;
	    arAppForAidColl = null;
	    t2040AppAuthRepCargo = null;
	    t2040AppAuthRepCollection = null;
	    t2040AppAuthRepCargoArray = null;
	}
    }

    public boolean checkArAuthRepAddress(String appNum) throws Exception {
	log(7, "Begin AutoRegistrationBO.checkArAuthRepAddress() ");
	
	ArApplicationRepCargo arAppRepCargo = new ArApplicationRepCargo();
	ArApplicationRepCollection arAppRepColl = new ArApplicationRepCollection(connection);
	ArAppAddrCargo arAppAddrCargo = new ArAppAddrCargo();
	ArAppAddrCollection arAppAddrColl = new ArAppAddrCollection(connection);
	
	T2040AppAuthRepCargo t2040AppAuthRepCargo = new T2040AppAuthRepCargo();
	T2040AppAuthRepCollection t2040AppAuthRepCollection = new T2040AppAuthRepCollection(connection);
	T2040AppAuthRepCargo[] t2040AppAuthRepCargoArray = null;
	
	ArAppAddrCargo arAppAddrTempCargo = null;
	HashMap paramHashMap = null;
	boolean interfaceCheckFailed = false;
	String autoRegExpCode = AppRegConstants.AUTO_REG_PROCESS_AD;
	
	ApplicationBO appBo = new ApplicationBO(connection);
	try {
	    
	    t2040AppAuthRepCargo.setAppNum(appNum);
	    t2040AppAuthRepCollection.setCargo(t2040AppAuthRepCargo);
	    t2040AppAuthRepCargoArray = (T2040AppAuthRepCargo[]) t2040AppAuthRepCollection.select("findAuthRepInfoByByAppNum");
	    if (t2040AppAuthRepCargoArray != null && t2040AppAuthRepCargoArray.length > 0) {
		ArAppAddrCargo arAppAuthRepAddrCargoArr[] = new ArAppAddrCargo[t2040AppAuthRepCargoArray.length];
		ArApplicationRepCargo arAppAuthRepCargoArr[] = new ArApplicationRepCargo[t2040AppAuthRepCargoArray.length];
		for (int i = 0; i < t2040AppAuthRepCargoArray.length; i++) {
		    t2040AppAuthRepCargo = t2040AppAuthRepCargoArray[i];
		    log(7, "AutoRegistrationBO.checkArAuthRepAddress() :: t2040AppAuthRepCargo.getAuthRepCd() -" + t2040AppAuthRepCargo.getAuthRepCd());
		    if (t2040AppAuthRepCargo.getAuthRepCd() != null && !t2040AppAuthRepCargo.getAuthRepCd().trim().equals("") && !t2040AppAuthRepCargo.getAuthRepCd().trim().equals("0")) {
			
			arAppAddrCargo.setAddrStNm(t2040AppAuthRepCargo.getL1Adr());
			arAppAddrCargo.setAddrLine(t2040AppAuthRepCargo.getL2Adr());
			arAppAddrCargo.setAddrCity(t2040AppAuthRepCargo.getCityAdr());
			arAppAddrCargo.setAddrStateCd(t2040AppAuthRepCargo.getStaAdr());
			arAppAddrCargo.setAddrZip5(t2040AppAuthRepCargo.getZipAdr());
			log(7, "AutoRegistrationBO.checkArAuthRepAddress() :: Calling ValidateAddress interface -" + appNum);
			arAppAddrTempCargo = (ArAppAddrCargo) appBo.validateAddressIq8(arAppAddrCargo, paramHashMap);
			log(7, "AutoRegistrationBO.updateArApplicationRepTable() :: ValidateAddress interface End -" + arAppAddrTempCargo);
			if (arAppAddrTempCargo == null) {
			    log(7, "AutoRegistrationBO.checkArAuthRepAddress() :: arAppAddrTempCargo is NULL : App failed in Auth Rep Address Check -" + appNum);
			    autoRegExpCode = AppRegConstants.AUTO_REG_PROCESS_AD;
			    interfaceCheckFailed = true;
			    
			} else {
			    log(7, "AutoRegistrationBO.checkArAuthRepAddress() :: validated arAppAddrTempCargo : Auth Rep Address Check success -" + appNum);
			    log(7, "AutoRegistrationBO.checkArAuthRepAddress() :: Started data update ");
			    arAppAddrCargo.setAddrStNm(arAppAddrTempCargo.getAddrStNm());
			    arAppAddrCargo.setAddrStNum(arAppAddrTempCargo.getAddrStNum());
			    arAppAddrCargo.setAddrStNumFrac(arAppAddrTempCargo.getAddrStNumFrac());
			    arAppAddrCargo.setAddrLine(arAppAddrTempCargo.getAddrLine());
			    arAppAddrCargo.setAddrCity(arAppAddrTempCargo.getAddrCity());
			    arAppAddrCargo.setAddrAptNum(arAppAddrTempCargo.getAddrAptNum());
			    arAppAddrCargo.setAddrDwellingTypeCd(arAppAddrTempCargo.getAddrDwellingTypeCd());
			    arAppAddrCargo.setAddrPostDirCd(arAppAddrTempCargo.getAddrPostDirCd());
			    arAppAddrCargo.setAddrStDirCd(arAppAddrTempCargo.getAddrStDirCd());
			    arAppAddrCargo.setAddrTypeCd(arAppAddrTempCargo.getAddrStTypeCd());
			    arAppAddrCargo.setAppNum(appNum);
			    arAppAddrCargo.setAddrStateCd(arAppAddrTempCargo.getAddrStateCd());
			    arAppAddrCargo.setAddrZip5(arAppAddrTempCargo.getAddrZip5());
			    arAppAddrCargo.setAddrZip4(arAppAddrTempCargo.getAddrZip4());
			    //arAppAddrCargo.setAddrStTypeCd(arAppAddrTempCargo.getAddrStTypeCd());
			    if (arAppAddrTempCargo.getAddrStTypeCd() != null && !arAppAddrTempCargo.getAddrStTypeCd().trim().equals("")) {
					RefTableData streetType = new RefTableData();
					streetType = ReferenceTableManager.getValueForDescription("STREETTYPE", arAppAddrTempCargo.getAddrStTypeCd());
					if (streetType != null) {
						arAppAddrCargo.setAddrStTypeCd(streetType.getRefrTableCode());
					}
				}
			    arAppAddrCargo.setAddrTypeCd("AA");
			    arAppAddrCargo.setValidationSw('N');
			    if (arAppAddrTempCargo.getAddrCountyCd() != null && !arAppAddrTempCargo.getAddrCountyCd().isEmpty())
			    	arAppAddrCargo.setAddrCountyCd(arAppAddrTempCargo.getAddrCountyCd());
			    /*else
				arAppAddrCargo.setAddrCountyCd("0");*/
			    
			    arAppAuthRepAddrCargoArr[i] = arAppAddrCargo;
			    arAppRepCargo.setAppNum(appNum);
			    arAppRepCargo.setAuthrepFirstName(t2040AppAuthRepCargo.getFilingRepFirstName());
			    if (t2040AppAuthRepCargo.getFilingRepMidName() != null && !t2040AppAuthRepCargo.getFilingRepMidName().trim().equals("")) {
				arAppRepCargo.setAuthrepMidName(t2040AppAuthRepCargo.getFilingRepMidName());
			    }
			    arAppRepCargo.setAuthrepLastName(t2040AppAuthRepCargo.getFilingRepLastName());
			    if (t2040AppAuthRepCargo.getRelationshipTypeCd() != null && !t2040AppAuthRepCargo.getRelationshipTypeCd().trim().equals("")) {
				arAppRepCargo.setRelationshipIndvCd(t2040AppAuthRepCargo.getRelationshipTypeCd());
			    }
			    if (t2040AppAuthRepCargo.getPhnNum() != null && !t2040AppAuthRepCargo.getPhnNum().trim().equals("")) {
				arAppRepCargo.setAuthrepPhNum(t2040AppAuthRepCargo.getPhnNum());
			    }
			    arAppRepCargo.setAppAddrSeqNum(arAppAddrCargo.getAppAddrSeqNum());
			    arAppAuthRepCargoArr[i] = arAppRepCargo;
			}
			
		    }
		    
		}
		arAppAuthRepAddrCargo = arAppAuthRepAddrCargoArr;
		arAppAuthRepCargo = arAppAuthRepCargoArr;
		
	    }
	    if (interfaceCheckFailed) {
		log(7, "AutoRegistrationBO.checkArAuthRepAddress() :: interface Check failed - Auth Rep Address validation failed");
		createEDMTask(appNum);
		updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegExpCode, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
		return false;
	    }
	    return true;
	    
	} catch (TIERSValidationException e) {
		log(ILog.ERROR, "Exception [TIERSValidationException] in AutoRegistrationBO.checkArAuthRepAddress() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    if (e.getMessage() != null && e.getMessage().contains("10016")) {
		exceptionBO.writeExceptionRecord(BatchConstants.INFO, "AR-ATREG-HLY:  AutoRegistrationBO - interfaceCheck()", "Exception processing app num: " + appNum + " :: " + e.getMessage(), BatchConstants.REPORT_BODY, false, BatchConstants.LOG_FILE, ILog.INFO, BatchConstants.DEFAULT_LOGGER_FILE, true, e, null, null, null);
		createEDMTask(appNum);
		updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegExpCode, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
		return false;
	    } else {
		if (this.con != null) {
		    this.con.rollback();
		}
		hasExceptionOccurred = true;
		updateAutoRegExcpTable(appNum, autoRegExpCode, AppRegConstants.AUTO_REG_EXCP_STATUS_EX);
		
		if (this.con != null) {
		    this.con.commit();
		}
		throw e;
	    }
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.checkArAuthRepAddress() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    if (this.con != null) {
		this.con.rollback();
	    }
	    hasExceptionOccurred = true;
	    updateAutoRegExcpTable(appNum, autoRegExpCode, AppRegConstants.AUTO_REG_EXCP_STATUS_EX);
	    
	    if (this.con != null) {
		this.con.commit();
	    }
	    
	    throw e;
	} finally {
	    t2040AppAuthRepCargo = null;
	    t2040AppAuthRepCollection = null;
	    t2040AppAuthRepCargoArray = null;
	    arAppAddrCargo = null;
	    arAppAddrColl = null;
	    
	}
	
    }
    
    public boolean updateArApplicationRepTable(String appNum) throws Exception {
	log(7, "Start: AutoRegistrationBO.updateArApplicationRepTable(): ");
	ArApplicationRepCollection arAppRepColl = new ArApplicationRepCollection(connection);
	ArAppAddrCollection arAppRepAddrColl = new ArAppAddrCollection(connection);
	if (arAppAuthRepCargo == null || arAppAuthRepCargo.length == 0) {
	    return false;
	}
	if (arAppAuthRepAddrCargo == null || arAppAuthRepAddrCargo.length == 0) {
	    return false;
	}
	try {
	    
	    for (int j = 0; j < arAppAuthRepAddrCargo.length; j++) {
		arAppAuthRepAddrCargo[j].setCreateDt(currentTime);
		arAppAuthRepAddrCargo[j].setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		arAppRepAddrColl.setCargo(arAppAuthRepAddrCargo[j]);
		arAppRepAddrColl.insert(arAppRepAddrColl);
		log(7, "Start: AutoRegistrationBO.updateArApplicationRepTable(): Auth Rep Addr inserted successfully::");
		
		arAppAuthRepCargo[j].setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		arAppAuthRepCargo[j].setCreateDt(currentTime);
		arAppAuthRepCargo[j].setAppAddrSeqNum(arAppRepAddrColl.getResults(0).getAppAddrSeqNum());
		arAppRepColl.setCargo(arAppAuthRepCargo[j]);
		arAppRepColl.insert(arAppRepColl);
		log(7, "Start: AutoRegistrationBO.updateArApplicationRepTable(): Auth Rep inserted successfully::");
		
	    }
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArApplicationRepTable() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    arAppRepColl = null;
	    arAppRepAddrColl = null;
	}
	return true;
	
    }
    
    public boolean updateDcIndvProfileTable(String appNum) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateDcIndvProfileTable() ");
	DcIndvProfileCargo dcIndvProfCargo = null;
	DcIndvProfileCollection dcIndvProfColl = new DcIndvProfileCollection(connection);
	DcIndvProfileCargo[] dcIndvProfCargoArray = null;
	
	T1055AppInPrflCargo t1055Cargo = new T1055AppInPrflCargo();
	T1055AppInPrflCollection t1055Coll = new T1055AppInPrflCollection(connection);
	T1055AppInPrflCargo[] t1055CargoArray = null;
	
	//ILIES-291048
	T1008AppInBnftrCargo t1008AppInBnftrCargo= new T1008AppInBnftrCargo();
	T1008AppInBnftrCollection t1008AppInBnftrCollection=new T1008AppInBnftrCollection(connection);
	T1008AppInBnftrCargo[] t1008AppInBnftrCargosArray=null;
	
	//ILIES-291048 sscn & rrn
	T1028AppInMedcrCargo t1028AppInMedcrCargo = new T1028AppInMedcrCargo();
	T1028AppInMedcrCollection t1028AppInMedcrCollection=new T1028AppInMedcrCollection(connection);
	T1028AppInMedcrCargo[] t1028AppInMedcrCargosArray=null;
	
	
	//ILIES-291048 RM_MEDICARE_CLAIM and medicare number 
	RmMedicareClaimCargo rmMedicareClaimCargo = new RmMedicareClaimCargo();
	RmMedicareClaimCollection rmMedicareClaimCollection=new RmMedicareClaimCollection(connection);
	RmMedicareClaimCargo[] rmMedicareClaimCargosArray=null;
	try {
	    
	    if (autoRegT1004CargoArray == null || autoRegT1004CargoArray.length == 0) {
		return false;
	    }
	    
	    for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
		
		t1055Cargo.setAppNum(appNum);
		t1055Cargo.setIndvSeqNum(autoRegT1004CargoArray[i].getIndvSeqNum());
		t1055Coll.setCargo(t1055Cargo);

		t1055CargoArray = (T1055AppInPrflCargo[]) t1055Coll.select("findRecordByAppNumber");
		
		//ILIES-291048
		Object[] param = new Object[2];		
		param[0] = appNum; 
		param[1] = new Long(autoRegT1004CargoArray[i].getIndvSeqNum());
		t1008AppInBnftrCargosArray = (T1008AppInBnftrCargo[]) t1008AppInBnftrCollection.select("findByAppNum", param);
		
		//ILIES-291048 sscn & rrn		
		Object[] params = new Object[3];	
		String[] columnList= {"PARTA_ETTL_RESP","PARTB_ETTL_RESP","RETR_RESP"};
		params[0] = new ArrayList<String>(Arrays.asList(columnList));
		params[1] = appNum;
		params[2] = new Long(autoRegT1004CargoArray[i].getIndvSeqNum());
		t1028AppInMedcrCargosArray = (T1028AppInMedcrCargo[]) t1028AppInMedcrCollection.select("findByAppNumIndvSeqNum", params);		
		
		if (indvMap.containsKey((int) autoRegT1004CargoArray[i].getIndvSeqNum()) && indvMap.get((int) autoRegT1004CargoArray[i].getIndvSeqNum()) == 0L) {
		    
		    dcIndvProfCargo = new DcIndvProfileCargo();
		    dcIndvProfCargo.setDhsEmployeeSw('N');
		    dcIndvProfCargo.setMinorParentSw('N');
		    dcIndvProfCargo.setLumpSumSw('N');
		    dcIndvProfCargo.setDomesticViolenceVictimSw('N');
		    dcIndvProfCargo.setImmunizationSw('N');
		    dcIndvProfCargo.setAbsentParentSw('N');
		    dcIndvProfCargo.setNfCommunitySpouseSw('N');
		    dcIndvProfCargo.setMedicalInsuranceSw('N');
		    dcIndvProfCargo.setLtcNoncooperationSw('N');		    
		    dcIndvProfCargo.setHouseholdAccidentSw('N');
		    dcIndvProfCargo.setDrugAlNonCoopSw('N');
		    dcIndvProfCargo.setSpecialMaApprovalSw('N');
		    dcIndvProfCargo.setInstitutionalCareSw('N');
		    if (mSPAppStatus == null) {
			if (t1055CargoArray != null && t1055CargoArray.length > 0) {
			    t1055Cargo = t1055CargoArray[0];
			    
			    if (t1055Cargo.getDablResp() != null && t1055Cargo.getDablResp().trim().length() > 0) {
				dcIndvProfCargo.setDisabledSw(t1055Cargo.getDablResp().charAt(0));
			    } else {
				dcIndvProfCargo.setDisabledSw('N');
			    }
			    if (t1055Cargo.getPregResp() != null && t1055Cargo.getPregResp().trim().length() > 0) {
				dcIndvProfCargo.setPregnantSw(t1055Cargo.getPregResp().charAt(0));
			    } else {
				dcIndvProfCargo.setPregnantSw('N');
			    }
			    dcIndvProfCargo.setOtherInStateBenefitsSw(t1055Cargo.getOtherInStateBenefitsSw());
			} else {
			    dcIndvProfCargo.setDisabledSw('N');
			    //For FPPE apps, below 3 properties are invalid and pregnantSw should be N
			    if(autoRegT1001SSAppMpeCargo!=null && autoRegT1001SSAppMpeCargo.getExptDlvrDt()!=null && autoRegT1001SSAppMpeCargo.getPosPrefTestInd()=='Y' ){
			    	dcIndvProfCargo.setPregnantSw('Y');
			    }else{
			    	dcIndvProfCargo.setPregnantSw('N');
			    }
			    dcIndvProfCargo.setOtherInStateBenefitsSw('N');
			}
			
		    } else {
			dcIndvProfCargo.setDisabledSw('N');
			dcIndvProfCargo.setPregnantSw('N');
			dcIndvProfCargo.setOtherInStateBenefitsSw('N');
		    }
		    dcIndvProfCargo.setStandardAllowanceSw('N');
		    dcIndvProfCargo.setItemsOfExceptionalValSw('N');
		    dcIndvProfCargo.setResourceTestedSw('N');
		    dcIndvProfCargo.setHouseholdFacilitySw('N');
		    dcIndvProfCargo.setSignedPraSw('N');
		    dcIndvProfCargo.setSsdSsiSw('N');
		    dcIndvProfCargo.setOutOfStateBenefitsSw('N');
		    dcIndvProfCargo.setCreateDt(currentTime);
		    dcIndvProfCargo.setNewbornSw('N');
		    dcIndvProfCargo.setNfCareSw('N');
		    dcIndvProfCargo.setVehicleSw('N');
		    
		    //ILIES-291048
		    dcIndvProfCargo.setMedicareSw('N');
		    dcIndvProfCargo.setSscnSw('N');
		    if(t1028AppInMedcrCargosArray != null && t1028AppInMedcrCargosArray.length > 0) {
		    	for(T1028AppInMedcrCargo medcrg: t1028AppInMedcrCargosArray){
		    		if ((medcrg.getRetrResp() == 'M' || medcrg.getRetrResp() == 'R') && dcIndvProfCargo.getSscnSw() != 'Y'){
						dcIndvProfCargo.setSscnSw('Y');
				   }
				   if ((medcrg.getPartaEttlResp() == 'Y' || medcrg.getPartbEttlResp() == 'Y') && dcIndvProfCargo.getMedicareSw() != 'Y'){
					   dcIndvProfCargo.setMedicareSw('Y');
				   }
		    	}
		    }
		    dcIndvProfCargo.setDependentCareSw('N');
		    dcIndvProfCargo.setCasualtySw('N');
		    dcIndvProfCargo.setResourcePersonalPropSw('N');
		    dcIndvProfCargo.setHouseholdPartaBSw('N');
		    dcIndvProfCargo.setTelephoneExpenseSw('N');
		    dcIndvProfCargo.setAbawdDeterminationSw('N');
		    dcIndvProfCargo.setReferToOagSw('N');
		    dcIndvProfCargo.setSanctionsSw('N');
		    dcIndvProfCargo.setLifeInsuranceSw('N');
		    dcIndvProfCargo.setHealthCareOrientationSw('N');
		    dcIndvProfCargo.setTwcReqOrVolReferredSw('N');
		    dcIndvProfCargo.setImmRecordsReqGoodCauseSw('N');
		    dcIndvProfCargo.setMedicalExpenseSw('N');
		    dcIndvProfCargo.setQcNonCoopSw('N');
		    dcIndvProfCargo.setHouseholdMineralSw('N');
		    dcIndvProfCargo.setHouseholdLivestockSw('N');
		    dcIndvProfCargo.setMiscExpenseSw('N');
		    dcIndvProfCargo.setUtilityExpenseSw('N');
		    dcIndvProfCargo.setUniqueTransId('N');
		    dcIndvProfCargo.setAliasSw('N');
		    dcIndvProfCargo.setEmpAndTrainingNonCoopSw('N');
		    dcIndvProfCargo.setRealPropertySw('N');
		    dcIndvProfCargo.setRoomBoardIncomeSw('N');
		    dcIndvProfCargo.setPropertyUnusalSw('N');
		    dcIndvProfCargo.setTrustSw('N');
		    dcIndvProfCargo.setSelfEmployedSw('N');
		    dcIndvProfCargo.setTwcNonCoopSw('N');
		    dcIndvProfCargo.setCaretakerSw('N');
		    dcIndvProfCargo.setMailingAddrSw('N');
		    dcIndvProfCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    dcIndvProfCargo.setHouseholdLifeInsuranceSw('N');
		    //ILIES-291048
			dcIndvProfCargo.setReceivesSsiRsdiSw('N');
			if(t1008AppInBnftrCargosArray != null && t1008AppInBnftrCargosArray.length > 0) {
			   t1008AppInBnftrCargo = t1008AppInBnftrCargosArray[0];
			   if (t1008AppInBnftrCargo.getRcvSsiSw() == 'Y'){
				   dcIndvProfCargo.setReceivesSsiRsdiSw('Y');
				   dcIndvProfCargo.setSsdSsiSw('Y');
			    }
			}
			dcIndvProfCargo.setBurialResourceSw('N');
		    dcIndvProfCargo.setEmpServicesExemptionSw('N');
		    dcIndvProfCargo.setFacilitySw('N');
		    dcIndvProfCargo.setFingImgRequestGoodCauseSw('N');
		    dcIndvProfCargo.setOagNonCoopSw('N');
		    dcIndvProfCargo.setIpvSanctionSw('N');
		    dcIndvProfCargo.setChoicesNonCoopSw('N');
		    dcIndvProfCargo.setLiquidResourceSw('N');
		    dcIndvProfCargo.setIncapacitatedSw('N');
		    dcIndvProfCargo.setEmployedSw('N');
		    dcIndvProfCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
		    dcIndvProfCargo.setUnearnedIncSw('N');
		    dcIndvProfCargo.setAlternatePayeeSw('N');
		    dcIndvProfCargo.setNonCooperationSw('N');
		    dcIndvProfCargo.setIncExpTestedSw('N');
		    dcIndvProfCargo.setShelterExpenseSw('N');
		    dcIndvProfCargo.setWorkforceOrientationSw('N');
		    dcIndvProfCargo.setPursuitBenefitsSw('N');
		    dcIndvProfCargo.setSupportPaymentSw('N');
		    dcIndvProfCargo.setRoomBoardPaidSw('N');
		    dcIndvProfCargo.setSpousalDiversionSw('N');
		    dcIndvProfCargo.setMiscPaymentSw('N');
		    dcIndvProfCargo.setBreastCervicalSw('N');
		    
		    dcIndvProfColl.add(dcIndvProfCargo);
		    
		    dcIndvProfColl.insert(dcIndvProfColl);
		} else {
		    dcIndvProfCargo = new DcIndvProfileCargo();
		    // PMD_Override - R10 - The casting of this numeric/byte type does not need to be addressed because it will not exceed the int value.
		    PMDRules.markApprovedStatement("R10");
		    dcIndvProfCargo.setIndvId(indvMap.get((int) autoRegT1004CargoArray[i].getIndvSeqNum()));
		    dcIndvProfColl.clear();
		    dcIndvProfColl.add(dcIndvProfCargo);
		    dcIndvProfCargoArray = (DcIndvProfileCargo[]) dcIndvProfColl.select("findBySelectedIndividual");
		    if (dcIndvProfCargoArray != null && dcIndvProfCargoArray.length > 0) {
			dcIndvProfCargo = dcIndvProfCargoArray[0];
			
			if (mSPAppStatus == null) {
			    if (t1055CargoArray != null && t1055CargoArray.length > 0) {
				t1055Cargo = t1055CargoArray[0];
				
				if (t1055Cargo.getDablResp() != null && t1055Cargo.getDablResp().trim().length() > 0) {
				    dcIndvProfCargo.setDisabledSw(t1055Cargo.getDablResp().charAt(0));
				}
				if (t1055Cargo.getPregResp() != null && t1055Cargo.getPregResp().trim().length() > 0) {
				    dcIndvProfCargo.setPregnantSw(t1055Cargo.getPregResp().charAt(0));
				}
				else if(autoRegT1001SSAppMpeCargo!=null && autoRegT1001SSAppMpeCargo.getExptDlvrDt()!=null && autoRegT1001SSAppMpeCargo.getPosPrefTestInd()=='Y' ){
			    	dcIndvProfCargo.setPregnantSw('Y');
			    }else if(appFPPECategory){ //For FPPE apps, below 3 properties are invalid and pregnantSw should be N
			    	dcIndvProfCargo.setPregnantSw('N');
			    }
				dcIndvProfCargo.setOtherInStateBenefitsSw(t1055Cargo.getOtherInStateBenefitsSw());
			    }
			    dcIndvProfCargo.setUpdateDt(currentTime);
			    dcIndvProfCargo.setUpdateUserId(AppRegConstants.AUTO_REG_BATCH);
			}
			dcIndvProfColl.clear();
			dcIndvProfColl.add(dcIndvProfCargo);
			dcIndvProfColl.update(dcIndvProfColl);
		    }
		    
		}
		dcIndvProfColl.clear();
	    }
	    
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateDcIndvProfileTable() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    dcIndvProfCargo = null;
	    dcIndvProfColl = null;
	    dcIndvProfCargoArray = null;
	    t1055Cargo = null;
	    t1055Coll = null;
	    t1055CargoArray = null;
	}
    }