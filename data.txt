// 1) New members should not show required asterisks by default
newPerson.querySelectorAll('[id$="_asterisk"]').forEach(el => {
  el.style.display = 'none';
});

attachProgramListenersForPerson(newPerson);



function validateTaxFieldsForAllMembers() {
  let ok = true;

  // Each person block (IDs will be re-suffixed by updatepeopleIds)
  document.querySelectorAll('[id^="person"]').forEach(personEl => {
    const yes = personEl.querySelector('input[id^="programHealthCare_Y"]');
    if (yes && yes.checked) {
      // Only validate for people who selected program = Yes
      const requiredGroups = [
        'FileFederalTaxReturn',
        'FileJointlyWithSpouse',
        'Dependents',
        'DependentTaxReturn'
      ];

      requiredGroups.forEach(groupName => {
        // Names are suffixed; check radios within this person only
        const radios = personEl.querySelectorAll(`input[name^="${groupName}"]`);
        if (radios.length) {
          const anyChecked = Array.from(radios).some(r => r.checked);
          if (!anyChecked) ok = false;
        }
      });
    }
  });

  return ok;
}

if (!validateTaxFieldsForAllMembers()) {
  taxFieldsFlag = true;
}



(function initMembersPage() {
  const peopleRoot = document.getElementById('people');
  if (!peopleRoot) return; // Not the household page → do nothing
  attachProgramListenersForAllPersons();
})();


function toggleTaxFieldsMandatoryForPerson(personEl, isMandatory) {
  const ids = [
    'fileFederalTaxReturn_asterisk',
    'fileJointlyWithSpouse_asterisk',
    'dependents_asterisk',
    'dependentTaxReturn_asterisk'
  ];

  ids.forEach(baseId => {
    // find either the base id inside this person or any suffixed variant
    const el = personEl.querySelector(`#${baseId}, [id^="${baseId}_"]`);
    if (el) el.style.display = isMandatory ? 'inline' : 'none';
  });
}


function attachProgramListenersForPerson(personEl) {
  // Support either id or suffixed id patterns (_2, _3…) created by updatepeopleIds()
  const yes = personEl.querySelector('#programHealthCare_Y, [id^="programHealthCare_Y"]');
  const no  = personEl.querySelector('#programHealthCare_N, [id^="programHealthCare_N"]');

  if (!yes || !no) return;

  // Initial state for this person (in case template or previous actions set Yes)
  toggleTaxFieldsMandatoryForPerson(personEl, !!yes.checked);

  yes.addEventListener('change', () => {
    if (yes.checked) toggleTaxFieldsMandatoryForPerson(personEl, true);
  });
  no.addEventListener('change', () => {
    if (no.checked) toggleTaxFieldsMandatoryForPerson(personEl, false);
  });
}


function attachProgramListenersForAllPersons() {
  document.querySelectorAll('[id^="person"]').forEach(personEl => {
    attachProgramListenersForPerson(personEl);
  });
}
