package gov.illinois.ies.business.batch.ffm.outbound;


import com.rest.cms.ffm.ObjectFactory;
import com.rest.cms.ffm.TransferActivityCodeSimpleType;
import com.rest.cms.ffm.TransferActivityType;
import com.rest.cms.ffm.TransferHeaderType;
import com.rest.cms.ffm.FrequencyType;
import com.rest.cms.ffm.IncomeType;
import com.rest.cms.ffm.OrganizationType;
import com.rest.cms.ffm.PersonAugmentationType;
import com.rest.cms.ffm.PersonContactInformationAssociationType;
import com.rest.cms.ffm.PersonOrganizationAssociationType;
import com.rest.cms.ffm.PersonType;
import com.rest.cms.ffm.SignatureType;
import com.rest.cms.ffm.AssisterType;
import com.rest.cms.ffm.AuthorizedRepresentativeType;
import com.rest.cms.ffm.InsuranceApplicantType;
import com.rest.cms.ffm.MedicaidHouseholdType;
import com.rest.cms.ffm.PhysicalHouseholdType;
import com.rest.cms.ffm.SSFAttestationType;
import com.rest.cms.ffm.SSFSignerType;

import gov.illinois.ies.business.entities.cases.DcAuthRepsCargo;
import gov.illinois.ies.business.entities.cases.DcCaseAddressesCargo;
import gov.illinois.ies.business.entities.cases.DcCaseIndividualCargo;
import gov.illinois.ies.business.entities.eligibility.EdEligFmaBudgetCargo;
import gov.illinois.ies.business.entities.individual.DcIndvCargo;
import gov.illinois.ies.business.entities.selfservice.T1010AppAssistInfoCargo;
import com.rest.cms.ffm.AddressType;
import com.rest.cms.ffm.ContactInformationType;
import com.rest.cms.ffm.DateType;
import com.rest.cms.ffm.FullTelephoneNumberType;
import com.rest.cms.ffm.IdentificationType;
import com.rest.cms.ffm.PersonNameType;
import com.rest.cms.ffm.StreetType;
import com.rest.cms.ffm.StructuredAddressType;
import com.rest.cms.ffm.TelephoneNumberType;
import com.rest.cms.ffm.TimeMeasureType;
import com.rest.cms.ffm.ReferenceType;
import com.rest.cms.ffm.USStateCodeSimpleType;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.xml.bind.JAXBElement;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;







public class CreateApplicationTransferRequestManagerUtil {
	
	private static final SimpleDateFormat dateString = new java.text.SimpleDateFormat("yyMMddHHmm");
	 
	/**
	 * 
	 * @param personMap
	 * @param householdSizeChangeExpectedIndicator
	 * @param houseHoldIndvIdList
	 * @return
	 */
	public static  PhysicalHouseholdType populatePhysicalHHData(Map<Long , PersonType> personMap , Boolean householdSizeChangeExpectedIndicator , List<Long> houseHoldIndvIdList)
	{
        PhysicalHouseholdType physicalHouseholdType = new PhysicalHouseholdType();
		List<ReferenceType> householdMemberReference = new ArrayList<ReferenceType>();
		
		ReferenceType referenceType = null;
		for(Long indvId : houseHoldIndvIdList){
			if(personMap.get(indvId) != null) {
				referenceType = new ReferenceType();
				referenceType.setRef(personMap.get(indvId));
				householdMemberReference.add(referenceType);
			}
		}
		
		physicalHouseholdType.getHouseholdMemberReference().addAll(householdMemberReference);
		physicalHouseholdType.setHouseholdSizeChangeExpectedIndicator(FFMConversionUtil.getFFMBoolean(householdSizeChangeExpectedIndicator));
		return physicalHouseholdType;
	}
	
	
	/**
	 * @param transferHeaderType
	 * @param transferActivityType
	 * @param currentDate
	 * @param c
	 * @throws DatatypeConfigurationException
	 * @throws InterfacesException 
	 */
	public static  TransferHeaderType populateTransferHeader(Date currentDate, Timestamp currentTimestamp , Map<Long , InsuranceApplicantType> insuranceApplicantMap, FFMOutboundVO ffmOutboundVO) 
	   throws DatatypeConfigurationException, InterfacesException {
		TransferHeaderType transferHeaderType = new TransferHeaderType();
		TransferActivityType transferActivityType = new TransferActivityType();
		IdentificationType identificationType = new IdentificationType();
		if(ffmOutboundVO.getFfmTransferId() != null && !ffmOutboundVO.getFfmTransferId().trim().isEmpty())
		{
			identificationType.setIdentificationID(FFMConversionUtil.getFFMString(ffmOutboundVO.getFfmTransferId()));
		}
		else
		{
			identificationType.setIdentificationID(FFMConversionUtil.getFFMString("ILB" + (ffmOutboundVO.getCaseNum().substring(ffmOutboundVO.getCaseNum().length() - 7) + dateString.format(currentTimestamp))));
		}
		transferActivityType.setActivityIdentification(identificationType);
		
		DateType dateType = new DateType();
		dateType.setDateTime(FFMConversionUtil.getFFMDateTime(INInterfacesHelper.getXmlGregorianCalenderFromTimeStamp(currentTimestamp)));
		transferActivityType.setActivityDate(dateType);
		
		transferActivityType.setRecipientTransferActivityCode(FFMConversionUtil.getTransferActivityCodeType(TransferActivityCodeSimpleType.EXCHANGE));
		//check for number of individuals to be included in Referral count.
		transferActivityType.setTransferActivityReferralQuantity(FFMConversionUtil.getQuantityType(new BigDecimal(constructReferralIndvIdMap(
				insuranceApplicantMap))));
		
		//transferActivityType.setTransferActivityReferralQuantity(new BigDecimal(0));
		
		
		transferHeaderType.setTransferActivity(transferActivityType);
		return transferHeaderType;
	}


	/**
	 * @param edIndvNoticeReasonsCargoList
	 * @param edEligNoticeReasonsCargoList
	 * @return
	 * @throws InterfacesException
	 */
	private static Long constructReferralIndvIdMap(
			 Map<Long , InsuranceApplicantType> insuranceApplicantMap)
			throws InterfacesException {
		long referralCount = 0;
		Set<Map.Entry<Long, InsuranceApplicantType>> insuranceApplicationEntrySet = insuranceApplicantMap.entrySet();
		for(Map.Entry<Long, InsuranceApplicantType> entry : insuranceApplicationEntrySet)
		{
			if(entry.getValue().getReferralActivity() != null)
				referralCount++;
		}
		return referralCount;
		/*OutboundFFMBatchBO outboundFFMBatchBO = new OutboundFFMBatchBO();
		Map<Long,Long> referralIndvMap = new HashMap<Long, Long>();
		
		if(edIndvNoticeReasonsCargoList != null && edIndvNoticeReasonsCargoList.size() >0){
			for (EdIndvNoticeReasonsCargo edIndvNoticeReasonsCargo : edIndvNoticeReasonsCargoList) {
				if(outboundFFMBatchBO.checkIfReferralIncluded(edIndvNoticeReasonsCargo.getCaseNum())){
					if(referralIndvMap.get(edIndvNoticeReasonsCargo.getIndvId()) == null){
						referralIndvMap.put(edIndvNoticeReasonsCargo.getIndvId(), edIndvNoticeReasonsCargo.getIndvId());
					}
				}else{
					if(referralIndvMap.get(edIndvNoticeReasonsCargo.getIndvId()) != null){
					referralIndvMap.remove(edIndvNoticeReasonsCargo.getIndvId());
					}
				}
			}
		}
		if(edEligNoticeReasonsCargoList != null && edEligNoticeReasonsCargoList.size() >0){
			for (EdEligNoticeReasonsCargo edEligNoticeReasonsCargo : edEligNoticeReasonsCargoList) {
				Set<Long> indvIdSet = null;
				
				// Call to DC_CASE_PROGRAM_INDV to get the Individuals in the Case
				List<DcCaseProgramIndvCargo> dcCaseProgramIndvCargoList = outboundFFMBatchBO.fetchDcCaseProgramIndvCargo(edEligNoticeReasonsCargo.getCaseNum());
				
				if(dcCaseProgramIndvCargoList != null && dcCaseProgramIndvCargoList.size()>0){
					 indvIdSet = new HashSet<Long>();
					for(DcCaseProgramIndvCargo dcCaseProgramIndvCargo: dcCaseProgramIndvCargoList){
						indvIdSet.add(dcCaseProgramIndvCargo.getIndvId());
			        }
				}
				if(indvIdSet != null && indvIdSet.size()>0){
					for(long indvId : indvIdSet){
						if(outboundFFMBatchBO.checkIfReferralIncluded(edEligNoticeReasonsCargo.getCaseNum())){
							if(referralIndvMap.get(indvId) == null){
								referralIndvMap.put(indvId, indvId);
							}
						}else{
							if(referralIndvMap.get(indvId) != null){
							referralIndvMap.remove(indvId);
							}
						}
					}
				}
			}
		}
		return referralIndvMap;*/
	}
	
	
	/**
	 * @param householdSizeChangeExpectedIndicator
	 * @param dcPregnanciesCount
	 * @param edIndvNoticeReasonsCargo
	 * @param budgetCargoArray
	 */
	public static  MedicaidHouseholdType populateMedicalHHindvData(
			Boolean householdSizeChangeExpectedIndicator,
			long numberOfExpectedBabies,
			String failureReasonCode,
			EdEligFmaBudgetCargo[] budgetCargoArray) {
		EdEligFmaBudgetCargo fmaBudgetInfo  = null;
		if(budgetCargoArray != null && budgetCargoArray.length > 0)
			 fmaBudgetInfo =budgetCargoArray[0]; 
		MedicaidHouseholdType  medicaidHouseholdType = new MedicaidHouseholdType();   
		IncomeType houseHoldMagiIncom = new IncomeType();
		FrequencyType frequencyType = new FrequencyType();
		frequencyType.setFrequencyCode(FFMConversionUtil.getFrequencyCodeType("Monthly"));
		houseHoldMagiIncom.setIncomeFrequency(frequencyType);
		
		if(fmaBudgetInfo != null) {
			houseHoldMagiIncom.setIncomeAmount(FFMConversionUtil.getAmountType(new BigDecimal(fmaBudgetInfo.getNetCntblIncAmt())));
			
			if(fmaBudgetInfo.getCurrFplAmt() > 999) {
				houseHoldMagiIncom.setIncomeFederalPovertyLevelPercent(FFMConversionUtil.getPercentageType(new BigDecimal(999)));
			}
			else {
				String fplAmount = String.valueOf(fmaBudgetInfo.getCurrFplAmt());
				if(fplAmount.length() > 3) {
					fplAmount = fplAmount.substring(0, 3);
				}
				houseHoldMagiIncom.setIncomeFederalPovertyLevelPercent(FFMConversionUtil.getPercentageType(new BigDecimal(fplAmount)));
			}
			
			if(householdSizeChangeExpectedIndicator){
				medicaidHouseholdType.setHouseholdSizeQuantity(FFMConversionUtil.getQuantityType(new BigDecimal(fmaBudgetInfo.getFamilySize() - numberOfExpectedBabies)));
			}else{
				medicaidHouseholdType.setHouseholdSizeQuantity(FFMConversionUtil.getQuantityType(new BigDecimal(fmaBudgetInfo.getFamilySize())));
			}
			medicaidHouseholdType.setMedicaidHouseholdEffectivePersonQuantity(FFMConversionUtil.getQuantityType(new BigDecimal(fmaBudgetInfo.getFamilySize())));
		}
		ObjectFactory fact = new ObjectFactory();
		JAXBElement<IncomeType> houseHoldMagiIncome = fact.createHouseholdIncome(houseHoldMagiIncom);
		List<JAXBElement<IncomeType>> householdIncomeOrHouseholdAGIOrHouseholdMAGI = medicaidHouseholdType.getHouseholdIncomeOrHouseholdAGIOrHouseholdMAGI();
		householdIncomeOrHouseholdAGIOrHouseholdMAGI.add(houseHoldMagiIncome);
		medicaidHouseholdType.setHouseholdSizeChangeExpectedIndicator(FFMConversionUtil.getFFMBoolean(householdSizeChangeExpectedIndicator));
		
		//if(failureReasonCode.contains("EL9050"))
		   medicaidHouseholdType.setMedicaidHouseholdIncomeAboveHighestApplicableMAGIStandardIndicator(FFMConversionUtil.getFFMBoolean(Boolean.TRUE));
		/*else
			medicaidHouseholdType.setMedicaidHouseholdIncomeAboveHighestApplicableMAGIStandardIndicator(Boolean.FALSE);*/
		
		return medicaidHouseholdType;
	}


	/**
	 * @param calendar
	 * @param c
	 * @param appAssistInfoCargo
	 * @return
	 * @throws DatatypeConfigurationException
	 * @throws ParseException 
	 */
	public static AssisterType populateAssisterInfo(Calendar calendar,
			GregorianCalendar c, T1010AppAssistInfoCargo appAssistInfoCargo)
			throws DatatypeConfigurationException, ParseException {
		
		AssisterType assisterType = new AssisterType();
		PersonType personType = new PersonType();
		PersonNameType assisterName = new PersonNameType();
		Timestamp brthDt = appAssistInfoCargo.getBrthDt();
		SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		Date date = dateFormat.parse("31/01/4900");
		long time = date.getTime();
		Timestamp highDt=new Timestamp(time);
		assisterName.setPersonGivenName(FFMConversionUtil.getPersonNameTextType(appAssistInfoCargo.getFstNam()));
		assisterName.setPersonMiddleName(FFMConversionUtil.getPersonNameTextType(appAssistInfoCargo.getMidInit()));
		assisterName.setPersonSurName(FFMConversionUtil.getPersonNameTextType(appAssistInfoCargo.getLastNam()));
	
		
		personType.getPersonName().add(assisterName);
		
		if(brthDt !=null && !brthDt.equals(highDt))
		{
		
			DateType personBirthDate = new DateType();
			personBirthDate.setDate(FFMConversionUtil.getFFMDate(INInterfacesHelper.getXmlGregorianCalenderFromTimeStamp(brthDt)));
			personType.setPersonBirthDate(personBirthDate);
			TimeMeasureType ageMeasure = new TimeMeasureType();
			Calendar dob = Calendar.getInstance();  
			c.setTimeInMillis(brthDt.getTime());
			dob.setTimeInMillis(c.getTimeInMillis());
			ageMeasure.setMeasurePointValue( FFMConversionUtil.getMeasurePointValueType(new BigDecimal(calendar.get(Calendar.YEAR) - dob.get(Calendar.YEAR))));
			personType.setPersonAgeMeasure(ageMeasure);
		}
		
		PersonAugmentationType augmentationType = new PersonAugmentationType();
		
		TelephoneNumberType telephoneNumberType = new TelephoneNumberType();
		FullTelephoneNumberType fullTelephoneNumberType =  new FullTelephoneNumberType();
		fullTelephoneNumberType.setTelephoneNumberFullID(FFMConversionUtil.getFFMString(appAssistInfoCargo.getPhnNum()));
		telephoneNumberType.setFullTelephoneNumber(fullTelephoneNumberType);
		
		
		StructuredAddressType address = new StructuredAddressType();
		StreetType street = new StreetType();
		street.setStreetFullText(FFMConversionUtil.getTextType(appAssistInfoCargo.getLINE1_ADR()));
		address.setLocationStreet(street);
		
		address.setAddressSecondaryUnitText(FFMConversionUtil.getTextType(appAssistInfoCargo.getLINE2_ADR()));
		address.setLocationCityName(FFMConversionUtil.getProperNameTextType(appAssistInfoCargo.getCityAdr()));
		address.setLocationStateUSPostalServiceCode(FFMConversionUtil.getUSStateCodeType(USStateCodeSimpleType.IL));
		address.setLocationPostalCode(FFMConversionUtil.getFFMString(appAssistInfoCargo.getZipAdr()));
		AddressType addressType = new AddressType();
		addressType.setStructuredAddress(address);
		
		PersonOrganizationAssociationType associationType = new PersonOrganizationAssociationType();
		OrganizationType  organizationType = new OrganizationType();
		organizationType.setOrganizationName(FFMConversionUtil.getTextType(appAssistInfoCargo.getAgcyNam()));
		
		IdentificationType organizationIdentification = new IdentificationType();
		organizationIdentification.setIdentificationID(FFMConversionUtil.getFFMString(""+appAssistInfoCargo.getProviderId()));
		organizationType.setOrganizationIdentification(organizationIdentification);
		
		ContactInformationType contactInformationType = new ContactInformationType();
		contactInformationType.setContactTelephoneNumber(telephoneNumberType);
		contactInformationType.setContactMailingAddress(addressType);
		
		organizationType.setOrganizationPrimaryContactInformation(contactInformationType);
		
		associationType.setOrganization(organizationType);
		augmentationType.setPersonOrganizationAssociation(associationType);
		personType.setPersonAugmentation(augmentationType);
		assisterType.setRolePlayedByPerson(personType);
		return assisterType;
	}


	/**
	 * @param dcAuthRepsCargo
	 * @param dcCaseAddressesCargo
	 * @return
	 */
	public static  AuthorizedRepresentativeType populateAuthRepInfo(
			DcAuthRepsCargo  dcAuthRepsCargo,DcCaseAddressesCargo dcCaseAddressesCargo) {
		AuthorizedRepresentativeType authorizedRepresentative  =new AuthorizedRepresentativeType();
		PersonType authRepPerson = new PersonType();
		PersonNameType authRepPersonName = new PersonNameType();
		PersonAugmentationType authRepAugmentation = new PersonAugmentationType();
		
		PersonContactInformationAssociationType authRepContact = new PersonContactInformationAssociationType();
		StructuredAddressType authRepStrAddress = new StructuredAddressType();
		StreetType authRepStreet = new StreetType();
		AddressType authRepAddressType = new AddressType();
		if(dcCaseAddressesCargo !=null)
		{
			String streetFullText = INInterfacesHelper.checkInputNullandTrim(dcCaseAddressesCargo.getAddrStNum())+ " " + INInterfacesHelper.checkInputNullandTrim(dcCaseAddressesCargo.getAddrStNumFrac()) +
									" " + INInterfacesHelper.checkInputNullandTrim(dcCaseAddressesCargo.getAddrStNm());
			if(streetFullText != null )
			{
				if( !(streetFullText.length() > 88))
					{
					authRepStreet.setStreetFullText(FFMConversionUtil.getTextType(streetFullText));
					authRepStrAddress.setLocationStreet(authRepStreet);
					}
				else
					{
					authRepStreet.setStreetFullText(FFMConversionUtil.getTextType(streetFullText.substring(0, 87)));
					authRepStrAddress.setLocationStreet(authRepStreet);
					}
			}
			authRepStrAddress.setLocationStreet(authRepStreet);
			String addSecUnitTxt = INInterfacesHelper.checkInputNullandTrim(dcCaseAddressesCargo.getAddrAptNum());
			if(!INInterfacesHelper.EMPTY_STRING.equals(addSecUnitTxt) && !(addSecUnitTxt.length() < 1) && !(addSecUnitTxt.length() > 75))
			{
				authRepStrAddress.setAddressSecondaryUnitText(FFMConversionUtil.getTextType(addSecUnitTxt));
			}
			if(dcCaseAddressesCargo.getAddrCity() !=null && !dcCaseAddressesCargo.getAddrCity().trim().isEmpty())
			{
				authRepStrAddress.setLocationCityName(FFMConversionUtil.getProperNameTextType(dcCaseAddressesCargo.getAddrCity()));
			}
			
			if(dcCaseAddressesCargo.getAddrStateCd() != null && !dcCaseAddressesCargo.getAddrStateCd().trim().isEmpty()) {
				authRepStrAddress.setLocationStateUSPostalServiceCode(FFMConversionUtil.getUSStateCodeType(INInterfacesHelper.checkInputNullandTrim(dcCaseAddressesCargo.getAddrStateCd())));
			}
			String locPostalCode = null;
			if(dcCaseAddressesCargo.getAddrZip5() != null){
				if(dcCaseAddressesCargo.getAddrZip4() != null){
					locPostalCode = dcCaseAddressesCargo.getAddrZip5()+ dcCaseAddressesCargo.getAddrZip4();
				}else{
					locPostalCode = dcCaseAddressesCargo.getAddrZip5();
				}
			}
			if(locPostalCode != null && !(locPostalCode.length() < 5) && !(locPostalCode.length() > 9))
			{
				authRepStrAddress.setLocationPostalCode(FFMConversionUtil.getFFMString(locPostalCode));
			}
			authRepAddressType.setStructuredAddress(authRepStrAddress);
		}
		if(null != dcAuthRepsCargo.getAuthrepFirstName() && !dcAuthRepsCargo.getAuthrepFirstName().trim().isEmpty()){
			authRepPersonName.setPersonGivenName(FFMConversionUtil.getPersonNameTextType(dcAuthRepsCargo.getAuthrepFirstName()));
		}
		if(null != dcAuthRepsCargo.getAuthrepMidName() && !dcAuthRepsCargo.getAuthrepMidName().trim().isEmpty()){
			authRepPersonName.setPersonMiddleName(FFMConversionUtil.getPersonNameTextType(dcAuthRepsCargo.getAuthrepMidName()));
		}
		if(null != dcAuthRepsCargo.getAuthrepLastName() && !dcAuthRepsCargo.getAuthrepLastName().trim().isEmpty()){
			authRepPersonName.setPersonSurName(FFMConversionUtil.getPersonNameTextType(dcAuthRepsCargo.getAuthrepLastName()));
		}
		authRepPerson.getPersonName().add(authRepPersonName);
		
		ContactInformationType contactInformation = new ContactInformationType();
		contactInformation.setContactMailingAddress(authRepAddressType);
		authRepContact.setContactInformation(contactInformation);
		authRepAugmentation.getPersonContactInformationAssociation().add(authRepContact);
		authRepPerson.setPersonAugmentation(authRepAugmentation);
		authorizedRepresentative.setRolePlayedByPerson(authRepPerson);
		return authorizedRepresentative;
	}
	
	/**
	 * 
	 * @param personMap
	 * @param householdSizeChangeExpectedIndicator
	 * @param houseHoldIndvIdList
	 * @return
	 */
	public static SSFSignerType populateSSFSignerData(Map<Long,PersonType> personMap, DcCaseIndividualCargo caseIndividualCargo, DcIndvCargo dcIndvCargo, String refId)
	{
		SSFSignerType ssfSigner = new SSFSignerType();
		ReferenceType referenceType = new ReferenceType();
	//	SSFSignerAuthorizedRepresentativeAssociationType associationType = new SSFSignerAuthorizedRepresentativeAssociationType();
		//SignatureType signatureType = new SignatureType();
		
		referenceType.setRef(personMap.get(caseIndividualCargo.getIndvId()));
		ssfSigner.setRoleOfPersonReference(referenceType);
		
		/*	if(null!=  refId && !refId.trim().isEmpty()){
			referenceType = new ReferenceType();
			referenceType.setRef(refId);
			associationType.setAuthorizedRepresentativeReference(referenceType);
		}
		
		//Get Record from DC_INDV
		
		if(dcIndvCargo != null) {
			PersonNameType nameType = new PersonNameType();
			nameType.setPersonFullName(dcIndvCargo.getFirstName()+", "+dcIndvCargo.getLastName());
			signatureType.setSignatureName(nameType);
		}*/
	//	associationType.setSignature(signatureType);
		//ssfSigner.setSSFSignerAuthorizedRepresentativeAssociation(associationType);
		
		SignatureType signatureType_withDate = new SignatureType();
	//	signatureType_withDate.setSignatureDate(null);
		
		ssfSigner.setSignature(signatureType_withDate);
		
		//TODO
		SSFAttestationType ssfAttestationType = new SSFAttestationType();
	//	ssfAttestationType.setSSFAttestationPendingChargesIndicator(false);
		ssfAttestationType.getSSFAttestationNotIncarceratedIndicator().add(null);
		ssfSigner.setSSFAttestation(ssfAttestationType);
		
		
		
		return ssfSigner;
	}

}
