/**
	 * Method findByPenaltyIncomeRemoval fetches all the cases
	 * based on the following conditions:
	 * A) FAP is active
	 * B) FIP is closed (already effective)
	 * C) The case has a FIP Child Support or Employment and Training penalty, ending in the current month
	 * Added using WR BRGUS00212868 by AnandP on 12/18/2009
	 * @param maxRows int
	 * @param currMonthFirstDay Timestamp
	 * @param currMonthLastDay Timestamp
	 * @param currentMonth String
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findByPenaltyIncomeRemoval(int maxRows, Timestamp cutOffDt
			/*Timestamp currMonthFirstDay, Timestamp currMonthLastDay, String currentMonth*/)
	throws TIERSRunTimeException {
		Debug.println("findByPenaltyIncomeRemoval" + " maxRows= " + maxRows);
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		DcCasesCargo[] colrows = null;
		StringBuilder sqlClause = new StringBuilder();

		try {
			conn = getConnection();

			sqlClause.append("SELECT case_num");
			sqlClause.append("  FROM dc_cases dcc");
			sqlClause.append(" WHERE EXISTS");
			sqlClause.append(" (SELECT /*+ full(edp) parallel(edp 4)*/");
			sqlClause.append("         null");
			sqlClause.append("          FROM ed_dc_indv_disq_penalties edp");
			sqlClause.append("         WHERE edp.case_num = dcc.case_num");
			//sqlClause.append("           AND pen_dis_type_cd IN ('OAG', 'ET')");
			sqlClause.append(" AND VARCHAR_FORMAT(pen_dis_end_dt, 'YYYYMM') = VARCHAR_FORMAT(?, 'YYYYMM')) ");
			//sqlClause.append("           AND pen_dis_end_dt >= TO_DATE(?, 'YYYY-MM')");
			//sqlClause.append("           AND pen_dis_end_dt <= LAST_DAY(TO_DATE(?, 'YYYY-MM')))");
			sqlClause.append("   AND EXISTS (SELECT NULL");
			sqlClause.append("          FROM ed_eligibility ed");
			sqlClause.append("         WHERE current_elig_ind = 'A'");
			sqlClause.append("           AND dcc.case_num = ed.case_num");
			sqlClause.append("           AND program_cd = 'FS'");
			sqlClause.append("           AND delete_sw = 'N'");
			sqlClause.append("           AND cg_status_cd = 'AP'");
			sqlClause.append("           AND rec_end_dt IS NULL");
			sqlClause.append("           AND payment_end_dt IS NULL)");
			sqlClause.append("   OR EXISTS (SELECT NULL");
			sqlClause.append("          FROM ed_eligibility ed1");
			sqlClause.append("         WHERE ed1.case_num = dcc.case_num");
			sqlClause.append("           AND current_elig_ind = 'A'");
			sqlClause.append("           AND delete_sw = 'N'");
			sqlClause.append("           AND cg_status_cd = 'TN'");
			sqlClause.append("           AND rec_end_dt IS NULL");
			sqlClause.append("           AND payment_end_dt IS NULL");
			sqlClause.append("           AND program_cd = 'TF'");
			sqlClause.append(" AND VARCHAR_FORMAT(payment_beg_dt, 'YYYYMM') = VARCHAR_FORMAT(? , 'YYYYMM')) WITH UR"); 
//			sqlClause.append("           AND payment_beg_dt >= ?");
//			sqlClause.append("           AND payment_beg_dt <= ?) WITH UR");

			statement = conn.prepareStatement(sqlClause.toString());
			statement.setTimestamp(1, cutOffDt);
			statement.setTimestamp(2, cutOffDt);
			
//			statement.setString(1, currentMonth);
//			statement.setString(2, currentMonth);
//			statement.setTimestamp(3, currMonthFirstDay);
//			statement.setTimestamp(4, currMonthLastDay);

			rs = statement.executeQuery();

			int cnt = 0;
			while ( cnt++ < maxRows && rs.next() ) {
				DcCasesCargo row = new DcCasesCargo();
				getCustomRowFromResultSet(row, rs, "findByPenaltyIncomeRemoval");
				v.add(row);
			}
			colrows = new DcCasesCargo[v.size()];
			v.toArray(colrows);
		}
		catch (Exception e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		}
		finally {
			try {
				if (rs != null && getClose()) {
					rs.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null) {
					closeStatement("findByPenaltyIncomeRemoval", statement,maxRows,v.size());
					Debug.println("called close statement for findByPenaltyIncomeRemoval");
				}
			}
			catch (SQLException e) {
				Debug.println("exception in close statement for findByPenaltyIncomeRemoval");
				throw new TIERSRunTimeException(e.getClass().getName() + "findByPenaltyIncomeRemoval " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " findByPenaltyIncomeRemoval" + e.getMessage(), e);
			}
		}
		return colrows;
	}

	/**
	 * This is used generating alert for Spend Down based on Monitoring Date
	 * Added By AnandP on 12/21/2009 using WR BRGUS00212868
	 * @param maxRows
	 * @param firstDayofMonth
	 * @param lastDayofMonth
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findBySpendDownMonitoringDt(int maxRows,
			Timestamp firstDayofMonth, Timestamp lastDayofMonth)
	throws TIERSRunTimeException {
		Debug.println("findBySpendDownMonitoringDt" + " maxRows= " + maxRows
				+ " firstDayofMonth=" + firstDayofMonth + " lastDayofMonth=" + lastDayofMonth);
		ArrayList v = new ArrayList();
		ResultSet rs = null;
		PreparedStatement statement = null;
		Connection conn = null;
		StringBuffer sqlClause = new StringBuffer();

		try {
			conn = getConnection();

			sqlClause.append(" SELECT case_num");
			sqlClause.append("   FROM dc_cases dcc");
			sqlClause.append("  WHERE EXISTS");
			sqlClause.append("  (SELECT NULL");
			sqlClause.append("           FROM ed_eligibility ed");
			sqlClause.append("          WHERE monitoring_dt >= ?");
			sqlClause.append("            AND monitoring_dt <= ?");
			sqlClause.append("            AND type_of_assistance_cd LIKE 'G2%'");
			sqlClause.append("            AND program_cd IN ('MA', 'ME')");
			sqlClause.append("            AND rec_end_dt IS NULL");
			sqlClause.append("            AND cg_status_cd = 'AP'");
			sqlClause.append("            AND current_elig_ind = 'A'");
			sqlClause.append("            AND delete_sw = 'N'");
			sqlClause.append("            AND dcc.case_num = ed.case_num");
			sqlClause.append("            AND ed.case_num IN");
			sqlClause.append("                (SELECT /*+ full(dcmd) parallel(dcmd)*/");
			sqlClause.append("                  dcib.case_num");
			sqlClause.append("                   FROM dc_case_individual_b dcib, dc_medical_deductions dcmd");
			sqlClause.append("                  WHERE dcmd.indv_id = dcib.indv_id)) WITH UR");

			statement = conn.prepareStatement(sqlClause.toString());
			statement.setTimestamp(1, firstDayofMonth);
			statement.setTimestamp(2, lastDayofMonth);
			rs = statement.executeQuery();
			int cnt = 0;
			while (cnt++ < maxRows && rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				getCustomRowFromResultSet(row, rs, "findBySpendDownMonitoringDt");
				v.add(row);
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null && getClose()) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null) {
					closeStatement("findBySpendDownMonitoringDt", statement, maxRows, v.size());
					Debug.println("called close statement for findBySpendDownMonitoringDt");
				}
			} catch (SQLException e) {
				Debug.println("exception in close statement for findBySpendDownMonitoringDt");
				throw new TIERSRunTimeException(e.getClass().getName() + "findBySpendDownMonitoringDt" + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " findBySpendDownMonitoringDt" + e.getMessage(), e);
			}
		}
	}

	/**
	 * Method findByFixedCertifications fetches all the cases
	 * for closing the fixed certification EDG's
	 * Added using WR BRGUS00211535 by AnandP on 12/21/2009
	 * @param maxRows int
	 * @param currMonthFirstDay String
	 * @param currMonthLastDay String
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findByFixedCertifications(int maxRows,
			String currMonthFirstDay, String currMonthLastDay)
	throws TIERSRunTimeException {
		Debug.println("findByFixedCertifications" + " maxRows= " + maxRows);
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		DcCasesCargo[] colrows = null;
		StringBuffer sqlClause = new StringBuffer();

		try {
			conn = getConnection();

			sqlClause.append("SELECT case_num");
			sqlClause.append("  FROM dc_cases dcc");
			sqlClause.append(" WHERE case_num IN");
			sqlClause.append("       (SELECT /*+ full(edcr) parallel(edcr 6)*/");
			sqlClause.append("        DISTINCT edcr.case_num");
			sqlClause.append("          FROM ed_case_recert_dates edcr");
			sqlClause.append("         WHERE edcr.eff_end_dt IS NULL");
			sqlClause.append("           AND edcr.program_cd NOT IN ('MA', 'ME')");
			sqlClause.append("           AND EXISTS");
			sqlClause.append("         (SELECT NULL");
			sqlClause.append("                  FROM ed_eligibility ede");
			sqlClause.append("                 WHERE ede.case_num = edcr.case_num");
			sqlClause.append("                   AND ede.edg_num = edcr.edg_num");
			sqlClause.append("                   AND ede.program_cd = edcr.program_cd");
			sqlClause.append("                   AND (ede.estimated_elig_end_dt >= TO_DATE(?, 'YYYY-MM-DD') AND");
			sqlClause.append("                       ede.estimated_elig_end_dt <= TO_DATE(?, 'YYYY-MM-DD'))");
			sqlClause.append("                   AND ede.eligibility_end_dt IS NULL");
			sqlClause.append("                   AND ede.current_elig_ind = 'A'");
			sqlClause.append("                   AND ede.cg_elig_rslt_cd = 'PS'");
			sqlClause.append("                   AND ede.delete_sw = 'N'");
			sqlClause.append("                   AND ede.rec_end_dt IS NULL");
			sqlClause.append("                   AND ede.cg_status_cd = 'AP'");
			sqlClause.append("                   AND ede.program_cd NOT IN ('MA', 'ME')");
			sqlClause.append("                   AND (ede.semi_annual_review_dt IS NULL OR");
			sqlClause.append("                       (ede.semi_annual_review_dt >= TO_DATE(?, 'YYYY-MM-DD') AND");
			sqlClause.append("                       ede.semi_annual_review_dt <= TO_DATE(?, 'YYYY-MM-DD') AND");
			sqlClause.append("                       edcr.form_1046_received_dt IS NULL)))) WITH UR");

			statement = conn.prepareStatement(sqlClause.toString());
			statement.setString(1, currMonthFirstDay);
			statement.setString(2, currMonthLastDay);
			statement.setString(3, currMonthFirstDay);
			statement.setString(4, currMonthLastDay);

			rs = statement.executeQuery();

			int cnt = 0;
			while ( cnt++ < maxRows && rs.next() ) {
				DcCasesCargo row = new DcCasesCargo();
				getCustomRowFromResultSet(row, rs, "findByFixedCertifications");
				v.add(row);
			}
			colrows = new DcCasesCargo[v.size()];
			v.toArray(colrows);
		}
		catch (Exception e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		}
		finally {
			try {
				if (rs != null && getClose()) {
					rs.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null) {
					closeStatement("findByFixedCertifications", statement,maxRows,v.size());
					Debug.println("called close statement for findByFixedCertifications");
				}
			}
			catch (SQLException e) {
				Debug.println("exception in close statement for findByFixedCertifications");
				throw new TIERSRunTimeException(e.getClass().getName() + "findByFixedCertifications " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " findByFixedCertifications" + e.getMessage(), e);
			}
		}
		return colrows;
	}

	/**
	 * Method findByMidSemiCertTrigger fetches all the cases
	 * for DHS-2240A mid cert notice not received
	 * Added using WR BRGUS00211535 by AnandP on 12/22/2009
	 * @param maxRows int
	 * @param currMonthFirstDay String
	 * @param currMonthLastDay String
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findByMidSemiCertTrigger(int maxRows,
			String currMonthFirstDay, String currMonthLastDay)
	throws TIERSRunTimeException {
		Debug.println("findByMidSemiCertTrigger" + " maxRows= " + maxRows);
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		DcCasesCargo[] colrows = null;
		StringBuffer sqlClause = new StringBuffer();

		try {
			conn = getConnection();

			sqlClause.append("SELECT case_num");
			sqlClause.append("  FROM dc_cases dcc");
			sqlClause.append(" WHERE case_num IN");
			sqlClause.append("       (SELECT /*+ full(edcr) parallel(edcr 6)*/");
			sqlClause.append("        DISTINCT case_num");
			sqlClause.append("          FROM ed_case_recert_dates edcr");
			sqlClause.append("         WHERE edcr.eff_end_dt IS NULL");
			sqlClause.append("           AND edcr.program_cd = 'FS'");
			sqlClause.append("           AND EXISTS");
			sqlClause.append("         (SELECT NULL");
			sqlClause.append("                  FROM ed_eligibility ede");
			sqlClause.append("                 WHERE ede.case_num = edcr.case_num");
			sqlClause.append("                   AND ede.program_cd = edcr.program_cd");
			sqlClause.append("                   AND ede.edg_num = edcr.edg_num");
			sqlClause.append("                   AND ede.program_cd = 'FS'");
			sqlClause.append("                   AND ede.delete_sw = 'N'");
			sqlClause.append("                   AND ede.current_elig_ind = 'A'");
			sqlClause.append("                   AND ede.cg_status_cd = 'AP'");
			sqlClause.append("                   AND edcr.form_2240_received_dt IS NULL");
			sqlClause.append("                   AND ede.rec_end_dt IS NULL");
			sqlClause.append("                   AND (ede.mid_cert_end_dt >= TO_DATE(?, 'YYYY-MM-DD') AND");
			sqlClause.append("                       ede.mid_cert_end_dt <= TO_DATE(?, 'YYYY-MM-DD')))) WITH UR");

			statement = conn.prepareStatement(sqlClause.toString());
			statement.setString(1, currMonthFirstDay);
			statement.setString(2, currMonthLastDay);

			rs = statement.executeQuery();

			int cnt = 0;
			while ( cnt++ < maxRows && rs.next() ) {
				DcCasesCargo row = new DcCasesCargo();
				getCustomRowFromResultSet(row, rs, "findByMidSemiCertTrigger");
				v.add(row);
			}
			colrows = new DcCasesCargo[v.size()];
			v.toArray(colrows);
		}
		catch (Exception e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		}
		finally {
			try {
				if (rs != null && getClose()) {
					rs.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null) {
					closeStatement("findByMidSemiCertTrigger", statement,maxRows,v.size());
					Debug.println("called close statement for findByMidSemiCertTrigger");
				}
			}
			catch (SQLException e) {
				Debug.println("exception in close statement for findByMidSemiCertTrigger");
				throw new TIERSRunTimeException(e.getClass().getName() + "findByMidSemiCertTrigger " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " findByMidSemiCertTrigger" + e.getMessage(), e);
			}
		}
		return colrows;
	}

	/**
	 *This findBy method is used to find all cases which are pending and active MA
	 *
	 * @param maxRows
	 * @param cargo
	 * @return VDcCasesIndividualProgramCargo
	 * @throws TIERSRunTimeException
	 *
	 */
	public DcCasesCargo[] findByIndvActivePendingMACases(int maxRows,long individualId) throws SQLException {
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		try {
			conn = getConnection();
			final StringBuffer SQL = new StringBuffer();
			SQL.append(" SELECT DCA.CASE_NUM FROM DC_CASES DCA WHERE EXISTS ( SELECT 1 ");
			SQL.append(" FROM DC_CASE_INDIVIDUAL DCI WHERE DCI.CASE_NUM = DCA.CASE_NUM");
			SQL.append(" AND DCI.EFF_END_DT IS NULL ");
			SQL.append(" AND DCI.ACTIVE_IN_CASE_SW = 'Y' ");
			SQL.append(" AND INDV_ID = ? ) ");
			SQL.append(" AND EXISTS ( SELECT 1 FROM DC_CASE_PROGRAM DCP ");
			SQL.append(" WHERE DCP.CASE_NUM = DCA.CASE_NUM ");
			SQL.append(" AND DCP.PROG_STATUS_CD IN ('AP', 'PE') ");
			SQL.append(" AND DCP.EFF_END_DT IS NULL ");
			SQL.append(" AND DCP.PROG_CD = 'MA' ) WITH UR");
			/*
			 * String sql = "SELECT DISTINCT T1_CASE_NUM FROM V_DC_CASES_INDIVIDUAL_PROGRAM WHERE PROG_STATUS_CD IN
			 * ('AP','PE') AND  INDV_ID = ? AND PROG_CD = 'MA' AND ACTIVE_IN_CASE_SW = 'Y' AND T2_EFF_END_DT IS NULL
			 *  AND T3_EFF_END_DT IS NULL";
			 */
			statement = conn.prepareStatement(SQL.toString()) ;
			statement.setLong(1, individualId);
			rs = statement.executeQuery();
			int cnt = 0;
			while (rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				row.setCaseNum(rs.getLong("CASE_NUM"));
				v.add(row);
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} finally {
			if (rs != null) {
				rs.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (conn != null && getClose()) {
				conn.close();
			}
		}
	}

	/**
	 *This findBy method is used to find all cases which are pending and active MA
	 *
	 * @param maxRows
	 * @param cargo
	 * @return VDcCasesIndividualProgramCargo
	 * @throws TIERSRunTimeException
	 *
	 */
	public DcCasesCargo[] findByIndvsAPPendingCases(int maxRows,long childIndvId,long cpIndvId) throws SQLException {
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		try {
			conn = getConnection();
			final StringBuffer SQL = new StringBuffer();
			SQL.append(" SELECT DCA.CASE_NUM FROM DC_CASES DCA WHERE DCA.CASE_STATUS_CD ='AP' AND EXISTS ( SELECT 1 ");
			SQL.append(" FROM DC_CASE_INDIVIDUAL DCI WHERE DCI.CASE_NUM = DCA.CASE_NUM ");
			SQL.append(" AND DCI.EFF_END_DT IS NULL ");
			SQL.append(" AND DCI.ACTIVE_IN_CASE_SW = 'Y' ");
			SQL.append(" AND DCI.INDV_ID IN (?,?) ) ");
			SQL.append(" AND EXISTS ( SELECT 1 FROM DC_CASE_PROGRAM DCP ");
			SQL.append(" WHERE DCP.CASE_NUM = DCA.CASE_NUM ");
			SQL.append(" AND DCP.PROG_STATUS_CD IN ('AP', 'PE') ");
			SQL.append(" AND DCP.EFF_END_DT IS NULL ");
			SQL.append(" AND DCP.PROG_CD IN ('FS','CD','TF','MA','ME')) WITH UR");

			statement = conn.prepareStatement(SQL.toString()) ;
			statement.setLong(1, childIndvId);
			statement.setLong(2, cpIndvId);
			rs = statement.executeQuery();
			int cnt = 0;
			while (rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				row.setCaseNum(rs.getLong("CASE_NUM"));
				v.add(row);
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} finally {
			if (rs != null) {
				rs.close();
			}
			if (statement != null) {
				statement.close();
			}
			if (conn != null && getClose()) {
				conn.close();
			}
		}
	}

	/**
	 * findByCaseNumWithStatus finder method to find case number which has approved,pending or close and denied status
	 * within last 60 days.
	 * @param maxRows
	 * @param cargo
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findByCaseNumWithStatus(int maxRows, DcCasesCargo cargo)
	throws TIERSRunTimeException {
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;

		try {
			Debug.println("Inside method findByCaseNumWithStatus");

			conn = getConnection();
			statement = conn
			.prepareStatement(" SELECT CASE_NUM FROM DC_CASES WHERE " +
					" CASE_NUM = ?  AND ( CASE_STATUS_CD IN ('AP','PE') " +
			" OR  ( CASE_STATUS_CD IN ('TN','DN') AND CASE_CLOSED_DT >= (? - 60) ) ) WITH UR" );

			statement.setLong(1,cargo.getCaseNum());
			statement.setTimestamp(2,cargo.getCaseClosedDt());
			rs = statement.executeQuery();
			int cnt = 0;
			while (cnt++ < maxRows && rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				row.setCaseNum(rs.getLong("CASE_NUM"));
				v.add(row);
			}

			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			Debug.println("Exiting method findByCaseNumWithStatus");
			return colrows;

		} catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
		}
	}

	/**
	 *Method findByClosedCaseNum.
	 * This method is used to retreive cases for the given date period.
	 * @param maxRows int
	 * @param asOfDate Timestamp
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findByClosedCaseNum(int maxRows, ArrayList params)
	throws TIERSRunTimeException {
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		try {
			conn = getConnection();
			String selectCaseNum = "SELECT /*+ full(a) parallel(a)*/ OFFICE_NUM ,CASE_NUM  FROM DC_CASES A " +
			" WHERE CASE_CLOSED_DT >= ? AND CASE_CLOSED_DT < ? AND CASE_STATUS_CD IN ('TN', 'DN') AND CASE_MODE_CD in ('OG') WITH UR";
			statement = conn.prepareStatement(selectCaseNum);
			statement.setTimestamp(1, (Timestamp)params.get(0));
			statement.setTimestamp(2, (Timestamp)params.get(1));
			rs = statement.executeQuery();

			int cnt = 0;
			//prefetch changes
			//   while (rs.next() && cnt++ < maxRows) {
			while (cnt++ < maxRows && rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				getCustomRowFromResultSet(row,rs,"findByClosedCaseNum");

				v.add(row);
			}

			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (SQLException e) {

			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {

				if (rs != null && getClose()) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null) {
					closeStatement("findByClosedCaseNum", statement,maxRows,v.size());

				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}

	/**
	 * Method findByCaseNumbersStr.
	 * This method is used to case nos which are not in ongoing mode based on
	 * the input - caseNumbers
	 *
	 * @param maxRows int
	 * @param asOfDate Timestamp
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findByCaseNumbersStr(int maxRows, String caseNumbers)
	throws TIERSRunTimeException {
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;

		try {
			Debug.println("Inside method findByCaseNumbers");
			conn = getConnection();
			statement = conn
			.prepareStatement("SELECT CASE_NUM, CASE_STATUS_CD FROM DC_CASES WHERE CASE_NUM IN ("
					+ caseNumbers + ") WITH UR");

			rs = statement.executeQuery();
			int cnt = 0;

			//          while (rs.next() && cnt++ < maxRows) {
			//          BRGUS00102765 Ã¢â‚¬â€œ jampanip Ã¢â‚¬â€œ As Per QA Review Prefetch logic Changes
			while (cnt++ < maxRows && rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				row.setCaseNum(rs.getLong(1));
				row.setCaseStatusCd(rs.getString(2));
				//getRowFromResultSet(row, rs);
				v.add(row);
			}

			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			Debug.println("Exiting method findByCaseNumbers");
			return colrows;

		} catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
		}
	}
	/**
	 *Method findByCaseNum.
	 * This method is used to retreive records for a given case number
	 * @param maxRows int
	 * @param lCaseNum long
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findByMICSESCaseNum(int maxRows, long lCaseNum)
	throws TIERSRunTimeException {
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		try {
			conn = getConnection();
			statement =
				conn.prepareStatement(
				" SELECT CASE_NUM FROM DC_CASES Where CASE_NUM = ?  WITH UR" );
			statement.setLong(1, lCaseNum);
			rs = statement.executeQuery();
			int cnt = 0;
			while (cnt++ < maxRows && rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				//getRowFromResultSet(row, rs);
				row.setCaseNum(rs.getLong("CASE_NUM"));
				v.add(row);
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}
	/**
	 *Method findByMICSESParallelCaseNum.
	 * This method is used to retreive records for a given case number
	 * @param maxRows int
	 * @param lCaseNum long
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findByMICSESParallelCaseNum(int maxRows, long lCaseNum,int oraHashNum)
	throws TIERSRunTimeException {
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		try {
			conn = getConnection();
			String SQL = " SELECT DBMS_UTILITY.GET_HASH_VALUE ( ?, 1, ? ) AS CASE_NUM , ( SELECT DBMS_UTILITY.GET_HASH_VALUE (CASE_NUM , 1, ? ) " +
			"  FROM DC_CASES  WHERE CASE_NUM = ?  ) as PROCESS_ID  FROM DUAL ";
			statement = conn.prepareStatement(SQL);
			statement.setLong(1, lCaseNum);
			statement.setLong(2, oraHashNum);
			statement.setLong(3, oraHashNum);
			statement.setLong(4, lCaseNum);
			rs = statement.executeQuery();
			int cnt = 0;
			while (cnt++ < maxRows && rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				row.setCaseNum(rs.getLong("CASE_NUM"));
				row.setProcessId(rs.getString("PROCESS_ID"));
				v.add(row);
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}

	/**
	 * Method findByMiCSESCaseNum.
	 * This method is used to retreive conversion_dt for a given case number
	 * @param maxRows int
	 * @param lCaseNum long
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findByMiCSESCaseNum(int maxRows, long lCaseNum)
	throws TIERSRunTimeException {
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		try {
			conn = getConnection();
			String SQL = "SELECT CONVERSION_DT FROM DC_CASES WHERE CASE_NUM = ? WITH UR";
			statement = conn.prepareStatement(SQL);
			statement.setLong(1, lCaseNum);
			rs = statement.executeQuery();
			int cnt = 0;
			while (cnt++ < maxRows && rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				row.setConversionDt(rs.getTimestamp("CONVERSION_DT"));
				v.add(row);
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}

	/**
	 * Method findAllCasesForIndvId.
	 * This method is used to retreive records for a given Individual ID
	 * @param maxRows int
	 * @param indvID long
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findAllCasesForIndvId(int maxRows, long indvID)
	throws TIERSRunTimeException {
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		try {
			conn = getConnection();
			StringBuffer sb = new StringBuffer();
			sb.append("SELECT dc.CASE_STATUS_CD ,dc.CASE_NUM FROM DC_CASES dc ");
			sb.append("INNER JOIN dc_case_individual dci ON dc.case_num = dci.case_num ");
			sb.append("where dci.indv_id = ? AND dci.ACTIVE_IN_CASE_SW = 'Y' and dci.eff_end_dt is null WITH UR");
			statement = conn.prepareStatement(sb.toString());
			statement.setLong(1, indvID);
			rs = statement.executeQuery();
			int cnt = 0;
			while (cnt++ < maxRows && rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				row.setCaseStatusCd(rs.getString("CASE_STATUS_CD"));
				row.setCaseNum(rs.getLong("CASE_NUM"));
				v.add(row);
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}

	/**
	 * Method findByCaseNumWithApplicantHomelessSw.
	 * @param maxRows int
	 * @param lCaseNum long
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findByCaseNumWithApplicantHomelessSw(int maxRows, long lCaseNum)
	throws TIERSRunTimeException {
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		StringBuffer sb = new StringBuffer();

		try {
			conn = getConnection();

			sb.append("SELECT ");
			sb.append("   EMAIL,");
			sb.append("   WORK_PH_NUM,");
			sb.append("   PH_NUM,");
			sb.append("   OTHER_PH_NUM,");
			sb.append("   decode((select count(1)");
			sb.append("            FROM dc_case_addresses ca");
			sb.append("           where ca.case_num = ?");
			sb.append("             and ca.addr_type_cd = 'PA'");
			sb.append("             and ca.Eff_End_Dt is null),");
			sb.append("          0,");
			sb.append("          'Y',");
			sb.append("          'N') APPLICANT_HOMELESS_SW,");
			sb.append("   OFFICE_NUM ");
			sb.append(" FROM DC_CASES dc");
			sb.append("  Where CASE_NUM = ? WITH UR");

			statement = conn.prepareStatement(sb.toString());
			statement.setLong(1, lCaseNum);
			statement.setLong(2, lCaseNum);

			rs = statement.executeQuery();
			int cnt = 0;

			//BRGUS00277656
			//Added mapping to the EMAIL, WORK_PH_NUM, etc.

			while (cnt++ < maxRows && rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				row.setEmail(rs.getString("EMAIL"));
				row.setWorkPhNum(rs.getString("WORK_PH_NUM"));
				row.setPhNum(rs.getString("PH_NUM"));
				row.setOtherPhNum(rs.getString("OTHER_PH_NUM"));
				row.setApplicantHomelessSw(getCharacterFromResultSet(rs, "APPLICANT_HOMELESS_SW"));
				row.setOfficeNum(rs.getLong("OFFICE_NUM"));
				v.add(row);
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}

	/**
	 * Method findHOHCasesForIndvId.
	 * This method is used to retreive records for a given Individual ID
	 * @param maxRows int
	 * @param indvID long
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findHOHCasesForIndvId(int maxRows, long indvID)
	throws TIERSRunTimeException {
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		try {
			conn = getConnection();
			StringBuffer sb = new StringBuffer();
			sb.append("SELECT dc.CASE_STATUS_CD ,dc.CASE_NUM FROM DC_CASES dc ");
			sb.append("INNER JOIN dc_case_individual dci ON dc.case_num = dci.case_num ");
			sb.append("where dci.indv_id = ? AND dci.ACTIVE_IN_CASE_SW = 'Y' and dci.eff_end_dt is null and dci.Head_Of_Household_Sw = 'Y' WITH UR");
			statement = conn.prepareStatement(sb.toString());
			statement.setLong(1, indvID);
			rs = statement.executeQuery();
			int cnt = 0;
			while (cnt++ < maxRows && rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				row.setCaseStatusCd(rs.getString("CASE_STATUS_CD"));
				row.setCaseNum(rs.getLong("CASE_NUM"));
				v.add(row);
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}

	/**
	 * find out the office num for the legacy case from ies case num
	 * @param caseNum
	 * @return String
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo findOfficeNumByCaseNum(int maxRow, long caseNum) throws TIERSRunTimeException{
		logger.Log(LogLevel.INFO,"Start DcCasesDAO.findOfficeNumByCaseNum...");
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		String offceNum = "";
		try{
			String sql = "SELECT OFFICE_NUM FROM DC_CASES WHERE CASE_NUM=? WITH UR";
			conn = getConnection();
			statement = conn.prepareStatement(sql);
			statement.setLong(1, caseNum);
			rs = statement.executeQuery();
			DcCasesCargo cargo = new DcCasesCargo();
			if(rs.next()){
				offceNum = rs.getString(1).trim();

				cargo.setCaseNum(caseNum);
				cargo.setOfficeNum(Long.parseLong(offceNum));
			}
			logger.Log(LogLevel.INFO,"End DcCasesDAO.findOfficeNumByCaseNum.");

			return cargo;
		}
		catch (SQLException e) {
			logger.Log(LogLevel.INFO,"Exception DcCasesDAO.findOfficeNumByCaseNum.");
			throw new TIERSRunTimeException(e.getMessage(), e);
		}
		finally{
			try {
				if (rs != null){
					rs.close();
				}

				if (statement != null){
					statement.close();
				}

				if (conn != null && getClose()){
					conn.close();
				}
			} catch (SQLException e) {
				logger.Log(LogLevel.INFO,"Exception DcCasesDAO.findOfficeNumByCaseNum.");
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
		}

	}

	/**
	 * find out the Language codes And Phone Number for a given case number
	 * 
	 * @param caseNum
	 * @return String []
	 * @throws TIERSRunTimeException
	 */
	public String[] findCaseByCaseNum(int maxRows, long caseNum) throws TIERSRunTimeException{
		logger.Log(LogLevel.INFO,"Start DcCasesDAO.findCaseByCaseNum");

		String caseInfo[] = {"", "", "", "", "", "", "", ""};
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;

		try{
			String sql = "SELECT LANGUAGE_CD, PH_NUM, SPOKEN_LANGUAGE_TYPE_CD, WORK_PH_NUM, APPLICANT_HOMELESS_SW, REGISTER_TO_VOTE, AUTH_REP_SW, MAIL_LINK_CARD_REQ_IND FROM DC_CASES WHERE CASE_NUM = ? WITH UR";
			conn = getConnection();
			statement = conn.prepareStatement(sql);
			statement.setLong(1, caseNum);
			rs = statement.executeQuery();
			while(rs.next()){
				if(rs.getString("LANGUAGE_CD") != null) {
					caseInfo[0] = rs.getString("LANGUAGE_CD").trim();
				}

				if(rs.getString("PH_NUM") != null) {
					caseInfo[1] = rs.getString("PH_NUM").trim();
				}

				if(rs.getString("SPOKEN_LANGUAGE_TYPE_CD") != null) {
					caseInfo[2] = rs.getString("SPOKEN_LANGUAGE_TYPE_CD").trim();
				}

				if(rs.getString("WORK_PH_NUM") != null) {
					caseInfo[3] = rs.getString("WORK_PH_NUM").trim();
				}

				if(rs.getString("APPLICANT_HOMELESS_SW") != null) {
					caseInfo[4] = rs.getString("APPLICANT_HOMELESS_SW").trim();
				}

				if(rs.getString("REGISTER_TO_VOTE") != null) {
					caseInfo[5] = rs.getString("REGISTER_TO_VOTE").trim();
				}

				if(rs.getString("AUTH_REP_SW") != null) {
					caseInfo[6] = rs.getString("AUTH_REP_SW").trim();
				}
				if(rs.getString("MAIL_LINK_CARD_REQ_IND") != null) {
					caseInfo[7] = rs.getString("MAIL_LINK_CARD_REQ_IND").trim();
				}

			}
		}
		catch (SQLException e) {
			logger.Log(LogLevel.INFO,"Exception DcCasesDAO.findCaseByCaseNum");
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null && getClose()) {
					rs.close();
				}
				if (statement != null) {
					statement.close();
				}
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				logger.Log(LogLevel.INFO,"Exception DcCasesDAO.findCaseByCaseNum");
				throw new TIERSRunTimeException(e.getClass().getName()
						+ " findCaseByCaseNum " + e.getMessage(), e);
			}
		}
		logger.Log(LogLevel.INFO,"End DcCasesDAO.findCaseByCaseNum");
		return caseInfo;
	}

	/**
	 * Added by Interfaces team for Denial and 360L batch process
	 * Method findByCaseNumList, query by Case Num List.
	 * 
	 * @param maxRows
	 * @param caseNumList
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findByCaseNumList(int maxRows, ArrayList caseNumList)
	throws TIERSRunTimeException {

		ArrayList v = new ArrayList();
		ResultSet rs = null;
		PreparedStatement statement = null;
		Connection conn = null;
		try {
			conn = connection;
			if (conn == null) {
				conn = ConnectionManager.getConnection();
			}
			String caseNums = ((String) caseNumList.get(0));
			String array[]=caseNums.split(",");
			String clause = "  WHERE CASE_NUM IN (%s) WITH UR";
			String query=SELECT_SQL + clause;
			if(array!=null && array.length>0){
				StringBuffer caseList=new StringBuffer();
				int counter=0;
				for(String caseNum:array){
					if(counter>=1){
						caseList.append(",");
					}
					caseList.append(caseNum);
					counter++;
					if(counter%20000==0){
						statement = SQLQueryUtil.getInstance().prepareQueryString(conn,query, caseList.toString().split(","));
						rs = statement.executeQuery();
						while (rs.next()) {
							DcCasesCargo row = new DcCasesCargo();
							getRowFromResultSet(row, rs);
							v.add(row);
						}
						caseList=new StringBuffer();
						counter=0;
					}
				}
				/*
				 * For the remaining beyond %20K
				 */
				if(caseList!=null && caseList.length()>0){
					statement = SQLQueryUtil.getInstance().prepareQueryString(conn,query, caseList.toString().split(","));
					rs = statement.executeQuery();
					while (rs.next()) {
						DcCasesCargo row = new DcCasesCargo();
						getRowFromResultSet(row, rs);
						v.add(row);
					}
				}
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new TIERSRunTimeException(e.getMessage(), e);

		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
		}
	}
	
	/**
	 * Added for FS daily Issuance batch process
	 * Method findByCaseNumListForFsIssuance, query by Case Num List and chunk size.
	 * 
	 * @param maxRows
	 * @param caseNumList
	 * @param chunk size
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findByCaseNumForFsIssuance(int maxRows, String caseNums)
	throws TIERSRunTimeException {

		ArrayList v = new ArrayList();
		ResultSet rs = null;
		PreparedStatement statement = null;
		Connection conn = null;
		try {
			conn = connection;
			if (conn == null) {
				conn = ConnectionManager.getConnection();
			}
			String array[]=caseNums.split(",");
			String query = "SELECT  EBT_ACCT_NUM,OFFICE_NUM,LANGUAGE_CD,SPOKEN_LANGUAGE_TYPE_CD,CASE_NUM FROM BRG_OWNER.DC_CASES WHERE CASE_NUM IN (%s) WITH UR";
			if(array!=null && array.length>0){
				statement = SQLQueryUtil.getInstance().prepareQueryString(conn,	query, array);
				rs = statement.executeQuery();
				while (rs.next()) {
					DcCasesCargo row = new DcCasesCargo();
					row.setEbtAcctNum(rs.getLong("EBT_ACCT_NUM"));
					row.setOfficeNum(rs.getLong("OFFICE_NUM"));
					row.setLanguageCd(rs.getString("LANGUAGE_CD"));
					row.setSpokenLanguageTypeCd(rs.getString("SPOKEN_LANGUAGE_TYPE_CD"));
					row.setCaseNum(rs.getLong("CASE_NUM"));
					v.add(row);
				}
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new TIERSRunTimeException(e.getMessage(), e);

		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
		}
	}
	
	/**
	 * Added by Interfaces team for Denial and 360L batch process
	 * Method findByCaseNumList, query by Case Num List.
	 * 
	 * @param maxRows
	 * @param caseNumList
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findByCaseNumListForARSDG(int maxRows, ArrayList caseNumList)
	throws TIERSRunTimeException {

		ArrayList v = new ArrayList();
		ResultSet rs = null;
		PreparedStatement statement = null;
		Connection conn = null;
		try {
			conn = connection;
			if (conn == null) {
				conn = ConnectionManager.getConnection();
			}

			String caseNums = ((String) caseNumList.get(0));
			String clause = "  WHERE CASE_NUM IN (" + caseNums + ") WITH UR";

			statement = conn.prepareStatement(SELECT_SQL + clause);
			rs = statement.executeQuery();

			while (rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				getRowFromResultSet(row, rs);
				v.add(row);
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new TIERSRunTimeException(e.getMessage(), e);

		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
		}
	}
	
	/**
	 * Added by Interfaces team for Denial and 360L batch process
	 * Method findByCaseNumList, query by Case Num List.
	 * 
	 * @param maxRows
	 * @param caseNumList
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findByCaseNumbersList(int maxRows, String caseNumList)
	throws TIERSRunTimeException {

		ArrayList v = new ArrayList();
		ResultSet rs = null;
		PreparedStatement statement = null;
		Connection conn = null;
		try {
			conn = connection;
			if (conn == null) {
				conn = ConnectionManager.getConnection();
			}

			//String caseNums = (caseNu));
			String array[]=caseNumList.split(",");
			String query = SELECT_SQL+"  WHERE CASE_NUM IN (%s) ORDER BY CREATE_DT DESC WITH UR";
			//statement = conn.prepareStatement(SELECT_SQL + clause);
			if(array!=null && array.length>0){
				StringBuffer caseList=new StringBuffer();
				int counter=0;
				for(String caseNum:array){
					if(counter>=1){
						caseList.append(",");
					}
					caseList.append(caseNum);
					counter++;
					if(counter%20000==0){
						statement = SQLQueryUtil.getInstance().prepareQueryString(conn,query, caseList.toString().split(","));
						rs = statement.executeQuery();
						while (rs.next()) {
							DcCasesCargo row = new DcCasesCargo();
							getRowFromResultSet(row, rs);
							v.add(row);
						}
						caseList=new StringBuffer();
						counter=0;
					}
				}
				/*
				 * For the remaining beyond %20K
				 */
				if(caseList!=null && caseList.length()>0){
					statement = SQLQueryUtil.getInstance().prepareQueryString(conn,query, caseList.toString().split(","));
					rs = statement.executeQuery();
					while (rs.next()) {
						DcCasesCargo row = new DcCasesCargo();
						getRowFromResultSet(row, rs);
						v.add(row);
					}
				}
			}
			
			/*rs = statement.executeQuery();

			while (rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				getRowFromResultSet(row, rs);
				v.add(row);
			}*/
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (SQLException se) {
			throw new TIERSRunTimeException(se.getMessage(), se);
		}  
		catch (Exception e) {
			throw new TIERSRunTimeException(e.getMessage(), e);

		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
		}
	}
	
	/**
	 * @param maxRows
	 * @param caseNum
	 * @return
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findByCaseNumbersFilterList(int maxRows, String caseNum)
	throws TIERSRunTimeException {

		ArrayList v = new ArrayList();
		ResultSet rs = null;
		PreparedStatement statement = null;
		Connection conn = null;
		try {
			conn = connection;
			if (conn == null) {
				conn = ConnectionManager.getConnection();
			}

			//String caseNums = (caseNu));
			String array[]=caseNum.split(",");
			String tmpCaseNums[]=null;
			String query =SELECT_SQL_LGCSE_FILTER+ "  WHERE CASE_NUM IN (%s) WITH UR";
			
			if(array!=null && array.length>0){
				if(array.length>20000){	
					StringBuffer caseList=new StringBuffer();
					int counter=0;
					for(String caseNumObj:array){
						if(counter>=1){
							caseList.append(",");
						}
						caseList.append(caseNumObj);
						counter++;
						if(counter%20000==0){
							statement = SQLQueryUtil.getInstance().prepareQueryString(conn,query, caseList.toString().split(","));
							rs = statement.executeQuery();
							while (rs.next()) {
								DcCasesCargo row = new DcCasesCargo();
								row.setCaseNum(rs.getLong("CASE_NUM"));
								row.setAppRecvdDt(rs.getTimestamp("APP_RECVD_DT"));
								row.setOfficeNum(rs.getLong("OFFICE_NUM"));
								v.add(row);
							}
							caseList=new StringBuffer();
							counter=0;
						}
					}
					if(caseList.length()>0)
						tmpCaseNums=caseList.toString().split(",");
				}else{
					tmpCaseNums=array;
				}
				/*
				 * For the remaining beyond %20K
				 */
				if(tmpCaseNums!=null && tmpCaseNums.length>0){
					statement = SQLQueryUtil.getInstance().prepareQueryString(conn,query, tmpCaseNums);
					rs = statement.executeQuery();
					while (rs.next()) {
						DcCasesCargo row = new DcCasesCargo();
						row.setCaseNum(rs.getLong("CASE_NUM"));
						row.setAppRecvdDt(rs.getTimestamp("APP_RECVD_DT"));
						row.setOfficeNum(rs.getLong("OFFICE_NUM"));
						v.add(row);
					}
				}
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (SQLException se) {
			logger.Log(LogLevel.INFO,"ERROR in DcCasesDAO.findByCaseNumbersList method"+se.getNextException());
			logger.Log(LogLevel.ERROR,"ERROR in DcCasesDAO.findByCaseNumbersList method"+se.getNextException());
			throw new TIERSRunTimeException(se.getMessage(), se);
		}  
		catch (Exception e) {
			throw new TIERSRunTimeException(e.getMessage(), e);

		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
		}
	}
	//ILIES-193043 - BI-LGCSE_DLY batch throwing out of memory exception -- START
	/**
	 *Method findHistoryByCaseNumbers.
	 * This method is used to retreive history records from DC_CASES_A for a given case number
	 * @param maxRows int
	 * @param lCaseNum long
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findHistoryByCaseNumbers(int maxRows, String caseNumbers)
	throws TIERSRunTimeException {
			Debug.println(
					"findHistoryByCaseNumbers " + " maxRows= " + maxRows);
			ArrayList v = new ArrayList();
			Connection conn = null;
			PreparedStatement statement = null;
			ResultSet rs = null;
			try {
				conn = getConnection();
				statement =
					conn.prepareStatement(SELECT_SQL_A + "  WHERE CASE_NUM IN ("+caseNumbers+")  WITH UR");
				rs = statement.executeQuery();
				while (rs.next()) {
					DcCasesCargo row = new DcCasesCargo();
					getRowFromResultSet(row, rs);
					v.add(row);
				}
				DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
				v.toArray(colrows);
				return colrows;
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getMessage(), e);
			} finally {
				try {
					if (rs != null) {
						rs.close();
					}
				} catch (SQLException e) {
					throw new TIERSRunTimeException(
							e.getClass().getName() + " " + e.getMessage(), e);
				}
				try {
					if (statement != null) {
						statement.close();
					}
				} catch (SQLException e) {
					throw new TIERSRunTimeException(
							e.getClass().getName() + " " + e.getMessage(), e);
				}
				try {
					if (conn != null && getClose()) {
						conn.close();
					}
				} catch (SQLException e) {
					throw new TIERSRunTimeException(
							e.getClass().getName() + " " + e.getMessage(), e);
				}
			}
		}
	
	
	
	/**
	 * @param maxRows
	 * @param caseNumbers
	 * @return
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findHistoryByCaseNumbersFilter(int maxRows, String caseNumbers)
	throws TIERSRunTimeException {
			Debug.println(
					"findHistoryByCaseNumbers " + " maxRows= " + maxRows);
			ArrayList v = new ArrayList();
			Connection conn = null;
			PreparedStatement statement = null;
			ResultSet rs = null;
			try {
				conn = getConnection();
				String array[]=caseNumbers.split(",");
				String tmpCaseNums[]=null;
				String query=SELECT_SQL_A_LGCSE_FILTER + "  WHERE CASE_NUM IN (%s)  WITH UR";
				if(array!=null && array.length>0){
					if(array.length>20000){	
						StringBuffer caseList=new StringBuffer();
						int counter=0;
						for(String caseNum:array){
							if(counter>=1){
								caseList.append(",");
							}
							caseList.append(caseNum);
							counter++;
							if(counter%20000==0){
								statement = SQLQueryUtil.getInstance().prepareQueryString(conn,query, caseList.toString().split(","));
								rs = statement.executeQuery();
								while (rs.next()) {
									DcCasesCargo row = new DcCasesCargo();
									row.setCaseNum(rs.getLong("CASE_NUM"));
									row.setOfficeNum(rs.getLong("OFFICE_NUM"));
									v.add(row);
								}
								caseList=new StringBuffer();
								counter=0;
							}
						}
						if(caseList.length()>0)
							tmpCaseNums=caseList.toString().split(",");
					}else{
						tmpCaseNums=array;
					}
					/*
					 * For the remaining beyond %20K
					 */
					if(tmpCaseNums!=null && tmpCaseNums.length>0){
						statement = SQLQueryUtil.getInstance().prepareQueryString(conn,query, tmpCaseNums);
						rs = statement.executeQuery();
						while (rs.next()) {
							DcCasesCargo row = new DcCasesCargo();
							row.setCaseNum(rs.getLong("CASE_NUM"));
							row.setOfficeNum(rs.getLong("OFFICE_NUM"));
							v.add(row);
						}
					}
				}
				
				/*statement =conn.prepareStatement(SELECT_SQL_A_LGCSE_FILTER + "  WHERE CASE_NUM IN (%s)  WITH UR");
				rs = statement.executeQuery();
				while (rs.next()) {
					DcCasesCargo row = new DcCasesCargo();
					row.setCaseNum(rs.getLong("CASE_NUM"));
					row.setOfficeNum(rs.getLong("OFFICE_NUM"));
					v.add(row);
				}*/
				DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
				v.toArray(colrows);
				return colrows;
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getMessage(), e);
			} finally {
				try {
					if (rs != null) {
						rs.close();
					}
				} catch (SQLException e) {
					throw new TIERSRunTimeException(
							e.getClass().getName() + " " + e.getMessage(), e);
				}
				try {
					if (statement != null) {
						statement.close();
					}
				} catch (SQLException e) {
					throw new TIERSRunTimeException(
							e.getClass().getName() + " " + e.getMessage(), e);
				}
				try {
					if (conn != null && getClose()) {
						conn.close();
					}
				} catch (SQLException e) {
					throw new TIERSRunTimeException(
							e.getClass().getName() + " " + e.getMessage(), e);
				}
			}
		}
	
	//ILIES-193043 - BI-LGCSE_DLY batch throwing out of memory exception -- END
	/**
	 *Method findHistoryByCaseNum.
	 * This method is used to retreive history records from DC_CASES_A for a given case number
	 * @param maxRows int
	 * @param lCaseNum long
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findHistoryByCaseNum(int maxRows, DcCasesCargo cargo)
	throws TIERSRunTimeException {
			Debug.println(
					"findHistoryByCaseNum " + " maxRows= " + maxRows + " cargo=" + cargo);
			ArrayList v = new ArrayList();
			Connection conn = null;
			PreparedStatement statement = null;
			ResultSet rs = null;
			try {
				conn = getConnection();
				statement =
					conn.prepareStatement(SELECT_SQL_A + "  WHERE (CASE_NUM = ?  ) WITH UR");
				statement.setLong(1, cargo.getCaseNum());
				rs = statement.executeQuery();
				int cnt = 0;
				while (cnt++ < maxRows && rs.next()) {
					DcCasesCargo row = new DcCasesCargo();
					getRowFromResultSet(row, rs);
					v.add(row);
				}
				DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
				v.toArray(colrows);
				return colrows;
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getMessage(), e);
			} finally {
				try {
					if (rs != null) {
						rs.close();
					}
				} catch (SQLException e) {
					throw new TIERSRunTimeException(
							e.getClass().getName() + " " + e.getMessage(), e);
				}
				try {
					if (statement != null) {
						statement.close();
					}
				} catch (SQLException e) {
					throw new TIERSRunTimeException(
							e.getClass().getName() + " " + e.getMessage(), e);
				}
				try {
					if (conn != null && getClose()) {
						conn.close();
					}
				} catch (SQLException e) {
					throw new TIERSRunTimeException(
							e.getClass().getName() + " " + e.getMessage(), e);
				}
			}
		}
	
	/**	 	 
	 * @param maxRows
	 * @param caseNumList
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findByCaseNumbersPendIntakeList(int maxRows, ArrayList caseNumList, DcCasesCargo cargo)
	throws TIERSRunTimeException {

		ArrayList v = new ArrayList();
		ResultSet rs = null;
		PreparedStatement statement = null;
		Connection conn = null;
		String caseNumberString ="";
		try {
			if(caseNumList!=null && caseNumList.size()>0){
				caseNumberString = caseNumList.toString();
				caseNumberString = caseNumberString.replace('[','(');
				caseNumberString = caseNumberString.replace(']',')');
			}
			conn = connection;
			if (conn == null) {
				conn = ConnectionManager.getConnection();
			}
			StringBuffer whereClause = new StringBuffer();
			whereClause.append("  WHERE CASE_STATUS_CD = ? AND CASE_MODE_CD = ? ");					
			if(caseNumList!=null && caseNumList.size()>0){
				whereClause.append(" AND CASE_NUM IN " + caseNumberString + " ");
			}
			whereClause.append(" ORDER BY BRG_OWNER.DC_CASES.OFFICE_NUM WITH UR ");
			statement = conn.prepareStatement(SELECT_SQL + whereClause.toString());
			statement.setString(1, cargo.getCaseStatusCd());
			statement.setString(2, cargo.getCaseModeCd());
			rs = statement.executeQuery();

			while (rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				getRowFromResultSet(row, rs);
				v.add(row);
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new TIERSRunTimeException(e.getMessage(), e);

		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
		}
	}
	
	/**
	 * Method findCMBData.
	 * 
	 * @param maxRows
	 * @param DcCasesCargo
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findCMBData(int maxRows,
			DcCasesCargo cargo) throws TIERSRunTimeException {
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Debug.println("findCMBData " + " maxRows= " + maxRows + " cargo="
				+ cargo);
		ArrayList v = new ArrayList();
		try {
			conn = getConnection();
			statement = conn
					.prepareStatement(SELECT_SQL
							+ " WHERE ( CASE_NUM = ?)"
							+ " WITH UR");
			statement.setLong(1, cargo.getCaseNum());
			rs = statement.executeQuery();
			int cnt = 0;
			while (cnt++ < maxRows && rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				getRowFromResultSet(row, rs);
				v.add(row);
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null && getClose())
					rs.close();
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (statement != null)
					closeStatement("findByCaseEdgStatusCd", statement, maxRows,
							v.size());

			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (conn != null && getClose())
					conn.close();
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
		}
	}
	
	
	/**
	 * This method get the latest record from DC_CASES_A
	 * 
	 * @param maxRows
	 *            int
	 * @param DcCasesCargo
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findOldByCaseNumber(int maxRows, DcCasesCargo cargo)
			throws TIERSRunTimeException {
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		StringBuffer sb = null;
		long lCaseNum = cargo.getCaseNum();

		try {
			String localSQL = SELECT_SQL_A
					+ " WHERE CASE_NUM= ? ORDER BY CREATE_DT DESC FETCH FIRST 1 ROW ONLY";

			conn = getConnection();
			statement = conn.prepareStatement(localSQL);
			statement.setLong(1, lCaseNum);
			rs = statement.executeQuery();

			int cnt = 0;

			while (cnt++ < maxRows && rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				getAuditRowFromResultSet(row, rs);
				v.add(row);
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
		}
	}
	
	/**
	 * This method gets the latest record from DC_CASES_A WITH UR
	 * 
	 * @param maxRows int          
	 * @param DcCasesCargo
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findLatestAuditByCaseNumber(int maxRows, DcCasesCargo cargo)
			throws TIERSRunTimeException {
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		StringBuffer sb = null;
		long lCaseNum = cargo.getCaseNum();

		try {
			String localSQL = SELECT_SQL_A
					+ " WHERE CASE_NUM= ? ORDER BY CREATE_DT DESC FETCH FIRST 1 ROW ONLY WITH UR";

			conn = getConnection();
			statement = conn.prepareStatement(localSQL);
			statement.setLong(1, lCaseNum);
			rs = statement.executeQuery();

			int cnt = 0;

			while (cnt++ < maxRows && rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				getAuditRowFromResultSet(row, rs);
				v.add(row);
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
		}
	}
	
	//ILIES-157921 - ravrajendran - Authorized Representative File - Start	 
	/**
	 * This method get the Next EBT Account Number from DC_CASES
	 * 
	 * @param maxRows
	 *            int
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findNextEBTNumber(int maxRows,DcCasesCargo dcCasesCargo)
			throws TIERSRunTimeException {
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		
		try {
			String querySQL = "SELECT BI_EBT_ACCT_NUM_SEQ.nextval EBT_ACCT_NUM FROM DUAL";
			conn = getConnection();
			statement = conn.prepareStatement(querySQL);
			rs = statement.executeQuery();

			int cnt = 0;

			while (cnt++ < maxRows && rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				row.setEbtAcctNum(rs.getLong("EBT_ACCT_NUM"));
				v.add(row);
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (Exception e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
		}
	}
	//ILIES-157921 - ravrajendran - Authorized Representative File - END
	
	//ILIES-152621
	public DcCasesCargo[] findByEBTNum(int maxRows, DcCasesCargo dcCasesCargo)
	throws TIERSRunTimeException {
		Debug.println(
				"findByEBTNum " + " maxRows= " + maxRows + " String=" + dcCasesCargo.getEbtAcctNum());
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		try {
			conn = getConnection();
			statement =
				conn.prepareStatement(SELECT_SQL + "  WHERE EBT_ACCT_NUM = ? WITH UR");
			statement.setLong(1, dcCasesCargo.getEbtAcctNum());
			rs = statement.executeQuery();
			int cnt = 0;
			//          while (rs.next() && cnt++ < maxRows) {
			//          BRGUS00102765 Ã¢â‚¬â€œ jampanip Ã¢â‚¬â€œ As Per QA Review Prefetch logic Changes
			while (cnt++ < maxRows && rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				getRowFromResultSet(row, rs);
				v.add(row);
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}
	
	public DcCasesCargo[] findCaseNumsByEBTNums(int maxRows, String ebtAcctNums)
	throws TIERSRunTimeException {
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		try {
			conn = getConnection();
			statement =	conn.prepareStatement(SELECT_SQL + "  WHERE EBT_ACCT_NUM IN (" + ebtAcctNums + ") WITH UR");
			rs = statement.executeQuery();
			int cnt = 0;
			while (rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				getRowFromResultSet(row, rs);
				v.add(row);
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}
	
	
	// START ILIES-163160
	/**
	 * This method will Retrieve TEMP Payees that are 90 days old
	 * @param maxRows
	 * @param dcCasesCargo
	 * @return
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findByTempPayee90DaysOld(int maxRows, DcCasesCargo dcCasesCargo) throws TIERSRunTimeException {
		
		Debug.println("findByTempPayee90DaysOld " + " maxRows= " + maxRows);
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		try {
			conn = getConnection();
			String sql = " SELECT DC.CASE_NUM, DC.OFFICE_NUM FROM DC_CASES DC JOIN DC_PAYEE DP ON DP.CASE_NUM = DC.CASE_NUM WHERE DC.CASE_STATUS_CD = 'AP' AND DP.PAYEE_TYPE_CD = 'TP' AND" +
							" {fn TIMESTAMPDIFF(SQL_TSI_DAY, CURRENT_TIMESTAMP , DP.CREATE_DT)} >= 90 WITH UR";
			statement = conn.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
			rs = statement.executeQuery();
			int cnt = 0;
			while (cnt++ < maxRows && rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				row.setCaseNum(rs.getLong("CASE_NUM"));
				row.setOfficeNum(rs.getLong("OFFICE_NUM"));
				v.add(row);
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null && getClose()) {
					rs.close();
				}
				if (statement != null) {
					closeStatement("findByTempPayee90DaysOld", statement, maxRows, v.size());
				}
				if (conn != null && getClose()){
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}
	// END ILIES-163160
	
	/**
	 * find out the office num for the legacy case from ies case num
	 * @param cargo
	 * @return DcCasesCargo
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo findOfficeNumberByCaseNum(int maxRow, DcCasesCargo cargo) throws TIERSRunTimeException{
		logger.Log(LogLevel.INFO,"Start DcCasesDAO.findOfficeNumByCaseNum...");
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		String offceNum = "";
		try{
			String sql = "SELECT OFFICE_NUM FROM DC_CASES WHERE CASE_NUM = ? WITH UR";
			conn = getConnection();
			statement = conn.prepareStatement(sql);
			statement.setLong(1, cargo.getCaseNum());
			rs = statement.executeQuery();
			DcCasesCargo resultCargo = new DcCasesCargo();
			if(rs.next()){
				offceNum = rs.getString(1).trim();

				resultCargo.setOfficeNum(Long.parseLong(offceNum));
			}
			logger.Log(LogLevel.INFO,"End DcCasesDAO.findOfficeNumberByCaseNum.");

			return resultCargo;
		}
		catch (SQLException e) {
			logger.Log(LogLevel.INFO,"Exception DcCasesDAO.findOfficeNumberByCaseNum.");
			throw new TIERSRunTimeException(e.getMessage(), e);
		}
		finally{
			try {
				if (rs != null){
					rs.close();
				}

				if (statement != null){
					statement.close();
				}

				if (conn != null && getClose()){
					conn.close();
				}
			} catch (SQLException e) {
				logger.Log(LogLevel.INFO,"Exception DcCasesDAO.findOfficeNumberByCaseNum.");
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
		}

	}

	/**
	 * This method is used to retrieve Cancelled Cases
	 * 
	 * @param int maxRows
	 * @param String whereClause
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findByCancelledCases(int maxRows, String whereClause) throws TIERSRunTimeException
	{
		String finderName = "findByCancelledCases";
		PreparedStatement statement = null;
		Connection conn = null;
		ResultSet rs = null;
		ArrayList v = new ArrayList();

		try {
			conn = getConnection();
			String sqlQuery = SELECT_SQL + " WHERE (" + whereClause + ") AND CASE_STATUS_CD = 'TN' WITH UR";
			
			statement = conn.prepareStatement(sqlQuery,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
			
			rs = statement.executeQuery();

			DcCasesCargo colrows[] = null;
			
			int cnt = 0;
			while(cnt++ < maxRows && rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				getRowFromResultSet(row, rs);
				v.add(row);
			}

			colrows = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			
			logger.Log(LogLevel.INFO,"In "+CLASS_NAME+"."+finderName+" method, after query.");
			
			return colrows;
		}
		catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		}
		finally {
			try {
				if (rs != null && getClose()) rs.close();
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null) {
					closeStatement(finderName, statement, maxRows, v.size());
					logger.Log(LogLevel.INFO," called close statement for " + finderName);
				} 
			}
			catch (SQLException e) {
				logger.Log(LogLevel.INFO," exception in close statement for " + finderName);
				throw new TIERSRunTimeException(e.getClass().getName() + " " + finderName + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) conn.close();
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + finderName + " " + e.getMessage(), e);
			}
		}
	}	

	/**
	 * find out the office num for the legacy case from ies case num
	 * @param caseNum
	 * @return String
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findOfficeNumberByCaseNumber(int maxRows, String caseList) throws TIERSRunTimeException
	{
		String finderName = "findOfficeNumberByCaseNumber";
		logger.Log(LogLevel.INFO,"In " + CLASS_NAME + "."+finderName+" method, before query.");
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		ArrayList v = new ArrayList();
		
		try{			
			conn = getConnection();
			String sqlQuery = "SELECT DISTINCT CASE_NUM, OFFICE_NUM FROM DC_CASES WHERE "+ caseList +" WITH UR";
			
			statement = conn.prepareStatement(sqlQuery,ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
			
			rs = statement.executeQuery();

			DcCasesCargo colrows[] = null;
			
			int cnt = 0;
			while(cnt++ < maxRows && rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				row.setCaseNum(rs.getLong("CASE_NUM"));
				row.setOfficeNum(rs.getLong("OFFICE_NUM"));
				v.add(row);
			}

			colrows = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			
			logger.Log(LogLevel.INFO,"In "+CLASS_NAME+"."+finderName+" method, after query.");
			
			return colrows;
		}
		catch (SQLException e) {
			throw new TIERSRunTimeException("SQLException1 in DcCasesDAO.findOfficeNumberByCaseNumber: "+e.getMessage(), e);
		}
		finally{
			try {
				if (rs != null && getClose()) rs.close();
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException("SQLException2 in DcCasesDAO.findOfficeNumberByCaseNumber: "+e.getMessage(), e);
			}
			try {
				if (statement != null) {
					closeStatement(finderName, statement, maxRows, v.size());
					logger.Log(LogLevel.INFO," called close statement for " + finderName);
				} 
			}
			catch (SQLException e) {
				logger.Log(LogLevel.INFO," exception in close statement for " + finderName);
				throw new TIERSRunTimeException("SQLException3 in DcCasesDAO.findOfficeNumberByCaseNumber: "+e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) conn.close();
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException("SQLException4 in DcCasesDAO.findOfficeNumberByCaseNumber: "+e.getMessage(), e);
			}
		}

	}
	
	/**
	 * find CountNum To All CaseNum
	 * @param cargo
	 * @return DcCasesCargo
	 * @throws TIERSRunTimeException
	 */
	public Long findCountNumToAllCaseNum(int maxRow) throws TIERSRunTimeException{
		logger.Log(LogLevel.INFO,"Start DcCasesDAO.findCountNumToAllCaseNum");
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		Long count = null;
		try{
			String sql = "SELECT COUNT(*) COUNT FROM DC_CASES WITH UR";
			conn = getConnection();
			statement = conn.prepareStatement(sql);
			rs = statement.executeQuery();
			if(rs.next()){
				count = new Long(rs.getString("COUNT"));
			}
			logger.Log(LogLevel.INFO,"End DcCasesDAO.findCountNumToAllCaseNum");

			return count;
		} catch (SQLException e) {
			logger.Log(LogLevel.INFO,"Exception DcCasesDAO.findCountNumToAllCaseNum.");
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally{
			try {
				if (rs != null){
					rs.close();
				}
				if (statement != null){
					statement.close();
				}
				if (conn != null && getClose()){
					conn.close();
				}
			} catch (SQLException e) {
				logger.Log(LogLevel.INFO,"Exception DcCasesDAO.findCountNumToAllCaseNum.");
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}