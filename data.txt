public void storeHouseHoldMembersQuestions(FwTransaction txnBean) throws javax.ejb.EJBException {

		try 
		{
			//declarations
			boolean dablFlag = false;
			int numQuestions = 9;
			APP_IN_PRFL_Collection pageCollAppInPrflColl = null;
			APP_INDV_Collection appIndvColl = null;
			NO_ONE_Collection noOneColl = null;
			FwMessageList errorMessageList = null;
			String indivSeqNum = null;
			int indivSeqNumInt = 0;
			APP_IN_PRFL_Cargo sesAppInPrflCargo = null;
			APP_IN_PRFL_Cargo pageCollAppInPrflCargo = null;
			//Modified by Nancy Jain for ILIES-282238 : Sonar Fix-Changed variable name.
			APP_TAX_RLT_Collection pageRltColl = null;
			APP_HSHL_RLT_Collection relationColl = null;
			APP_TAX_RLT_Collection jointlyFilingColl = null;
			AFBHouseHoldMemberQuestionsBO abhhqObj = new AFBHouseHoldMemberQuestionsBO();
			int yeohCount=0;		
			APP_IN_PRFL_Cargo[] clonedPrflCollArray = null;
			APP_TAX_RLT_Cargo[] clonedTaxCollArray = null;
			APP_INDV_Cargo[] clonedappIndvCollArray = null;
			
			APP_IN_PRFL_Collection prflColl = new APP_IN_PRFL_Collection();
			APP_TAX_RLT_Collection taxColl = new APP_TAX_RLT_Collection();
			
			APP_INDV_Collection appColl= new APP_INDV_Collection();
			ABRegistrationBO regBo = new ABRegistrationBO();
		
			//define a short array for the questions
    		// Added DRUG_TRTMNT_PROG and PAROLE_PROB_VIOL fields for ILIES-129516
			short[] questionsArray = new short[numQuestions];
			questionsArray[0] = IApplicationManager.DISABLED_PERSON;			//blindDisabled
			questionsArray[1] = IApplicationManager.DRUG_FELON;					//drugFelonies
			questionsArray[2] = IApplicationManager.DRUG_TRTMNT_PROG;			//drugTreatmentProgram
			questionsArray[3] = IApplicationManager.PAROLE_PROB_VIOL;			//ParoleProbationViolation
			questionsArray[4] = IApplicationManager.RECEIVE_FS_IN_OTHER_STATE;	//otherFoodStamp
			questionsArray[5] = IApplicationManager.SSI_BENEFIT_RESP;			//ssiBenefits
			questionsArray[6] = IApplicationManager.CASH_BENEFIT_RESP;			//cashBenefits
			questionsArray[7] = IApplicationManager.AGING_SERVICE_SW;
			questionsArray[8] = IApplicationManager.FOSTER_CARE_SW;
			
			//page scheduling indicators
			int[] dirtyIndicator = {IApplicationManager.NOT_DIRTY};
			
			//Create string array for persist
			String[] indivResponseArray = null;

			//Create INDIV_RESP_MAP for persist
			Map indivResponseMap = new HashMap();
			
			//get variables from session and page collection
			Map session = txnBean.getSession();
			Map pageCollection = txnBean.getPageCollection();
			APP_INDV_Cargo appIndvCargo = null;
			APP_INDV_Cargo appIndvBeforeCargo = null;
			Map request = txnBean.getRequest();
			request.put(FwConstants.US_ASCII, true);
			int[] driverArray = (int[]) session.get(FwConstants.AFB_DRIVER);
			PeopleHandler peopleHandler = (PeopleHandler)session.get(AppConstants.INDIV_MASTER_HANDLER);
			
			//get current page status
			int pageStatus = driverManager.getAFBStatus(
				FwConstants.AFB_DRIVER,
				(String) request.get(FwConstants.CURRENT_PAGE_ID),
				driverArray);
			
			//get the appNumber from session
			String appNumber = (String)session.get(AppConstants.APP_NUMBER);

			//Read in APP_IN_PROFILE from session
			APP_IN_PRFL_Collection sesAppInPrflColl =
			(APP_IN_PRFL_Collection) session.get(
				AppConstants.APP_IN_PRFL_MASTER);		

			//get size of the collection
			int sesAppPrflCollSize = sesAppInPrflColl.size();
			
			//Read in APP_IN_PROFILE from page coll.
			pageCollAppInPrflColl = (APP_IN_PRFL_Collection) pageCollection.get("APP_IN_PRFL_Collection");	
			appIndvColl =(APP_INDV_Collection)pageCollection.get("APP_INDV_Collection"); 
			INDIVIDUAL_Custom_Collection indivColl = peopleHandler.getAllIndividuals();
			
			if(appIndvColl==null)
				appIndvColl = new APP_INDV_Collection();
			if(indivColl !=null && !indivColl.isEmpty()){
				for(int i=0 ; i< indivColl.size();i++){
					INDIVIDUAL_Custom_Cargo indivCargo=indivColl.getResult(i);
					String indvSeqNumber= indivCargo.getIndv_seq_num();
					appIndvCargo = new APP_INDV_Cargo();
					
					Map criteriaMap = null;
					FwDataCriteria[] criteria = null;
					APP_INDV_Collection appIndvCollection = new APP_INDV_Collection();
					criteriaMap = new HashMap();
					criteria = new FwDataCriteria[1];
					criteria[0] = new FwDataCriteria();
					criteria[0].setColumn_name(AppConstants.APP_NUM);
					criteria[0].setColumn_value(appNumber);
					criteria[0].setData_type(FwConstants.LONG);
					criteriaMap.put(FwConstants.CRITERIA, criteria);
					APP_INDV_Cargo[] dbAppIndvCargos = (APP_INDV_Cargo[]) appIndvCollection.select(FwConstants.DAO, criteriaMap);
					for(APP_INDV_Cargo dbAppIndvCargo:dbAppIndvCargos){
						if(dbAppIndvCargo.getIndv_seq_num().equalsIgnoreCase(indvSeqNumber)){
							appIndvCargo = dbAppIndvCargo;
							break;
						}
					}
					
					String val=(String) request.get("taxfilesw_"+indvSeqNumber);
					appIndvCargo.setApp_num(appNumber);
					appIndvCargo.setFile_taxes_sw(val);
					appIndvCargo.setBrth_dt(indivCargo.getBrth_dt());
					appIndvCargo.setFst_nam(indivCargo.getFst_nam());
					appIndvCargo.setLast_nam(indivCargo.getLast_nam());
					appIndvCargo.setLive_arng_typ(indivCargo.getLive_arng_typ());
					appIndvCargo.setRec_cplt_ind("1");
					appIndvCargo.setRlvn_ind(indivCargo.getRlvn_ind());
					appIndvCargo.setSex_ind(indivCargo.getSex_ind());
					appIndvCargo.setSs_num_app_dt(AppConstants.HIGH_TIMESTAMP);
					peopleHandler.updateIndividual(appIndvCargo);
					appIndvCargo.setIndv_seq_num(indvSeqNumber);
					appIndvColl.addCargo(appIndvCargo);
				}
			}
				
				
			APP_TAX_RLT_Collection taxIndvColl = (APP_TAX_RLT_Collection) pageCollection.get(AppConstants.APP_TAX_RLT_Collection);	
			//get the beforecollection map
			Map beforeCollection = (Map)session.get(FwConstants.BEFORE_COLLECTION);

			//get the NoOneChecked map from the beforecollection
			Map noOneCheckedMap = (Map)beforeCollection.get(AppConstants.NO_ONE_CHECKED_MAP);

			//Get the NO ONE Collection
			noOneColl = (NO_ONE_Collection)pageCollection.get("NO_ONE_Collection");

			pageRltColl = (APP_TAX_RLT_Collection) pageCollection.get(AppConstants.APP_TAX_RLT_Collection);
			APP_TAX_RLT_Collection appJointlyFilingTax = (APP_TAX_RLT_Collection) session.get("APP_JOINTLY_FILING_TAX");
			//check for missing cargos for people that don't have any questions answered, 
			//and populate with empty cargos
			applicationManager.preparePageColl(pageCollAppInPrflColl,sesAppInPrflColl,questionsArray);

			// Defaulting number of components displayed to false
    		// Modified for ILIES-129516
			boolean[] componentsDisplayed = new boolean[]{false, false, false, false, false, false, false,false, false};
			componentsDisplayed = abhhqObj.getComponentsDisplayed(beforeCollection, componentsDisplayed);			
			//RUN VALIDATIONS

			String felonyId = (String)request.get("felonyId");
			String drugId = (String)request.get("drugId");
			String blindId = (String)request.get("blindId");
			String outOfStateId = (String)request.get("outOfStateId");
			String deptAging = (String)request.get("getpostYesNo_deptAging");
			String fosterCare = (String)request.get("getpostYesNo_fosterCare");
			abhhqObj.preserveTaxFormValues(request, taxIndvColl, appIndvColl);
			INDIVIDUAL_Custom_Collection indvAllColl = peopleHandler.sortIndividuals(peopleHandler.getInAndOutOfHomeIndividuals(appNumber));
			int indvAllCollSize = indvAllColl.size();
			String[] indvAllSeq = new String[indvAllCollSize]; 
			for(int i=0;i<indvAllCollSize;i++){ 
				indvAllSeq[i] = indvAllColl.getResult(i).getIndv_seq_num();
			}
			ABHouseholdMembersSummaryBO householdMembersSummaryBO = new ABHouseholdMembersSummaryBO();
			APP_HSHL_RLT_Collection appHshlRltCollection = householdMembersSummaryBO.loadHouseholdRelationshipsSummary(appNumber, indvAllSeq);
			appHshlRltCollection = this.sortRelationshipCargoOnIndvSeq(appHshlRltCollection);
			errorMessageList = abhhqObj.validateABHHQ(appHshlRltCollection,appIndvColl,pageCollAppInPrflColl, noOneColl, noOneCheckedMap, componentsDisplayed,felonyId,drugId,blindId,outOfStateId,peopleHandler, taxIndvColl, deptAging, fosterCare);
			pageCollection.put("FELONY_ID", felonyId);
			pageCollection.put("DRUG_ID", drugId);
			pageCollection.put("BLIND_ID", blindId);
			pageCollection.put("OUT_OF_STATE_ID", outOfStateId);
			pageCollection.put("DEPT_AGING", deptAging);
			pageCollection.put("FOSTER_CARE",fosterCare);
			
			//Added by Nancy Jain for ILIES-282238 changes : Cloned the collections.
			int seqNum = 0;
			int srcSeqNum = 0;
			clonedPrflCollArray = pageCollAppInPrflColl.cloneResults();
			if(clonedPrflCollArray != null && clonedPrflCollArray.length > 0){
				for(int i=1; i<= clonedPrflCollArray.length; i++){
					for(APP_IN_PRFL_Cargo cargo : clonedPrflCollArray){
						if(cargo.getIndv_seq_num() != null  && !cargo.getIndv_seq_num().isEmpty())
							seqNum = Integer.valueOf(cargo.getIndv_seq_num());
						if(seqNum == i){
							if(felonyId != null && "N".equals(felonyId)){
								cargo.setDrug_feln_resp(felonyId);
							}else if("Y".equals(felonyId)){
								//set this cargo field just to save the value that we are getting from request for radio buttons, so we can compare it later.
								cargo.setSu_cst_ases_resp(felonyId);
							}
							if(drugId != null && "N".equals(drugId)){
								cargo.setDrug_trtmnt_prg_resp(drugId);
							}else if("Y".equals(drugId)){
								cargo.setSu_cst_coal_resp(drugId);
							}
							if(blindId != null && "N".equals(blindId)){
								cargo.setDabl_resp(blindId);
							}else if("Y".equals(blindId)){
								cargo.setSu_cst_elec_resp(blindId);
							}else if(blindId != null && "K".equals(blindId)){
								cargo.setDabl_resp(blindId);
							}
							if(outOfStateId != null && "N".equals(outOfStateId)){
								cargo.setRcv_fs_oth_st_resp(outOfStateId);
							} else if("Y".equals(outOfStateId)){
								cargo.setSu_cst_fuel_resp(outOfStateId);
							}
							if(deptAging != null && "N".equals(deptAging)){
								cargo.setAging_sw(deptAging);
							}else if("Y".equals(deptAging)){
								cargo.setSu_cst_garbage_resp(deptAging);
							}
							if(fosterCare != null && "N".equals(fosterCare)){
								cargo.setFormer_foster_sw(fosterCare);
							}else if("Y".equals(fosterCare)){
								cargo.setSu_cst_gas_resp(fosterCare);
							}
							
							prflColl.add(cargo);
							break;
						}
					}
				}
			}
			
			//clonedappIndvCollArray=appIndvColl.cloneResults();
			clonedappIndvCollArray = appIndvColl.cloneResults();
			if(clonedappIndvCollArray != null && clonedappIndvCollArray.length > 0){
				for(int i=1; i<= clonedappIndvCollArray.length; i++){
					for(APP_INDV_Cargo cargo : clonedappIndvCollArray){
						if(cargo.getIndv_seq_num() != null  && !cargo.getIndv_seq_num().isEmpty())
							seqNum = Integer.valueOf(cargo.getIndv_seq_num());
						if(seqNum == i){
							appColl.add(cargo);
							break;
						}
					}
				}
			}
			
			clonedTaxCollArray = taxIndvColl.cloneResults();
			if(clonedTaxCollArray != null && clonedTaxCollArray.length > 0){
				for(int i=1; i<= clonedTaxCollArray.length; i++){
					for(APP_TAX_RLT_Cargo cargo : clonedTaxCollArray){
						if(cargo.getSrc_indv_seq_num() != null  && !cargo.getSrc_indv_seq_num().isEmpty())
							srcSeqNum = Integer.valueOf(cargo.getSrc_indv_seq_num());
						if(srcSeqNum == i){
							taxColl.add(cargo);
							break;
						}
					}
				}
			}
			//ILIES-282238 changes end here.
			
			if(errorMessageList != null && abhhqObj.hasMessages())
			{
					//Translate Profile Response After Validation
					applicationManager.translateProfileResponseAfterValidation(pageCollAppInPrflColl, 
							sesAppInPrflColl, questionsArray);
					List compList = new ArrayList();
					INDIVIDUAL_Custom_Collection fosterIndvColl ;				
					request.put(FwConstants.MESSAGE_LIST, errorMessageList); 
					
					//load maps into page collection
					createAndLoadABHHQResponseMapsToPageCollection(pageCollAppInPrflColl, pageCollection, peopleHandler, false, 0);	
					fosterIndvColl = PeopleRulesBO.getIndividualsAgeGreaterOrEqualTo18AndLessOrEqualTo25(indivColl);							
					pageCollection.put(AppConstants.NO_ONE_CHECKED_MAP, noOneCheckedMap);
					pageCollection.put("APP_IN_PRFL_Collection", pageCollAppInPrflColl);
					
					//Modified by Nancy Jain for ILIES-282238 : Sonar Fix.
					pageCollection.put(AppConstants.PEOPLE_56, beforeCollection.get(AppConstants.PEOPLE_56));
					pageCollection.put(AppConstants.PEOPLE_58, beforeCollection.get(AppConstants.PEOPLE_58));
		    		// Added for ILIES-129516
					pageCollection.put(AppConstants.PEOPLE_5218, beforeCollection.get(AppConstants.PEOPLE_5218));
					pageCollection.put(AppConstants.PEOPLE_5219, beforeCollection.get(AppConstants.PEOPLE_5219));
					pageCollection.put(AppConstants.PEOPLE_41, beforeCollection.get(AppConstants.PEOPLE_41));
					//Added by Uma for SSExpansion -- SSI Benefits and Clash benefits
					pageCollection.put("PEOPLE_418", beforeCollection.get("PEOPLE_418"));
					pageCollection.put("PEOPLE_419", beforeCollection.get("PEOPLE_419"));
					pageCollection.put(AppConstants.PEOPLE_421, beforeCollection.get(AppConstants.PEOPLE_421));
					pageCollection.put(AppConstants.PEOPLE_43, beforeCollection.get(AppConstants.PEOPLE_43));
					txnBean.setPageCollection(pageCollection);
					pageCollection.put(FwConstants.PAGE_COMPONENT_LIST, beforeCollection.get(FwConstants.PAGE_COMPONENT_LIST));
					if(fosterIndvColl == null || fosterIndvColl.isEmpty()){
						compList = (List)pageCollection.get(FwConstants.PAGE_COMPONENT_LIST);
						if(compList.contains("43")){
							compList.remove("43");
							pageCollection.put(FwConstants.PAGE_COMPONENT_LIST, compList);
						}
						
					}
					pageCollection.put(AppConstants.ALL_APP_INDIVS_TAX, beforeCollection.get(AppConstants.ALL_APP_INDIVS_TAX));
					pageCollection.put("APP_TAX_RLT_INDIVS", beforeCollection.get("APP_TAX_RLT_INDIVS"));
					pageCollection.put("APP_INDV_Collection", appIndvColl);
				    pageCollection.put("APP_TAX_RLT_Collection", taxIndvColl);
				    if(appJointlyFilingTax != null) {
				        pageCollection.put("APP_JOINTLY_FILING_TAX", appJointlyFilingTax);
				    }

					
					ABRelevanceBO relevanceBO = new ABRelevanceBO();
	 				APP_HSHL_RLT_Collection houseHoldCollection;
	 				houseHoldCollection=relevanceBO.loadHSHLRLT((String)session.get(AppConstants.APP_NUMBER));
	 				String language = null;	
	 				List<String> houseHold=new ArrayList<String>();
	 				List<String> houseHoldInverse=new ArrayList<String>();	
	 			 	Map httpSessionMap = (Map)session.get(FwConstants.HTTP_SESSION);
	 				language = (String)httpSessionMap.get(AppConstants.LANGUAGE);
	 			    IReferenceTableManager iref = ReferenceTableManager.getInstance();
	 				
	 			   for(APP_HSHL_RLT_Cargo cargo:houseHoldCollection.getResults()){								
						 String desc = iref.getColumnValue("IREL",137,cargo.getRlt_cd(),language);
						 houseHold.add("\""+cargo.getSrc_indv_seq_num()+cargo.getRef_indv_seq_num()+"\":\""+desc+"\"");		
					     request.put("DISPLAY_MAP", houseHold.toString().replace("[", "{").replace("]", "}"));
					}

		 		   	for(APP_HSHL_RLT_Cargo cargo:houseHoldCollection.getResults()){
		
						String gender = peopleHandler.getIndividual(cargo.getRef_indv_seq_num()).getSex_ind();
		 		   		 if("M".equalsIgnoreCase(gender)){
						 String desc = iref.getColumnValue("IREL",138,cargo.getRlt_cd(),language);
		 				 houseHoldInverse.add("\""+cargo.getRef_indv_seq_num()+cargo.getSrc_indv_seq_num()+"\":\""+desc+"\"");
		 				 }	
		 				else{
		 				 String desc = iref.getColumnValue("IREL",139,cargo.getRlt_cd(),language);
		 				 houseHoldInverse.add("\""+cargo.getRef_indv_seq_num()+cargo.getSrc_indv_seq_num()+"\":\""+desc+"\"");
		 				}
		 		   		request.put("INVERSE_MAP", houseHoldInverse.toString().replace("[", "{").replace("]", "}"));
					}
					txnBean.setRequest(request);
					txnBean.setPageCollection(pageCollection);
					//Added by Nancy Jain for ILIES-282238 : Added collection in the request.
					request.put(FwConstants.PAGE_COLL_0, prflColl);
					request.put(FwConstants.PAGE_COLL_1, taxColl);
					request.put(FwConstants.NUMBER_OF_COLLECTIONS_FOR_WARNING_MSG, 2);
					//ILIES-282238 changes end here
					return;
				
			} 
				// Added for ILIES-137846
				if (pageRltColl != null && !pageRltColl.isEmpty()) {

					
					ABHouseHoldRelationshipBO houseHoldRelationBo = new ABHouseHoldRelationshipBO();
					
					Map criteriaMap = null;
					FwDataCriteria[] criteria = null;
					APP_HSHL_RLT_Collection rltCollection = new APP_HSHL_RLT_Collection();
					criteriaMap = new HashMap();
					criteria = new FwDataCriteria[1];
					criteria[0] = new FwDataCriteria();
					criteria[0].setColumn_name(AppConstants.APP_NUM);
					criteria[0].setColumn_value(appNumber);
					criteria[0].setData_type(FwConstants.LONG);
					criteriaMap.put(FwConstants.CRITERIA, criteria);
					//Modified by Nancy Jain for ILIES-282238 : Sonar Fix-Changed variable name.
					APP_HSHL_RLT_Cargo[] dbRltCargos = (APP_HSHL_RLT_Cargo[]) rltCollection
					.select(FwConstants.DAO, criteriaMap);
					//Modified by Nancy Jain for ILIES-282238 : Sonar Fix-Changed variable name.
					Map<String, APP_HSHL_RLT_Cargo> dbMap=new HashMap<String, APP_HSHL_RLT_Cargo>();
					for(APP_HSHL_RLT_Cargo db_rlt_cargo:dbRltCargos){
						db_rlt_cargo.setTax_dependent_sw("N");
						db_rlt_cargo.setRowAction(FwConstants.ROWACTION_UPDATE);
						dbMap.put(db_rlt_cargo.getRef_indv_seq_num()+db_rlt_cargo.getSrc_indv_seq_num(), db_rlt_cargo);
					}
					//Modified by Nancy Jain for ILIES-282238 : Sonar Fix-Changed variable name.
					APP_HSHL_RLT_Collection updateRltColl=new APP_HSHL_RLT_Collection();
					for(APP_TAX_RLT_Cargo page_rlt_cargo:pageRltColl.getResults()){
						APP_HSHL_RLT_Cargo dbRltCargo;
						//Modified by Nancy Jain for ILIES-282238 : Sonar Fix-Changed variable name.
						String pageRltRel=page_rlt_cargo.getRef_indv_seq_num()+page_rlt_cargo.getSrc_indv_seq_num();
						String pageRltRelRev=page_rlt_cargo.getSrc_indv_seq_num()+page_rlt_cargo.getRef_indv_seq_num();
						if(null!=page_rlt_cargo.getTax_dependent_sw() && page_rlt_cargo.getTax_dependent_sw().equals("Y")){
							if(dbMap.containsKey(pageRltRel)){
								dbRltCargo=dbMap.get(pageRltRel);
								dbRltCargo.setTax_dependent_sw("I");
								dbRltCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
							}else if(dbMap.containsKey(pageRltRelRev)){
								dbRltCargo=dbMap.get(pageRltRelRev);
								dbRltCargo.setTax_dependent_sw("Y");
								dbRltCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
							}
						}
					}
					updateRltColl.addAll(dbMap.values());
					houseHoldRelationBo.storeHousholdRelationshipDetails(updateRltColl,null,null);
				}
				
				//USERAN - Tax Jointly Filing Changes
				if (appJointlyFilingTax != null && !appJointlyFilingTax.isEmpty()) {

					
					ABHouseHoldRelationshipBO houseHoldRelationBo = new ABHouseHoldRelationshipBO();
					
					Map criteriaMap = null;
					FwDataCriteria[] criteria = null;
					APP_HSHL_RLT_Collection rltCollection = new APP_HSHL_RLT_Collection();
					criteriaMap = new HashMap();
					criteria = new FwDataCriteria[1];
					criteria[0] = new FwDataCriteria();
					criteria[0].setColumn_name(AppConstants.APP_NUM);
					criteria[0].setColumn_value(appNumber);
					criteria[0].setData_type(FwConstants.LONG);
					criteriaMap.put(FwConstants.CRITERIA, criteria);
					//Modified by Nancy Jain for ILIES-282238 : Sonar Fix-Changed variable name.
					APP_HSHL_RLT_Cargo[] dbRltCargos = (APP_HSHL_RLT_Cargo[]) rltCollection
					.select(FwConstants.DAO, criteriaMap);
					//Modified by Nancy Jain for ILIES-282238 : Sonar Fix-Changed variable name.
					Map<String, APP_HSHL_RLT_Cargo> dbMap=new HashMap<String, APP_HSHL_RLT_Cargo>();
					for(APP_HSHL_RLT_Cargo db_rlt_cargo:dbRltCargos){
						db_rlt_cargo.setTax_jointly_filed_sw("N");
						db_rlt_cargo.setRowAction(FwConstants.ROWACTION_UPDATE);
						dbMap.put(db_rlt_cargo.getRef_indv_seq_num()+db_rlt_cargo.getSrc_indv_seq_num(), db_rlt_cargo);
					}
					//Modified by Nancy Jain for ILIES-282238 : Sonar Fix-Changed variable name.
					APP_HSHL_RLT_Collection updateRltColl=new APP_HSHL_RLT_Collection();
					for(APP_TAX_RLT_Cargo jointlyFilingCargo:appJointlyFilingTax.getResults()){
						APP_HSHL_RLT_Cargo dbRltCargo;
						//Modified by Nancy Jain for ILIES-282238 : Sonar Fix-Changed variable name.
						String pageRltRel=jointlyFilingCargo.getRef_indv_seq_num()+jointlyFilingCargo.getSrc_indv_seq_num();
						String pageRltRelRev=jointlyFilingCargo.getSrc_indv_seq_num()+jointlyFilingCargo.getRef_indv_seq_num();
						if(null!=request.get("taxJointlyFiled_"+jointlyFilingCargo.getSrc_indv_seq_num()))
							jointlyFilingCargo.setTax_jointly_filed_sw(request.get("taxJointlyFiled_"+jointlyFilingCargo.getSrc_indv_seq_num()).toString());
						if(null!=request.get("taxJointlyFiled_"+jointlyFilingCargo.getRef_indv_seq_num()))
							jointlyFilingCargo.setTax_jointly_filed_sw(request.get("taxJointlyFiled_"+jointlyFilingCargo.getRef_indv_seq_num()).toString());
						
						if(null!=jointlyFilingCargo.getTax_jointly_filed_sw() && jointlyFilingCargo.getTax_jointly_filed_sw().equals("Y")){
							if(dbMap.containsKey(pageRltRel)){
								dbRltCargo=dbMap.get(pageRltRel);
								dbRltCargo.setTax_jointly_filed_sw("Y");
								dbRltCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
							}else if(dbMap.containsKey(pageRltRelRev)){
								dbRltCargo=dbMap.get(pageRltRelRev);
								dbRltCargo.setTax_jointly_filed_sw("Y");
								dbRltCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
							}
						}
					}
					updateRltColl.addAll(dbMap.values());
					houseHoldRelationBo.storeHousholdRelationshipDetails(updateRltColl,null,null);
				}
				INDIVIDUAL_Custom_Collection appIndvPrevColl = peopleHandler.getAllIndividuals();
				for(APP_INDV_Cargo appIndvCargoOld:appIndvColl.getResults()){
					
				}
				appIndvCargo = (APP_INDV_Cargo)isChanged(appIndvBeforeCargo,appIndvCargo);
			//	app
				//appIndvCargo.setRlvn_ind(appIndvBeforeCargo.getRlvn_ind());
				if(appIndvCargo.isDirty()){
					
					IndividualAge indvBeforeAge = peopleHandler.getIndividualAge(appIndvCargo.getIndv_seq_num());
				
					//if the cargo is dirty then we are updating the data base
					peopleHandler.updateIndividual(appIndvCargo);
					
					}
				
				
				//define a boolean array (size of SES_A_I_P + 1)
				int persistPeopleArraySize = applicationManager.getMaxSeqNumer(sesAppInPrflColl) + 1;
				boolean[] persistPeople = new boolean[persistPeopleArraySize];
				int persistPeopleSize = persistPeople.length; 
				
				//initialize array to false
				for(int i = 0; i < persistPeopleSize; i++){persistPeople[i] = false;}
				
				int pageCollAppInPrflCollSize = pageCollAppInPrflColl.size();
				
				//Loop for each Cargo in the Session APP_IN_PRFL collection
				for(int i = 0; i < sesAppPrflCollSize; i++)
				{
					//Get cargo i from the collection
					sesAppInPrflCargo = (APP_IN_PRFL_Cargo) sesAppInPrflColl.get(i);	
					
					//Get I_S_N for current cargo
					indivSeqNum = sesAppInPrflCargo.getIndv_seq_num();
					indivSeqNumInt = Integer.parseInt(indivSeqNum);
				
					//Get the matching indiv_seq_num cargo from the page collection
					for(int j = 0; j < pageCollAppInPrflCollSize; j++)
					{
						//Get cargo i from the collection
						pageCollAppInPrflCargo = (APP_IN_PRFL_Cargo) pageCollAppInPrflColl.get(j);	
						
						//does this match the SES_A_I_P cargo?
						if(Integer.parseInt(pageCollAppInPrflCargo.getIndv_seq_num()) ==
							indivSeqNumInt)
						{
							break;
						}
						else
						{
							pageCollAppInPrflCargo = null;
						}
					}
					
					//Did this person answer any questions? (Does the cargo contain responses?)
					if(pageCollAppInPrflCargo != null)
					{
						//Initialize indivResponseArray = new string array for current person
						indivResponseArray = new String[numQuestions];
						if(blindId != null && (blindId.equalsIgnoreCase("N") || blindId.equalsIgnoreCase("K"))){
							sesAppInPrflCargo.setDabl_resp(blindId);
							//pageCollAppInPrflCargo.setDabl_resp(blindId);
							trackPeopleToPersist(persistPeople, indivSeqNumInt);
						}
					
						//blindDisabled  = IApplicationManager.DISABLED_PERSON
							//Does AppManager.DetermineDirtyStatus() on this response return true?
							sesAppInPrflCargo.setDabl_resp(fixSelectionValue(sesAppInPrflCargo.getDabl_resp()));
							if(applicationManager.determineDirtyStatus(pageCollAppInPrflCargo.getDabl_resp(),
								sesAppInPrflCargo.getDabl_resp(), dirtyIndicator, pageStatus))
							{					
								trackPeopleToPersist(persistPeople, indivSeqNumInt);
							}
							
							//Call AppManager.TranslateProfileResponses() to update the session
							applicationManager.translateProfileResponses(pageCollAppInPrflCargo.getDabl_resp(),
								sesAppInPrflCargo.getDabl_resp(), pageStatus, IApplicationManager.DISABLED_PERSON,
								sesAppInPrflCargo);
						
							//Add the SES_RESP to the indivResponsesArray
							indivResponseArray[0] = sesAppInPrflCargo.getDabl_resp();
							//Check for Disability & Blindness -- if Yes set True -- Starts
							if(sesAppInPrflCargo.getDabl_resp().equalsIgnoreCase("R"))
								dablFlag = true;
							//Check for Disability & Blindness -- if Yes set True -- Ends

						
						//drugFelonies = IApplicationManager.DRUG_FELON
							//Does AppManager.DetermineDirtyStatus() on this response return true?
							sesAppInPrflCargo.setDrug_feln_resp(fixSelectionValue(sesAppInPrflCargo.getDrug_feln_resp()));
							if(applicationManager.determineDirtyStatus(pageCollAppInPrflCargo.getDrug_feln_resp(),
								sesAppInPrflCargo.getDrug_feln_resp(), dirtyIndicator, pageStatus))
							{					
								trackPeopleToPersist(persistPeople, indivSeqNumInt);
							}
								
							//Call AppManager.TranslateProfileResponses() to update the session
							applicationManager.translateProfileResponses(pageCollAppInPrflCargo.getDrug_feln_resp(),
								sesAppInPrflCargo.getDrug_feln_resp(), pageStatus, IApplicationManager.DRUG_FELON,
								sesAppInPrflCargo);
							
							//Add the SES_RESP to the indivResponsesArray
							indivResponseArray[1] = sesAppInPrflCargo.getDrug_feln_resp();
						    // Added for ILIES-129516 - Starts
							sesAppInPrflCargo.setDrug_trtmnt_prg_resp(fixSelectionValue(sesAppInPrflCargo.getDrug_trtmnt_prg_resp()));
							if(applicationManager.determineDirtyStatus(pageCollAppInPrflCargo.getDrug_trtmnt_prg_resp(),
								sesAppInPrflCargo.getDrug_trtmnt_prg_resp(), dirtyIndicator, pageStatus))
							{					
								trackPeopleToPersist(persistPeople, indivSeqNumInt);
							}
								
							//Call AppManager.TranslateProfileResponses() to update the session
							applicationManager.translateProfileResponses(pageCollAppInPrflCargo.getDrug_trtmnt_prg_resp(),
								sesAppInPrflCargo.getDrug_trtmnt_prg_resp(), pageStatus, IApplicationManager.DRUG_TRTMNT_PROG,
								sesAppInPrflCargo);
							
							//Add the SES_RESP to the indivResponsesArray
							indivResponseArray[2] = sesAppInPrflCargo.getDrug_trtmnt_prg_resp();
							sesAppInPrflCargo.setParole_prob_viol_resp(fixSelectionValue(sesAppInPrflCargo.getParole_prob_viol_resp()));
							if(applicationManager.determineDirtyStatus(pageCollAppInPrflCargo.getParole_prob_viol_resp(),
								sesAppInPrflCargo.getParole_prob_viol_resp(), dirtyIndicator, pageStatus))
							{					
								trackPeopleToPersist(persistPeople, indivSeqNumInt);
							}
								
							//Call AppManager.TranslateProfileResponses() to update the session
							applicationManager.translateProfileResponses(pageCollAppInPrflCargo.getParole_prob_viol_resp(),
								sesAppInPrflCargo.getParole_prob_viol_resp(), pageStatus, IApplicationManager.PAROLE_PROB_VIOL,
								sesAppInPrflCargo);
							
							//Add the SES_RESP to the indivResponsesArray
							indivResponseArray[3] = sesAppInPrflCargo.getParole_prob_viol_resp();
					        // Added for ILIES-129516 - Ends
						//otherFoodStamp = IApplicationManager.RECEIVE_FS_IN_OTHER_STATE
							//Does AppManager.DetermineDirtyStatus() on this response return true?
							sesAppInPrflCargo.setRcv_fs_oth_st_resp(fixSelectionValue(sesAppInPrflCargo.getRcv_fs_oth_st_resp()));
							if(applicationManager.determineDirtyStatus(pageCollAppInPrflCargo.getRcv_fs_oth_st_resp(),
								sesAppInPrflCargo.getRcv_fs_oth_st_resp(), dirtyIndicator, pageStatus))
							{					
								trackPeopleToPersist(persistPeople, indivSeqNumInt);
							}
										
							//Call AppManager.TranslateProfileResponses() to update the session
							applicationManager.translateProfileResponses(pageCollAppInPrflCargo.getRcv_fs_oth_st_resp(),
								sesAppInPrflCargo.getRcv_fs_oth_st_resp(), pageStatus, 
								IApplicationManager.RECEIVE_FS_IN_OTHER_STATE, sesAppInPrflCargo);
									
							//Add the SES_RESP to the indivResponsesArray
							indivResponseArray[4] = sesAppInPrflCargo.getRcv_fs_oth_st_resp();
						
							//Added by Uma for SSI Benefits
							sesAppInPrflCargo.setSsi_benefit_resp(fixSelectionValue(sesAppInPrflCargo.getSsi_benefit_resp()));
							if(applicationManager.determineDirtyStatus(pageCollAppInPrflCargo.getSsi_benefit_resp(),
									sesAppInPrflCargo.getSsi_benefit_resp(), dirtyIndicator, pageStatus))
								{					
									trackPeopleToPersist(persistPeople, indivSeqNumInt);
								}
														
								//Call AppManager.TranslateProfileResponses() to update the session
								applicationManager.translateProfileResponses(pageCollAppInPrflCargo.getSsi_benefit_resp(),
									sesAppInPrflCargo.getSsi_benefit_resp(), pageStatus, 
									IApplicationManager.SSI_BENEFIT_RESP, sesAppInPrflCargo);
													
								//Add the SSI_BENEFITS to the indivResponsesArray
								indivResponseArray[5] = sesAppInPrflCargo.getSsi_benefit_resp();
								//Added by Uma for Cash Benefits
								sesAppInPrflCargo.setCash_benefit_resp(fixSelectionValue(sesAppInPrflCargo.getCash_benefit_resp()));
								if(applicationManager.determineDirtyStatus(pageCollAppInPrflCargo.getCash_benefit_resp(),
										sesAppInPrflCargo.getCash_benefit_resp(), dirtyIndicator, pageStatus))
									{					
										trackPeopleToPersist(persistPeople, indivSeqNumInt);
									}
															
									//Call AppManager.TranslateProfileResponses() to update the session
									applicationManager.translateProfileResponses(pageCollAppInPrflCargo.getCash_benefit_resp(),
										sesAppInPrflCargo.getCash_benefit_resp(), pageStatus, 
										IApplicationManager.CASH_BENEFIT_RESP, sesAppInPrflCargo);
														
									//Add the SSI_BENEFITS to the indivResponsesArray
									indivResponseArray[6] = sesAppInPrflCargo.getCash_benefit_resp();
									//Added for Department of Aging Service
									sesAppInPrflCargo.setAging_sw(fixSelectionValue(sesAppInPrflCargo.getAging_sw()));
									if(applicationManager.determineDirtyStatus(pageCollAppInPrflCargo.getAging_sw(),
											sesAppInPrflCargo.getAging_sw(), dirtyIndicator, pageStatus)){								
										trackPeopleToPersist(persistPeople, indivSeqNumInt);
									}
									applicationManager.translateProfileResponses(pageCollAppInPrflCargo.getAging_sw(),
											sesAppInPrflCargo.getAging_sw(), pageStatus, 
											IApplicationManager.AGING_SERVICE_SW, sesAppInPrflCargo);
									indivResponseArray[7] = sesAppInPrflCargo.getAging_sw();
									//Added for Former Foster Care
									sesAppInPrflCargo.setFormer_foster_sw(fixSelectionValue(sesAppInPrflCargo.getFormer_foster_sw()));
									if(applicationManager.determineDirtyStatus(pageCollAppInPrflCargo.getFormer_foster_sw(),
											sesAppInPrflCargo.getFormer_foster_sw(), dirtyIndicator, pageStatus)){								
										trackPeopleToPersist(persistPeople, indivSeqNumInt);
									}							
									applicationManager.translateProfileResponses(pageCollAppInPrflCargo.getFormer_foster_sw(),
											sesAppInPrflCargo.getFormer_foster_sw(), pageStatus, 
											IApplicationManager.FOSTER_CARE_SW, sesAppInPrflCargo);
									indivResponseArray[8] = sesAppInPrflCargo.getFormer_foster_sw();
									
									// ffcs starts
									AFBHouseHoldMemberQuestionsBO afbHHMembQustBO = new AFBHouseHoldMemberQuestionsBO();
									if(afbHHMembQustBO.determineFosterStateCdStatus(pageCollAppInPrflCargo, appNumber, sesAppInPrflCargo)){
										afbHHMembQustBO.storeFormerFosterStateCd(pageCollAppInPrflCargo,appNumber,sesAppInPrflCargo);
									}
									
									//ffcs ends
									
									// Check for Disability & Blindness -- if Yes set True -- Starts
							if(sesAppInPrflCargo.getYeohc_resp().equalsIgnoreCase("R"))
								yeohCount=yeohCount+1;;
						
					
						//Add the indivResponsesArray to the indivResponsesMap
						indivResponseMap.put(indivSeqNum, indivResponseArray);
					}					
				}
				
				//Does persistPeople[IApplicationManager.ARE_PEOPLE_DIRTY] = true?
				if(persistPeople[IApplicationManager.ARE_PEOPLE_DIRTY] == true)
				{
					//For each I_S_N
					for(int i = 0; i < sesAppPrflCollSize; i++)
					{
						//Get cargo i from the collection
						sesAppInPrflCargo = (APP_IN_PRFL_Cargo) sesAppInPrflColl.get(i);	
						
						//Get I_S_N for current cargo
						indivSeqNum = sesAppInPrflCargo.getIndv_seq_num();
						indivSeqNumInt = Integer.parseInt(indivSeqNum);					
						
						//Does persistPeople[I_S_N] = true?
						if(persistPeople[indivSeqNumInt] == true)
						{				
							//yes, data is dirty, call persist()
							applicationManager.persist(appNumber, indivSeqNum, questionsArray, 
								(String[])indivResponseMap.get(indivSeqNum));;
						}
					}
				}
			//check for Disability and Blindness for each individual and set Driver R for Disability page -- starts
				String reqPages = "ABDIS";
				int pageABDISStatus = driverManager.getAFBStatus(
						FwConstants.AFB_DRIVER,	"ABDIS", driverArray);
				
				if(dablFlag)
					driverManager.makeRequired(FwConstants.AFB_DRIVER,reqPages,driverArray,appNumber);
				else{
						DisabilityBO disBO = new DisabilityBO();
						APP_IN_DABL_Collection dablColl = disBO.loadDABLDetailsAFB(appNumber);
						if(dablColl.isEmpty())
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,reqPages,driverArray,appNumber);
						if(pageABDISStatus == FwConstants.DRIVER_ADD_NEW)
							driverManager.makeComplete(FwConstants.AFB_DRIVER,reqPages,driverArray,appNumber);
					
				}
				//ILIES-133651 - ravrajendran - ABE - SSA Edits (State List) - Asset screens - Complete Application Development  -- Start
				ABSaveAndExitBO saveAndExitBO = new ABSaveAndExitBO();
				String[] liquidPages = {AppConstants.ABLAQ_PAGE_ID, AppConstants.ABLAS_PAGE_ID,AppConstants.ABOAQ_PAGE_ID,AppConstants.ABOAS_PAGE_ID};
				short[] programKey = (short[])session.get(FwConstants.AFB_PROGRAM_KEY);
				if (saveAndExitBO.isAABDMedical(appNumber).equals(AppConstants.YES) || programManager.isMSPProgramRequested(programKey)) {
					driverManager.makeRequired(FwConstants.AFB_DRIVER,liquidPages,driverArray,appNumber);
				}
				//ILIES-133651 - ravrajendran - ABE - SSA Edits (State List) - Asset screens - Complete Application Development  -- END
				
				// Added by vinoj kannan, ILIES-282289
				boolean drvComplete = true;
				if ((driverManager.getAFBStatus(FwConstants.AFB_DRIVER, AppConstants.ABLAQ_PAGE_ID,
						driverArray) > 1)
						|| (driverManager.getAFBStatus(FwConstants.AFB_DRIVER,
								AppConstants.ABLAS_PAGE_ID, driverArray) > 1)) {
					drvComplete = false;
				}
				//ILIES-279945
				String[] liquidPagess = {AppConstants.ABLAQ_PAGE_ID, AppConstants.ABLAS_PAGE_ID};
				if (programManager.isSNAPProgramRequested(programKey) && drvComplete) {
					driverManager.makeRequired(FwConstants.AFB_DRIVER,liquidPagess,driverArray,appNumber);
				}
				
				//Call Driver.MakeComplete() on this page
				driverManager.makeComplete(FwConstants.AFB_DRIVER, 
					(String) request.get(FwConstants.CURRENT_PAGE_ID), driverArray, appNumber);
				
				//Added by Nancy Jain for ILIES-282238 : Removing the values from session.
				regBo.clearSessionOfWarningMsgOnSaveAndExitFunc(session);
				//ILIES-282238 changes end here
		} 
		catch(FwException fe) 
		{
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID(AppConstants.STORE_HOUSE_HOLD_MEMBERS_QUESTIONS);
			we.setFwException(fe);
			throw we;
		}
		catch(Exception e) 
		{
			ctx.setRollbackOnly();
			throw createFwException(this.getClass().getName(), AppConstants.STORE_HOUSE_HOLD_MEMBERS_QUESTIONS, e);
		
		}
	}