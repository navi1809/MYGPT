            // ---------- REPLACEMENT: exact AMA46A behavior via set difference ----------
            if (!CollectionUtils.isEmpty(famCaseStatsOfcRecord)) {

                // Distinct, normalized triplets from FamCase (skip blank ofc/casld)
                java.util.Set<String> famDistinct = famCaseStatsOfcRecord.stream()
                    .filter(f -> f.getOfcCd() != null && !f.getOfcCd().trim().isEmpty()
                              && f.getCasldId() != null && !f.getCasldId().trim().isEmpty())
                    .map(f -> normKey(f.getOfcCd(), f.getCasldId(), f.getAidCd()))
                    .collect(java.util.stream.Collectors.toCollection(java.util.TreeSet::new));

                // Distinct, normalized triplets already present in PCE (DB)
                java.util.Set<String> pceDistinct = pceRecords.stream()
                    .map(r -> normKey(r.getOfficeCode(), r.getCaseLoadId(), r.getAidCode()))
                    .collect(java.util.stream.Collectors.toCollection(java.util.TreeSet::new));

                // What AMA46A writes after EOF flush: fam âˆ’ pce
                java.util.Set<String> expectedMissing = new java.util.TreeSet<>(famDistinct);
                expectedMissing.removeAll(pceDistinct);

                LOG.info("DIAG: famDistinct={}, pceDistinct={}, expectedMissing(fam-pce)={}",
                        famDistinct.size(), pceDistinct.size(), expectedMissing.size());

                // Build newPceRecords exactly for those keys
                for (FamCaseStatsOfficeRecord fam : famCaseStatsOfcRecord) {
                    if (fam.getOfcCd() == null || fam.getOfcCd().trim().isEmpty()
                        || fam.getCasldId() == null || fam.getCasldId().trim().isEmpty()) {
                        continue;
                    }
                    String key = normKey(fam.getOfcCd(), fam.getCasldId(), fam.getAidCd());
                    if (expectedMissing.contains(key)) {
                        newPceRecords.add(mapToNewPceRecord(fam));
                    }
                }
            }
            // ---------- END REPLACEMENT ----------
