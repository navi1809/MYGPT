public static List<String> getQ10CAT(List<CodeTableSorRecord> ethnicityTable) {
    Set<String> out = new LinkedHashSet<>();
    for (CodeTableSorRecord r : ethnicityTable) {
        String c = r.getCodeTableCd();
        if (c != null && !c.isEmpty() && !"U".equalsIgnoreCase(c) && !"?".equalsIgnoreCase(c)) {
            out.add(c);
        }
    }
    boolean hasUN = ethnicityTable.stream().anyMatch(r ->
            "UN".equalsIgnoreCase(r.getCodeTableCd()) ||
            "UNKNOWN".equalsIgnoreCase(String.valueOf(r.getCodeDesc())));
    if (hasUN) out.add("UN");
    return new ArrayList<>(out);
}



private static String getEthnicityBucket(String ethncCd, List<CodeTableSorRecord> table) {
    if (ethncCd != null && !ethncCd.isEmpty() && !"U".equalsIgnoreCase(ethncCd) && !"?".equalsIgnoreCase(ethncCd)) {
        for (CodeTableSorRecord r : table) {
            if (ethncCd.equalsIgnoreCase(r.getCodeTableCd())) return r.getCodeTableCd();
        }
    }
    boolean hasUN = table.stream().anyMatch(r ->
            "UN".equalsIgnoreCase(r.getCodeTableCd()) ||
            "UNKNOWN".equalsIgnoreCase(String.valueOf(r.getCodeDesc())));
    return hasUN ? "UN" : null;
}




private void populateEthnicityCounts(SnapCharacteristicRecord record, MemberRecord m, List<CodeTableSorRecord> ethnicityTable) {
    String sex = m.getSexCode();
    if ("M".equalsIgnoreCase(sex)) {
        String bucket = getEthnicityBucket(m.getEthnicCode(), ethnicityTable);
        if (bucket == null) return;
        record.getEthnicityMaleMap().put(bucket, record.getEthnicityMaleMap().getOrDefault(bucket, 0) + 1);
        record.getEthnicityTotalMap().put(bucket, record.getEthnicityTotalMap().getOrDefault(bucket, 0) + 1);
        return;
    }
    if ("F".equalsIgnoreCase(sex)) {
        String bucket = getEthnicityBucket(m.getEthnicCode(), ethnicityTable);
        if (bucket == null) return;
        record.getEthnicityFemaleMap().put(bucket, record.getEthnicityFemaleMap().getOrDefault(bucket, 0) + 1);
        record.getEthnicityTotalMap().put(bucket, record.getEthnicityTotalMap().getOrDefault(bucket, 0) + 1);
        return;
    }
    record.setMaleCasesNotDesignatedAsM0rF(record.getMaleCasesNotDesignatedAsM0rF() + 1);
    record.setFemaleCasesNotDesignatedAsM0rF(record.getFemaleCasesNotDesignatedAsM0rF() + 1);
}


List<String> q10Cats = CategoryUtil.getQ10CAT(SnapCharacteristicInputParam.getEthnicityCodeTable());
