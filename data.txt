package gov.nv.dwss.crystalreports.statistics.programhistory.dao;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import gov.nv.dwss.crystalreports.statistics.constants.StatisticsConstants;
import gov.nv.dwss.crystalreports.statistics.programhistory.model.EligibilityVersionInfo;
import gov.nv.dwss.crystalreports.statistics.programhistory.model.FamilyAction;
import gov.nv.dwss.crystalreports.statistics.programhistory.model.NomadsUser;
import gov.nv.dwss.crystalreports.statistics.programhistory.model.ProgramCaseHistoryDetails;
import gov.nv.dwss.domain.dao.sor.extended.ExtendedSorDao;
import gov.nv.dwss.fw.batch.context.SystemInfoParam;
import gov.nv.dwss.fw.batch.util.ObjectUtils;

@Repository
public class ProgramHistoryExtractDao extends ExtendedSorDao {

	@Autowired
    @Qualifier("nswdJdbcTemplate")
    protected JdbcTemplate nswdJdbcTemplate;
	
    private static final String GET_OFFICE_DETAILS = "SELECT OFC_CD FROM ##db-schema-name##.TWNOFFICE WHERE OFC_TYP = 'A' AND OFC_CD BETWEEN 'AA' AND '01' FOR FETCH ONLY WITH UR";
    private static final String GET_OFFICE_DETAILS_WITH_OFC = "SELECT OFC_CD FROM ##db-schema-name##.TWNOFFICE WHERE OFC_TYP = 'A' AND OFC_CD IN (##OFC-CD##) FOR FETCH ONLY WITH UR";
    private static final String GET_PROGRAM_CASE_HISTORY_DETAILS_FOR_ALL_OFFICES = "SELECT * FROM (SELECT T1.OFC_CD, T1.SPRVS_UNIT, T1.PSN_NMB, T1.FUNC_AREA_CD, T1.WRKR_TYPE, T1.CASLD_ID, T2.CASE_STS, T2.MTHLY_RPTR_IND, T2.HOH_UPI, T2.FS_SUFX, T2.HMLS_IND, " + 
    		"T3.ICI, T3.PRGM_CASE_TYPE, T3.STS_EFF_DT, T3.PRGM_CASE_STS, T3.EXPD_FS_RSN_CD, T3.INIT_APRVL_DT, T3.APPL_DT, T3.AID_CD, T3.ELIG_CD, T3.CLSRE_RSN_CD, " + 
    		"T3.MULT_CLSRE_RSN_IND, T3.SYS_CLSRE_DNL_RSN,ROW_NUMBER() OVER (ORDER BY T1.OFC_CD ASC, T1.SPRVS_UNIT ASC, T1.FUNC_AREA_CD ASC, T1.WRKR_TYPE ASC, T1.PSN_NMB ASC, " + 
    		"T3.ICI ASC, T3.PRGM_CASE_TYPE ASC, T3.AID_CD) AS RN FROM ##db-schema-name##.TWNFAM_CASELD_CASE T1, ##db-schema-name##.TWNFAM_CASE_HSTRY T2, " + 
    		"##db-schema-name##.TWNPRGM_CASE_HSTRY T3 WHERE T1.OFC_CD IN (##OFC-CD##) " + 
    		"AND T3.PRD_BEG_DT <= ? AND T3.PRD_END_DT >= ? " + 
    		"AND T3.PRGM_CASE_TYPE IN ('AF', 'FS', 'MA', 'TC', 'TL', 'TN', 'TP', 'SG', 'MC', 'AO') AND T2.PRD_BEG_DT <= ? AND T2.PRD_END_DT >= ? " + 
    		"AND T2.ICI = T3.ICI AND T1.ICI = T3.ICI ORDER BY T1.OFC_CD ASC, T1.SPRVS_UNIT ASC, T1.FUNC_AREA_CD ASC, T1.WRKR_TYPE ASC, T1.PSN_NMB ASC, " + 
    		"T3.ICI ASC, T3.PRGM_CASE_TYPE ASC, T3.AID_CD) FINAL_QUERY WHERE RN BETWEEN ? AND ?  FOR FETCH ONLY WITH UR";
    private static final String GET_WORKER_CALENDAR_DETAILS_COUNT = "SELECT COUNT(*) FROM ##db-schema-name##.TWNWRKR_CALNDR WHERE UPI = ? AND PRGM_CASE_TYPE = ? AND YEAR(APMNT_DT) = ? AND MONTH(APMNT_DT) = ? AND ACTVY_TYPE_CD = ? AND APMNT_STS = ? AND NOMADS_USRID = ? FOR FETCH ONLY WITH UR";
    private static final String GET_ELIGIBILITY_VERSION_INFO = "SELECT ELIG_NUM, CHD_NMB, BNFT_AMT, ENTLM_AMT, BNFT_RDCTN_AMT, VER_NMB, TOT_MTHLY_BNFT_AMT FROM ##db-schema-name##.TWNELIG_VERSION WHERE ICI = ? AND PRGM_CASE_TYPE = ? AND BNFT_YR = ? AND BNFT_MTH = ? AND LST_POSTD_VER_IND = ? FOR FETCH ONLY WITH UR";
    private static final String GET_ELIGIBILITY_VERSION_INFO_S08 = "SELECT ELIG_NUM, CHD_NMB, BNFT_AMT, ENTLM_AMT, BNFT_RDCTN_AMT, BNFT_YR, BNFT_MTH, VER_NMB, TOT_MTHLY_BNFT_AMT FROM ##db-schema-name##.TWNELIG_VERSION WHERE ICI = ? AND PRGM_CASE_TYPE = ? AND BNFT_YR = ? AND BNFT_MTH = ? AND VER_NMB = ? FOR FETCH ONLY WITH UR";
    private static final String GET_FAMILY_ACTION_DETAILS_FOR_APPLICATION_DATE = "SELECT ACTN_TS, ACTN_TYP FROM ##db-schema-name##.TWNFAM_ACTNS WHERE ICI = ? AND PRGM_TYP = ? AND ACTN_TYP IN ('FA','RA','RE') AND ACTN_TS IN (SELECT MAX(ACTN_TS) FROM ##db-schema-name##.TWNFAM_ACTNS WHERE ICI = ? AND PRGM_TYP = ? AND ACTN_TYP IN ('FA','RA','RE')) FOR FETCH ONLY WITH UR";
    private static final String GET_FAMILY_ACTION_DETAILS = "SELECT ACTN_TYP, ACTN_TS, AID_CD, ACTN_EFF_DT, INIT_APRVL_DT, APPL_DT, EXPD_FS_RSN_CD, ELIG_CD, ACTN_RSN_CD, MULT_CLSRE_RSN_IND, BNFT_YR, BNFT_MTH, VER_NMB, FAM_APPL_TYPE FROM ##db-schema-name##.TWNFAM_ACTNS WHERE ICI = ? AND PRGM_TYP = ? AND YEAR(ACTN_TS) = ? AND MONTH(ACTN_TS) = ? ORDER BY ACTN_TS DESC FOR FETCH ONLY WITH UR";
    private static final String GET_NEXT_REDETERMINATION_DATE = "SELECT MAX(NEXT_REDET_DT) as NEXT_REDET_DT FROM ##db-schema-name##.TWNREDET_RCRT_DTLS WHERE ICI = ? AND PRGM_CASE_TYPE = ? AND (REDET_CMPLT_DT IS NULL OR REDET_CMPLT_DT = '9999-12-31' OR REDET_CMPLT_DT = '0001-01-01') FOR FETCH ONLY WITH UR";
    private static final String GET_CURRENT_MONTH_REDETERMINATION_DETAILS_COUNT = "SELECT COUNT(*) FROM ##db-schema-name##.TWNREDET_RCRT_DTLS WHERE ICI = ? AND PRGM_CASE_TYPE = ? AND YEAR(REDET_CMPLT_DT) = ? AND MONTH(REDET_CMPLT_DT) = ? FOR FETCH ONLY WITH UR";
    private static final String GET_WORKER_DETAILS = "SELECT T1.NOMADS_USRID, T1.FRST_NM, T1.LST_NM FROM ##db-schema-name##.TWNNOMADS_USER T1, ##db-schema-name##.TWNSUP_UNT_POS_HST T2 WHERE T2.OFC_CD = ? AND T2.PRGM_OFC_TYPE = ? AND T2.SPRVS_UNIT = ? AND T2.PSN_NMB = ? AND T2.NOMADS_USRID = T1.NOMADS_USRID AND T2.ASMNT_BEG_DT <= ? AND T2.ASMNT_END_DT >= ? FOR FETCH ONLY WITH UR";

    private static final String DELETE_PROGRAM_HISTORY_CASES = "DELETE FROM ##db-schema-name##.TWNRPT_MTH_CASEHST WHERE RUN_DATE = ?";
    
    private static final String GET_PROGRAM_CASE_HISTORY_DETAILS_FOR_ALL_OFFICE_COUNTS = "SELECT COUNT(*) FROM ##db-schema-name##.TWNFAM_CASELD_CASE T1, ##db-schema-name##.TWNFAM_CASE_HSTRY T2, "
    		+ "##db-schema-name##.TWNPRGM_CASE_HSTRY T3 WHERE T1.OFC_CD IN (##OFC-CD##) AND T3.PRD_BEG_DT <= ? AND T3.PRD_END_DT >= ? AND "
    		+ "T3.PRGM_CASE_TYPE IN ('AF', 'FS', 'MA', 'TC', 'TL', 'TN', 'TP', 'SG', 'MC', 'AO') AND T2.PRD_BEG_DT <= ? AND T2.PRD_END_DT >= ? "
    		+ "AND T2.ICI = T3.ICI AND T1.ICI = T3.ICI FOR FETCH ONLY WITH UR";
    
    public List<String> getOfficeDetails() {
        return getJdbcTemplate().queryForList(getSql(GET_OFFICE_DETAILS), String.class);
    }
    
    public List<String> getOfficeDetails(String ofcCds) {
    	return getJdbcTemplate().queryForList(getSql(GET_OFFICE_DETAILS_WITH_OFC.replace("##OFC-CD##", ofcCds)), String.class);
    }

    public int getWorkerCalendarDetailsCount(String nomadsUsrid, int upi, String prgmCaseType, String actvyTypeCd, String apmntSts, int year, int month) {
        return this.getJdbcTemplate().queryForObject(getSql(GET_WORKER_CALENDAR_DETAILS_COUNT), Integer.class, upi, prgmCaseType, year, month, actvyTypeCd, apmntSts, nomadsUsrid);
    }

    public EligibilityVersionInfo getEligibilityVersionInfo(int ici, String prgmCaseType, int bnftYr, int bnftMth, String lstPostdVerInd) {
    	List<EligibilityVersionInfo> list = getJdbcTemplate().query(getSql(GET_ELIGIBILITY_VERSION_INFO), eligibilityVersionInfoRowMapper, ici, prgmCaseType, bnftYr, bnftMth, lstPostdVerInd);
    	if(list != null && !list.isEmpty()) {
    		return list.get(0);
    	}
    	return null;
    }

    public EligibilityVersionInfo getEligibilityVersionInfoS08(int ici, String prgmCaseType, int bnftYr, int bnftMth, int verNmb) {
    	List<EligibilityVersionInfo> list = getJdbcTemplate().query(getSql(GET_ELIGIBILITY_VERSION_INFO_S08), eligibilityVersionInfoRowMapperS08, ici, prgmCaseType, bnftYr, bnftMth, verNmb);
    	if(list != null && !list.isEmpty()) {
    		return list.get(0);
    	}
    	return null;
    }

    public FamilyAction getFamilyActionDetailsForApplicationDate(int ici, String prgmType) {
    	List<FamilyAction> familyActionList = getJdbcTemplate().query(getSql(GET_FAMILY_ACTION_DETAILS_FOR_APPLICATION_DATE), famActionApplDateRowMapper, ici, prgmType, ici, prgmType);
    	if (!familyActionList.isEmpty()) {
            return familyActionList.get(0);
        }
    	return null;
    }

    public List<FamilyAction> getFamilyActionDetails(int ici, String prgmType, int year, int month) {
        try {
        	return getJdbcTemplate().query(getSql(GET_FAMILY_ACTION_DETAILS), familyActionRowMapper, ici, prgmType, year, month);
        } catch (Exception e) {
            throw e;
        }
    }
    
    public Date getNextRedeterminationDate(int ici, String prgmCaseType) {
    	return getJdbcTemplate().queryForObject(getSql(GET_NEXT_REDETERMINATION_DATE), redeterminationDetailsRowMapper, ici, prgmCaseType);
    }

    public int getCurrentMonthRedeterminationDetailsCount(int ici, String prgmCaseType, int year, int month) {
        return getJdbcTemplate().queryForObject(getSql(GET_CURRENT_MONTH_REDETERMINATION_DETAILS_COUNT), Integer.class, ici, prgmCaseType, year, month);
    }

    public NomadsUser getWorkerDetails(String ofcCd, String prgmOfcType, String sprvsUnit, String psnNmb, String asOfDate) {
    	List<NomadsUser> list = getJdbcTemplate().query(getSql(GET_WORKER_DETAILS), nomadsUserRowMapper, ofcCd, prgmOfcType, sprvsUnit, psnNmb, asOfDate, asOfDate);
    	if(list != null && !list.isEmpty()) {
    		return list.get(0);
    	}
    	return null;
    }

    private final RowMapper<ProgramCaseHistoryDetails> programCaseHistoryDetailsRowMapper = (rs, rowNum) -> {
        ProgramCaseHistoryDetails details = new ProgramCaseHistoryDetails();
		details.setOfcCd(rs.getString("OFC_CD"));
		details.setSprvsUnit(rs.getString("SPRVS_UNIT"));
		details.setPsnNmb(rs.getString("PSN_NMB"));
		details.setFuncAreaCd(rs.getString("FUNC_AREA_CD"));
		details.setWrkrType(rs.getString("WRKR_TYPE"));
		details.setCasldId(rs.getString("CASLD_ID"));
		details.setCaseSts(rs.getString("CASE_STS"));
		details.setMthlyRptrInd(rs.getString("MTHLY_RPTR_IND"));
		details.setHohUpi(rs.getInt("HOH_UPI"));
		details.setFsSufx(rs.getString("FS_SUFX"));
		details.setHmlsInd(rs.getString("HMLS_IND"));
		details.setIci(rs.getInt("ICI"));
		details.setPrgmCaseType(rs.getString("PRGM_CASE_TYPE"));
		details.setStsEffDt(ObjectUtils.getUtilDate(rs.getDate("STS_EFF_DT")));
		details.setPrgmCaseSts(rs.getString("PRGM_CASE_STS"));
		details.setExpdFsRsnCd(rs.getString("EXPD_FS_RSN_CD"));
		details.setInitAprvlDt(ObjectUtils.getUtilDate(rs.getDate("INIT_APRVL_DT")));
		details.setApplDt(ObjectUtils.getUtilDate(rs.getDate("APPL_DT")));
		details.setAidCd(rs.getString("AID_CD"));
		details.setEligCd(rs.getString("ELIG_CD"));
		details.setClsreRsnCd(rs.getString("CLSRE_RSN_CD"));
		details.setMultClsreRsnInd(rs.getString("MULT_CLSRE_RSN_IND"));
		details.setSysClsreDnlRsn(rs.getString("SYS_CLSRE_DNL_RSN"));
        return details;
    };

    private final RowMapper<EligibilityVersionInfo> eligibilityVersionInfoRowMapper = (rs, rowNum) -> {
        EligibilityVersionInfo info = new EligibilityVersionInfo();
        info.setEligNum(rs.getInt("ELIG_NUM"));
        info.setChldNmb(rs.getInt("CHD_NMB"));
        info.setBnftAmt(rs.getBigDecimal("BNFT_AMT"));
        info.setEntlmAmt(rs.getBigDecimal("ENTLM_AMT"));
        info.setBnftRdctnAmt(rs.getBigDecimal("BNFT_RDCTN_AMT"));
        info.setVerNmb(rs.getInt(StatisticsConstants.COL_VER_NMB));
        info.setTotMthlyBnftAmt(rs.getBigDecimal("TOT_MTHLY_BNFT_AMT"));
        return info;
    };
    
    private final RowMapper<EligibilityVersionInfo> eligibilityVersionInfoRowMapperS08 = (rs, rowNum) -> {
        EligibilityVersionInfo info = new EligibilityVersionInfo();
        info.setEligNum(rs.getInt("ELIG_NUM"));
        info.setChldNmb(rs.getInt("CHD_NMB"));
        info.setBnftAmt(rs.getBigDecimal("BNFT_AMT"));
        info.setEntlmAmt(rs.getBigDecimal("ENTLM_AMT"));
        info.setBnftRdctnAmt(rs.getBigDecimal("BNFT_RDCTN_AMT"));
        info.setVerNmb(rs.getInt(StatisticsConstants.COL_VER_NMB));
        info.setTotMthlyBnftAmt(rs.getBigDecimal("TOT_MTHLY_BNFT_AMT"));
        info.setBnftYr(rs.getInt("BNFT_YR"));
        info.setBnftMth(rs.getInt("BNFT_MTH"));
        return info;
    };

    private final RowMapper<FamilyAction> famActionApplDateRowMapper = (rs, rowNum) -> {
        FamilyAction action = new FamilyAction();
        action.setActnTyp(rs.getString("ACTN_TYP"));
        action.setActnTs(rs.getTimestamp("ACTN_TS"));
        return action;
    };
    
    private final RowMapper<FamilyAction> familyActionRowMapper = (rs, rowNum) -> {
        FamilyAction action = new FamilyAction();
        action.setActnTyp(rs.getString("ACTN_TYP"));
        action.setActnTs(rs.getTimestamp("ACTN_TS"));
        action.setAidCd(rs.getString("AID_CD"));
        action.setActnEffDt(ObjectUtils.getUtilDate(rs.getDate("ACTN_EFF_DT")));
        action.setInitAprvlDt(ObjectUtils.getUtilDate(rs.getDate("INIT_APRVL_DT")));
        action.setApplDt(ObjectUtils.getUtilDate(rs.getDate("APPL_DT")));
        action.setExpdFsRsnCd(rs.getString("EXPD_FS_RSN_CD"));
        action.setEligCd(rs.getString("ELIG_CD"));
        action.setActnRsnCd(rs.getString("ACTN_RSN_CD"));
        action.setMultClsreRsnInd(rs.getString("MULT_CLSRE_RSN_IND"));
        action.setBnftYr(rs.getInt("BNFT_YR"));
        action.setBnftMth(rs.getInt("BNFT_MTH"));
        action.setVerNmb(rs.getInt(StatisticsConstants.COL_VER_NMB));
        action.setFamApplType(rs.getString("FAM_APPL_TYPE").trim());
        return action;
    };

    private final RowMapper<Date> redeterminationDetailsRowMapper = (rs, rowNum) -> {
        if(rs.getDate("NEXT_REDET_DT")!=null){
            return ObjectUtils.getUtilDate(rs.getDate("NEXT_REDET_DT"));
        }
		return null;
    };

    private final RowMapper<NomadsUser> nomadsUserRowMapper = (rs, rowNum) -> {
        NomadsUser user = new NomadsUser();
        user.setNomadsUsrid(rs.getString("NOMADS_USRID"));
        user.setFrstNm(rs.getString("FRST_NM"));
        user.setLstNm(rs.getString("LST_NM"));
        return user;
    };

	public List<ProgramCaseHistoryDetails> getProgramCaseHistoryDetailsForAllOfcCds(String ofcCds, String lastDayOfMonth, Long minVal, Long maxVal) {
		return this.getJdbcTemplate().query(
				getSql(GET_PROGRAM_CASE_HISTORY_DETAILS_FOR_ALL_OFFICES.replace("##OFC-CD##", ofcCds)),
				programCaseHistoryDetailsRowMapper, lastDayOfMonth, lastDayOfMonth, lastDayOfMonth, lastDayOfMonth,
				minVal, maxVal);
	}

	public void deleteProgramHistoryCases() {
		nswdJdbcTemplate.update(getSql(DELETE_PROGRAM_HISTORY_CASES),SystemInfoParam.getAsOfDate());
	}
	
	public Integer getProgramCaseHistoryDetailsForAllOfcCdCounts(String ofcCds, String lastDayOfMonth) {
		String sql = getSql(GET_PROGRAM_CASE_HISTORY_DETAILS_FOR_ALL_OFFICE_COUNTS.replace("##OFC-CD##", ofcCds));
        return this.getJdbcTemplate().queryForObject(sql, Integer.class, lastDayOfMonth, lastDayOfMonth, lastDayOfMonth, lastDayOfMonth);
	}
}

------------------------------------

package gov.nv.dwss.crystalreports.statistics.programhistory.model;

import java.math.BigDecimal;

import lombok.Data;

@Data
public class EligibilityVersionInfo {
    private int eligNum;
    private int chldNmb;
    private BigDecimal bnftAmt;
    private BigDecimal entlmAmt;
    private BigDecimal bnftRdctnAmt;
    private int verNmb;
    private BigDecimal totMthlyBnftAmt;
    private int bnftYr;
    private int bnftMth;
    private int ici;
    private String programType;
}

-------------------------------------
package gov.nv.dwss.crystalreports.statistics.programhistory.model;

import lombok.Data;

import static gov.nv.dwss.fw.batch.constants.FWConstants.EMPTY;

@Data
public class FamCaseStatsWorkingStorage {
    private String previousOfcCd = EMPTY;
    private String previousCasldId = EMPTY;
    private String previousAidCd = EMPTY;
    private String pceOfcCd;
    private String pceCasldId;
    private String pceAidCd;
    private String pceRecords;
    private String famCaseOfcCd;
    private String famCaseCasldId;
    private String famCaseAidCd;
    private String famCaseRecords;
}
------------------------------------

package gov.nv.dwss.crystalreports.statistics.programhistory.model;
import java.sql.Timestamp;
import java.util.Date;

import lombok.Data;

@Data
public class FamilyAction {
    private String actnTyp;
    private Timestamp actnTs;
    private String aidCd;
    private Date actnEffDt;
    private Date initAprvlDt;
    private Date applDt;
    private String expdFsRsnCd;
    private String eligCd;
    private String actnRsnCd;
    private String multClsreRsnInd;
    private int bnftYr;
    private int bnftMth;
    private int verNmb;
    private String famApplType;
    private int ici;
    private String programType;
}
---------------------------------
package gov.nv.dwss.crystalreports.statistics.programhistory.model;

import lombok.Data;

@Data
public class NomadsUser {
    private String nomadsUsrid;
    private String frstNm;
    private String lstNm;
    private String ofcCd;
    private String programOfcType;
    private String sprvsUnit;
	private String psnNmb;
}
---------------------------------
package gov.nv.dwss.crystalreports.statistics.programhistory.model;

import java.util.Date;

import lombok.Data;

@Data
public class ProgramCaseHistoryDetails {
	private String ofcCd;
	private String sprvsUnit;
	private String psnNmb;
	private String funcAreaCd;
	private String wrkrType;
	private String casldId;
	private String caseSts;
	private String mthlyRptrInd;
	private int hohUpi;
	private String fsSufx;
	private String hmlsInd;
	private int ici;
	private String prgmCaseType;
	private Date stsEffDt;
	private String prgmCaseSts;
	private String expdFsRsnCd;
	private Date initAprvlDt;
	private Date applDt;
	private String aidCd;
	private String eligCd;
	private String clsreRsnCd;
	private String multClsreRsnInd;
	private String sysClsreDnlRsn;
}
-----------------------------------
package gov.nv.dwss.crystalreports.statistics.programhistory.model;

import java.time.LocalDate;
import java.util.Date;

import lombok.Data;

@Data
public class WorkingStorage {
    private String fileAidCd;
    private String fileEligCd;
    private String prevOfcCd;
    private String prevSprvsUnit;
    private String prevFuncAreaCd;
    private String prevWrkrType;
    private String prevPsnNmb;
    private String wrkrId;
    private String wrkrNm;
    private String wrkrLstNm;
    private String wrkrFrstNm;
    private int count;
    private int lstYy;
    private int lstMm;
    private String flag;
    private int famUrowr;
    private int facUrowr;
    private Date initAprvlDt;
    private LocalDate actApplDtTs;
    private Date actApplDt;
    private int sqcod;
    private String offData;
    private int temp;
    private String leapFlag;
    private String errCd;
    private String errFirstFour;
    private String errLastFour;

}