public ArAppProgramCargo getArAppProgramCargoCopyFrom(String sourceAppNum,boolean isduplicateAppAssociation,String autoRegStatus ){
	    	log(7,"AutoRegistrationBO.getArAppProgramCargoCopyFrom() :: Start getArAppProgramCargoCopyFrom - "+ sourceAppNum);
	    	ArAppProgramCargo newCargo = new ArAppProgramCargo();
		
		ArAppProgramCargo  arAppProgCargo = new ArAppProgramCargo();
		java.sql.Timestamp defaultProgStatusDt = getCurrentMonthFirstDate(autoRegT1001Cargo.getAppRcvDt(), 0);
		if (autoRegT1002Cargo.getMcRqstSw() == 'Y' ){
			
			if (sourceAppNum != null) {
			    arAppProgCargo.setAppNum(sourceAppNum);
			}
			
			arAppProgCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			arAppProgCargo.setCreateDt(currentTime);
			arAppProgCargo.setProgStatusCd("PE");
			arAppProgCargo.setExpScreenDt(autoRegT1001Cargo.getAppRcvDt());
			arAppProgCargo.setProgStatusDt(ALSOPUtil.truncate(defaultProgStatusDt));
			arAppProgCargo.setRequestDt(ALSOPUtil.truncate(autoRegT1001Cargo.getAppRcvDt()));
			arAppProgCargo.setExpeditedSw(autoRegT1001Cargo.getExpeditedFapSw());
			arAppProgCargo.setPriorMedicaidCd("P0");
			arAppProgCargo.setProgramCd("MC");
			if(isduplicateAppAssociation){
			    if(AppRegConstants.AUTO_REG_PROCESS_AC.equalsIgnoreCase(autoRegStatus)){
				arAppProgCargo.setDenialReasonCd("049");
			    }else{
				arAppProgCargo.setDenialReasonCd("075");
			    }
			    arAppProgCargo.setProgStatusCd("DN");
			}
			
		}
    			
    			
		return arAppProgCargo;
	}
	
	public ArAppProgramIndvCargo getArAppProgramIndvCargoCopyFrom(ArAppProgramIndvCargo currentCargo,String sourceAppNum){
	    log(7,"AutoRegistrationBO.getArAppProgramIndvCargoCopyFrom() :: Start getArAppProgramIndvCargoCopyFrom - "+ sourceAppNum);
		ArAppProgramIndvCargo newCargo = new ArAppProgramIndvCargo();
		
		
		ArAppProgramIndvCargo arAppProgIndvCargo = null;
		ArAppProgramIndvCollection arAppProgIndvColl = new ArAppProgramIndvCollection(connection);
		T1004AppIndvCargo t1004Cargo = null;
		
		if (autoRegT1004CargoArray == null || autoRegT1004CargoArray.length == 0) {
			return null;
		    }
		
		for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
		    t1004Cargo = autoRegT1004CargoArray[i];
		    arAppProgIndvCargo = new ArAppProgramIndvCargo();
		    arAppProgIndvCargo.setAppNum(sourceAppNum);
		    arAppProgIndvCargo.setCreateDt(currentTime);
		    arAppProgIndvCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    arAppProgIndvCargo.setPriorMedicaidCd("P0");
		    arAppProgIndvCargo.setMaFormCd("AA");
		    arAppProgIndvCargo.setRequestDt(autoRegT1001Cargo.getAppRcvDt());
		    arAppProgIndvCargo.setSeparateFsSw('N');
		    arAppProgIndvCargo.setIndvId(t1004Cargo.getBridgesIndvId());
		    arAppProgIndvCargo.setProgramCd("MC");
		    if (t1004Cargo.getMcRqstSw() == 'Y') {
			arAppProgIndvCargo.setAidRequestSw('Y');
		    } else {
			arAppProgIndvCargo.setAidRequestSw('N');
		    }
		    
		    arAppProgIndvColl.add(arAppProgIndvCargo);
		}
		
		
		return arAppProgIndvCargo;
	}
	
	private ArAppAddrCargo getArAppAddrCargoFromArAppAddrCargo(ArAppAddrCargo arAppAddrCargo, String sourceAppNum) {
		ArAppAddrCargo newArAppAddrCargo = new ArAppAddrCargo();
		newArAppAddrCargo.setAppNum(sourceAppNum);
		newArAppAddrCargo.setAddrAptNum(arAppAddrCargo.getAddrAptNum());
		newArAppAddrCargo.setAddrCity(arAppAddrCargo.getAddrCity());
		newArAppAddrCargo.setAddrDwellingTypeCd(arAppAddrCargo.getAddrDwellingTypeCd());
		newArAppAddrCargo.setAddressTempSw(arAppAddrCargo.getAddressTempSw());
		newArAppAddrCargo.setAddrLine(arAppAddrCargo.getAddrLine());
		newArAppAddrCargo.setAddrRegionCd(arAppAddrCargo.getAddrRegionCd());
		newArAppAddrCargo.setAddrStateCd(arAppAddrCargo.getAddrStateCd());
		newArAppAddrCargo.setAddrStDirCd(arAppAddrCargo.getAddrStDirCd());
		newArAppAddrCargo.setAddrPostDirCd(arAppAddrCargo.getAddrPostDirCd());
		newArAppAddrCargo.setAddrStNm(arAppAddrCargo.getAddrStNm());
		newArAppAddrCargo.setAddrStNum(arAppAddrCargo.getAddrStNum());
		newArAppAddrCargo.setAddrStTypeCd(arAppAddrCargo.getAddrStTypeCd());
		newArAppAddrCargo.setAddrStNumFrac(arAppAddrCargo.getAddrStNumFrac());
		newArAppAddrCargo.setAddrZip4(arAppAddrCargo.getAddrZip4());
		newArAppAddrCargo.setAddrZip5(arAppAddrCargo.getAddrZip5());

		newArAppAddrCargo.setAddrTypeCd(arAppAddrCargo.getAddrTypeCd());
		newArAppAddrCargo.setValidationSw(arAppAddrCargo.getValidationSw());
		newArAppAddrCargo.setCreateDt(BiUtils.getToday());
		newArAppAddrCargo.setCreateUserId(ARConstants.APPLICATION_ASSOCIATION);

		return newArAppAddrCargo;
	}
	
	private boolean updateT1004AppIndv(T1004AppIndvCargo cargo) throws ApplicationException, FrameworkException{
	    if(cargo == null) return false;
	    log(7,"AutoRegistrationBO.updateT1004AppIndv() :: Start ");
	    T1004AppIndvCollection t1004AppIndvColl = new T1004AppIndvCollection(connection);
	    t1004AppIndvColl.setCargo(cargo);
	    t1004AppIndvColl.select("updateBatchIndByAppNum");
		return true;
	}
	
	public void deleteRecord(String sourceAppNum) throws Exception {
		ArAppIndvCollection apCollection = null;
		ArAppIndvCargo apCargo = null;
		ArAppIndvCargo[] apCargoarray = null;

		try {
			apCollection = new ArAppIndvCollection(connection);
			apCargo= new ArAppIndvCargo();
			apCargo.setAppNum(sourceAppNum);
			apCollection.setCargo(apCargo);
			apCargoarray=(ArAppIndvCargo[]) apCollection.select("findByAppNum");
			if (apCargoarray !=null && apCargoarray.length>0) {
				apCollection.clear();
				apCollection.setResults(apCargoarray);
				apCollection.delete(apCollection);				
			}

		} catch (Exception te) {
			log(7, "***** Exception occurred in deleteRecord() from AutoRegistrationBO *****");
			log(ILog.ERROR, "Exception in AutoRegistrationBO.deleteRecord() sourceAppNum: " + sourceAppNum + "\n" + te.getMessage() + "\n", te);
			throw te;
		}
	}
	
	public ArAppAddrCargo getArAppAddrCargoFromDcCaseAddressesCargo(DcCaseAddressesCargo dcCaseAddressesCargo, String sourceAppNum) {
		ArAppAddrCargo newArAppAddrCargo = new ArAppAddrCargo();
		if (sourceAppNum != null) {
			newArAppAddrCargo.setAppNum(sourceAppNum);
		}
		newArAppAddrCargo.setAddrAptNum(dcCaseAddressesCargo.getAddrAptNum());
		newArAppAddrCargo.setAddrCity(dcCaseAddressesCargo.getAddrCity());
		newArAppAddrCargo.setAddrDwellingTypeCd(dcCaseAddressesCargo.getAddrDwellingTypeCd());
		newArAppAddrCargo.setAddressTempSw(dcCaseAddressesCargo.getAddressTempSw());
		newArAppAddrCargo.setAddrLine(dcCaseAddressesCargo.getAddrLine());
		newArAppAddrCargo.setAddrRegionCd(dcCaseAddressesCargo.getAddrRegionCd());
		newArAppAddrCargo.setAddrStateCd(dcCaseAddressesCargo.getAddrStateCd());
		newArAppAddrCargo.setAddrStDirCd(dcCaseAddressesCargo.getAddrStDirCd());
		newArAppAddrCargo.setAddrPostDirCd(dcCaseAddressesCargo.getAddrPostDirCd());
		newArAppAddrCargo.setAddrStNm(dcCaseAddressesCargo.getAddrStNm());
		newArAppAddrCargo.setAddrStNum(dcCaseAddressesCargo.getAddrStNum());
		newArAppAddrCargo.setAddrStTypeCd(dcCaseAddressesCargo.getAddrStTypeCd());
		newArAppAddrCargo.setAddrStNumFrac(dcCaseAddressesCargo.getAddrStNumFrac());
		newArAppAddrCargo.setAddrZip4(dcCaseAddressesCargo.getAddrZip4());
		newArAppAddrCargo.setAddrZip5(dcCaseAddressesCargo.getAddrZip5());

		newArAppAddrCargo.setAddrTypeCd(dcCaseAddressesCargo.getAddrTypeCd());
		newArAppAddrCargo.setValidationSw(dcCaseAddressesCargo.getAddrValidatedSw());
		newArAppAddrCargo.setCreateDt(BiUtils.getToday());
		newArAppAddrCargo.setCreateUserId(ARConstants.APPLICATION_ASSOCIATION);

		return newArAppAddrCargo;
	}
	
	public ArAppIndvCargo getArAppIndvCargoFromArAppIndvCargo(ArAppIndvCargo arAppIndvCargo, String sourceAppNum) {
		ArAppIndvCargo newArAppIndvCargo = new ArAppIndvCargo();
		newArAppIndvCargo.setAppNum(sourceAppNum);
		newArAppIndvCargo.setCreateDt(BiUtils.getToday());
		newArAppIndvCargo.setEmployeeSw('N');
		newArAppIndvCargo.setIndvId(arAppIndvCargo.getIndvId());
		newArAppIndvCargo.setHeadOfHouseholdSw(arAppIndvCargo.getHeadOfHouseholdSw());
		newArAppIndvCargo.setVoidSw('N');
		newArAppIndvCargo.setNewIndv('Y');
		newArAppIndvCargo.setAssociatedIndvSw('Y');

		return newArAppIndvCargo;
	}
	
	public void updateArAppIndvCargoForMSP( String sourceAppNum) throws Exception {
		ArAppIndvCargo newArAppIndvCargo = new ArAppIndvCargo();
		AppIndividualBO appIndividualBO = new AppIndividualBO(connection);
		ArAppIndvCollection arAppIndvColl = new ArAppIndvCollection(connection);
		T1004AppIndvCargo t1004Cargo = new T1004AppIndvCargo();
		if (autoRegT1004CargoArray == null || autoRegT1004CargoArray.length == 0) {
		    newArAppIndvCargo = null;
		}else if (autoRegT1004CargoArray != null && autoRegT1004CargoArray.length > 0) {
		
		    for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
			newArAppIndvCargo = new ArAppIndvCargo();
			try{
			    int key = (int) autoRegT1004CargoArray[i].getIndvSeqNum();
			    	if (indvMap.containsKey(key)) {
			    	    	if (indvMap.get(key) != 0) {
        			    	    	autoRegT1004CargoArray[i].setBridgesIndvId((Long) indvMap.get(key));
        		    			t1004Cargo = autoRegT1004CargoArray[i];
        		    			updateT1004AppIndvTable(t1004Cargo);
			    		 } else {
			    			autoRegT1004CargoArray[i].setBridgesIndvId(generateIndvId());
						t1004Cargo = autoRegT1004CargoArray[i];
				    		updateT1004AppIndvTable(t1004Cargo);
			    		 }
			    	}
				newArAppIndvCargo.setAppNum(sourceAppNum);
				/*newArAppIndvCargo.setCreateDt(BiUtils.getToday());
				newArAppIndvCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);*/
				newArAppIndvCargo.setEmployeeSw('N');
				newArAppIndvCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
				newArAppIndvCargo.setHeadOfHouseholdSw(autoRegT1004CargoArray[i].getPrimPrsnSw());
				newArAppIndvCargo.setVoidSw('N');
				newArAppIndvCargo.setNewIndv('Y');
				newArAppIndvCargo.setAssociatedIndvSw('Y');
				arAppIndvColl.add(newArAppIndvCargo);
			}catch (Exception e) {
			    if (this.con != null) {
				this.con.rollback();
			    }
			    log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArAppIndvCargoForMSP() sourceAppNum: " + sourceAppNum + "\n" + e.getMessage() + "\n", e);
			    hasExceptionOccurred = true;
			    throw e;
			}
			
		    }
		    
		    arAppIndvColl.insert(arAppIndvColl);
		
		 }
		
	}
	
	public ArAppIndvCargo getArAppAddrCargoFromDcCaseIndividualCargo(DcCaseIndividualCargo dcCaseIndividualCargo, String sourceAppNum) {
		ArAppIndvCargo newArAppIndvCargo = new ArAppIndvCargo();
		newArAppIndvCargo.setAppNum(sourceAppNum);
		newArAppIndvCargo.setCreateUserId(ARConstants.APPLICATION_ASSOCIATION);
		newArAppIndvCargo.setCreateDt(BiUtils.getToday());
		newArAppIndvCargo.setEmployeeSw('N');
		newArAppIndvCargo.setIndvId(dcCaseIndividualCargo.getIndvId());
		newArAppIndvCargo.setHeadOfHouseholdSw(dcCaseIndividualCargo.getHeadOfHouseholdSw()==0? 'N' :dcCaseIndividualCargo.getHeadOfHouseholdSw());
		newArAppIndvCargo.setVoidSw('N');
		newArAppIndvCargo.setNewIndv('Y');
		newArAppIndvCargo.setAssociatedIndvSw('Y');

		return newArAppIndvCargo;
	}
	
	public Map<Long,T1004AppIndvCargo> verifyIfIndvsExist(String sourceAppNum, T1004AppIndvCargo[] tAppIndvs) throws Exception{
		Map<Long,T1004AppIndvCargo> result = new HashMap<Long,T1004AppIndvCargo>();
		long indvId = 0;
		for(T1004AppIndvCargo cargo : tAppIndvs){
				indvId = matchWithExisting(cargo.getBridgesIndvId() == 0 ? cargo : null);
				cargo.setBridgesIndvId(indvId);
				if(indvId > 0)
					result.put(indvId, cargo);
		}
		return result;
	}
	
	public long matchWithExisting(T1004AppIndvCargo t1004AppIndvCargo){
		if(t1004AppIndvCargo == null) return 0;
		DcIndvCargo dcIndvCargo = new DcIndvCargo();
		ArFileClearanceBO fileClrBO = new ArFileClearanceBO(connection);
		long indvId = 0;
		log(7,"AutoRegistrationBO.matchWithExisting() :: Start ");
		dcIndvCargo.setDobDt(t1004AppIndvCargo.getBrthDt());
		dcIndvCargo.setGenderCd(t1004AppIndvCargo.getSexInd());
		dcIndvCargo.setFirstName(t1004AppIndvCargo.getFstNam());
		dcIndvCargo.setLastName(t1004AppIndvCargo.getLastNam());
		dcIndvCargo.setMidName(t1004AppIndvCargo.getMidInit());
		
		CvDcMciIndvCollection cvDcMciIndvCollection1 = null;
		boolean check1 = true;
		try{
			cvDcMciIndvCollection1 = fileClrBO.fileClear(dcIndvCargo, "search-name");
		}catch(Exception e){
			/*PMD_Override - R6 -  Exception is not being propagated because the process should continue with the next individual; 
			Used to mark as not existing individual.*/
			PMDRules.markApprovedCatchBlock("R6");
			log(7, "matchWithExisting - EXCEPTION WHEN CALLIN IIR  -- DcIndvCargo: " + dcIndvCargo + " :: " + e.getMessage());
			// log(ILog.ERROR, "Exception in AutoRegistrationBO.matchWithExisting(): " + "\n" + e.getMessage() + "\n", e);
		}
		
		if (cvDcMciIndvCollection1 != null){
			for (int j = 0; j < cvDcMciIndvCollection1.size(); j++) {
				//get one person
				CvDcMciIndvCargo cvDcMciIndvCargo = cvDcMciIndvCollection1.getResults(j);
				if (cvDcMciIndvCargo.getHistorySeq() == 100) {
					//person 100% encountered
					check1 = false;
					indvId = cvDcMciIndvCargo.getIndvId();
				}
			}
		}
		
		if (check1) {
			CvDcMciIndvCollection cvDcMciIndvCollection2 = null;
			try{
				//call fileClear by "search-name" with matchTolerance = "Loose";
				cvDcMciIndvCollection2 = fileClrBO.fileClearAutoReg(dcIndvCargo, "search-name");
			}catch(Exception e){
				/*PMD_Override - R6 -  Exception is not being propagated because the process should continue with the next individual; 
				Used to mark as not existing individual.*/
				PMDRules.markApprovedCatchBlock("R6");
				log(7,"matchWithExisting - EXCEPTION WHEN CALLIN IIR  -- DcIndvCargo: " + dcIndvCargo + " :: " + e.getMessage());
				// log(ILog.ERROR, "Exception in AutoRegistrationBO.matchWithExisting() check1: " + check1 + "\n" + e.getMessage() + "\n", e);
			}
			if (cvDcMciIndvCollection2 != null){
				for (int j = 0; j < cvDcMciIndvCollection2.size(); j++) {
					CvDcMciIndvCargo cvDcMciIndvCargo = cvDcMciIndvCollection2.getResults(j);
					if (cvDcMciIndvCargo.getHistorySeq() == 100) {
						indvId = cvDcMciIndvCargo.getIndvId();
					}
				}
			} 
		}
		return indvId;
	}
	
	public void updateFFMInbound(String sourceAppNum, long associatedCaseNumLong) throws ApplicationException, FrameworkException
	{
		InFfmInboundAppsCollection inFfmInboundAppsCollection =  new InFfmInboundAppsCollection(connection);
		InFfmInboundAppsCargo[] inFfmInboundAppsCargoArray = null;

		Object[] methodArgs = new Object[1];
		methodArgs[0] = sourceAppNum;
		
		inFfmInboundAppsCargoArray = (InFfmInboundAppsCargo[])inFfmInboundAppsCollection.select("findByAppNumForAssoc",methodArgs);
		
		if(inFfmInboundAppsCargoArray != null && inFfmInboundAppsCargoArray.length > 0)
		{
			for(InFfmInboundAppsCargo ffmCargo : inFfmInboundAppsCargoArray)
			{
				ffmCargo.setCaseNum(associatedCaseNumLong);
				inFfmInboundAppsCollection.clear();
				inFfmInboundAppsCollection.setCargo(ffmCargo);
				inFfmInboundAppsCollection.update(inFfmInboundAppsCollection);
			}
		}
		
		
	}
	public void insertIntoDocLinkTable(String appNum, String docId, String jobId) throws ApplicationException, FrameworkException
	{
	    log(7, "Begin insertIntoDocLinkTable() appNum - " + appNum);
		InSsaMspLisDocLinkCollection inSsaMspLisDocLinkCollection = new InSsaMspLisDocLinkCollection(connection);
		if (null != appNum && null != docId)
		{
			InSsaMspLisDocLinkCargo inSsaMspLisDocLinkCargo = new InSsaMspLisDocLinkCargo();
			inSsaMspLisDocLinkCargo.setAppNum(appNum);
			inSsaMspLisDocLinkCargo.setDocId(docId);
			inSsaMspLisDocLinkCargo.setCreateUserId(jobId.replaceAll("-", ""));
			inSsaMspLisDocLinkCollection.add(inSsaMspLisDocLinkCargo);
			inSsaMspLisDocLinkCollection.insert(inSsaMspLisDocLinkCollection);
			inSsaMspLisDocLinkCollection.clear();
		}
	}
	
	
	
	
}