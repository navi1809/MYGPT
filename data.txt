didnt answer anything on rest template properly
@Transactional didnt answer anything properly
answered @primary and @Qualifier
Not satisfied with where and having clasuses answers
Not able to give an example using having clause
1) What will be the output of the following code snippet?
public class ExceptionExample {
    public static void main(String[] args) {
        try {
            throw new ArithmeticException("Division by zero");
        } catch (Exception e) {
            System.out.println("Caught: " + e.getMessage());
        } catch (ArithmeticException e) {
            System.out.println("Caught ArithmeticException");
        }
    }
}

Wrong Answer

2) public class TestException {
    public static void main(String[] args) {
        try {
            methodA();
        } catch (Exception e) {
            System.out.println("Caught Exception");
        }
    }

    public static void methodA() {
        throw new RuntimeException("Runtime Exception");
    }
}

Partially correct 

3) What will the following code output?
String a = "abc";
            String b = "abc";
            System.out.println(a == b);          // (1)
            System.out.println(a.equals(b));     // (2)

            String c = new String("abc");
            System.out.println(a == c);          // (3)
            System.out.println(a.equals(c));     // (4)
			
correct answer

4) What will the following code output, and why?
String str1 = "Hello";
            String str2 = "Hel" + "lo";
            System.out.println(str1 == str2);       // (1)

            String str3 = "Hel";
            String str4 = str3 + "lo";
            System.out.println(str1 == str4);       // (2)
			
			took long time to respond, given corerct answer but not satisfied with the explanation
6) What will the following code output, and why?
 List list = Arrays.asList("one", "two", "three", "four");
            List result = list.stream()
                .peek(System.out::println)
                .filter(s -> s.length() > 3)
                .peek(System.out::println)
                .collect(Collectors.toList());
				
				took long time and answered correctly
7) What will be the output

ArrayList<Integer> list = new ArrayList<>(Arrays.asList(1, 2, 3));
for (Integer i : list) {
    if (i == 2) list.remove(i);
}
System.out.println(list.size());

Took very long time to respond and not justified properly