public boolean validApplicationCheck(String appNum, Map indvMap) throws Exception {
	log(7, "Begin AutoRegistrationBO.validApplicationCheck() ");
	
	ArCpeEligDetailCargo arCpeEligCargo = null;
	ArCpeEligDetailCollection arCpeEligColl = null;
	AppIncomeCustomCargo[] cpeEligArray = null;
	DcCpeEligDetailCargo dcCpeEligCargo = null;
	DcCpeEligDetailCollection dcCpeEligColl = null;
	AppIncomeCustomCargo[] dcCpeEligArray = null;
	ArHpeEligDetailIndvCargo arHpeEligIndvCargo = null;
	ArHpeEligDetailIndvCollection arHpeEligIndvColl = null;
	AppIncomeCustomCargo[] hpeEligArray = null;
	ArMpeEligDetailCargo arMpeEligCargo = null;
	ArFppeEligDetailCargo arFppeCargo = null;
	ArMpeEligDetailCollection arMpeEligColl = null;
	ArFppeEligDetailCollection arFppeColl = null;
	ArMpeEligDetailCargo[] arMpeEligCargoArray = null;
	ArFppeEligDetailCargo[] arFppeCargoArray = null;
	T1068_APP_MSPCargo t1068Cargo = new T1068_APP_MSPCargo();
	T1068_APP_MSPCollection t1068Coll = new T1068_APP_MSPCollection(connection);
	T1068_APP_MSPCargo[] t1068CargoArray = null;
	T1006AppInPermdCollection t1006AppInPermdColl = new T1006AppInPermdCollection(connection);
	T1006AppInPermdCargo t1006AppInPermdCargo = new T1006AppInPermdCargo();
	T1006AppInPermdCargo[] t1006AppInPermdCargoArray = null;
	String autoRegExpCode = AppRegConstants.AUTO_REG_PROCESS_PE;
	
	try {
		if(appMACategory || appFPCategory){
			List<Long> indvList = new ArrayList<Long>();
			long indvId = 0;
			for (Object indvKey : indvMap.keySet()) {
				 indvId = (Long) indvMap.get(indvKey);
				if(indvId!=0){
				   indvList.add(indvId);
				}
			 }
			if(indvList!=null && indvList.size()>0){
				 String MAGIPESwitch =  ReferenceTableManager.getValueByColumn(true, "COVID19SW", "MAGIPE", "DESCRIPTION");
				 String AABDSwitch   =  ReferenceTableManager.getValueByColumn(true, "COVID19SW", "AABDPE", "DESCRIPTION");
				 Object[] params ={indvList};
				 arCpeEligCargo = new ArCpeEligDetailCargo();
				 arCpeEligColl = new ArCpeEligDetailCollection(connection);
				 ArCpeEligDetailCargo[] arEligCargoArray = null;
				 arEligCargoArray = (ArCpeEligDetailCargo[]) arCpeEligColl.select("findByIndvEndDt", params);
				 if(arEligCargoArray!=null && arEligCargoArray.length>0  && autoRegT1004CargoArray!=null && autoRegT1004CargoArray.length>0){
					 for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
						 int key = (int) autoRegT1004CargoArray[i].getIndvSeqNum();
						 int age= ageCal(autoRegT1004CargoArray[i].getBrthDt());
						 if (indvMap.containsKey(key) && (Long)indvMap.get(key)!=0 ) {
							 for(int m=0;m<arEligCargoArray.length;m++){    
							      	// CPE CHECK
								    if (age<19) {
								    		if((Long)indvMap.get(key) == arEligCargoArray[m].getIndvId()){
								    			createEDMTask(appNum);
								    			updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegExpCode, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
								    			return false;
								    		}
								      } 
								      //// MANGI CHECK
								      else if("Y".equalsIgnoreCase(MAGIPESwitch)&& age>=19 && age<65){
								    		if((Long)indvMap.get(key) == arEligCargoArray[m].getIndvId()){
								    			createEDMTask(appNum);
							    				updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegExpCode, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
							    				return false;
								    		}
								      }
								    // AABD CHECK
								    else if("Y".equalsIgnoreCase(AABDSwitch) && age>=65){
								    		if((Long)indvMap.get(key) == arEligCargoArray[m].getIndvId()){
								    			createEDMTask(appNum);
							    				updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegExpCode, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
							    				return false;
								    		}
								      }
								    	
								 }
							}
					 }
				 }
	        }
	
		}	
		
		
		int size = indvMap.size();
	    for (Object key : indvMap.keySet()) {
		long indvId = (Long) indvMap.get(key);
		
		if (indvId == 0)
		    continue;
		
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.YEAR, -1);
		java.util.Date pastYear = cal.getTime();
		if (appHPECategory || appMPECategory || appFPPECategory) {
		    
		 /*  
		    
		    log(7, "AutoRegistrationBO.validApplicationCheck() :: Checking arCpeElig table");
		    
		    arCpeEligCargo.setIndvId(indvId);
		    
		    arCpeEligColl.add(arCpeEligCargo);
		    cpeEligArray = (AppIncomeCustomCargo[]) arCpeEligColl.select("findDataByIndvID");
		    if (cpeEligArray != null && cpeEligArray.length > 0) {
			AppIncomeCustomCargo cpeEligCargo = null;
			for (int j = 0; j < cpeEligArray.length; j++) {
			    cpeEligCargo = cpeEligArray[j];
			    java.util.Date appRecvdDt = new java.util.Date(cpeEligCargo.getAppRecvdDt().getTime());
			    if (cpeEligCargo.getDenialReasonCd().equals("C1") && Year.compareTo(appRecvdDt) < 0) {
				log(7, "AutoRegistrationBO.validApplicationCheck() :: ArCpeEligDetail table : PE check Failed " + appNum);
				createEDMTask(appNum);
				updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegExpCode, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
				
				return false;
			    }
			}
		    } else {
			log(7, "AutoRegistrationBO.validApplicationCheck() :: Checking dcCpeElig table");
			dcCpeEligCargo = new DcCpeEligDetailCargo();
			dcCpeEligColl = new DcCpeEligDetailCollection(connection);
			
			dcCpeEligCargo.setIndvId(indvId);
			
			dcCpeEligColl.add(dcCpeEligCargo);
			dcCpeEligArray = (AppIncomeCustomCargo[]) dcCpeEligColl.select("findDataByIndvID");
			if (dcCpeEligArray != null && dcCpeEligArray.length > 0) {
			    AppIncomeCustomCargo cpeEligCargo = null;
			    for (int j = 0; j < dcCpeEligArray.length; j++) {
				cpeEligCargo = dcCpeEligArray[j];
				java.util.Date appRecvdDt = new java.util.Date(cpeEligCargo.getAppRecvdDt().getTime());
				if (cpeEligCargo.getDenialReasonCd().equals("C1") && Year.compareTo(appRecvdDt) < 0) {
				    log(7, "AutoRegistrationBO.validApplicationCheck() :: DcCpeEligDetail table : PE check Failed " + appNum);
				    createEDMTask(appNum);
				    updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegExpCode, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
				    
				    return false;
				}
			    }
			}
		    }*/
		    
		    log(7, "AutoRegistrationBO.validApplicationCheck() :: Checking arHpeEligIndv table");
		    
		    arHpeEligIndvCargo = new ArHpeEligDetailIndvCargo();
		    arHpeEligIndvColl = new ArHpeEligDetailIndvCollection(connection);
		    
		    arHpeEligIndvCargo.setIndvId(indvId);
		    
		    arHpeEligIndvColl.add(arHpeEligIndvCargo);
		    hpeEligArray = (AppIncomeCustomCargo[]) arHpeEligIndvColl.select("findHpeByAppIndvId");
		    
		    if (hpeEligArray != null && hpeEligArray.length > 0) {
			AppIncomeCustomCargo cpeEligCargo = null;
			for (int j = 0; j < hpeEligArray.length; j++) {
			    cpeEligCargo = hpeEligArray[j];
			    java.util.Date appRecvdDt = new java.util.Date(cpeEligCargo.getHpeBeginDt().getTime());
			    if (cpeEligCargo != null && cpeEligCargo.getHpeEligSw() == 'Y' && pastYear.compareTo(appRecvdDt) < 0) {
				log(7, "AutoRegistrationBO.validApplicationCheck() :: ArHpeEligDetailIndv table : PE check Failed " + appNum);
				createEDMTask(appNum);
				updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegExpCode, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
				
				return false;
			    }
			}
		    }
		    
		    log(7, "AutoRegistrationBO.validApplicationCheck() :: Checking arMpeElig table");
	    if(appMPECategory && !appFPPECategory){
		    arMpeEligCargo = new ArMpeEligDetailCargo();
		    arMpeEligColl = new ArMpeEligDetailCollection(connection);
		    
		    arMpeEligCargo.setIndvId(indvId);
		    
		    arMpeEligColl.add(arMpeEligCargo);
		    arMpeEligCargoArray = (ArMpeEligDetailCargo[]) arMpeEligColl.select("findMPEByIndvIdList");
		    if (arMpeEligCargoArray != null && arMpeEligCargoArray.length > 0) {
			for (int j = 0; j < arMpeEligCargoArray.length; j++) {
			    if (pastYear.compareTo(arMpeEligCargoArray[j].getMpeBeginDt()) < 0) {
				log(7, "AutoRegistrationBO.validApplicationCheck() :: ArMpeEligDetail table : PE check Failed " + appNum);
				createEDMTask(appNum);
				updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegExpCode, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
				
				return false;
			    }
			}
		    }
		    
		}else if(appFPPECategory){
			arFppeCargo = new ArFppeEligDetailCargo();
			arFppeColl = new ArFppeEligDetailCollection(connection);
			arFppeCargo.setIndvId(indvId);
			arFppeColl.add(arFppeCargo);
			arFppeCargoArray = (ArFppeEligDetailCargo[]) arFppeColl.select("findFppeByIndvIdList");
			if(arFppeCargoArray != null && arFppeCargoArray.length > 0){
				for(ArFppeEligDetailCargo fppeCargo : arFppeCargoArray){
					if(pastYear.compareTo(fppeCargo.getFppeBeginDt()) < 0){
						log(7, "AutoRegistrationBO.validApplicationCheck() :: ArFppeEligDetail table : FPPE check Failed " + appNum);
						createEDMTask(appNum);
						updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegExpCode, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
						return false;
					}
				}
			}
		}
	}
}
		//This would not apply to FPPE; would reduce number of failures
	    if (appHPECategory || appMPECategory) {
		autoRegExpCode = AppRegConstants.AUTO_REG_PROCESS_IC;
		// Checking alien status
	/*	log(7, "AutoRegistrationBO.validApplicationCheck() :: for appCPECategory : Alien check");
		t1006AppInPermdCargo.setAppNum(appNum);
		t1006AppInPermdColl.add(t1006AppInPermdCargo);
		t1006AppInPermdCargoArray = (T1006AppInPermdCargo[]) t1006AppInPermdColl.select("findByAppNumInboundFFMApps");
		if (t1006AppInPermdCargoArray == null || t1006AppInPermdCargoArray.length == 0) {
		    log(7, "AutoRegistrationBO.validApplicationCheck() :: for appCPECategory : Alien check Failed " + appNum);
		    createEDMTask(appNum);
		    updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegExpCode, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
		    
		    return false;
		}*/
		
		T1060_APP_IN_HPECollection t1060_APP_IN_HPEColl = new T1060_APP_IN_HPECollection(connection);
		T1060_APP_IN_HPECargo[] t1060HPECargoArray = null;
		if (appHPECategory) {
		    Object appNumArgs[] = { appNum };
		    t1060HPECargoArray = (T1060_APP_IN_HPECargo[]) t1060_APP_IN_HPEColl.select("findByAppNum", appNumArgs);
		}
		
		T1004AppIndvCargo t1004Cargo = new T1004AppIndvCargo();
		T1004AppIndvCargo[] t1004CargoArray = autoRegT1004CargoArray;
		if (t1004CargoArray != null && t1004CargoArray.length > 0) {
		    for (int k = 0; k < t1004CargoArray.length; k++) {
			t1004Cargo = t1004CargoArray[k];
			boolean age = false;
			java.sql.Timestamp indvdbrthDt = t1004Cargo.getBrthDt();
			age = ageCheck(indvdbrthDt);
			
			boolean cpeIndv = true;
			if (appHPECategory && t1060HPECargoArray != null && t1060HPECargoArray.length > 0) {
			    boolean hpeIndv = false;
			    for (int j = 0; j < t1060HPECargoArray.length; j++) {
				if (t1060HPECargoArray[j].getIndvSeqNum() == t1004Cargo.getIndvSeqNum()) {
				    hpeIndv = true;
				    cpeIndv = false;
				    break;
				}
			    }
			    
			    if (!hpeIndv && t1004Cargo.getMaRqstSw() != 'Y') {
				cpeIndv = false;
			    }
			}
			t1006AppInPermdCargo.setAppNum(appNum);
			t1006AppInPermdColl.add(t1006AppInPermdCargo);
			t1006AppInPermdCargoArray = (T1006AppInPermdCargo[]) t1006AppInPermdColl.select("findByAppNumInboundFFMApps");
			for (int i = 0; i < t1006AppInPermdCargoArray.length; i++) {
			    if (t1004Cargo == null || t1006AppInPermdCargoArray[i] == null || (cpeIndv && age && t1006AppInPermdCargoArray[i].getIndvSeqNum() == t1004Cargo.getIndvSeqNum() && t1006AppInPermdCargoArray[i].getUsCtznSw() != 'Y' && t1004Cargo.getDocumentedAlienSw() == 'N')) {
				log(7, "AutoRegistrationBO.validApplicationCheck() :: for appCPECategory : Alien check Failed " + appNum);
				createEDMTask(appNum);
				updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegExpCode, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
				return false;
			    }
			}
		    }
		}
		
	/*	// Income check
		log(7, "AutoRegistrationBO.validApplicationCheck() :: for appCPECategory : Income check");
		String FPLValue = "";
		String additionalFPLValue = "";
		int additionalPeople = size - 8;
		double additionalAmount = 0.00;
		
		if (additionalPeople > 0 && additionalPeople <= 10) {
		    FPLValue = ReferenceTableManager.getValueByColumn(true, "EDMCMELIMITS", "8", "PERCENT100");
		    additionalFPLValue = ReferenceTableManager.getValueByColumn(true, "EDMCMELIMITS", "ADDLPERS", "PERCENT100");
		    additionalAmount = ((Double.valueOf(additionalFPLValue) * 2.09) / 12) * additionalPeople;
		} else {
		    FPLValue = ReferenceTableManager.getValueByColumn(true, "EDMCMELIMITS", String.valueOf(size), "PERCENT100");
		}
		
		if (FPLValue != null && FPLValue.equals("")) {
		    FPLValue = "0";
		}
		
		double limitAmount = Math.round((Double.valueOf(FPLValue) * 2.09) / 12 + additionalAmount);
		boolean incCheck = familyIncCheck(appNum, limitAmount);
		if (incCheck == false) {
		    log(7, "AutoRegistrationBO.validApplicationCheck() :: for appCPECategory : Income check Failed " + appNum);
		    createEDMTask(appNum);
		    updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegExpCode, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
		    
		    return false;
		}
		*/
	    }
	    
	    if (appSSAMSPCategory) {
		log(7, "AutoRegistrationBO.validApplicationCheck() :: for appSSAMSPCategory ");
		t1068Cargo.setAppNum(appNum);
		t1068Coll.add(t1068Cargo);
		t1068CargoArray = (T1068_APP_MSPCargo[]) t1068Coll.select("findByAppNum");
		if (t1068CargoArray != null && t1068CargoArray.length > 0) {
		    for (int i = 0; i < t1068CargoArray.length; i++) {
			if (t1068CargoArray[i].getQuestionThreeSw() == 'Y') {
			    mSPAppStatus = "DP";
			} else if (t1068CargoArray[i].getExtHelpAprSw() == 'Y') {
			    if (t1068CargoArray[i].getFplIncomePercent() > 150) {
				mSPAppStatus = "DP";
			    }
			} else {
			    if (t1068CargoArray[i].getFplIncomePercent() > 135) {
				mSPAppStatus = "DP";
			    }
			}
		    }
		    
		} else {
		    
		    log(7, "AutoRegistrationBO.validApplicationCheck() :: PE check failed for SSA app " + appNum);
		    createEDMTask(appNum);
		    updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, AppRegConstants.AUTO_REG_PROCESS_PE, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
		    
		    return false;
		}
	    }
	    
	    return true;
	    
	} catch (Exception e) {
	    if (this.con != null) {
		this.con.rollback();
	    }
	    hasExceptionOccurred = true;
	    updateAutoRegExcpTable(appNum, autoRegExpCode, AppRegConstants.AUTO_REG_EXCP_STATUS_EX);
		log(ILog.ERROR, "Exception in AutoRegistrationBO.validApplicationCheck() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    if (this.con != null) {
		this.con.commit();
	    }
	    
	    throw e;
	} finally {
	    arCpeEligCargo = null;
	    arCpeEligColl = null;
	    cpeEligArray = null;
	    dcCpeEligCargo = null;
	    dcCpeEligColl = null;
	    dcCpeEligArray = null;
	    arHpeEligIndvCargo = null;
	    arHpeEligIndvColl = null;
	    hpeEligArray = null;
	    arMpeEligCargo = null;
	    arMpeEligColl = null;
	    arMpeEligCargoArray = null;
	    t1068Cargo = null;
	    t1068Coll = null;
	    t1068CargoArray = null;
	    t1006AppInPermdColl = null;
	    t1006AppInPermdCargo = null;
	    t1006AppInPermdCargoArray = null;
	}
    }
    
    public boolean familyIncCheck(String appNum, double monthlyFPLValue) throws Exception {
	log(7, "Begin AutoRegistrationBO.familyIncCheck() ");
	
	double totalIncome = 0;
	double t1024Income = 0;
	double t1023Income = 0;
	double t1022Income = 0;
	
	T1024AppInUeiCargo t1024Cargo = new T1024AppInUeiCargo();
	T1024AppInUeiCollection t1024Coll = new T1024AppInUeiCollection(connection);
	T1023AppInSelfeCargo t1023Cargo = new T1023AppInSelfeCargo();
	T1023AppInSelfeCollection t1023Coll = new T1023AppInSelfeCollection(connection);
	T1022AppInWagedCargo t1022dCargo = new T1022AppInWagedCargo();
	T1022AppInWagedCollection t1022Coll = new T1022AppInWagedCollection(connection);
	T1021AppInEmplCargo t1021empCargo = new T1021AppInEmplCargo();
	T1021AppInEmplCollection t1021Coll = new T1021AppInEmplCollection(connection);
	AppIncomeCustomCargo incomeCargo = new AppIncomeCustomCargo();
	T1024AppInUeiCargo[] t1024CargoArray = null;
	T1023AppInSelfeCargo[] t1023CargoArray = null;
	T1021AppInEmplCargo[] t1021empCargoArray = null;
	AppIncomeCustomCargo[] incomeCargoArray = null;
	boolean dataCheck = false;
	
	try {
	    
	    Object appNumArgs[] = { appNum };
	    t1024CargoArray = (T1024AppInUeiCargo[]) t1024Coll.select("findIncByAppNum", appNumArgs);
	    if (t1024CargoArray != null && t1024CargoArray.length > 0) {
	    	dataCheck = true;
		for (int i = 0; i < t1024CargoArray.length; i++) {
		    t1024Cargo = t1024CargoArray[i];
		    if (t1024Cargo.getFreqCd() == 'W') {
			t1024Income = t1024Income + (t1024Cargo.getUeiAmt() * 4.3);
		    } else if (t1024Cargo.getFreqCd() == 'B') {
			t1024Income = t1024Income + (t1024Cargo.getUeiAmt() * 2.15);
		    } else if (t1024Cargo.getFreqCd() == 'M') {
			t1024Income = t1024Income + (t1024Cargo.getUeiAmt());
		    } else if (t1024Cargo.getFreqCd() == 'Q') {
			t1024Income = t1024Income + (t1024Cargo.getUeiAmt() / 3);
		    } else if (t1024Cargo.getFreqCd() == 'S') {
			t1024Income = t1024Income + (t1024Cargo.getUeiAmt() * 2);
		    } else if (t1024Cargo.getFreqCd() == 'D') {
			t1024Income = t1024Income + (t1024Cargo.getUeiAmt() * 5 * 4.3);
		    } else if (t1024Cargo.getFreqCd() == 'Y') {
			t1024Income = t1024Income + (t1024Cargo.getUeiAmt() / 12);
		    } else if (t1024Cargo.getFreqCd() == 'I') {
			t1024Income = t1024Income + (t1024Cargo.getUeiAmt());
		    }
		    indvIncomeMap.put(t1024Cargo.getIndvSeqNum(), t1024Income);
		}
	    }
	    
	    t1023CargoArray = (T1023AppInSelfeCargo[]) t1023Coll.select("findIncByAppNum", appNumArgs);
	    if (t1023CargoArray != null && t1023CargoArray.length > 0) {
	    	dataCheck = true;
		for (int i = 0; i < t1023CargoArray.length; i++) {
		    t1023Cargo = t1023CargoArray[i];
		    t1023Income = t1023Income + t1023Cargo.getAvgIncmAmt();
		    if (indvIncomeMap.containsKey(t1023Cargo.getIndvSeqNum())) {
			double indvIncome = indvIncomeMap.get(t1023Cargo.getIndvSeqNum()) + t1023Cargo.getAvgIncmAmt();
			indvIncomeMap.put(t1023Cargo.getIndvSeqNum(), indvIncome);
		    }
		}
	    }
	    
	    
	    t1021empCargoArray = (T1021AppInEmplCargo[]) t1021Coll.select("findByAppNum", appNumArgs);
	    if (t1021empCargoArray != null && t1021empCargoArray.length > 0) {
	    	dataCheck = true;
	    } 
	    incomeCargoArray = (AppIncomeCustomCargo[]) t1022Coll.select("findIncByAppNum", appNumArgs);
	    if (incomeCargoArray != null && incomeCargoArray.length > 0) {
		for (int i = 0; i < incomeCargoArray.length; i++) {
		    incomeCargo = incomeCargoArray[i];
		    if (incomeCargo.getPayFreqCd() == 'W') {
			t1022Income = t1022Income + (incomeCargo.getEiTotAmt() * 4.3);
		    } else if (incomeCargo.getPayFreqCd() == 'B') {
			t1022Income = t1022Income + (incomeCargo.getEiTotAmt() * 2.15);
		    } else if (incomeCargo.getPayFreqCd() == 'M') {
			t1022Income = t1022Income + (incomeCargo.getEiTotAmt());
		    } else if (incomeCargo.getPayFreqCd() == 'Q') {
			t1022Income = t1022Income + (incomeCargo.getEiTotAmt() / 3);
		    } else if (incomeCargo.getPayFreqCd() == 'S') {
			t1022Income = t1022Income + (incomeCargo.getEiTotAmt() * 2);
		    } else if (incomeCargo.getPayFreqCd() == 'D') {
			t1022Income = t1022Income + (incomeCargo.getEiTotAmt() * 5 * 4.3);
		    } else if (incomeCargo.getPayFreqCd() == 'Y') {
			t1022Income = t1022Income + (incomeCargo.getEiTotAmt() / 12);
		    } else if (incomeCargo.getPayFreqCd() == 'I') {
			t1022Income = t1022Income + (incomeCargo.getEiTotAmt());
		    }
		    if (indvIncomeMap.containsKey(incomeCargo.getIndvSeqNum())) {
			double indvIncome = indvIncomeMap.get(incomeCargo.getIndvSeqNum()) + t1022Income;
			indvIncomeMap.put(incomeCargo.getIndvSeqNum(), indvIncome);
		    }
		}
	    }
	    
	    totalIncome = t1024Income + t1023Income + t1022Income;
	    autoRegAppIncome = totalIncome;
	    if(dataCheck){
	    	return true;
	    }
	
	    return false;
	    
	} catch (Exception e) {
	    hasExceptionOccurred = true;
		log(ILog.ERROR, "Exception in AutoRegistrationBO.familyIncCheck() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    throw e;
	} finally {
	    t1024Cargo = null;
	    t1024Coll = null;
	    t1023Cargo = null;
	    t1023Coll = null;
	    t1022dCargo = null;
	    t1022Coll = null;
	    incomeCargo = null;
	    t1024CargoArray = null;
	    t1023CargoArray = null;
	    incomeCargoArray = null;
	}
    }
    
    public boolean interfaceCheck(String appNum) throws Exception {
	log(7, "Begin AutoRegistrationBO.interfaceCheck " + appNum);
	
	T1002AppDtlCargo t1002Cargo = new T1002AppDtlCargo();
	ArAppAddrCargo paramArAppAddrCargo = new ArAppAddrCargo();
	ArAppAddrCargo paramArAppMailAddrCargo = new ArAppAddrCargo();
	ArAppAddrCargo arAppAddrTempCargo = null;
	ArAppAddrCargo arAppMailAddrTempCargo = null;
	ApplicationBO appBo = new ApplicationBO(connection);
	HashMap paramHashMap = null;
	T1031AppMailAdrCollection t1031Coll = new T1031AppMailAdrCollection(connection);
	T1031AppMailAdrCargo t1031Cargo = new T1031AppMailAdrCargo();
	T1031AppMailAdrCargo[] t1031CargoArray = null;
	boolean interfaceCheckFailed = false;
	SsAbeInterfacesSummaryCargo ssAbeIntSummaryCargo = new SsAbeInterfacesSummaryCargo();
	SsAbeInterfacesSummaryCollection ssAbeInterfacesSummaryCollection = new SsAbeInterfacesSummaryCollection(connection);
	SsAbeInterfacesSummaryCargo[] ssAbeIntSummaryCargoArray = null;
	String autoRegExpCode = AppRegConstants.AUTO_REG_PROCESS_AD;
	String countyCd = null;
	try {
	    t1002Cargo = autoRegT1002Cargo;
	    if (t1002Cargo == null) {
		return false;
	    } else {
		
		if (appSSAMSPCategory || appSSALISMSPCategory ) {
		    boolean addrCheck = checkAddress(t1002Cargo, appNum);
		    if (!addrCheck)
			return false;
		    
		    boolean prgReqCheck = programRequest(autoRegT1004CargoArray);
		    if (!prgReqCheck)
			return false;
		}
		Object T1031Args[] = { appNum };
		t1031CargoArray = (T1031AppMailAdrCargo[]) t1031Coll.select("findMailingAddrByAppNum", T1031Args);
		if (t1002Cargo.getHlessSw() != 'Y') {
		    log(7, "AutoRegistrationBO.interfaceCheck() :: Going to validate Physical address");
		    paramArAppAddrCargo.setAddrStNm(t1002Cargo.getHshlStAdr());
		    paramArAppAddrCargo.setAddrLine(t1002Cargo.getHshlL2Adr());
		    paramArAppAddrCargo.setAddrCity(t1002Cargo.getHshlCityAdr());
		    paramArAppAddrCargo.setAddrStateCd(t1002Cargo.getHshlStaAdr());
		    paramArAppAddrCargo.setAddrZip5(t1002Cargo.getHshlZipAdr());
		    
		    log(7, "AutoRegistrationBO.interfaceCheck() :: Calling ValidateAddress interface for Physical Address -" + appNum);
		    log(7, "AutoRegistrationBO.interfaceCheck() :: Calling ValidateAddress interface for Physical Address based on In state: STATE-" + paramArAppAddrCargo.getAddrStateCd());
		    
		    if ("IL".equals(paramArAppAddrCargo.getAddrStateCd())) {
			log(7, "AutoRegistrationBO.interfaceCheck() :: Calling ValidateAddress interface for Physical Address-" + appNum);
			if (appSSALISMSPCategory ){
			    arAppAddrTempCargo = (ArAppAddrCargo) appBo.validateAddressIq8MSP(paramArAppAddrCargo, paramHashMap);
			}else{
			    arAppAddrTempCargo = (ArAppAddrCargo) appBo.validateAddressIq8(paramArAppAddrCargo, paramHashMap);
			}
		    }
		    if (arAppAddrTempCargo == null) {
			log(7, "AutoRegistrationBO.interfaceCheck() :: arAppAddrTempCargo is NULL : App failed in Address Check -" + appNum);
			autoRegExpCode = AppRegConstants.AUTO_REG_PROCESS_AD;
			interfaceCheckFailed = true;
		    }
		    if(arAppAddrTempCargo != null){
		    	arAppAddrTempCargo.setValidationSw('Y');
		    	arAppAddrTempCargo.setAddrTypeCd("PA");
		    	countyCd = arAppAddrTempCargo.getAddrCountyCd();
		    	
		    }
		    if (arAppAddrTempCargo != null && arAppAddrTempCargo.getAddrStTypeCd() != null && !arAppAddrTempCargo.getAddrStTypeCd().trim().equals("")) {
			RefTableData streetType = new RefTableData();
			streetType = ReferenceTableManager.getValueForDescription("STREETTYPE", arAppAddrTempCargo.getAddrStTypeCd());
			if (streetType != null) {
			    arAppAddrTempCargo.setAddrStTypeCd(streetType.getRefrTableCode());
			}
		    }
		    
		    arAppAddrCargo = arAppAddrTempCargo;
		    
		    if (t1031CargoArray != null && t1031CargoArray.length > 0) {
			
			log(7, "AutoRegistrationBO.interfaceCheck() :: Both Physical and Mailing Address present -" + appNum);
			t1031Cargo = t1031CargoArray[0];
			paramArAppMailAddrCargo.setAddrStNm(t1031Cargo.getStAdr());
			paramArAppMailAddrCargo.setAddrLine(t1031Cargo.getL2Adr());
			paramArAppMailAddrCargo.setAddrCity(t1031Cargo.getCityAdr());
			paramArAppMailAddrCargo.setAddrStateCd(t1031Cargo.getStaAdr());
			paramArAppMailAddrCargo.setAddrZip5(t1031Cargo.getZipAdr());
			log(7, "AutoRegistrationBO.interfaceCheck() :: Calling ValidateAddress interface for Mailing Address -" + appNum);
			
			if (appSSALISMSPCategory ){
			    arAppMailAddrTempCargo = (ArAppAddrCargo) appBo.validateAddressIq8MSP(paramArAppMailAddrCargo, paramHashMap);
			}else{
			    arAppMailAddrTempCargo = (ArAppAddrCargo) appBo.validateAddressIq8(paramArAppMailAddrCargo, paramHashMap);
			}
			if (arAppMailAddrTempCargo != null) {
			    arAppMailAddrTempCargo.setValidationSw('Y');
			    arAppMailAddrTempCargo.setAddrTypeCd("MA");
			    countyCd = arAppMailAddrTempCargo.getAddrCountyCd();
			    if (arAppMailAddrTempCargo.getAddrStTypeCd() != null && !arAppMailAddrTempCargo.getAddrStTypeCd().trim().equals("")) {
				RefTableData streetType1 = new RefTableData();
				streetType1 = ReferenceTableManager.getValueForDescription("STREETTYPE", arAppMailAddrTempCargo.getAddrStTypeCd());
				if (streetType1 != null) {
				    arAppMailAddrTempCargo.setAddrStTypeCd(streetType1.getRefrTableCode());
				}
			    }
			    
			    arAppMailAddrCargo = arAppMailAddrTempCargo;
			}
			
		    }
		    
		} else {
		    log(7, "AutoRegistrationBO.interfaceCheck() :: Going to validate Mailing address");
		    if (t1031CargoArray == null || t1031CargoArray.length == 0) {
			log(7, "AutoRegistrationBO.interfaceCheck() :: t1031CargoArray is NULL : Data not found in DB");
			autoRegExpCode = AppRegConstants.AUTO_REG_PROCESS_AD;
			interfaceCheckFailed = true;
		    } else {
			t1031Cargo = t1031CargoArray[0];
		    }
		    
		    paramArAppAddrCargo.setAddrStNm(t1031Cargo.getStAdr());
		    paramArAppAddrCargo.setAddrLine(t1031Cargo.getL2Adr());
		    paramArAppAddrCargo.setAddrCity(t1031Cargo.getCityAdr());
		    paramArAppAddrCargo.setAddrStateCd(t1031Cargo.getStaAdr());
		    paramArAppAddrCargo.setAddrZip5(t1031Cargo.getZipAdr());
		    
		    log(7, "AutoRegistrationBO.interfaceCheck() :: Calling ValidateAddress interface for Mailing Address -" + appNum);
		    if ("IL".equals(paramArAppAddrCargo.getAddrStateCd())) {
			
			if (appSSALISMSPCategory ){
			    arAppAddrTempCargo = (ArAppAddrCargo) appBo.validateAddressIq8MSP(paramArAppAddrCargo, paramHashMap);
			}else{
			    arAppAddrTempCargo = (ArAppAddrCargo) appBo.validateAddressIq8(paramArAppAddrCargo, paramHashMap);
			}
		    }
		    if (arAppAddrTempCargo == null) {
			log(7, "AutoRegistrationBO.interfaceCheck() :: arAppAddrTempCargo is NULL : App failed in Address Check -" + appNum);
			autoRegExpCode = AppRegConstants.AUTO_REG_PROCESS_AD;
			interfaceCheckFailed = true;
		    }
		    if (arAppAddrTempCargo != null) {
			    arAppAddrTempCargo.setValidationSw('Y');
			    arAppAddrTempCargo.setAddrTypeCd("MA");
			    countyCd = arAppAddrTempCargo.getAddrCountyCd();
			    if (arAppAddrTempCargo.getAddrStTypeCd() != null && !arAppAddrTempCargo.getAddrStTypeCd().trim().equals("")) {
					RefTableData streetType1 = new RefTableData();
					streetType1 = ReferenceTableManager.getValueForDescription("STREETTYPE", arAppAddrTempCargo.getAddrStTypeCd());
					if (streetType1 != null) {
						arAppAddrTempCargo.setAddrStTypeCd(streetType1.getRefrTableCode());
					}
				}
		    }
		    
		    arAppAddrCargo = arAppAddrTempCargo;
		    
		}
		
	    }
	    
	    log(7, "AutoRegistrationBO.interfaceCheck() : getting data from AUTOREGPROCESS reference table for SSN and SSO interfaces on/off switches");
	    RefTableData rtd = ReferenceTableManager.getValueForDescription("AUTOREGPROCESS", "SSN_INTERFACE_SW");
	    String autoRegSSNSw = "";
	    if (rtd != null) {
		autoRegSSNSw = rtd.getRefrTableCode();
	    }
	    log(7, "AutoRegistrationBO.interfaceCheck() : AUTOREGPROCESS Reference Table SSN_INTERFACE_SW :" + autoRegSSNSw);
	    
	    RefTableData rtd1 = ReferenceTableManager.getValueForDescription("AUTOREGPROCESS", "SOS_INTERFACE_SW");
	    String autoRegSOSSw = "";
	    if (rtd1 != null) {
		autoRegSOSSw = rtd1.getRefrTableCode();
	    }
	    log(7, "AutoRegistrationBO.interfaceCheck() : AUTOREGPROCESS Reference Table SOS_INTERFACE_SW :" + autoRegSOSSw);
	    
	    if ((autoRegSOSSw != null && "Y".equalsIgnoreCase(autoRegSOSSw)) || (autoRegSSNSw != null && "Y".equalsIgnoreCase(autoRegSSNSw))) {
		log(7, "AutoRegistrationBO.interfaceCheck() :: Begin : App Residency/SSN Clearences Check -" + appNum);
		if (autoRegT1001Cargo.getSsAppNum() != null) {
		    Object args[] = { autoRegT1001Cargo.getSsAppNum() };
		    ssAbeIntSummaryCargoArray = (SsAbeInterfacesSummaryCargo[]) ssAbeInterfacesSummaryCollection.select("findByAppNumAndMaxRunDate", args);
		    log(7, "AutoRegistrationBO.interfaceCheck() :: SsAbeInterfacesSummaryDao.findByAppNumAndMaxRunDate() called");
		    if (ssAbeIntSummaryCargoArray != null && ssAbeIntSummaryCargoArray.length > 0) {
			log(7, "AutoRegistrationBO.interfaceCheck() :: ssAbeIntSummaryCargoArray.length---" + ssAbeIntSummaryCargoArray.length);
			for (int i = 0; i < ssAbeIntSummaryCargoArray.length; i++) {
			    for (int j = 0; j < autoRegT1004CargoArray.length; j++) {
				log(7, "AutoRegistrationBO.interfaceCheck() :: autoRegT1004CargoArray[j].getSsnNum()--" + autoRegT1004CargoArray[j].getSsnNum());
				if (ssAbeIntSummaryCargoArray[i].getIndvSeqNum() == autoRegT1004CargoArray[j].getIndvSeqNum() && autoRegT1004CargoArray[j].getSsnNum() != 0L) {
				    log(7, "AutoRegistrationBO.interfaceCheck() :: autoRegT1004CargoArray[i].getBridgesIndvId()--" + autoRegT1004CargoArray[i].getBridgesIndvId());
				    ssAbeIntSummaryCargo = ssAbeIntSummaryCargoArray[i];
				    if (autoRegSSNSw != null && "Y".equalsIgnoreCase(autoRegSSNSw) && ssAbeIntSummaryCargo != null && ssAbeIntSummaryCargo.getSsaSsnVerificationInd() != 'Y') {
					log(7, "AutoRegistrationBO.interfaceCheck() :: ssAbeIntSummaryCargo.getSsaSsnVerificationInd() -" + ssAbeIntSummaryCargo.getSsaSsnVerificationInd());
					log(7, "AutoRegistrationBO.interfaceCheck() :: App failed in SSN Clearences Check -" + appNum);
					/*autoRegExpCode = AppRegConstants.AUTO_REG_PROCESS_IS;
					interfaceCheckFailed = true;*/
				    }
				    if (autoRegSOSSw != null && "Y".equalsIgnoreCase(autoRegSOSSw) && ssAbeIntSummaryCargo != null && ssAbeIntSummaryCargo.getSosStatusFlg() != 'Y') {
					log(7, "AutoRegistrationBO.interfaceCheck() :: ssAbeIntSummaryCargo.getSosStatusFlg() -" + ssAbeIntSummaryCargo.getSosStatusFlg());
					log(7, "AutoRegistrationBO.interfaceCheck() :: App failed in Residency Clearences Check -" + appNum);
					/*autoRegExpCode = AppRegConstants.AUTO_REG_PROCESS_IR;
					interfaceCheckFailed = true;*/
				    }
				}
			    }
			}
		    }
		}
	    }
	    if(appSSALISMSPCategory){
		if(null != countyCd ){
		    log(7, "AutoRegistrationBO.interfaceCheck() Before calling updateMSPCountyCd for countyD::"+countyCd);
		    updateMSPCountyCd(countyCd,appNum);
		}else{
		    log(7, "AutoRegistrationBO.interfaceCheck() :: County code not found for the MSP application by the address validation service for app: " + appNum);
		    interfaceCheckFailed = true;
		}
	    }
	    if (interfaceCheckFailed) {
		log(7, "AutoRegistrationBO.interfaceCheck() :: interface Check failed");
		createEDMTask(appNum);
		updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegExpCode, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
		return false;
	    }
	    return true;
	    
	} catch (TIERSValidationException e) {
		log(ILog.ERROR, "Exception [TIERSValidationException] in AutoRegistrationBO.interfaceCheck() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    if (e.getMessage() != null && e.getMessage().contains("10016")) {
		exceptionBO.writeExceptionRecord(BatchConstants.INFO, "AR-ATREG-HLY:  AutoRegistrationBO - interfaceCheck()", "Exception processing app num: " + appNum + " :: " + e.getMessage(), BatchConstants.REPORT_BODY, false, BatchConstants.LOG_FILE, ILog.INFO, BatchConstants.DEFAULT_LOGGER_FILE, true, e, null, null, null);
		createEDMTask(appNum);
		updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegExpCode, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
		return false;
	    } else {
		if (this.con != null) {
		    this.con.rollback();
		}
		hasExceptionOccurred = true;
		updateAutoRegExcpTable(appNum, autoRegExpCode, AppRegConstants.AUTO_REG_EXCP_STATUS_EX);
		
		if (this.con != null) {
		    this.con.commit();
		}
		throw e;
	    }
	} catch (Exception e) {
	    if (this.con != null) {
		this.con.rollback();
	    }
		log(ILog.ERROR, "Exception in AutoRegistrationBO.interfaceCheck() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    updateAutoRegExcpTable(appNum, autoRegExpCode, AppRegConstants.AUTO_REG_EXCP_STATUS_EX);
	    
	    if (this.con != null) {
		this.con.commit();
	    }
	    
	    throw e;
	} finally {
	    t1002Cargo = null;
	    paramArAppAddrCargo = null;
	    arAppAddrTempCargo = null;
	    ssAbeIntSummaryCargo = null;
	    ssAbeInterfacesSummaryCollection = null;
	    ssAbeIntSummaryCargoArray = null;
	    t1031Coll = null;
	    t1031Cargo = null;
	    t1031CargoArray = null;
	}
    }
    
    // This method Checks if application is valid for auto schedule
    // first checks if the program on the application are of type SNAP/ Cash
    // or expedited SNAP
    
    /**
     * @param appNum
     * @return
     * @throws Exception
     */
    public boolean isAppointmentAutoScheduled(String appNum) throws Exception {
	
	log(7, "Begin AutoRegistrationBO.isAppointmentAutoScheduled(): " + appNum);
	Timestamp applicationRcvDt = null;
	boolean validAppt = false;
	Calendar apptStart = null;
	Calendar apptEnd = null;
	
	long officeNum = 0;
	char expeditedSNAPSW = 'N';
	Timestamp applicationDt = null;
	long Appoint_schedule_duration = 0;
	boolean isScheduleSlotAvailable = false;
	boolean autoScheduled = false;
	String appointmentMode = autoRegT1002Cargo.getIntrvwModeInd() == 'Y' ? "IP" : ""; // IP - In Person
	
	try {
	    if (autoRegT1001Cargo == null || autoRegT1002Cargo == null) {
		return false;
	    }
	    
	    if (autoRegT1001Cargo.getExpeditedFapSw() == 'Y') {
		expeditedSNAPSW = autoRegT1001Cargo.getExpeditedFapSw();
	    }
	    officeNum = autoRegT1001Cargo.getOfcNum();
	    applicationRcvDt = autoRegT1001Cargo.getAppRcvDt();
	    
	    if (autoRegT1002Cargo.getFsRqstSw() == 'Y' || autoRegT1002Cargo.getCashRqstSw() == 'Y') {
		
		if (autoRegT1002Cargo.getFsRqstSw() == 'Y' && autoRegT1001Cargo.getExpeditedFapSw() == 'N') {
		    // SNAP only
		    if (!(autoRegT1002Cargo.getCashRqstSw() == 'Y' || autoRegT1002Cargo.getMaRqstSw() == 'Y' || autoRegT1002Cargo.getMcRqstSw() == 'Y')) {
			if (appointmentMode.equals("IP")) {
			    Appoint_schedule_duration = 30;
			} else {
			    Appoint_schedule_duration = 120;
			}
		    } else if (autoRegT1002Cargo.getFsRqstSw() == 'Y' && autoRegT1002Cargo.getMaRqstSw() == 'Y' && autoRegT1002Cargo.getCashRqstSw() != 'Y' ) { // SNAP with other Programs
			Appoint_schedule_duration = 45;
		    } else {
			Appoint_schedule_duration = 60;
		    }
		} else if (autoRegT1002Cargo.getFsRqstSw() == 'Y' && autoRegT1001Cargo.getExpeditedFapSw() == 'Y') {
		   return false;
		} else { // for Cash and/or other programs
		    Appoint_schedule_duration = 60;
		}
	    } 
	    
	    // check if Auto-Schedule is enabled for the office number
	    boolean isAutoScheduleEnabled = CheckAutoSchedulEnabled(officeNum);
	    if (!isAutoScheduleEnabled) {
		return false;
	    }
	    // check Appointment slot is available b/n 5 business days and 14 calendar days
	    AvailableAppointmentTime[] availAppointmnetTime = fetchAvailableSlots(applicationRcvDt, officeNum, Appoint_schedule_duration);
	    DateComparisons dateCompare = new DateComparisons();
	    AppointmentSlotRange[] apptSlotRange = null;
	    if (availAppointmnetTime != null && availAppointmnetTime.length > 0) {
		for (int i = 0; i < availAppointmnetTime.length; i++) {
		    Timestamp apptDate = new Timestamp(availAppointmnetTime[i].getAppointmentDate().getTimeInMillis());
		    log(7, "Available Slots - appointment Date::::" + apptDate);
		    if (!dateCompare.isNonWorkingDay(apptDate)) {
			apptSlotRange = availAppointmnetTime[i].getAppointmentSlotRangeList();
			
		    }
		    if (apptSlotRange != null)
			break;
		}
		
		if (apptSlotRange != null && apptSlotRange.length > 0) {
		    apptStart = apptSlotRange[0].getAppointmentStartTime();
		    apptEnd = apptSlotRange[0].getAppointmentEndTime();
		    log(7, "Available Slots - Scheduled date::apptStart::" + apptStart);
		    log(7, "Available Slots - Scheduled Date::apptEnd::" + apptEnd);
		    isScheduleSlotAvailable = true;
		    
		}
	    }
	    log(7, "Before populating the ShAppointmentsCargo");
	    // Schedule the appointment (insert recored on sh_appointmet table)
	    if (Appoint_schedule_duration > 0 && isAutoScheduleEnabled && isScheduleSlotAvailable) {
		log(7, "populating the ShAppointmentsCargo");
		ShAppointmentsCargo shAppCargo = new ShAppointmentsCargo();
		ShAppointmentsCargo shApptsCargo = new ShAppointmentsCargo();
		AppointmentsBO apptsBo = new AppointmentsBO(connection);
		long intakeEmpId = retrieveIntakeVirtualWkrId(officeNum);
		long unitNum = apptsBo.getUnitNum(Long.toString(intakeEmpId));
		
		shAppCargo.setOfficeNum(officeNum);
		shAppCargo.setSchedDuration(Appoint_schedule_duration);
		shAppCargo.setAppNum(appNum);
		
		shAppCargo.setApptBegDatetime(new Timestamp(apptStart.getTimeInMillis()));
		shAppCargo.setApptEndDatetime(new Timestamp(apptEnd.getTimeInMillis()));
		
		shAppCargo.setApptId(0);
		shAppCargo.setCaseNum(autoRegT1002Cargo.getCaseNum());
		if (autoRegT1002Cargo.getIntrvwModeInd() == 'N' && 
				(autoRegT1002Cargo.getHshlCellPhnNum() != null && autoRegT1002Cargo.getHshlCellPhnNum().trim().equals("")) 
				|| (autoRegT1002Cargo.getHshlPhnNum() != null && autoRegT1002Cargo.getHshlPhnNum().trim().equals("")) 
				|| (autoRegT1002Cargo.getHshlWorkPhnNum() != null && autoRegT1002Cargo.getHshlWorkPhnNum().trim().equals(""))){
			shAppCargo.setApptModeCd("I"); // need to check with gopal
		}
		if (autoRegT1002Cargo.getIntrvwModeInd() == 'N' && 
				(autoRegT1002Cargo.getHshlCellPhnNum() != null && !autoRegT1002Cargo.getHshlCellPhnNum().trim().equals("")) 
				|| (autoRegT1002Cargo.getHshlPhnNum() != null && !autoRegT1002Cargo.getHshlPhnNum().trim().equals("")) 
				|| (autoRegT1002Cargo.getHshlWorkPhnNum() != null && !autoRegT1002Cargo.getHshlWorkPhnNum().trim().equals(""))){
			shAppCargo.setApptModeCd("P");
		}
		if (autoRegT1002Cargo.getIntrvwModeInd() == 'Y'){
			shAppCargo.setApptModeCd("I");
		}
		shAppCargo.setApptTypeCd("A"); // need to check with gopal
		shAppCargo.setApptStatusCd("SC");
		shAppCargo.setEmpId(intakeEmpId);
		shAppCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		shAppCargo.setUnitNum(unitNum);
		shAppCargo.setIsGrpApptSw('N');
		shAppCargo.setGenApptType("A");
		shApptsCargo = apptsBo.getNewApptId(shAppCargo);
		
		autoRegShAppCargo = shApptsCargo;
		
	    } else {
		return false;
	    }
	    
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.isAppointmentAutoScheduled() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	}
   }

    // MAPriorProgCheck  Added for ILIES-240611
    
    /**
     * @param appNum
     * @return
     * @throws Exception
     */
    public boolean MAPriorProgCheck(String appNum) throws Exception {
	
	log(7, "Begin AutoRegistrationBO.MAPriorProgCheck: " + appNum);	
	try {
	    if (autoRegT1001Cargo == null || autoRegT1002Cargo == null || autoRegT1004CargoArray == null ) {
	    	return false;
	    }   
	    Calendar calendar =  Calendar.getInstance();	    
		calendar.setTime(autoRegT1001Cargo.getAppRcvDt());
		int month=0;
		int year=0;
		 
		  for (int i = 0; i < autoRegT1004CargoArray.length; i++) {	
				T1004AppIndvCargo t1004AppIndvCargo = autoRegT1004CargoArray[i];
				if(t1004AppIndvCargo.getMaRqstSw() == 'Y' || t1004AppIndvCargo.getFppRqstSw() == 'Y'){
					 Calendar calendarIndvDOB =  Calendar.getInstance();	    
					 calendarIndvDOB.setTime(t1004AppIndvCargo.getBrthDt());
						 int indvBirthMonth = calendarIndvDOB.get(Calendar.MONTH); 
						 int indvBirthyear = calendarIndvDOB.get(Calendar.YEAR); 
						 
					if(autoRegT1002Cargo.getMaBackdtMo3Ind()!=0){
						 calendar.add(Calendar.MONTH, -3);
						 month = calendar.get(Calendar.MONTH); 
						 year = calendar.get(Calendar.YEAR); 
						 if(year < indvBirthyear){
							 return false;
						 }else if(year == indvBirthyear && month < indvBirthMonth){
							return false;
						 }
					} else 	if(autoRegT1002Cargo.getMaBackdtMo2Ind()!=0 ){
						 calendar.add(Calendar.MONTH, -2);
						 month = calendar.get(Calendar.MONTH); 
						 year = calendar.get(Calendar.YEAR); 
						 if(year < indvBirthyear){
							 return false;
						 }else if(year == indvBirthyear && month < indvBirthMonth){
							return false;
						 }
					} else if(autoRegT1002Cargo.getMaBackdtMo1Ind()!=0 ){
						 calendar.add(Calendar.MONTH, -1);
						 month = calendar.get(Calendar.MONTH);
						 year = calendar.get(Calendar.YEAR); 
						 if(year < indvBirthyear){
							 return false;
						 }else if(year == indvBirthyear && month < indvBirthMonth){
							return false;
						 }
					}
			 }
		  }
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.MAPriorProgCheck() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    updateAutoRegExcpTable(appNum, AppRegConstants.AUTO_REG_PROCESS_CR, AppRegConstants.AUTO_REG_EXCP_STATUS_EX);
	    throw e;
	}
  }
    
    public long retrieveIntakeVirtualWkrId(long officeNum) throws Exception {
	RefTableData refData = ReferenceTableManager.getValueForDescription(JOBTITLE, VIRTUALWORKER);
	MoEmployeesCollection employeeCol = new MoEmployeesCollection(connection);
	MoEmployeesCargo employeeCargo = new MoEmployeesCargo();
	employeeCargo.setFirstName(Intake);
	employeeCargo.setJobTitleCd(refData.getRefrTableCode());
	Object[] params = new Object[2];
	params[0] = officeNum;
	params[1] = employeeCargo;
	MoEmployeesCargo[] resEmpCargo = (MoEmployeesCargo[]) employeeCol.select(findByOfficeFirstNmJobTitle, params);
	if (resEmpCargo != null && resEmpCargo.length > 0) {
	    return resEmpCargo[0].getEmpId();
	} else {
	    return 0;
	}
    }
    
    /*
     * This method checks if auto-scheduling is enabled in the office where the application is being processed
     */
    public boolean CheckAutoSchedulEnabled(long officeNum) throws Exception {
	
	boolean enabled = false;
	MoOfficesCargo moOfficesCargo = new MoOfficesCargo();
	MoOfficesCollection moOfficesColl = new MoOfficesCollection(connection);
	MoOfficesCargo[] moOfficesCargoArray = null;
	try {
	    moOfficesCargo.setOfficeNum(officeNum);
	    moOfficesColl.add(moOfficesCargo);
	    moOfficesCargoArray = (MoOfficesCargo[]) moOfficesColl.select("findByOfficeNum");
	    if (moOfficesCargoArray != null && moOfficesCargoArray.length > 0 && moOfficesCargoArray[0].getIntakeAutoSchedSw() == 'Y') {
		enabled = true;
	    }
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.CheckAutoSchedulEnabled() officeNum: " + officeNum + "\n" + e.getMessage() + "\n", e);
	    throw new TIERSBatchException(e);
	}
	
	return enabled;
    }
    
    private AvailableAppointmentTime[] fetchAvailableSlots(Timestamp applicationRcvDt, long officeNum, long scheduleDuration) throws ParseException, ApplicationException, FrameworkException, Exception {
	
	AvailableAppointmentTime[] availableApptsArr = null;
	boolean exceptionSw = false;
	String exceptionCd = null;
	log(7, "Start fetchAvailableSlots - applicationRcvDt - " + applicationRcvDt);
	log(7, "Start fetchAvailableSlots - officeNum - " + officeNum);
	log(7, "Start fetchAvailableSlots - scheduleDuration - " + scheduleDuration);
	
	try {
	    
	    if (applicationRcvDt != null) {
		Calendar applicationDT1 = Calendar.getInstance();
		Calendar applicationDT2 = Calendar.getInstance();
		
		applicationDT1.setTime(applicationRcvDt);
		applicationDT1.set(Calendar.HOUR_OF_DAY, 0);
		applicationDT1.set(Calendar.MINUTE, 0);
		applicationDT1.set(Calendar.SECOND, 0);
		applicationDT1.set(Calendar.MILLISECOND, 0);
		
		applicationDT2.setTime(applicationRcvDt);
		applicationDT2.set(Calendar.HOUR_OF_DAY, 0);
		applicationDT2.set(Calendar.MINUTE, 0);
		applicationDT2.set(Calendar.SECOND, 0);
		applicationDT2.set(Calendar.MILLISECOND, 0);
		
		applicationDT1.add(Calendar.DATE, 5);
		Calendar appointmentStartDt = new java.util.GregorianCalendar();
		appointmentStartDt.setTime(applicationDT1.getTime());
		
		applicationDT2.add(Calendar.DATE, 14);
		Calendar appointmentEndDt = new java.util.GregorianCalendar();
		appointmentEndDt.setTime(applicationDT2.getTime());
		
		Timestamp startDt = new Timestamp(appointmentStartDt.getTimeInMillis());
		
		int intervalDays = (int) ((appointmentEndDt.getTime().getTime() - appointmentStartDt.getTime().getTime()) / (1000 * 60 * 60 * 24));
		if (intervalDays > 0) {
		    // Retrieve current active schedule
		    ShDefaultOfficeSchedCargo shDefOffCargo = new ShDefaultOfficeSchedCargo();
		    ShDefaultOfficeSchedCollection shDefOffColl = new ShDefaultOfficeSchedCollection(connection);
		    
		    shDefOffCargo.setOfficeNum(officeNum);
		    shDefOffCargo.setSchedDuration(scheduleDuration);
		    shDefOffColl.setCargo(shDefOffCargo);
		    
		    Object[] params = new Object[3];
		    params[0] = shDefOffCargo;
		    params[1] = 0;
		    params[2] = startDt;
		    
		    shDefOffColl.setSelectSize(500);
		    // get all the eff_dt in the past and corresponding values
		    ShDefaultOfficeSchedCargo[] shDefOffCargos = (ShDefaultOfficeSchedCargo[]) shDefOffColl.select("findByOffDuration2", params);
		    Map<String, List<String>> schedules = null;
		    List<String> dateSlots = null;
		    if (shDefOffCargos != null) {
			int size = shDefOffCargos.length;
			if (size > 0) {
			    
			    schedules = new HashMap<String, List<String>>();
			    for (int i = 0; i < size; i++) {
				dateSlots = new ArrayList<String>();
				String key = shDefOffCargos[i].getSchedDay() + "," + shDefOffCargos[i].getSchedStartTime().toString();
				String value = shDefOffCargos[i].getEffDt().toString() + "," + shDefOffCargos[i].getAvailTimeSlot();
				dateSlots.add(value);
				log(7, "Start fetchAvailableSlots - schedules key1 - " + key);
				log(7, "Start fetchAvailableSlots - schedules value1- " + dateSlots);
				schedules.put(key, dateSlots);
			    }
			}
		    }
		    
		    Object[] params1 = new Object[3];
		    params1[0] = shDefOffCargo;
		    params1[1] = intervalDays;
		    params1[2] = startDt;
		    // get all future eff_dt until end date and have it in map
		    ShDefaultOfficeSchedCargo[] shDefOffCargos1 = (ShDefaultOfficeSchedCargo[]) shDefOffColl.select("findByOffDuration2", params1);
		    if (shDefOffCargos1 != null && shDefOffCargos1.length > 0) {
			for (int j = 0; j < shDefOffCargos1.length; j++) {
			    String key = shDefOffCargos1[j].getSchedDay() + "," + shDefOffCargos1[j].getSchedStartTime().toString();
			    String value = shDefOffCargos1[j].getEffDt().toString() + "," + shDefOffCargos1[j].getAvailTimeSlot();
			    if (schedules != null && schedules.containsKey(key)) {
				dateSlots = schedules.get(key);
				dateSlots.add(value);
			    } else {
				dateSlots.add(value);
			    }
			    log(7, "Start fetchAvailableSlots - schedules key - " + key);
			    log(7, "Start fetchAvailableSlots - schedules value - " + dateSlots);
			    if(schedules != null){
			    	schedules.put(key, dateSlots);
			    }
			}
		    }
		    
		    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		    DateFormat df = new SimpleDateFormat("HH:mm:ss");
		    DateFormat tsf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		    
		    ShDefaultOfficeSchedDayCargo shOfficeSchedDayCargo = new ShDefaultOfficeSchedDayCargo();
		    ShDefaultOfficeSchedDayCollection shOfficeSchedDayColl = new ShDefaultOfficeSchedDayCollection(connection);
		    
		    shOfficeSchedDayCargo.setSchedDuration(scheduleDuration);
		    shOfficeSchedDayCargo.setOfficeNum(officeNum);
		    
		    Object[] params2 = new Object[3];
		    params2[0] = shOfficeSchedDayCargo;
		    params2[1] = intervalDays;
		    params2[2] = startDt;
		    
		    // Get all the schedules based on date from ShDefaultOfficeSchedDay table and have it in map
		    ShDefaultOfficeSchedDayCargo[] shDefSchedDayArr = (ShDefaultOfficeSchedDayCargo[]) shOfficeSchedDayColl.select("findByDateDuration2", params2);
		    
		    Map<String, Long> daySchedules = null;
		    
		    if (shDefSchedDayArr != null && shDefSchedDayArr.length > 0) {
			daySchedules = new HashMap<String, Long>();
			for (int x = 0; x < shDefSchedDayArr.length; x++) {
			    String key = formatter.format(shDefSchedDayArr[x].getSchedDt()) + "," + df.format(shDefSchedDayArr[x].getSchedStartTime());
			    Long value = (Long) shDefSchedDayArr[x].getMaxTimeSlot();
			    log(7, "Start fetchAvailableSlots - daySchedules key - " + key);
			    log(7, "Start fetchAvailableSlots - daySchedules value - " + value);
			    daySchedules.put(key, value);
			}
			
		    }
		    
		    Map<String, Long> maxSlots = new HashMap<String, Long>();
		    
		    // Loop through the dates from start(today) to end date - and get the max available slots
		    while (!appointmentStartDt.after(appointmentEndDt)) {
			java.util.Date currentDate = appointmentStartDt.getTime();
			Calendar cal = Calendar.getInstance();
			
			cal.set(Calendar.HOUR_OF_DAY, 8);
			cal.set(Calendar.MINUTE, 0);
			cal.set(Calendar.SECOND, 0);
			
			short dayOfWeek = (short) appointmentStartDt.get(Calendar.DAY_OF_WEEK);
			// Loop through all available time slots to get the max time slots for the duration
			// loop through until 5 pm
			while (cal.get(Calendar.HOUR_OF_DAY) < 17) {
			    String time = df.format(cal.getTime());
			    String key = formatter.format(currentDate) + "," + time;
			    String key1 = dayOfWeek + "," + time;
			    Long value = null;
			    // check day schedules map - if the table has this date - get the max avail slots
			    if (daySchedules != null && daySchedules.containsKey(key)) {
				value = daySchedules.get(key);
				log(7, "Start fetchAvailableSlots - maxSlots key1 - " + key);
				log(7, "Start fetchAvailableSlots - maxSlots value1 - " + value);
				maxSlots.put(key, value);
			    }
			    // else check schedules map to get the max time slots based on days(Mon, tue...)
			    else if (schedules != null && schedules.containsKey(key1)) {
				List<String> tempKey = schedules.get(key1);
				for (int z = 0; z < tempKey.size(); z++) {
				    StringTokenizer tkn = new StringTokenizer(tempKey.get(z), ",");
				    while (tkn.hasMoreTokens()) {
					java.util.Date effDt = formatter.parse(tkn.nextToken());
					value = Long.valueOf(tkn.nextToken());
					if (appointmentStartDt.getTime().compareTo(effDt) >= 0) {
					    log(7, "Start fetchAvailableSlots - maxSlots key - " + key);
					    log(7, "Start fetchAvailableSlots - maxSlots value - " + value);
					    maxSlots.put(key, value);
					}
				    }
				    
				}
				
			    }
			    // PMD_Override - R10 - The casting of this numeric/byte type does not need to be addressed because it will not exceed the int value.
			    PMDRules.markApprovedStatement("R10");
			    cal.add(Calendar.MINUTE, (int) scheduleDuration);
			}
			appointmentStartDt.add(Calendar.DATE, 1);
		    }
		    // Find the slots that's been occupied for the days between the interval and set it in the map
		    ShAppointmentsCargo shApptsCargo = new ShAppointmentsCargo();
		    ShAppointmentsCollection shApptsColl = new ShAppointmentsCollection(connection);
		    
		    shApptsCargo.setSchedDuration(scheduleDuration);
		    shApptsCargo.setOfficeNum(officeNum);
		    
		    Object[] args = new Object[3];
		    args[0] = shApptsCargo;
		    args[1] = intervalDays;
		    args[2] = startDt;
		    
		    ShAppointmentsCargo[] shApptArr = (ShAppointmentsCargo[]) shApptsColl.select("findByApptDateDuration2", args);
		    Map<String, Long> scheduledSlots = null;
		    if (shApptArr != null && shApptArr.length > 0) {
			scheduledSlots = new HashMap<String, Long>();
			for (int count = 0; count < shApptArr.length; count++) {
			    Date sqlDate = new Date(shApptArr[count].getApptBegDatetime().getTime());
			    
			    String date = formatter.format(sqlDate.getTime());
			    String time = df.format(sqlDate.getTime());
			    String key = date + "," + time;
			    log(7, "Start fetchAvailableSlots - scheduledSlots key - " + key);
			    log(7, "Start fetchAvailableSlots - scheduledSlots value - " + shApptArr[count].getApptCount());
			    scheduledSlots.put(key, (Long) shApptArr[count].getApptCount());
			    
			}
			
		    }
		    // Loop through the available slots and already taken slots - get the available slots(max-scheduled) and set them in a map based on date & time available
		    Map<String, List<String>> availSlotsMap = new HashMap<String, List<String>>();
		    for (Map.Entry<String, Long> entry : maxSlots.entrySet()) {
			String key = entry.getKey();
			Long value = entry.getValue();
			long availSlots = 0;
			if (scheduledSlots != null && scheduledSlots.containsKey(key)) {
			    availSlots = value.longValue() - scheduledSlots.get(key).longValue();
			} else {
			    availSlots = value.longValue();
			}
			if (availSlots > 0) {
			    StringTokenizer token = new StringTokenizer(key, ",");
			    while (token.hasMoreTokens()) {
				List<String> timeList = new ArrayList<String>();
				
				java.util.Date availDt = formatter.parse(token.nextToken());
				String availDtKey = formatter.format(availDt);
				
				java.util.Date availStrtTime = df.parse(token.nextToken());
				String availTime = df.format(availStrtTime);
				if (availSlotsMap.containsKey(availDtKey)) {
				    timeList = availSlotsMap.get(availDtKey);
				    timeList.add(availTime);
				    
				} else {
				    timeList.add(availTime);
				}
				log(7, "Start fetchAvailableSlots - availSlotsMap key - " + availDtKey);
				log(7, "Start fetchAvailableSlots - availSlotsMap value - " + timeList);
				availSlotsMap.put(availDtKey, timeList);
			    }
			}
		    }
		    // Set the available slots date and time in the VO - to send the response back
		    if (availSlotsMap.size() > 0) {
			List<AvailableAppointmentTime> availableAppts = new ArrayList<AvailableAppointmentTime>();
			for (Map.Entry<String, List<String>> apptEntry : availSlotsMap.entrySet()) {
			    AvailableAppointmentTime availAppt = new AvailableAppointmentTime();
			    
			    String key = apptEntry.getKey();
			    Calendar cal1 = Calendar.getInstance();
			    cal1.setTime(formatter.parse(key));
			    
			    availAppt.setAppointmentDate(cal1);
			    
			    List<String> times = apptEntry.getValue();
			    AppointmentSlotRange[] slotRange = new AppointmentSlotRange[times.size()];
			    for (int list = 0; list < times.size(); list++) {
				slotRange[list] = new AppointmentSlotRange();
				String strtTimeStr = formatter.format(formatter.parse(key)) + " " + times.get(list);
				
				Calendar startTime = Calendar.getInstance();
				startTime.setTime(tsf.parse(strtTimeStr));
				
				Calendar endTime = Calendar.getInstance();
				endTime.setTime(startTime.getTime());
				
				// PMD_Override - R10 - The casting of this numeric/byte type does not need to be addressed because it will not exceed the int value.
				PMDRules.markApprovedStatement("R10");
				endTime.add(Calendar.MINUTE, (int) scheduleDuration);
				log(7, "Start fetchAvailableSlots - appt Date - " + new Timestamp(cal1.getTimeInMillis()));
				log(7, "Start fetchAvailableSlots - appt startTime - " + new Timestamp(startTime.getTimeInMillis()));
				log(7, "Start fetchAvailableSlots - appt endTime - " + new Timestamp(endTime.getTimeInMillis()));
				slotRange[list].setAppointmentStartTime(startTime);
				slotRange[list].setAppointmentEndTime(endTime);
				
			    }
			    availAppt.setAppointmentSlotRangeList(slotRange);
			    availableAppts.add(availAppt);
			}
			availableApptsArr = new AvailableAppointmentTime[availSlotsMap.size()];
			availableAppts.toArray(availableApptsArr);
		    } else {
			// No dates available
			exceptionSw = true;
			exceptionCd = "NO_SLOTS_AVAILABLE";
		    }
		} else { // interval < 0//error
		    exceptionSw = true;
		    exceptionCd = "ERROR02";
		    
		}
	    } else {
		// error - application dt not found
		exceptionSw = true;
		exceptionCd = "ERROR01";
	    }
	} catch (ApplicationException e) {
		log(ILog.ERROR, "Exception [ApplicationException] in AutoRegistrationBO.fetchAvailableSlots() officeNum: " + officeNum + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.fetchAvailableSlots() officeNum: " + officeNum + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	}
	return availableApptsArr;
	
    }
    
    public boolean autoRegDataUpdate(String appNum, Connection conn) throws Exception {
	log(7, "Begin AutoRegistrationBO.autoRegDataUpdate() " + appNum);
	
	HashMap<Integer, String> ssaValidationSwMap = new HashMap();
	T1006AppInPermdCollection t1006AppInPermdColl = null;
	T1006AppInPermdCargo t1006AppInPermdCargo = null;
	T1006AppInPermdCargo[] t1006AppInPermdCargoArray = null;
	
	try {
	    
	    if (autoRegT1004CargoArray == null || autoRegT1004CargoArray.length == 0) {
		return false;
	    }
	    HashMap<Integer, String> legacyIndvMap = new HashMap();
	    AppIndividualBO appIndividualBO = new AppIndividualBO(connection);
	    T1004AppIndvCargo t1004Cargo = new T1004AppIndvCargo();
	    
	    for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
		int key = (int) autoRegT1004CargoArray[i].getIndvSeqNum();
		if (indvMap.containsKey(key)) {
		    if (indvMap.get(key) != 0) {
			autoRegT1004CargoArray[i].setBridgesIndvId((Long) indvMap.get(key));
			t1004Cargo = autoRegT1004CargoArray[i];
			updateT1004AppIndvTable(t1004Cargo);
		    } else {
			autoRegT1004CargoArray[i].setBridgesIndvId(generateIndvId());
			String legacyIndvId = appIndividualBO.generateRIN(0L);
			legacyIndvMap.put(key, legacyIndvId);
			t1004Cargo = autoRegT1004CargoArray[i];
			updateT1004AppIndvTable(t1004Cargo);
		    }
		}
	    }
	    
	    t1006AppInPermdColl = new T1006AppInPermdCollection(connection);
	    t1006AppInPermdCargo = new T1006AppInPermdCargo();
	    t1006AppInPermdCargo.setAppNum(appNum);
	    t1006AppInPermdColl.add(t1006AppInPermdCargo);
	    t1006AppInPermdCargoArray = (T1006AppInPermdCargo[]) t1006AppInPermdColl.select("findByAppNumInboundFFMApps");
	    if (t1006AppInPermdCargoArray == null || t1006AppInPermdCargoArray.length == 0) {
		if (mSPAppStatus == null) {
		    if (this.con != null) {
			this.con.rollback();
		    }
		    return false;
		}
	    }
	    
	    if (autoRegT1001Cargo.getAppMode().equals(AppRegConstants.SS_APP_MODE) && autoRegT1001Cargo.getSsAppNum() != null && !autoRegT1001Cargo.getSsAppNum().trim().equals("")) {
		// updating SS_INTERFACES_SUMMARY table
		updateSsInterfacesSummaryTable(ssaValidationSwMap);
	    } else {
		for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
		    // PMD_Override - R10 - The casting of this numeric/byte type does not need to be addressed because it will not exceed the int value.
		    PMDRules.markApprovedStatement("R10");
		    ssaValidationSwMap.put((int) autoRegT1004CargoArray[i].getIndvSeqNum(), "N");
		}
	    }
	    
	    // Updating Dc_Indv table
	    if (!updateDcIndvTable(ssaValidationSwMap, legacyIndvMap, t1006AppInPermdCargoArray)) {
		if (this.con != null) {
		    this.con.rollback();
		}
		return false;
	    }
	    
	    // Updating CV_DC_MCI_INDV table
	    if (!updateCvDcMciIndvTable(ssaValidationSwMap, legacyIndvMap, t1006AppInPermdCargoArray)) {
		if (this.con != null) {
		    this.con.rollback();
		}
		return false;
	    }
	    
	    // updating AR_APPLICATION_FOR_AID table
	    updateArApplicationForAidTable(appNum, t1006AppInPermdCargoArray[0]);
	    
	    // Updating DC_INDV_PROFILE table
	    updateDcIndvProfileTable(appNum);
	    
	    if (mSPAppStatus == null) {
		if (!appMPECategory && !appFPPECategory && !appSSALISMSPCategory ) {
		    // Updating DC_INDV_SECONDARY_RACE table
		    updateDcIndvSecondaryRaceTable(t1006AppInPermdCargoArray);
		    
		    // Updating DC_INDV_ETHNICITY table
		    updateDcIndvEthnicityTable(t1006AppInPermdCargoArray);
		}
		
		// updating DC_INDV_LANGUAGE table
		updateDcIndvLanguageTable(t1006AppInPermdCargoArray);
	    }
	    
	    // updating AR_APP_ADDR table
	    if (!updateArAppAddrTable(appNum)) {
		if (this.con != null) {
		    this.con.rollback();
		}
		return false;
	    }
	    
	    updateArApplicationRepTable(appNum);
	    updateArAppIndvTable(appNum);
	    updateArAppProgramTable(appNum);
	    updateArAppProgramIndvTable(appNum);
	    updateT1053AppProgramTable(appNum);
	    updateMoEmployeeAppsTable();
	    
	    if (appSNAPCategory) {
		updateArExpScreenRespTable(appNum);
	    }
	    
	    // MCI call to update new Indv data
	    if (indvMap != null && indvMap.size() != 0) {
			sendMessageToIIRQueue();
	    }
	    updateDcPregnanciesTable(legacyIndvMap, t1006AppInPermdCargoArray);
	    updateConflictTables(appNum);
	    
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.autoRegDataUpdate() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    if (this.con != null) {
		this.con.rollback();
	    }
	    
	    updateAutoRegExcpTable(appNum, AppRegConstants.AUTO_REG_PROCESS_DB, AppRegConstants.AUTO_REG_EXCP_STATUS_EX);
	    
	    if (this.con != null) {
		this.con.commit();
	    }
	    
	    throw e;
	} finally {
	    t1006AppInPermdColl = null;
	    t1006AppInPermdCargo = null;
	    t1006AppInPermdCargoArray = null;
	    autoRegShAppCargo = null;
	}
    }