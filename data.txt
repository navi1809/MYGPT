public boolean updateArHpeEligDetailIndvTable(T1060_APP_IN_HPECargo[] t1060HPECargoArray) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateArHpeEligDetailIndvTable() ");
	ArHpeEligDetailIndvCargo arHpeEligDetailIndvCargo = null;
	ArHpeEligDetailIndvCollection arHpeEligDetailIndvColl = new ArHpeEligDetailIndvCollection(connection);
	T1004AppIndvCargo t1004Cargo = new T1004AppIndvCargo();
	try {
	    java.sql.Timestamp currentTime = new java.sql.Timestamp(System.currentTimeMillis());
	    
	    T1060_APP_IN_HPECargo t1060HPECargo = null;
	    for (int i = 0; i < t1060HPECargoArray.length; i++) {
		t1060HPECargo = t1060HPECargoArray[i];
		// ILIES-194046
		for (int j = 0; j < autoRegT1004CargoArray.length; j++) {
		    if (t1060HPECargo.getIndvSeqNum() == autoRegT1004CargoArray[j].getIndvSeqNum()) {
			t1004Cargo = autoRegT1004CargoArray[j];
			break;
		    }
		}
		
		arHpeEligDetailIndvCargo = new ArHpeEligDetailIndvCargo();
		arHpeEligDetailIndvCargo.setIlResSw(t1060HPECargo.getIlResSw());
		arHpeEligDetailIndvCargo.setHpeEligGrpCd(t1060HPECargo.getHpeEligGrpCd() == null ? "NA" : t1060HPECargo.getHpeEligGrpCd());
		arHpeEligDetailIndvCargo.setHpeEligSw(t1060HPECargo.getHpeEligSw());
		arHpeEligDetailIndvCargo.setPrevMaEligSw(t1060HPECargo.getPrevHpeEligSw());
		arHpeEligDetailIndvCargo.setUniqueTransId(t1060HPECargo.getUniqueTransId());
		arHpeEligDetailIndvCargo.setPrevHpeEligSw(t1060HPECargo.getPrevHpeEligSw());
		arHpeEligDetailIndvCargo.setPrevMpeEligSw('N');
		arHpeEligDetailIndvCargo.setNatAmerSw(t1060HPECargo.getNatAmerSw());
		arHpeEligDetailIndvCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		arHpeEligDetailIndvCargo.setDeliveryDt(t1060HPECargo.getDeliveryDt());
		arHpeEligDetailIndvCargo.setAppNum(t1060HPECargo.getAppNum());
		arHpeEligDetailIndvCargo.setUsCtznSw(t1060HPECargo.getUsCtznSw());
		arHpeEligDetailIndvCargo.setHpeApplicantSw(t1060HPECargo.getHpeApplicantSw());
		arHpeEligDetailIndvCargo.setIrdbStatusDt(currentTime);
		arHpeEligDetailIndvCargo.setCreateDt(currentTime);
		log(ILog.INFO, "AutoRegistrationBO.updateArHpeEligDetailIndvTable() app Num " + t1060HPECargo.getAppNum());
		log(ILog.INFO, "AutoRegistrationBO.updateArHpeEligDetailIndvTable() combinedHpeMaApp" + combinedHpeMaApp(t1060HPECargo.getAppNum()));
		if (combinedHpeMaApp(t1060HPECargo.getAppNum())) {
		    arHpeEligDetailIndvCargo.setHpeEndDt(getMaxDate());
		} else {
		    arHpeEligDetailIndvCargo.setHpeEndDt(getNextMonthEndDate(t1060HPECargo.getHpeBeginDt()));
		}
		log(ILog.INFO, "AutoRegistrationBO.updateArHpeEligDetailTable() hpeEndDt" + arHpeEligDetailIndvCargo.getHpeEndDt());
		arHpeEligDetailIndvCargo.setLawfulPresSw(t1060HPECargo.getLawfulPresSw());
		arHpeEligDetailIndvCargo.setPregnancySw(t1060HPECargo.getPregnancySw());
		arHpeEligDetailIndvCargo.setMedicareSw(t1060HPECargo.getMedicareSw());
		arHpeEligDetailIndvCargo.setIndvId(t1004Cargo.getBridgesIndvId());
		//BEGIN: ILIES-226708 - ONLY SET STATUS IF INDIV IS ELIGIBLE
		if(t1060HPECargo.getHpeEligGrpCd()!= null && !t1060HPECargo.getHpeEligGrpCd().equalsIgnoreCase("NA")){
			arHpeEligDetailIndvCargo.setIrdbStatusCd('P');
		}
		//END: ILIES-226708
		arHpeEligDetailIndvCargo.setHpeBeginDt(t1060HPECargo.getHpeBeginDt());
		
		arHpeEligDetailIndvColl.add(arHpeEligDetailIndvCargo);
	    }
	    arHpeEligDetailIndvColl.insert(arHpeEligDetailIndvColl);
	    
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArHpeEligDetailIndvTable(): " + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    arHpeEligDetailIndvCargo = null;
	    arHpeEligDetailIndvColl = null;
	}
    }
    
    // ILIES-189484
    public boolean updateArHpeAssociationTable(T1060_APP_IN_HPECargo t1060HPECargo) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateArHpeAssociationTable() ");
	
	ArHpeAssociationCargo arHpeAssCargo = new ArHpeAssociationCargo();
	ArHpeAssociationCollection arHpeAssColl = new ArHpeAssociationCollection(connection);
	
	try {
	    
	    arHpeAssCargo.setHpeAppNum(t1060HPECargo.getAppNum());
	    arHpeAssCargo.setHpeBegDt(t1060HPECargo.getHpeBeginDt());
	    if (combinedHpeMaApp(t1060HPECargo.getAppNum())) {
		arHpeAssCargo.setHpeEndDt(getMaxDate());
	    } else {
		arHpeAssCargo.setHpeEndDt(getNextMonthEndDate(t1060HPECargo.getHpeBeginDt()));
	    }
	    
	    arHpeAssCargo.setCreateDt(currentTime);
	    arHpeAssCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
	    arHpeAssCargo.setHpeTriggerStatusCd("NM");
	    arHpeAssCargo.setHpeTriggerDt(currentTime);
	    
	    arHpeAssColl.setCargo(arHpeAssCargo);
	    arHpeAssColl.insert(arHpeAssColl);
	    
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArHpeAssociationTable(): " + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    arHpeAssCargo = null;
	    arHpeAssColl = null;
	}
    }
    
    public String updateArMpeEligDetailTable() throws Exception {
	log(7, "Begin AutoRegistrationBO.updateArMpeEligDetailTable() ");
	ArMpeEligDetailCargo arMpeEligDetailCargo = new ArMpeEligDetailCargo();
	ArFppeEligDetailCargo arFppeCargo = new ArFppeEligDetailCargo();
	ArMpeEligDetailCollection arMpeEligDetailColl = new ArMpeEligDetailCollection(connection);
	ArFppeEligDetailCollection arFppeCollection = new ArFppeEligDetailCollection(connection);
	boolean isMPEapp = true;
	AppSummaryBO appBO = new AppSummaryBO(connection);
	char repeatedSw=' ';
	
	try {
	    //FPPE is a clone of MPE AR table, pre-filling logic needs to be replicated.
	    if (autoRegT1001SSAppMpeCargo == null) {
		return null;
	    }
	    //MPE apps are only those where APP_TYPE is not FPPE; by default all PM are MPE apps.
	    isMPEapp = !DMConstants.FP_PRESUMPTIVE_ELIGIBILITY.equals(autoRegT1001SSAppMpeCargo.getAppType());
	    
	    if(isMPEapp){
	    	arMpeEligDetailCargo.setAppNum(autoRegT1001SSAppMpeCargo.getAppNum());
	    	arMpeEligDetailCargo.setNetIncomeAmt(autoRegT1001SSAppMpeCargo.getMoNetIncAmt());
		    arMpeEligDetailCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    arMpeEligDetailCargo.setPregnancyTestSw(autoRegT1001SSAppMpeCargo.getPosPrefTestInd());
		    arMpeEligDetailCargo.setDeductionAmt(autoRegT1001SSAppMpeCargo.getMoCsPymtAmt());
		    arMpeEligDetailCargo.setDeliveryDt(autoRegT1001SSAppMpeCargo.getExptDlvrDt());
		    arMpeEligDetailCargo.setGrossAmt(autoRegT1001SSAppMpeCargo.getMoGrEiAmt() + autoRegT1001SSAppMpeCargo.getMoGrUeiAmt());
		    arMpeEligDetailCargo.setMonthlyUiAmt(autoRegT1001SSAppMpeCargo.getMoGrUeiAmt());
		    arMpeEligDetailCargo.setMpeEndDt(getNextMonthEndDate(autoRegT1001SSAppMpeCargo.getAppBeginDt()));
		    arMpeEligDetailCargo.setCreateDt(currentTime);
		    arMpeEligDetailCargo.setProviderId(autoRegT1001SSAppMpeCargo.getPrvdId());
		    arMpeEligDetailCargo.setMpeDenialSw('N');
		    arMpeEligDetailCargo.setUnbornCount(autoRegT1001SSAppMpeCargo.getFetusCt());
		    arMpeEligDetailCargo.setHouseholdCount(autoRegT1001SSAppMpeCargo.getHshlMbrQty());
		    arMpeEligDetailCargo.setMonthlyEiAmt(autoRegT1001SSAppMpeCargo.getMoGrEiAmt());
		    arMpeEligDetailCargo.setMpeBeginDt(autoRegT1001SSAppMpeCargo.getAppBeginDt());
		    arMpeEligDetailCargo.setMangpCd("MM");
		    
		    if (autoRegT1004CargoArray != null && autoRegT1004CargoArray.length > 0) {
		    	arMpeEligDetailCargo.setIndvId(autoRegT1004CargoArray[0].getBridgesIndvId());
		    	repeatedSw=appBO.twiceinYear(autoRegT1004CargoArray[0].getBridgesIndvId()); //Used to determine if a denial is needed (N or Y expected).
		    }
		    
		    if(repeatedSw=='Y'){
		    	arMpeEligDetailCargo.setMpeDenialSw('Y');
		    	arMpeEligDetailCargo.setPeTwiceInYearSw('Y');
		    	arMpeEligDetailCargo.setDenialReasonCd("P7");
		    	arMpeEligDetailCargo.setMpeEndDt(currentTime);
		    }
		    else{
		    	arMpeEligDetailCargo.setPeTwiceInYearSw('N');
		    }
		    
	    	arMpeEligDetailColl.add(arMpeEligDetailCargo);
	    	arMpeEligDetailColl.insert(arMpeEligDetailColl);
	    }else{
	    	arFppeCargo.setAppNum(autoRegT1001SSAppMpeCargo.getAppNum());
	    	arFppeCargo.setNetIncomeAmt(autoRegT1001SSAppMpeCargo.getMoNetIncAmt());
	    	arFppeCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
	    	arFppeCargo.setPregnancyTestSw(autoRegT1001SSAppMpeCargo.getPosPrefTestInd());
	    	arFppeCargo.setDeductionAmt(autoRegT1001SSAppMpeCargo.getMoCsPymtAmt());
	    	arFppeCargo.setGrossAmt(autoRegT1001SSAppMpeCargo.getMoGrEiAmt() + autoRegT1001SSAppMpeCargo.getMoGrUeiAmt());
	    	arFppeCargo.setMonthlyUiAmt(autoRegT1001SSAppMpeCargo.getMoGrUeiAmt());
	    	arFppeCargo.setFppeEndDt(getNextMonthEndDate(autoRegT1001SSAppMpeCargo.getAppBeginDt()));
	    	arFppeCargo.setCreateDt(currentTime);
	    	arFppeCargo.setProviderId(autoRegT1001SSAppMpeCargo.getPrvdId());
	    	arFppeCargo.setFppeDenialSw('N');
	    	arFppeCargo.setHouseholdCount(autoRegT1001SSAppMpeCargo.getHshlMbrQty());
	    	arFppeCargo.setMonthlyEiAmt(autoRegT1001SSAppMpeCargo.getMoGrEiAmt());
	    	arFppeCargo.setFppeBeginDt(autoRegT1001SSAppMpeCargo.getAppBeginDt());
	    	arFppeCargo.setMangpCd("FG");
	    	
	    	if (autoRegT1004CargoArray != null && autoRegT1004CargoArray.length > 0) {
	    		arFppeCargo.setIndvId(autoRegT1004CargoArray[0].getBridgesIndvId());
	    		//repeatedSw=appBO.twiceinYear(autoRegT1004CargoArray[0].getBridgesIndvId()); //Used to determine if a denial is needed (N or Y expected).
	    	}
	    	
	    	/*if(repeatedSw=='Y'){
	    		arFppeCargo.setFppeDenialSw('Y');
	    		arFppeCargo.setDenialReasonCd("P7");
	    		arFppeCargo.setFppeEndDt(currentTime);
	    	}*/
	    	
	    	arFppeCollection.add(arFppeCargo);
	    	arFppeCollection.insert(arFppeCollection);
	    }
	    
	    if(arMpeEligDetailCargo.getMpeDenialSw()=='Y'){
	    	updateStatusArAppforAidTable(autoRegT1001SSAppMpeCargo.getAppNum());
	    	return "P7true";
	    }else{
	    	return "P7false";
	    }
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArMpeEligDetailTable(): " + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    arMpeEligDetailCargo = null;
	    arMpeEligDetailColl = null;
	}
   }
    
    public boolean updateShAppointmentsTable() throws Exception {
	log(7, "Begin AutoRegistrationBO.updateShAppointmentsTable() ");
	ShAppointmentsCollection shApptsColl = new ShAppointmentsCollection(connection);
	
	try {
	    if (autoRegShAppCargo != null) {
		autoRegShAppCargo.setCreateDt(currentTime);
		
		shApptsColl.setCargo(autoRegShAppCargo);
		shApptsColl.update(shApptsColl);
	    }
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateShAppointmentsTable(): " + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    shApptsColl = null;
	}
    }
    
    
    public boolean updateArAppforAidTable(String appNum) throws Exception {
    	log(7, "Begin AutoRegistrationBO.updateArAppforAidTable() ");
    	ArApplicationForAidCargo arappCargo = new ArApplicationForAidCargo();
    	ArApplicationForAidCollection arappColl = new ArApplicationForAidCollection(connection);
    	ArApplicationForAidCargo[] arappCargoResult =null;
    	
    	try {
    		   arappCargo.setAppNum(appNum);
			   arappColl.setCargo(arappCargo);
			   arappCargoResult = (ArApplicationForAidCargo[]) arappColl.select("findByAppNum");
			   if (arappCargoResult != null || arappCargoResult.length > 0) {
				   arappColl.clear();
				   arappCargo = arappCargoResult[0];
				   arappCargo.setScheduledSw(autoRegScheduledSw);
				   arappColl.add(arappCargo);
				   arappColl.update(arappColl);
			   }
    	       return true;
    	    
    	} catch (Exception e) {
			log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArAppforAidTable() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
    	    hasExceptionOccurred = true;
    	    throw e;
    	} finally {
    		arappColl=null;
    		arappCargo=null;
    		arappCargoResult = null;
    	}
       }
    
    
    public boolean updateStatusArAppforAidTable(String appNum) throws Exception {
    	log(7, "Begin AutoRegistrationBO.updateStatusArAppforAidTable() ");
    	ArApplicationForAidCargo arappCargo = new ArApplicationForAidCargo();
    	ArApplicationForAidCollection arappColl = new ArApplicationForAidCollection(connection);
    	ArApplicationForAidCargo[] arappCargoResult =null;
    	
    	try {
    		   arappCargo.setAppNum(appNum);
			   arappColl.setCargo(arappCargo);
			   arappCargoResult = (ArApplicationForAidCargo[]) arappColl.select("findByAppNum");
			   if (arappCargoResult != null || arappCargoResult.length > 0) {
				   arappColl.clear();
				   arappCargo = arappCargoResult[0];
				   arappCargo.setApplicationStatusCd("DN");
				   arappColl.add(arappCargo);
				   arappColl.update(arappColl);
			   }
    	       return true;
    	    
    	} catch (Exception e) {
			log(ILog.ERROR, "Exception in AutoRegistrationBO.updateStatusArAppforAidTable() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
    	    hasExceptionOccurred = true;
    	    throw e;
    	} finally {
    		arappColl=null;
    		arappCargo=null;
    		arappCargoResult = null;
    	}
       }
    
    
    public boolean updateShAppointmentProgramsTable() throws Exception {
	log(7, "Begin AutoRegistrationBO.updateShAppointmentProgramsTable() ");
	ShAppointmentProgramsCollection shApptProgramColl = new ShAppointmentProgramsCollection(connection);
	ShAppointmentsCargo shApptsCargo = new ShAppointmentsCargo();
	ShAppointmentProgramsCargo shCargo = null;
	
	try {
	    
	    if (autoRegShAppCargo != null) {
		
		if (autoRegT1002Cargo.getFsRqstSw() == 'Y') {
		    shCargo = new ShAppointmentProgramsCargo();
		    shCargo.setApptId(autoRegShAppCargo.getApptId());
		    shCargo.setExistsSw('Y');
		    shCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    shCargo.setCreateDt(currentTime);
		    shCargo.setProgramCd("FS");
		    shApptProgramColl.add(shCargo);
		}
		if (autoRegT1002Cargo.getMaRqstSw() == 'Y') {
		    shCargo = new ShAppointmentProgramsCargo();
		    shCargo.setApptId(autoRegShAppCargo.getApptId());
		    shCargo.setExistsSw('Y');
		    shCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    shCargo.setCreateDt(currentTime);
		    shCargo.setProgramCd("MA");
		    shApptProgramColl.add(shCargo);
		}
		if (autoRegT1002Cargo.getMcRqstSw() == 'Y') {
		    shCargo = new ShAppointmentProgramsCargo();
		    shCargo.setApptId(autoRegShAppCargo.getApptId());
		    shCargo.setExistsSw('Y');
		    shCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    shCargo.setCreateDt(currentTime);
		    shCargo.setProgramCd("MC");
		    shApptProgramColl.add(shCargo);
		}
		if (autoRegT1002Cargo.getCashRqstSw() == 'Y') {
		    shCargo = new ShAppointmentProgramsCargo();
		    shCargo.setApptId(autoRegShAppCargo.getApptId());
		    shCargo.setExistsSw('Y');
		    shCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    shCargo.setCreateDt(currentTime);
		    shCargo.setProgramCd("TF");
		    shApptProgramColl.add(shCargo);
		    
		}
		shApptProgramColl.insert(shApptProgramColl);
	    }
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateShAppointmentProgramsTable(): " + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    shApptProgramColl = null;
	    shApptsCargo = null;
	    shCargo = null;
	}
    }

    public boolean updateConflictTables(String appNum) throws Exception {
	log(7, "AutoRegistrationBO.updateConflictTables() started ");
	SsBrgConflictStatusCargo ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	SsBrgConflictStatusCollection ssBrgConfStatColl = new SsBrgConflictStatusCollection(connection);
	
	try {
	    /* Insert in conflict status table */

	    ssBrgConfStatCargo.setPageId("AMMAP");
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(currentTime);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    
	    ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	    ssBrgConfStatCargo.setPageId("AMMAD");
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(currentTime);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    
	    ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	    ssBrgConfStatCargo.setPageId("AMMAT");
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(currentTime);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    
	    ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	    ssBrgConfStatCargo.setPageId("AMMII");
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(currentTime);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    
	    ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	    ssBrgConfStatCargo.setPageId("AMMAR");
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(currentTime);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    
	    ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	    ssBrgConfStatCargo.setPageId("ARRAP");
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(currentTime);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    
	    ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	    ssBrgConfStatCargo.setPageId("ARRAD");
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(currentTime);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    
	    ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	    ssBrgConfStatCargo.setPageId("ARRAT");
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(currentTime);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    
	    ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	    ssBrgConfStatCargo.setPageId("ARRII");
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(currentTime);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    
	    ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	    ssBrgConfStatCargo.setPageId("ARRAR");
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(currentTime);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    
	    ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	    ssBrgConfStatCargo.setPageId("ARHCI"); //Contact information page_ID (AR mode)
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(currentTime);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    
	    ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	    ssBrgConfStatCargo.setPageId("AMHCI"); //Contact information page_ID (AM mode)
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(currentTime);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    
	    ssBrgConfStatColl.insert(ssBrgConfStatColl);
	    
	    log(7, "AutoRegistrationBO.updateConflictTables() -- End ");
	    
	    return true;
	} catch (Exception ex) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateConflictTables() appNum: " + appNum + "\n" + ex.getMessage() + "\n", ex);
	    hasExceptionOccurred = true;
	    throw ex;
	} finally {
	    ssBrgConfStatCargo = null;
	    ssBrgConfStatColl = null;
	}
    }
    
    public boolean updateConflictTablesCMBatch(String appNum, Timestamp rcvDt) throws Exception {
	log(7, "AutoRegistrationBO.updateConflictTablesCMBatch() started ");
	SsBrgConflictStatusCargo ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	SsBrgConflictStatusCollection ssBrgConfStatColl = new SsBrgConflictStatusCollection(connection);
	long statusSeqNum;
	try {
	    /* Insert in conflict status table */

	    ssBrgConfStatCargo.setPageId("AMMAP");
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(rcvDt);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    ssBrgConfStatColl.insert(ssBrgConfStatColl);
	    ssBrgConfStatColl.clear();
	    
	    ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	    ssBrgConfStatCargo.setPageId("AMMAD");
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(rcvDt);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    ssBrgConfStatColl.insert(ssBrgConfStatColl);
	    ssBrgConfStatColl.clear();
	    
	    ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	    ssBrgConfStatCargo.setPageId("AMMAT");
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(rcvDt);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    ssBrgConfStatColl.insert(ssBrgConfStatColl);
	    ssBrgConfStatColl.clear();
	    
	    ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	    ssBrgConfStatCargo.setPageId("AMMII");
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(rcvDt);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    ssBrgConfStatColl.insert(ssBrgConfStatColl);
	    statusSeqNum = ssBrgConfStatCargo.getSsBrgConflictStatusSeqNum();
	    insertIntoBrgConflictKeyId(statusSeqNum, "1");
	    ssBrgConfStatColl.clear();
	    
	    ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	    ssBrgConfStatCargo.setPageId("AMMAR");
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(rcvDt);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    ssBrgConfStatColl.insert(ssBrgConfStatColl);
	    ssBrgConfStatColl.clear();
	    
	    ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	    ssBrgConfStatCargo.setPageId("ARRAP");
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("P");
	    ssBrgConfStatCargo.setUpdateDt(rcvDt);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    ssBrgConfStatColl.insert(ssBrgConfStatColl);
	    ssBrgConfStatColl.clear();
	    
	    ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	    ssBrgConfStatCargo.setPageId("ARRAD");
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(rcvDt);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    ssBrgConfStatColl.insert(ssBrgConfStatColl);
	    ssBrgConfStatColl.clear();
	    
	    ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	    ssBrgConfStatCargo.setPageId("ARRAT");
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(rcvDt);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    ssBrgConfStatColl.insert(ssBrgConfStatColl);
	    ssBrgConfStatColl.clear();
	    
	    ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	    ssBrgConfStatCargo.setPageId("ARRII");
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(rcvDt);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    ssBrgConfStatColl.insert(ssBrgConfStatColl);
	    statusSeqNum = ssBrgConfStatCargo.getSsBrgConflictStatusSeqNum();
	    insertIntoBrgConflictKeyId(statusSeqNum, "1");
	    ssBrgConfStatColl.clear();
	    
	    ssBrgConfStatCargo = new SsBrgConflictStatusCargo();
	    ssBrgConfStatCargo.setPageId("ARRAR");
	    ssBrgConfStatCargo.setAppNum(appNum);
	    ssBrgConfStatCargo.setStatusInd("PC");
	    ssBrgConfStatCargo.setUpdateDt(rcvDt);
	    ssBrgConfStatCargo.setUserId(AppRegConstants.AUTO_REG_BATCH);
	    ssBrgConfStatColl.add(ssBrgConfStatCargo);
	    ssBrgConfStatColl.insert(ssBrgConfStatColl);
	    ssBrgConfStatColl.clear();
	    
	    log(7, "AutoRegistrationBO.updateConflictTablesCMBatch() -- End ");
	    
	    return true;
	} catch (Exception ex) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateConflictTablesCMBatch() appNum: " + appNum + "\n" + ex.getMessage() + "\n", ex);
	    hasExceptionOccurred = true;
	    throw ex;
	} finally {
	    ssBrgConfStatCargo = null;
	    ssBrgConfStatColl = null;
	}
    }

    public boolean updateT1053AppProgramTable(String appNum) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateT1053AppProgramTable() ");
	
	T1053AppProgramCollection t1053Coll = new T1053AppProgramCollection(connection);
	T1053AppProgramCargo t1253Cargo = new T1053AppProgramCargo();
	T1053AppProgramCargo[] t1253CargoArray = null;
	
	try {
	    t1253Cargo.setAppNum(appNum);
	    t1053Coll.add(t1253Cargo);
	    t1253CargoArray = (T1053AppProgramCargo[]) t1053Coll.select("findByAppNum");
	    if (t1253CargoArray != null || t1253CargoArray.length > 0) {
		t1053Coll.clear();
		for (int i = 0; i < t1253CargoArray.length; i++) {
		    t1253Cargo = t1253CargoArray[i];
		    t1253Cargo.setRequestStatusInd('Y');
		    t1053Coll.add(t1253Cargo);
		}
		t1053Coll.update(t1053Coll);
	    }
	    
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateT1053AppProgramTable() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    t1053Coll = null;
	    t1253Cargo = null;
	    t1253CargoArray = null;
	}
    }

    public boolean updateMoEmployeeAppsTable() throws Exception {
	log(7, "Begin AutoRegistrationBO.updateMoEmployeeAppsTable() ");
	MoEmployeeAppsCargo moEmpAppsCargo = new MoEmployeeAppsCargo();
	MoEmployeeAppsCollection moEmpAppsColl = new MoEmployeeAppsCollection(connection);
	
	try {
	    long empId = retrieveIntakeVirtualWkrId(autoRegT1001Cargo.getOfcNum());
	    if (autoRegT1002Cargo != null) {
		
		if (autoRegT1002Cargo.getFsRqstSw() == 'Y') {
		    moEmpAppsCargo = new MoEmployeeAppsCargo();
		    moEmpAppsCargo.setAppNum(autoRegT1001Cargo.getAppNum());
		    moEmpAppsCargo.setAssignBeginDt(currentTime);
		    moEmpAppsCargo.setEmpId(empId);
		    moEmpAppsCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    moEmpAppsCargo.setCreateDt(currentTime);
		    moEmpAppsCargo.setProcessId(AppRegConstants.AUTO_REG_BATCH);
		    moEmpAppsCargo.setProgramCd("FS");
		    moEmpAppsColl.add(moEmpAppsCargo);
		}
		if (autoRegT1002Cargo.getMaRqstSw() == 'Y') {
		    moEmpAppsCargo = new MoEmployeeAppsCargo();
		    moEmpAppsCargo.setAppNum(autoRegT1001Cargo.getAppNum());
		    moEmpAppsCargo.setAssignBeginDt(currentTime);
		    moEmpAppsCargo.setEmpId(empId);
		    moEmpAppsCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    moEmpAppsCargo.setCreateDt(currentTime);
		    moEmpAppsCargo.setProcessId(AppRegConstants.AUTO_REG_BATCH);
		    moEmpAppsCargo.setProgramCd("MA");
		    moEmpAppsColl.add(moEmpAppsCargo);
		}
		if (autoRegT1002Cargo.getMaRqstSw() == 'N' && autoRegT1002Cargo.getFppRqstSw() == 'Y') {
		    moEmpAppsCargo = new MoEmployeeAppsCargo();
		    moEmpAppsCargo.setAppNum(autoRegT1001Cargo.getAppNum());
		    moEmpAppsCargo.setAssignBeginDt(currentTime);
		    moEmpAppsCargo.setEmpId(empId);
		    moEmpAppsCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    moEmpAppsCargo.setCreateDt(currentTime);
		    moEmpAppsCargo.setProcessId(AppRegConstants.AUTO_REG_BATCH);
		    moEmpAppsCargo.setProgramCd("FP");
		    moEmpAppsColl.add(moEmpAppsCargo);
		}
		if (autoRegT1002Cargo.getMcRqstSw() == 'Y') {
		    moEmpAppsCargo = new MoEmployeeAppsCargo();
		    moEmpAppsCargo.setAppNum(autoRegT1001Cargo.getAppNum());
		    moEmpAppsCargo.setAssignBeginDt(currentTime);
		    moEmpAppsCargo.setEmpId(empId);
		    moEmpAppsCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    moEmpAppsCargo.setCreateDt(currentTime);
		    moEmpAppsCargo.setProcessId(AppRegConstants.AUTO_REG_BATCH);
		    moEmpAppsCargo.setProgramCd("MC");
		    moEmpAppsColl.add(moEmpAppsCargo);
		}
		if (autoRegT1002Cargo.getCashRqstSw() == 'Y') {
		    moEmpAppsCargo = new MoEmployeeAppsCargo();
		    moEmpAppsCargo.setAppNum(autoRegT1001Cargo.getAppNum());
		    moEmpAppsCargo.setAssignBeginDt(currentTime);
		    moEmpAppsCargo.setEmpId(empId);
		    moEmpAppsCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    moEmpAppsCargo.setCreateDt(currentTime);
		    moEmpAppsCargo.setProcessId(AppRegConstants.AUTO_REG_BATCH);
		    moEmpAppsCargo.setProgramCd("TF");
		    moEmpAppsColl.add(moEmpAppsCargo);
		    
		}

		if (autoRegT1002Cargo.getMaRqstSw() != 'Y' && appHPECategory) {
		    moEmpAppsCargo = new MoEmployeeAppsCargo();
		    moEmpAppsCargo.setAppNum(autoRegT1001Cargo.getAppNum());
		    moEmpAppsCargo.setAssignBeginDt(currentTime);
		    moEmpAppsCargo.setEmpId(empId);
		    moEmpAppsCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    moEmpAppsCargo.setCreateDt(currentTime);
		    moEmpAppsCargo.setProcessId(AppRegConstants.AUTO_REG_BATCH);
		    moEmpAppsCargo.setProgramCd("HP");
		    moEmpAppsColl.add(moEmpAppsCargo);
		}
	    // for MPE
	    if (appMPECategory && !appFPPECategory) {
		moEmpAppsCargo = new MoEmployeeAppsCargo();
		moEmpAppsCargo.setAppNum(autoRegT1001Cargo.getAppNum());
		moEmpAppsCargo.setAssignBeginDt(currentTime);
		moEmpAppsCargo.setEmpId(empId);
		moEmpAppsCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		moEmpAppsCargo.setCreateDt(currentTime);
		moEmpAppsCargo.setProcessId(AppRegConstants.AUTO_REG_BATCH);
		moEmpAppsCargo.setProgramCd("MA");
		moEmpAppsColl.add(moEmpAppsCargo);
	    }
	    // for FPPE
		if (appFPPECategory) {
		    moEmpAppsCargo = new MoEmployeeAppsCargo();
		    moEmpAppsCargo.setAppNum(autoRegT1001Cargo.getAppNum());
		    moEmpAppsCargo.setAssignBeginDt(currentTime);
		    moEmpAppsCargo.setEmpId(empId);
		    moEmpAppsCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    moEmpAppsCargo.setCreateDt(currentTime);
		    moEmpAppsCargo.setProcessId(AppRegConstants.AUTO_REG_BATCH);
		    moEmpAppsCargo.setProgramCd("FP");
		    moEmpAppsColl.add(moEmpAppsCargo);
		}
		moEmpAppsColl.insert(moEmpAppsColl);
	    }
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateMoEmployeeAppsTable(): " + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    moEmpAppsColl = null;
	    moEmpAppsCargo = null;
	}
    }
    
    public java.sql.Timestamp getNextMonthEndDate(java.sql.Timestamp date) {
	Calendar c = Calendar.getInstance();
	c.setTime(new java.util.Date(date.getTime()));
	c.add(Calendar.MONTH, 2);
	c.set(Calendar.DAY_OF_MONTH, 1);
	c.add(Calendar.DATE, -1);
	
	java.util.Date nextMonthEndDate = c.getTime();
	return new java.sql.Timestamp(nextMonthEndDate.getTime());
	
    }

    public java.sql.Timestamp getMaxDate() throws TIERSBatchException {
	
	java.sql.Timestamp maxDate = null;
	try {
	    DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.s");
	    java.util.Date tempDate = dateFormat.parse("9999-12-12 00:00:00.0");
	    maxDate = new java.sql.Timestamp(tempDate.getTime());
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.getMaxDate(): " + "\n" + e.getMessage() + "\n", e);
	    throw new TIERSBatchException(e);
	}
	return maxDate;
    }

    public java.sql.Timestamp getCurrentMonthFirstDate(java.sql.Timestamp date, int backMonth) {
	Calendar c = Calendar.getInstance();
	c.setTime(new java.util.Date(date.getTime()));
	c.set(Calendar.DAY_OF_MONTH, 1);
	c.add(Calendar.MONTH, backMonth);
	java.util.Date currentMonthFirstDate = c.getTime();
	return new java.sql.Timestamp(currentMonthFirstDate.getTime());
	
    }
    
    public boolean createEDMTask(String appNum) throws Exception {
		boolean result = false;
		result = createEDMTask(appNum,false);
		return result;
    }
    
    public boolean createEDMTask(String appNum, boolean isIgnoreDuplicates) throws Exception {
    	log(7, "Begin AutoRegistrationBO.createEDMTask() ");
    	System.out.println("Begin AutoRegistrationBO.createEDMTask() ");
	
    	try {
    	    // Create EDM Factory
    	    DMFactory dmFactory = new DMFactory(); 
    	    // Init DMWebserviceClient
    	    DMWebserviceClient edmWebserviceClient = new DMWebserviceClient(connection);
    	    
    	    dmWebserviceVO.setIgnoreDuplicates(isIgnoreDuplicates);
    	    log(7, "AutoRegistrationBO.createEDMTask() dmWebserviceVO.getAppNum" + this.dmWebserviceVO.getAppNum());
    	    log(7, "AutoRegistrationBO.createEDMTask() dmWebserviceVO.getDestinationOfficeNum" + this.dmWebserviceVO.getDestinationOfficeNum());
    	    log(7, "AutoRegistrationBO.createEDMTask() dmWebserviceVO.getTag" + this.dmWebserviceVO.getTag());
    	    log(7, "AutoRegistrationBO.createEDMTask() dmWebserviceVO.getClientFirstName" + this.dmWebserviceVO.getClientFirstName());
    	    log(7, "AutoRegistrationBO.createEDMTask() dmWebserviceVO.getClientLastName" + this.dmWebserviceVO.getClientLastName());
    	    log(7, "AutoRegistrationBO.createEDMTask() dmWebserviceVO.getClientMidName" + this.dmWebserviceVO.getClientMidName());
    	    log(7, "AutoRegistrationBO.createEDMTask() dmWebserviceVO.getgetSplIndicator" + this.dmWebserviceVO.getSplIndicator());
    	    log(7, "AutoRegistrationBO.createEDMTask() dmWebserviceVO.getHtmlPid" + this.dmWebserviceVO.getHtmlPid());
    	    log(7, "AutoRegistrationBO.createEDMTask() dmWebserviceVO.getDueDate() " + this.dmWebserviceVO.getDueDate());
    	    log(7, "AutoRegistrationBO.createEDMTask() dmWebserviceVO.getReceivedDate() " + this.dmWebserviceVO.getReceivedDate());
    	    log(7, "AutoRegistrationBO.createEDMTask() dmWebserviceVO.getScanDate() " + this.dmWebserviceVO.getScanDate());
    	    log(7, "AutoRegistrationBO.createEDMTask() dmWebserviceVO.getDocumentId() " + this.dmWebserviceVO.getDocumentId());
    	    log(7, "AutoRegistrationBO.createEDMTask() dmWebserviceVO.getSourceTypeCode() " + this.dmWebserviceVO.getSourceTypeCode());
    	    
    	    System.out.println("AutoRegistrationBO.createEDMTask() dmWebserviceVO.getAppNum" + this.dmWebserviceVO.getAppNum());
    	    System.out.println("AutoRegistrationBO.createEDMTask() dmWebserviceVO.getDestinationOfficeNum" + this.dmWebserviceVO.getDestinationOfficeNum());
    	    System.out.println("AutoRegistrationBO.createEDMTask() dmWebserviceVO.getTag" + this.dmWebserviceVO.getTag());
    	    System.out.println("AutoRegistrationBO.createEDMTask() dmWebserviceVO.getClientFirstName" + this.dmWebserviceVO.getClientFirstName());
    	    System.out.println("AutoRegistrationBO.createEDMTask() dmWebserviceVO.getClientLastName" + this.dmWebserviceVO.getClientLastName());
    	    System.out.println("AutoRegistrationBO.createEDMTask() dmWebserviceVO.getClientMidName" + this.dmWebserviceVO.getClientMidName());
    	    System.out.println("AutoRegistrationBO.createEDMTask() dmWebserviceVO.getgetSplIndicator" + this.dmWebserviceVO.getSplIndicator());
    	    System.out.println("AutoRegistrationBO.createEDMTask() dmWebserviceVO.getDueDate() " + this.dmWebserviceVO.getDueDate());
    	    System.out.println("AutoRegistrationBO.createEDMTask() dmWebserviceVO.getReceivedDate() " + this.dmWebserviceVO.getReceivedDate());
    	    System.out.println("AutoRegistrationBO.createEDMTask() dmWebserviceVO.getScanDate() " + this.dmWebserviceVO.getScanDate());
    	    System.out.println("AutoRegistrationBO.createEDMTask() dmWebserviceVO.getDocumentId() " + this.dmWebserviceVO.getDocumentId());
    	    System.out.println("Begin AutoRegistrationBO.createEDMTask() "+this.dmWebserviceVO.getSourceTypeCode());
    	    // Call EDMWEbservice
    	    String appNumber = this.dmWebserviceVO.getAppNum();
    	    String message = edmWebserviceClient.callWebservice(dmFactory.createGroupForApplication(dmWebserviceVO));
    	    log(7, "AutoRegistrationBO.createEDMTask() Message returned from  EDMWebservice : " + message);
    	    System.out.println("AutoRegistrationBO.createEDMTask() Message returned from  EDMWebservice : " + message);
    	    log(ILog.INFO, "Message returned from  EDMWebservice : " + message);
    	    log(FwConstants.LOGGING_CATEGORY_EDM_WEBSERVICE, ILog.DEBUG, "AutoRegistrationBO::createEDMTask: calling EDM Webservice with result :" + message);
    	    // If the Webservice is not successful, throw Exception to roll back
    	    // transaction
    	    if (!DMConstants.SUCCESS_STATUS_MSG.equalsIgnoreCase(message)) {
    		log(FwConstants.LOGGING_CATEGORY_EDM_WEBSERVICE, ILog.ERROR, "Exception in AutoRegistrationBO::createEDMTask:  EDM Webservice :" + message);
    		throw new Exception(message);
    	    }
    	    if(DMConstants.SUCCESS_STATUS_MSG.equalsIgnoreCase(message) && ((DMConstants.SELFSERVICE_LIS).equalsIgnoreCase(dmWebserviceVO.getSourceTypeCode()) 
    		   || (DMConstants.LIS).equalsIgnoreCase(dmWebserviceVO.getSourceTypeCode()) || ("MM").equalsIgnoreCase(dmWebserviceVO.getSourceTypeCode()) ) ){
    		if( mspDocId != null){
    		    log(7, "Before calling insertIntoDocLinkTable() from createEDMTask() for docId  - " + mspDocId);
    		    System.out.println("Before calling insertIntoDocLinkTable() from createEDMTask() for docId  - " + mspDocId);
    		    insertIntoDocLinkTable(appNumber, mspDocId, "AR-ATREG-HLY");
    		}else{
    		    mspDocId = "MSPSS" + appNum ;
        	    log(7, "Before calling insertIntoDocLinkTable() from createEDMTask() for docId  - " + mspDocId);
        	    System.out.println("Before calling insertIntoDocLinkTable() from createEDMTask() for docId  - " + mspDocId);
    		    insertIntoDocLinkTable(appNum, mspDocId, "AR-ATREG-HLY");
    		}
		
    	    }
    	    
    	    log(ILog.DEBUG, "HPE PID Before HPE PDF upload: " + hpe_pid);
    	    if (hpe_pid != null && !hpe_pid.trim().isEmpty()) {
    		log(ILog.DEBUG, "HPE_PID not null. before webservice");
    		dmWebserviceVO.setDocumentId(hpe_pid);
    		log(ILog.DEBUG, "HPE HTML PID Before HPE PDF upload: " + hpe_html_pid);
    		if (hpe_html_pid != null && !hpe_html_pid.trim().isEmpty()) {
    		    log(ILog.DEBUG, "HPE_HTML_PID not null. before webservice");
    		    dmWebserviceVO.setHtmlPid(hpe_html_pid);
    		}
    		String message1 = edmWebserviceClient.callWebservice(dmFactory.createGroupForApplication(dmWebserviceVO));
    		log(ILog.DEBUG, "HPE_PID not null. after webservice message: " + message1);
    	    }
    	    
    	} catch (Exception e) {
    	    hasExceptionOccurred = true;
			log(ILog.ERROR, "Exception in AutoRegistrationBO.createEDMTask() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
    	    log(FwConstants.LOGGING_CATEGORY_EDM_WEBSERVICE, ILog.ERROR, "Exception in AutoRegistrationBO::createEDMTask:  EDM Webservice :" + e.getMessage());
    	    updateAutoRegExcpTable(appNum, AppRegConstants.AUTO_REG_EXCP_EXCP_CT, AppRegConstants.AUTO_REG_EXCP_STATUS_EX);
    	    throw e;
    	}
    	return true;
    }
    
    public boolean updateTaskForCaseProcess(String appNum) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateTaskForCaseProcess() : appNum - " + appNum);
	String docId = null;
	AppSummaryBO appSummaryBo = new AppSummaryBO(connection);
	DcCasesCargo caseCargo = new DcCasesCargo();
	DcCasesCollection caseColl = new DcCasesCollection(connection);
	DcCasesCargo[] caseArrCargo = null;
	
	try {
	    
	    DMDocTaskUpdateBO taskBo = new DMDocTaskUpdateBO(docId, connection);
	    Object docIdforFileNet = taskBo.getDocIdFromDmDocForSubmit(appNum);
	    if (docIdforFileNet != null) {
		docId = (String) docIdforFileNet;
	    }
	    
	    if (docId != null) {
		taskBo = new DMDocTaskUpdateBO(docId, connection);
		long empID = 0;
		long officeNum = 0;
		long caseNumForNewApp = 0;
		DcDriverBO dcDriverBO = new DcDriverBO(connection);
		caseNumForNewApp = dcDriverBO.getCaseNumber(appNum + "");
		
		if (caseNumForNewApp != 0) {
		    caseCargo.setCaseNum(caseNumForNewApp);
		    caseColl.setCargo(caseCargo);
		    caseArrCargo = (DcCasesCargo[]) caseColl.select("findByCaseNum");
		    if (caseArrCargo != null && caseArrCargo.length > 0 && caseArrCargo[0] != null) {
			officeNum = caseArrCargo[0].getOfficeNum();
			empID = retrieveIntakeVirtualWkrId(officeNum);
		    }
		}
		
		String appPrograms = null;
		appPrograms = appSummaryBo.getApplicationPrograms(appNum);
		
		Boolean onlyMedicalPrograms = true;
		if (appPrograms.indexOf("TF") != -1 || appPrograms.indexOf("FS") != -1) {
		    onlyMedicalPrograms = false;
		}
		String assignableTag = "";
		if (onlyMedicalPrograms) {
		    assignableTag = DMConstants.DOCUMENT_TAG_NO_INTVW_INIT_DATA_COLL;
		}else if(autoRegScheduledSw=='Y' && !onlyMedicalPrograms){
			assignableTag = DMConstants.DOCUMENT_TAG_INTVW_REQ_INIT_DATA_COLL;
		}else if(autoRegScheduledSw=='N'){
			if (appPrograms.indexOf("FS") != -1 && 'Y' == autoRegT1001Cargo.getExpeditedFapSw() && ((autoRegT1002Cargo.getHshlCellPhnNum() != null && !autoRegT1002Cargo.getHshlCellPhnNum().trim().equals("")) || (autoRegT1002Cargo.getHshlPhnNum() != null && !autoRegT1002Cargo.getHshlPhnNum().trim().equals("")) || (autoRegT1002Cargo.getHshlWorkPhnNum() != null && !autoRegT1002Cargo.getHshlWorkPhnNum().trim().equals("")))) {
			    assignableTag = "EX";
			}else if(appPrograms.indexOf("FS") != -1 && 'N' == autoRegT1001Cargo.getExpeditedFapSw() && ((autoRegT1002Cargo.getHshlCellPhnNum() != null && !autoRegT1002Cargo.getHshlCellPhnNum().trim().equals("")) || (autoRegT1002Cargo.getHshlPhnNum() != null && !autoRegT1002Cargo.getHshlPhnNum().trim().equals("")) || (autoRegT1002Cargo.getHshlWorkPhnNum() != null && !autoRegT1002Cargo.getHshlWorkPhnNum().trim().equals("")))){
				assignableTag = "NX";
			}else{
				assignableTag = DMConstants.DOCUMENT_TAG_INTVW_REQ_INIT_DATA_COLL;
			}
		}
		long assignableEmp = 0;
		log(7, "AutoRegistrationBO.updateTaskForCaseProcess() :: assignableTag --" + assignableTag + "--assignableEmp--" + assignableEmp);
		try {
		    // 1. End current task
		    // 2. Create a new task in complete status on the same Tag/Queue
		    // 3. Create a new task in Assigned status on new Tag/Queue
		    DMDocumentIndexUpdater dmDocIndex = new DMDocumentIndexUpdater(connection);
		    // DMDocTaskUpdateBO taskBo1 = new DMDocTaskUpdateBO(docId,connection);
		    DmDocCargo[] dmDocCargo = taskBo.getDocSeqNum();
		    long docSeqNum = 0;
		    long groupSeqNum = 0;
		    if (dmDocCargo != null && dmDocCargo.length > 0) {
			docSeqNum = dmDocCargo[0].getDocSeqNum();
			groupSeqNum = dmDocCargo[0].getGroupSeqNum();
		    }
		    
		    boolean onlyHPEApp = true;
		    if (appHPECategory) {
			for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
			    if (autoRegT1004CargoArray[i].getMaRqstSw() == 'Y' || autoRegT1004CargoArray[i].getFppRqstSw() == 'Y') {
				onlyHPEApp = false;
			    }
			}
		    }
		    
		    if ((appHPECategory && onlyHPEApp == true) || appMPECategory == true || appFPPECategory == true || appSSAMSPCategory == true || (appSSALISMSPCategory == true && newSSALISMSPApp == false ) ||  appMaHpeAssociation == true || (autoRegT1002Cargo.getMaRqstSw() == 'Y' && autoRegT1002Cargo.getFsRqstSw() != 'Y' && autoRegT1002Cargo.getCashRqstSw() != 'Y' && autoRegT1002Cargo.getMcRqstSw() != 'Y')) {
			// FOR MSP or MA APPLICATIONS CLOSE ALL THE OPEN TASKS
			    log(7, "AutoRegistrationBO.updateTaskForCaseProcess():: Closing the task for Only MA or HPE or MSP apps");
			    DmTaskStatusCargo[] prevCargoArr = taskBo.updateTaskStatus(groupSeqNum);
		    } else {
			log(7, "AutoRegistrationBO.updateTaskForCaseProcess():: Closing the task ");
			DmTaskStatusCargo[] prevCargoArr = taskBo.updateTaskStatus(groupSeqNum);
			log(7, "AutoRegistrationBO.updateTaskForCaseProcess():: Creating new task ");
			dmDocIndex.updateAutoRegApplicationForGroup(docId, caseNumForNewApp, assignableEmp, officeNum, assignableTag, caseArrCargo);
		    }
		    dmDocIndex.updateDocumentSpeicalIndicatorForAutoReg(docId, appNum);
		    log(7, "End AutoRegistrationBO.updateTaskForCaseProcess() ");
		} catch (Exception e) {
			log(ILog.ERROR, "Exception in AutoRegistrationBO.updateTaskForCaseProcess() appNum: " + appNum + "\n" + e.getMessage() + 
			"\n docId: " + docId + "\n caseNumForNewApp: " + caseNumForNewApp + "\n empID: " + empID + "\n", e);
		    throw e;
		}
	    }
	    return true;
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateTaskForCaseProcess() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    updateAutoRegExcpTable(appNum, AppRegConstants.AUTO_REG_EXCP_EXCP_CT, AppRegConstants.AUTO_REG_EXCP_STATUS_EX);
	    throw e;
	} finally {
	    caseCargo = null;
	    caseColl = null;
	    caseArrCargo = null;
	}
	
    }
