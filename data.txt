/**
	 * The <code>getCharForString</code> returns char given a String.
	 * 
	 * @param str
	 *            - String
	 * @return char.
	 */
	private char getCharForStringForDocumentType(String str, String usCitizenSw) {
		char retVal = ' ';

		if (str != null && str.trim().length() > 0) {
			retVal = str.charAt(0);
		} else if( usCitizenSw != null && usCitizenSw.length()>0 && usCitizenSw.equalsIgnoreCase("N") ){
			retVal = 'X';
		}

		return retVal;
	}

	/**
	 * The <code>getLongForString</code> returns Long given a String.
	 * 
	 * @param str
	 *            - String
	 * @return long
	 */
	private long getLongForString(String str) {
		long retVal = 0;
		try {
			if (str != null && str.length() > 0) {
				retVal = Long.parseLong(str);
			}
		} catch (Exception e) {
			log(ILog.ERROR, "Error in SelfServiceAppRegBO.getLongForString method : " + e.getMessage(), e);
			retVal = 0;
		}
		return retVal;
	}

	/**
	 * The <code>getAppFileDt</code> returns the app filing date.
	 * 
	 * @param fpwFileDate
	 *            - fpwFileDate
	 * @param fsFileDt
	 *            - fsFileDt
	 * @return Timestamp
	 */
	private Timestamp getAppFileDt(Timestamp fpwFileDate, Timestamp fsFileDt) {
		Timestamp retVal = fsFileDt;

		if (fpwFileDate != null && fsFileDt != null) {
			if (fpwFileDate.before(fsFileDt)) {
				retVal = fpwFileDate;
			}
		}
		if (retVal == null) {
			retVal = highDate;
		}
		return retVal;
	}

	/**
	 * The <code>getDoubleForString</code> returns double given a String.
	 * 
	 * @param str
	 *            - String
	 * @return double
	 */
	private double getDoubleForString(String str) {
		double retVal = 0;
		try {
			if (str != null && str.length() > 0) {
				retVal = Double.parseDouble(str);
			}
		} catch (Exception e) {
			log(ILog.ERROR, "Error in SelfServiceAppRegBO.getDoubleForString method : " + e.getMessage(), e);
			retVal = 0;
		}
		return retVal;
	}

	/**
	 * The <code>getConverseRelationshipCode</code> returns the
	 * ConverseRelationshipCode given a straight reln code.
	 * 
	 * @param srcRelCd
	 *            - Source Reltn Code.
	 * @param refIndSex
	 *            - Reference Ind Sex.
	 * 
	 * @return String - ConverseRelationshipCode
	 * @throws SelfServiceApplicationException
	 */
	public String getConverseRelationshipCode(String srcRelCd, String refIndSex) throws SelfServiceApplicationException {
		String refRelCd = "";
		try {

			if ("M".equals(refIndSex)) {
				refRelCd = ReferenceTableManager.getValueByColumn(true, "RELATIONTYPE", srcRelCd, "MALEREVERSECD");
			} else {
				refRelCd = ReferenceTableManager.getValueByColumn(true, "RELATIONTYPE", srcRelCd, "FEMALEREVERSECD");
			}
		} catch (Exception e) {
			log(ILog.ERROR, "SelfServiceAppRegBO.updateNullValuesToBlank method error: " + e.getMessage(), e);
			throw new SelfServiceApplicationException("SelfServiceAppRegBO.updateNullValuesToBlank method error: " + e.getMessage(),e);
		}
		return refRelCd;
	}

	/**
	 * The <code>updateNullValuesToBlank</code> updates null values to nullChar
	 * 
	 * @param cargo
	 *            - AbstractType0Cargo
	 * @param cargoClass
	 *            - CargoClass.
	 * @throws SelfServiceApplicationException
	 * 
	 */
	public void updateNullValuesToBlank(AbstractType0Cargo cargo, Class cargoClass) throws SelfServiceApplicationException {
		String getMethodName = null;
		String setMethodName = null;
		Object retType = null;
		char nullChar = '\u0000';
		char getMethodVal;
		String getMethodValStr = null;
		Date getMethodValDt = null;
		Method setMethod = null;
		Method[] methods = cargoClass.getMethods();
		for (int methodI = 0; methodI < methods.length; methodI++) {
			try {
				getMethodName = methods[methodI].getName();
				setMethodName = "set" + getMethodName.substring(3);
				if (getMethodName.startsWith("get")) {
					retType = methods[methodI].getReturnType();
					if (retType.equals(char.class)) {
						getMethodVal = ((Character) methods[methodI].invoke(cargo, null)).charValue();
						if (getMethodVal == nullChar) {
							Character blankChar = new Character(' ');
							Object[] setParams = { blankChar };
							Class[] params = { char.class };
							setMethod = cargoClass.getDeclaredMethod(setMethodName, params);
							setMethod.invoke(cargo, setParams);
						}
					} else if (retType.toString().equals("class java.lang.String")) {
						getMethodValStr = ((String) methods[methodI].invoke(cargo, null));
						if (getMethodValStr == null || getMethodValStr.length() == 0) {
							String blankStr = " ";
							Object[] setParams = { blankStr };
							Class[] params = { String.class };
							setMethod = cargoClass.getDeclaredMethod(setMethodName, params);
							setMethod.invoke(cargo, setParams);
						}
					} else if (retType.toString().equals("class java.sql.Date")) {
						getMethodValDt = ((Date) methods[methodI].invoke(cargo, null));
						if (getMethodValDt == null) {
							Object[] setParams = { highDate };
							Class[] params = { Date.class };
							setMethod = cargoClass.getDeclaredMethod(setMethodName, params);
							setMethod.invoke(cargo, setParams);
						}
					}
				}
			} catch (IllegalArgumentException e) {
				log(ILog.ERROR, "SelfServiceAppRegBO.updateNullValuesToBlank method: " + setMethodName + "error: " + e.getMessage(), e);
			} catch (IllegalAccessException e) {
				log(ILog.ERROR, "SelfServiceAppRegBO.updateNullValuesToBlank method: " + setMethodName + "error: " + e.getMessage(), e);
			} catch (InvocationTargetException e) {
				log(ILog.ERROR, "SelfServiceAppRegBO.updateNullValuesToBlank method: " + setMethodName + "error: " + e.getMessage(), e);
			} catch (NoSuchMethodException e) {
				log(ILog.ERROR, "SelfServiceAppRegBO.updateNullValuesToBlank method: " + setMethodName + "error: " + e.getMessage(), e);
			}
		}
	}


	/**
	 * This method is used to fetch the application numbers for the Self Service
	 * this method is invoked from Self Service App Reg Session EJB
	 * 
	 * @param threshold
	 *            - Threshold value
	 * @return String - Appnum
	 * @throws ApplicationException
	 * @throws Exception
	 */
	public String fetchAppNumsForSS(long threshold) throws ApplicationException, Exception {
		ArApplicationForAidCollection arApplicationForAidCollection = new ArApplicationForAidCollection();
		Object[] params = { new Long(threshold) };
		StringBuffer sb = new StringBuffer();
		log(ILog.DEBUG, "entered SelfServiceAppRegBO.fetchAppNumsForSS method - threshold: " + threshold);
		try {
			ArApplicationForAidCargo[] applicationForAidCargos = (ArApplicationForAidCargo[]) arApplicationForAidCollection.select("findAppNumsForSS", params);
			log(ILog.DEBUG, "SelfServiceAppRegBO.fetchAppNumsForSS fetched the appnumbers from the DAO successfully");
			if (applicationForAidCargos != null && applicationForAidCargos.length > 0) {
				for (int i = 0; i < applicationForAidCargos.length; i++) {
					sb.append(applicationForAidCargos[i].getAppNum() + ",");
				}
				sb.replace(sb.length() - 1, sb.length(), "");
			}
			log(ILog.DEBUG, "SelfServiceAppRegBO.fetchAppNumsForSS successfully formatted the result string");
		} catch (ApplicationException e) {
			log(ILog.ERROR, "Error in SelfServiceAppRegBO.fetchAppNumsForSS method : " + e.getMessage(), e);
			throw e;
		} catch (FrameworkException e) {
			log(ILog.ERROR, "Error in SelfServiceAppRegBO.fetchAppNumsForSS method : " + e.getMessage(), e);
			throw new ApplicationException(e.getMessage(), e);
		} catch (Exception e) {
			log(ILog.ERROR, "Error in SelfServiceAppRegBO.fetchAppNumsForSS method : " + e.getMessage(), e);
			throw e;
		}
		log(ILog.DEBUG, "exiting SelfServiceAppRegBO.fetchAppNumsForSS method");
		return sb.toString();
	}

	/**
	 * The <code>getFuelTypeForApp</code> returns the fuel type Code.
	 * 
	 * @param root
	 *            - Element Object
	 * @return String - fuel type Code
	 */
	public String getFuelTypeForApp(Element root) {
		Element appRequests = root.getChild("APP_SER_RQSTS");
		List appRequestList = appRequests.getChildren("APP_SER_RQST");
		String ssFuelTypeCd = null;
		if (appRequestList != null && appRequestList.size() > 0) {
			Iterator ite = appRequestList.iterator();
			while (ite.hasNext()) {
				Element serAppRqst = (Element) ite.next();
				ssFuelTypeCd = serAppRqst.getChildText("HEAT_SRC_CD");
				break;
			}
		}
		return ssFuelTypeCd;
	}

	/**
	 * The <code>computeSopDueDate</code> computes the SopDueDate.
	 * 
	 * @param sopCriteria
	 *            - sopCriteria
	 * @return Timestamp - SopDueDate
	 */
	public Timestamp computeSopDueDate(Map sopCriteria) {
		Timestamp applicationDate = (Timestamp) sopCriteria.get("APPLICATION_DATE");
		Timestamp cloneAppDate = (Timestamp) applicationDate.clone();
		int addDays = 0;

		if (!miChildApp) {
			boolean fapExists = false;
			boolean serExists = false;
			boolean fapExpedited = false;
			boolean cashExists = false;
			boolean maExists = false;
			boolean mcExists = false;
			if ("Y".equalsIgnoreCase((String) sopCriteria.get("FS_SW"))) {
				fapExists = true;
			}
			if ("Y".equalsIgnoreCase((String) sopCriteria.get("SE_SW"))) {
				serExists = true;
			}
			if ("Y".equalsIgnoreCase((String) sopCriteria.get("FS_EXP_SW"))) {
				fapExpedited = true;
			}
			if ("Y".equalsIgnoreCase((String) sopCriteria.get("CASH_SW"))) {
				cashExists = true;
			}
			if ("Y".equalsIgnoreCase((String) sopCriteria.get("MA_SW")) || "Y".equalsIgnoreCase((String) sopCriteria.get("FPP_SW"))) {
				maExists = true;
			}
			if ("Y".equalsIgnoreCase((String) sopCriteria.get("MC_SW"))) {
				mcExists = true;
			}

			if (fapExpedited) {
				addDays = 3;
			} else if (fapExists) {
				addDays = 25;
			} else if (cashExists && !(fapExpedited || fapExists)) {
				addDays = 31;
			} else if (maExists && !(fapExpedited || fapExists || cashExists || mcExists)) {
				addDays = 41;
			} else if (mcExists && !(fapExpedited || fapExists || cashExists || maExists)) {
				addDays = 41;
			} else {
				// this is in the case MPE applications; old code used to work
				// like this;
				addDays = 14;
			}
			cloneAppDate = ALSOPUtil.addDays(applicationDate, addDays);
		}
		// if MI child application
		else {
			if (isPresumptive || isPregnantInCase) {
				// addDays = 15;
				addDays = 24;

			} else {
				// addDays = 45;
				addDays = 24;

			}

			cloneAppDate = ALSOPUtil.addDays(cloneAppDate, addDays);
		}

		java.util.Date date = new Date(cloneAppDate.getTime());
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.set(Calendar.MINUTE, 0);
		cal.set(Calendar.SECOND, 0);
		cal.set(Calendar.MILLISECOND, 0);

		date = cal.getTime();

		cloneAppDate = new Timestamp(date.getTime());
		return cloneAppDate;
	}

	/**
	 * The <code>builtT1053AppProgram</code> builds T1053AppProgram
	 * 
	 * @param appDtlColl
	 *            - T1002AppDtlCollection
	 * @return T1053AppProgramCollection - T1053AppProgramCollection
	 */
	public T1053AppProgramCollection builtT1053AppProgram(T1002AppDtlCollection appDtlColl) throws Exception {
		T1053AppProgramCollection coll = null;
		try {
			int size = appDtlColl.size();

			if (this.conn == null) {
				coll = new T1053AppProgramCollection();
			} else {
				coll = new T1053AppProgramCollection(this.conn);
			}
			boolean fapAdded = false;
			boolean serAdded = false;
			boolean cdcAdded = false;
			boolean cashAdded = false;
			boolean maAdded = false;
			boolean mcAdded = false;
			boolean fppAdded = false;

			for (int i = 0; i < size; i++) {
				T1002AppDtlCargo dtlCargo = appDtlColl.getResults(i);
				T1053AppProgramCargo cargo = null;

				if (!fapAdded && dtlCargo.getFsRqstSw() == 'Y') {
					cargo = new T1053AppProgramCargo();
					cargo.setAppNum(dtlCargo.getAppNum());
					cargo.setProgramCd("FS");
					cargo.setRequestStatusInd('N');
					coll.add(cargo);
				}
				if (!fppAdded && dtlCargo.getFppRqstSw() == 'Y') {
					cargo = new T1053AppProgramCargo();
					cargo.setAppNum(dtlCargo.getAppNum());
					cargo.setProgramCd("FP");
					cargo.setRequestStatusInd('N');
					coll.add(cargo);
				}
				if (!serAdded && dtlCargo.getSeRqstSw() == 'Y') {
					cargo = new T1053AppProgramCargo();
					cargo.setAppNum(dtlCargo.getAppNum());
					cargo.setProgramCd("SE");
					cargo.setRequestStatusInd('N');
					coll.add(cargo);
				}
				if (!cdcAdded && dtlCargo.getFpwRqstSw() == 'Y') {
					cargo = new T1053AppProgramCargo();
					cargo.setAppNum(dtlCargo.getAppNum());
					cargo.setProgramCd("CD");
					cargo.setRequestStatusInd('N');
					coll.add(cargo);
				}
				if (!cashAdded && dtlCargo.getCashRqstSw() == 'Y') {
					cargo = new T1053AppProgramCargo();
					cargo.setAppNum(dtlCargo.getAppNum());
					cargo.setProgramCd("TF");
					cargo.setRequestStatusInd('N');
					coll.add(cargo);
				}
				if (!maAdded && dtlCargo.getMaRqstSw() == 'Y') {
					cargo = new T1053AppProgramCargo();
					cargo.setAppNum(dtlCargo.getAppNum());
					cargo.setProgramCd("MA");
					cargo.setRequestStatusInd('N');
					coll.add(cargo);
				}

				if (!mcAdded && dtlCargo.getMcRqstSw() == 'Y') {
					cargo = new T1053AppProgramCargo();
					cargo.setAppNum(dtlCargo.getAppNum());
					cargo.setProgramCd("MC");
					cargo.setRequestStatusInd('N');
					coll.add(cargo);
				}

				if (serAdded && fapAdded && cdcAdded && cashAdded && maAdded && mcAdded && fppAdded)
					break;
			}

		} catch (Exception e) {
			log(ILog.ERROR, "Error in SelfServiceAppRegBO.builtT1053AppProgram method : " + e.getMessage(), e);
			throw e;
		}
		return coll;
	}

	// Added for the ILIES project
	/**
	 * Builds the staging table T1024_APP_IN_UEI with the values from the ABE
	 * application
	 * 
	 * @param node
	 *            - The XML with all the values from ABE
	 * @throws Exception
	 */
	private void buildT1024AppInUei(Element node) throws Exception {
		// Get the values for the APP_IN_UEI table from the XML
		Element otherIncomeDetails = node.getChild("APP_IN_UEIS");
		List otherIncomeDetailList = (otherIncomeDetails != null ? otherIncomeDetails.getChildren("APP_IN_UEI") : null);
        //ILIES-162945 TO Check SSI& RSDI Values to populate Unearned Income Flag
		 Element indivNode = node.getChild(AppRegConstants.INDIVIDUALS);
		 Element appInPrfl = (indivNode != null ? indivNode.getChild("INDIVIDUAL_PROFILE"): null);
         String ssiSw = (appInPrfl != null ?appInPrfl.getChildTextTrim("RCV_SSI_SW"): null);
		 String ssSw = (appInPrfl != null ?appInPrfl.getChildTextTrim("RCV_SS_RESP"): null);
				
		// Insert the values into the cargo and collection
		try {
			T1024AppInUeiCollection collection = null;
			T1024AppInUeiCargo cargo = null;

			if (otherIncomeDetailList != null && otherIncomeDetailList.size() > 0) {
				String existingData = null;
				collection = (conn == null) ? new T1024AppInUeiCollection() : new T1024AppInUeiCollection(conn);
				Iterator iterator = otherIncomeDetailList.iterator();
				SimpleDateFormat simpleDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				appNum = node.getChildTextTrim(AppRegConstants.BRIDGES_APP_NUM);

				while (iterator.hasNext()) {
					// Get the values from the list and check if data is already
					// there
					existingData = DATA_NO;
					Element currentElement = (Element) iterator.next();
					Attribute otherIncomeAttribute = (currentElement != null ? currentElement.getAttribute(AppRegConstants.DATA_EXIST) : null);

					if (otherIncomeAttribute != null) {
						existingData = otherIncomeAttribute.getValue().trim();
					}

					// Put the data in the cargo and update the collection
					if (existingData.equalsIgnoreCase(DATA_YES)) {
						cargo = new T1024AppInUeiCargo();
						cargo.setAddRecInd('Y');
						cargo.setAsscSeqNum(0);
						cargo.setEffBegMo(0);
						cargo.setEffEndMo(0);
						cargo.setAppNum(appNum);
						cargo.setRecordCompleted('N');
						cargo.setFreqCd(getCharForString(currentElement.getChildTextTrim("FREQ_CD")));
						cargo.setIndvSeqNum(getLongForString(currentElement.getChildTextTrim("INDV_SEQ_NUM")));
						cargo.setRsdiIncomeExpectedSw(getCharForString(currentElement.getChildTextTrim("RSDI_EXPECTED_INCOME_SW")));
						cargo.setSeqNum(getLongForString(currentElement.getChildTextTrim("SEQ_NUM")));
						cargo.setUeiAmt(getDoubleForString(currentElement.getChildTextTrim("UEI_AMT")));
						cargo.setUeiAmtInd(getLongForString(currentElement.getChildTextTrim("UEI_AMT_IND")));

						String ueiBeginDate = currentElement.getChildTextTrim("UEI_BEG_DT");
//							ILIES-162945 TO Check SSI& RSDI Values to populate Unearned Income Flag                      if(ssiSw != null&& ssSw != null && ssiSw.equals=='Y' && ssSw.equals=='Y'){
                       	if (ssiSw != null && ssSw!= null && (ssiSw.equals("Y")|| ssSw.equals("Y"))){
                       	cargo.setRsdiIncomeExpectedSw('Y');
                      }else{
                        	cargo.setRsdiIncomeExpectedSw('Z');
                       }
						if (ueiBeginDate != null && ueiBeginDate.trim().length() > 0) {
							cargo.setUeiBegDt(new Timestamp(simpleDate.parse(ueiBeginDate).getTime()));
						} else {
							cargo.setUeiBegDt(highDate);
						}
						
						cargo.setUeiStyp(" ");
						cargo.setUeiTyp(getString(currentElement.getChildTextTrim("UEI_TYP")));

						collection.setCargo(cargo);
					}

					if (collection.size() > 0) {
						collection.insert();
					}
				}

			}
		} catch (Exception e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildT1024AppInUei: " + e.getMessage(), e);
			throw e;
		}
	}

	/**
	 * Builds the staging table T1028_APP_IN_MEDCR with the values from the ABE
	 * application
	 * 
	 * @param node
	 *            - The XML with all the values from ABE
	 * @throws Exception
	 */
	private void buildT1028AppInMedcr(Element node) throws Exception {
		Element otherMedicareDetails = node.getChild("APP_IN_MEDCRS");
		List otherMedicareDetailList = (otherMedicareDetails != null ? otherMedicareDetails.getChildren("APP_IN_MEDCR") : null);
		try {
			T1028AppInMedcrCollection collection = null;
			T1028AppInMedcrCargo cargo = null;

			if (otherMedicareDetailList != null && otherMedicareDetailList.size() > 0) {
				String existingData = null;
				collection = (conn == null) ? new T1028AppInMedcrCollection() : new T1028AppInMedcrCollection(conn);
				Iterator iterator = otherMedicareDetailList.iterator();
				SimpleDateFormat simpleDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				appNum = node.getChildTextTrim(AppRegConstants.BRIDGES_APP_NUM);

				while (iterator.hasNext()) {
					existingData = DATA_NO;
					Element currentElement = (Element) iterator.next();
					Attribute otherMedicareAttribute = (currentElement != null ? currentElement.getAttribute(AppRegConstants.DATA_EXIST) : null);

					if (otherMedicareAttribute != null) {
						existingData = otherMedicareAttribute.getValue().trim();
					}

					if (existingData.equalsIgnoreCase(DATA_YES)) {
						cargo = new T1028AppInMedcrCargo();
						cargo.setAddRecInd(' ');
						cargo.setAppNum(appNum);
						cargo.setAsscSeqNum(0);
						cargo.setEffBegMo(0);
						cargo.setHlthInsCareNum(currentElement.getChildTextTrim("HLTH_INS_CARE_NUM"));

						if (cargo.getHlthInsCareNum() == null || cargo.getHlthInsCareNum().equals("")) {
							cargo.setHlthInsCareNum(" ");
						}

						cargo.setIndvSeqNum(getLongForString(currentElement.getChildTextTrim("INDV_SEQ_NUM")));

						String beginDateA = currentElement.getChildTextTrim("PARTA_BEG_DT");

						if (beginDateA != null && beginDateA.trim().length() > 0) {
							cargo.setPartaBegDt(new Timestamp(simpleDate.parse(beginDateA).getTime()));
						} else {
							cargo.setPartaBegDt(highDate);
						}

						cargo.setPartaEttlResp(getCharForString(currentElement.getChildTextTrim("PARTA_ETTL_RESP")));

						if (cargo.getPartaEttlResp() == ' ') {
							cargo.setPartaEttlResp('N');
						}

						cargo.setPartaPremAmt(getDoubleForString(currentElement.getChildTextTrim("PARTA_PREM_AMT")));
						cargo.setPartaPremAmtInd(getLongForString(currentElement.getChildTextTrim("PARTA_PREM_IND")));
						cargo.setPartaPremPayrCd(currentElement.getChildTextTrim("PARTA_PREM_PAYR_CD"));

						if (cargo.getPartaPremPayrCd() == null || cargo.getPartaPremPayrCd().equals("")) {
							cargo.setPartaPremPayrCd(" ");
						}

						String beginDateB = currentElement.getChildTextTrim("PARTB_BEG_DT");

						if (beginDateB != null && beginDateB.trim().length() > 0) {
							cargo.setPartbBegDt(new Timestamp(simpleDate.parse(beginDateB).getTime()));
						} else {
							cargo.setPartbBegDt(highDate);
						}

						cargo.setPartbEttlResp(getCharForString(currentElement.getChildTextTrim("PARTB_ETTL_RESP")));

						if (cargo.getPartbEttlResp() == ' ') {
							cargo.setPartbEttlResp('N');
						}

						cargo.setPartbPremAmt(getDoubleForString(currentElement.getChildTextTrim("PARTB_PREM_AMT")));
						cargo.setPartbPremAmtInd(getLongForString(currentElement.getChildTextTrim("PARTB_PREM_IND")));
						cargo.setPartbPremPayrCd(currentElement.getChildTextTrim("PARTB_PREM_PAYR_CD"));

						if (cargo.getPartbPremPayrCd() == null || cargo.getPartbPremPayrCd().equals("")) {
							cargo.setPartbPremPayrCd(" ");
						}

						cargo.setRetrResp(getCharForString(currentElement.getChildTextTrim("RETR_RESP")));
						cargo.setSeqNum(getLongForString(currentElement.getChildTextTrim("SEQ_NUM")));
						collection.setCargo(cargo);
					}

					if (collection.size() > 0) {
						collection.insert();
					}
				}

			}
		} catch (Exception e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildT1028AppInMedcr: " + e.getMessage(), e);
			throw e;
		}
	}

	/**
	 * This method is used to find if the application has a pregnant.
	 * 
	 * @param root
	 *            - Application root
	 * @return boolean - true if pregnant exists , false otherwise
	 * @throws SelfServiceApplicationException
	 * @throws Exception
	 */
	private boolean isPregnantExists(Element root) throws SelfServiceApplicationException, Exception {
		boolean isPregnant = false;

		Element indivsNode = root.getChild(AppRegConstants.INDIVIDUALS);
		List indivList = indivsNode.getChildren(AppRegConstants.ELEMENT_INDIVIDUAL);
		Iterator indivItr = indivList.iterator();

		while (indivItr.hasNext()) {
			Element indivNode = (Element) indivItr.next();

			if (getCharForString(indivNode.getChild(AppRegConstants.INDIVIDUAL_PROFILE).getChildText("PREG_RESP")) == 'Y') {
				isPregnant = true;

				break;
			}
		}

		return isPregnant;
	}

	/**
	 * Checks for consistency between given forward and reverse relationships
	 * 
	 * @param rltCollection
	 *            Given Relationships collection
	 * @param genderMap
	 *            Gender map
	 * @param appType
	 *            specifies AFB / RMC
	 * @return Returns true is no inconsistent relationships are found
	 */
	private T1005AppHshlRltCollection validateAddConverseRelationships(T1005AppHshlRltCollection rltCollection, HashMap genderMap) throws SelfServiceApplicationException {

		T1005AppHshlRltCargo t1005ExistingCargo = null;
		T1005AppHshlRltCargo t1005NewCargo = null;
		T1005AppHshlRltCargo t1005TempCargo = null;
		T1005AppHshlRltCollection converseRelations = null;

		try {

			if (conn != null) {
				converseRelations = new T1005AppHshlRltCollection(conn);
			} else {
				converseRelations = new T1005AppHshlRltCollection();
			}

			String refIndSex = null;
			char resp = '\u0000';
			long refIndvSeqNum = -1;
			int collSize = rltCollection.size();
			for (int y = 0; y < collSize; y++) {
				t1005NewCargo = new T1005AppHshlRltCargo();
				t1005ExistingCargo = rltCollection.getResults(y);
				resp = t1005ExistingCargo.getCareResp();
				refIndvSeqNum = t1005ExistingCargo.getRefIndvSeqNum();
				refIndSex = (String) genderMap.get(new Long(refIndvSeqNum));

				t1005NewCargo.setAppNum(t1005ExistingCargo.getAppNum());

				t1005NewCargo.setCareResp('N');

				t1005NewCargo.setEffBegMo(t1005ExistingCargo.getEffBegMo());
				t1005NewCargo.setPnpTghrSw(t1005ExistingCargo.getPnpTghrSw());
				t1005NewCargo.setRefIndvSeqNum(t1005ExistingCargo.getSrcIndvSeqNum());
				t1005NewCargo.setRltCd(getConverseRelationshipCode(t1005ExistingCargo.getRltCd(), refIndSex));
				t1005NewCargo.setSrcIndvSeqNum(refIndvSeqNum);
				t1005NewCargo.setPhyBoeSepSw(t1005ExistingCargo.getPhyBoeSepSw());
				if (t1005ExistingCargo.getTaxDepSw() == 'I') {
					t1005NewCargo.setTaxDepSw('Y');
				} else {
					t1005NewCargo.setTaxDepSw('N');
				}

				t1005NewCargo.setTaxJointSw(t1005ExistingCargo.getTaxJointSw());
				t1005TempCargo = getRelationRecord(rltCollection, t1005NewCargo.getSrcIndvSeqNum(), t1005NewCargo.getRefIndvSeqNum());

				if (t1005TempCargo != null) {
					if (!t1005TempCargo.getRltCd().equals(t1005NewCargo.getRltCd())) {
						rltCollection.clear();
						converseRelations.clear();
						break;
					}
				} else {
					converseRelations.add(t1005NewCargo);
				}

			}
			rltCollection.addAll(converseRelations);
		} catch (Exception e) {
			log(ILog.ERROR, "SelfServiceAppRegBO.validateAddConverseRelationships method error: " + e.getMessage(), e);
			throw new SelfServiceApplicationException("SelfServiceAppRegBO.validateAddConverseRelationships method error: " + e.getMessage(),e);
		}
		return rltCollection;

	}

	/**
	 * Finds and returns the relationship cargo for the given criteria
	 * 
	 * @param rltCollection
	 *            Relationships collection
	 * @param srcIndv
	 *            Source Indv Seq Num
	 * @param refIndv
	 *            Referred Indv Seq Num
	 * @return the reverse relationship cargo if found. Otherwise returns null
	 */
	private T1005AppHshlRltCargo getRelationRecord(T1005AppHshlRltCollection rltCollection, long srcIndv, long refIndv) {
		int size = 0;
		size = rltCollection.size();
		for (int i = 0; i < size; i++) {
			if (rltCollection.getResults(i).getSrcIndvSeqNum() == srcIndv && rltCollection.getResults(i).getRefIndvSeqNum() == refIndv) {
				return rltCollection.getResults(i);
			}
		}
		return null;
	}

	/**
	 * Finds and returns whether the particular individual is having
	 * APP_SER_BURIAL_DTL information as part of SS application
	 * 
	 * @param long indvId
	 * @return boolean - true if the individual is having SER_BURIAL_DTL info,
	 *         false otherwise
	 */
	private boolean isSerBurialRequested(long indvSeqId) {
		boolean serBurialRequested = false;
		Element burialDetails = appElement.getChild("APP_SER_BURIAL_DTLS");
		List burialDetailList = (burialDetails != null ? burialDetails.getChildren("APP_SER_BURIAL_DTL") : null);
		if (burialDetailList != null && burialDetailList.size() > 0) {
			Iterator itr = burialDetailList.iterator();
			String dataExist = null;
			while (itr.hasNext()) {
				dataExist = DATA_NO;
				Element burialDetail = (Element) itr.next();
				Attribute burialAttr = (burialDetail != null ? burialDetail.getAttribute(AppRegConstants.DATA_EXIST) : null);
				if (burialAttr != null)
					dataExist = burialAttr.getValue().trim();
				if (DATA_YES.equalsIgnoreCase(dataExist)) {
					if (indvSeqId == getLongForString(burialDetail.getChildTextTrim("INDV_SEQ_NUM"))) {
						serBurialRequested = true;
						break;
					}
				}
			}
		}
		return serBurialRequested;
	}

	// END MI Child Changes


	/**
	 * This method provides the user context information for Webservices that
	 * require update capability for Self Service. if the user is Self service
	 * webservice, set the access level to 2 irrespective of the batch cycle
	 * This method should not be used if any of the bridges tables are being
	 * updated from the webservice
	 * 
	 * @param WSidentifier
	 *            WebService Identifier
	 * @author Ramesh Venkatesan
	 */

	public void createUserContextForSSWebService(String wsIdentifier) {
		IContexts contexts = (IContexts) FwServiceFactory.getInstance().create(IContexts.class);
		Map contextMap = new HashMap();
		contextMap.put(FwConstants.SESSION_ID, wsIdentifier);
		contextMap.put(FwConstants.SESSION_USER_ID, wsIdentifier);
		contexts.createContext(contextMap);
		contexts.setSession(wsIdentifier);
		contexts.getContext(wsIdentifier).setAccessLevel(2);

	}

	/**
	 * The <code>getFuelTypeForApp</code> returns the fuel type Code.
	 * 
	 * @param root
	 *            - Element Object
	 * @return String - fuel type Code
	 */
	public DMApplicationStatusVO[] getAppStatus(String[] appNums) {

		int appLen = appNums.length;
		StringBuffer appNumbers = new StringBuffer();
		DMApplicationStatusVO[] dmApplicationStatuVO = null;
		try {
			List<String> temp = new ArrayList<String>();
			for (int count = 0; count < appLen; count++) {
				temp.add(appNums[count]);
				if (count > 0) {
					appNumbers.append("',");
				}
				appNumbers.append("'" + appNums[count]);
			}
			appNumbers.append("'");
			ArApplicationForAidCollection arAppForAidCol = new ArApplicationForAidCollection();
			Object[] params = { appNumbers.toString() };
			ArApplicationForAidCargo[] arAppForAidArr;

			arAppForAidArr = (ArApplicationForAidCargo[]) arAppForAidCol.select("findByAppNums", params);

			dmApplicationStatuVO = new DMApplicationStatusVO[appNums.length];

			int count = 0;
			for (int i = 0; i < appLen; i++) {
				dmApplicationStatuVO[i] = new DMApplicationStatusVO();
				if (arAppForAidArr != null && arAppForAidArr.length > 0) {
					if (i <= arAppForAidArr.length - 1) {
						temp.remove(arAppForAidArr[i].getAppNum());
						dmApplicationStatuVO[i].setApplicationId(arAppForAidArr[i].getAppNum());
						dmApplicationStatuVO[i].setApplicationStatus(arAppForAidArr[i].getApplicationStatusCd());
						count++;
					}
				}
			}
			if (temp.size() > 0) {
				String[] t1001AppNum = temp.toArray(new String[temp.size()]);
				appNumbers = new StringBuffer();
				T1001AppRqstCollection appRqstCol = new T1001AppRqstCollection();
				for (int k = 0; k < temp.size(); k++) {
					if (k > 0) {
						appNumbers.append("',");
					}
					appNumbers.append("'" + t1001AppNum[k]);
				}
				appNumbers.append("'");
				Object[] param = { appNumbers.toString() };
				T1001AppRqstCargo[] arrAppRgst;

				arrAppRgst = (T1001AppRqstCargo[]) appRqstCol.select("findByAppNums", param);
				if (arrAppRgst != null && arrAppRgst.length > 0) {
					for (int l = 0; l < arrAppRgst.length; l++) {
						dmApplicationStatuVO[count] = new DMApplicationStatusVO();
						dmApplicationStatuVO[count].setApplicationId(arrAppRgst[l].getAppNum());
						dmApplicationStatuVO[count].setApplicationStatus(String.valueOf(arrAppRgst[l].getAppStatusInd()));
						count++;
					}
				}
			}
		} catch (ApplicationException e) {
			log(FwConstants.LOGGING_CATEGORY_EDM_WEBSERVICE, ILog.ERROR,
					"DMElectronicDocumentNotificationEJBBean-getApplicationStatus() : " + "Exception while getting the application status" + e.getMessage(), e);
		} catch (FrameworkException e) {
			log(FwConstants.LOGGING_CATEGORY_EDM_WEBSERVICE, ILog.ERROR,
					"DMElectronicDocumentNotificationEJBBean-getApplicationStatus() : " + "Exception while getting the application status" + e.getMessage(), e);
		}

		return dmApplicationStatuVO;
	}


	/**
	 * This method creates and inserts records into T1057_APP_IN_MEDICAL_DABL
	 * staging table
	 * 
	 * @param root
	 *            - Element Object
	 * @return void
	 * @throws Exception
	 */
	private void buildT1060HpeApplication(Element root) throws Exception {

		T1060_APP_IN_HPECargo t1060Cargo = null;
		T1060_APP_IN_HPECollection t1060Coll = null;
		Boolean hpeApp = false;
		String appNum = null, hpeHospName = null, hpeEmplName = null, city = null, state = null, streetAdd = null, telephone = null, hpeProvId = null;
		String hospCity = null, hospState = null, hospStreetAdd = null;
		long hpeHospNumber, zip, incAmt, hospZip, hhSize;
		String dataExist = null;
		String indvDataExist = null;
		double incAmount = 0.0;
		SimpleDateFormat sdf = null;

		char applicantSw = 'N';

		try {
			Element hpeInd = root.getChild("HPE_APP_IND");

			String hpeIndicatorSw = hpeInd.getText().trim();

			if (hpeIndicatorSw.equalsIgnoreCase("Y")) {
				hpeApp = true;
			}

			if (hpeApp == true) {
				Element hpeAppDataNode = root.getChild("APP_HPE_DETAILS");

				Attribute hpeAppAttr = (hpeAppDataNode != null ? hpeAppDataNode.getAttribute(AppRegConstants.DATA_EXIST) : null);
				if (hpeAppAttr != null) {
					dataExist = hpeAppAttr.getValue().trim();
				}

				if (DATA_YES.equalsIgnoreCase(dataExist) || dataExist.equalsIgnoreCase("")) {
					List hpeIndivList = (hpeAppDataNode != null ? hpeAppDataNode.getChildren("APP_HPE_INDIVIDUAL") : null);
					Iterator hpeItr = hpeIndivList.iterator();
					t1060Coll = (conn == null) ? new T1060_APP_IN_HPECollection() : new T1060_APP_IN_HPECollection(conn);

					while (hpeItr.hasNext()) {
						Element indvNode = (Element) hpeItr.next();
						t1060Cargo = new T1060_APP_IN_HPECargo();
						sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

						appNum = root.getChildTextTrim("BRIDGES_APP_NUM");
						hpeHospName = indvNode.getChildTextTrim("HPE_HOSP_NAME");
						hpeHospNumber = getLongForString(indvNode.getChildTextTrim("HPE_HSPL_NMBR"));
						hpeProvId = indvNode.getChildTextTrim("HPE_PROV_ID");
						hpeEmplName = indvNode.getChildTextTrim("HPE_PRVD_NAME");
						hospCity = indvNode.getChildTextTrim("HSHL_ADR_CITY_NAME");
						hospState = indvNode.getChildTextTrim("HSHL_ADR_STATE_CD");
						hospZip = getLongForString(indvNode.getChildTextTrim("HSHL_ADR_ZIP_CD"));
						hospStreetAdd = indvNode.getChildTextTrim("HSHL_STREET_ADDR");
						incAmount = getDoubleForString(indvNode.getChildTextTrim("INCOME_AMT"));
						incAmt = Double.valueOf(incAmount).longValue();
						city = indvNode.getChildTextTrim("MAIL_ADR_CITY_NAME");
						state = indvNode.getChildTextTrim("MAIL_ADR_STATE_CD");
						zip = getLongForString(indvNode.getChildTextTrim("MAIL_ADR_ZIP_CD"));
						streetAdd = indvNode.getChildTextTrim("MAIL_STREET_ADDR");
						telephone = indvNode.getChildTextTrim("TEL_NUM");
						hhSize = getLongForString(indvNode.getChildTextTrim("HOUSEHOLD_SIZE"));
						// hpe indiv level data
						long indvSeqNum = getLongForString(indvNode.getChildTextTrim("HPE_INDV_SEQ_NUM"));
						char pregSw = getCharForString(indvNode.getChildTextTrim("PREGNANCY_SW"));
						String dueDtStr = indvNode.getChildTextTrim("PREG_DUE_DT");
						Timestamp dueDt = new Timestamp(sdf.parse(dueDtStr).getTime());
						char hpeAppSw = getCharForString(indvNode.getChildTextTrim("HPE_APPLICANT_SW"));
						char hpeEligSw = getCharForString(indvNode.getChildTextTrim("HPE_ELIG_SW"));
						String hpeEligGrpCd = indvNode.getChildTextTrim("HPE_ELIG_GRP_CD");
						char prevMaSw = getCharForString(indvNode.getChildTextTrim("PREV_MA_ELIG_SW"));
						char prevHpeSw = getCharForString(indvNode.getChildTextTrim("PREV_HPE_ELIG_SW"));
						String beginDtStr = indvNode.getChildTextTrim("HPE_BEGIN_DT");
						Timestamp beginDt = new Timestamp(sdf.parse(beginDtStr).getTime());

						char ilResSw = getCharForString(indvNode.getChildTextTrim("IL_RES_SW"));
						char lawPresSw = getCharForString(indvNode.getChildTextTrim("LAWFUL_PRES_SW"));
						char natAmerSw = getCharForString(indvNode.getChildTextTrim("NAT_AMER_SW"));
						char medicareSw = getCharForString(indvNode.getChildTextTrim("INDV_MA_RQST_IND"));
						char usCitizenSw = getCharForString(indvNode.getChildTextTrim("INDV_US_CTZN_SW"));

						if (hpeAppSw == '1') {
							applicantSw = 'Y';
						}

						if (pregSw == 'C') {
							pregSw = 'Y';
						}

						t1060Cargo = new T1060_APP_IN_HPECargo();
						t1060Cargo.setAppNum(appNum);
						t1060Cargo.setHpeHospName(hpeHospName);
						t1060Cargo.setHpeHsplNmbr(hpeHospNumber);
						t1060Cargo.setHpeProvId(hpeProvId);
						t1060Cargo.setHpeEmplName(hpeEmplName);
						t1060Cargo.setAdrCityName(city);
						t1060Cargo.setAdrStateCd(state);
						t1060Cargo.setAdrZipCd(zip);
						t1060Cargo.setStreetAddr(streetAdd);
						t1060Cargo.setTelNum(telephone);
						t1060Cargo.setIncomeAmt(incAmt);
						t1060Cargo.setIndvSeqNum(indvSeqNum);
						t1060Cargo.setPregnancySw(pregSw);
						t1060Cargo.setDeliveryDt(dueDt);
						t1060Cargo.setHpeApplicantSw(applicantSw);
						t1060Cargo.setHpeEligSw(hpeEligSw);
						t1060Cargo.setHpeEligGrpCd(hpeEligGrpCd);
						t1060Cargo.setPrevMaEligSw(prevMaSw);
						t1060Cargo.setPrevHpeEligSw(prevHpeSw);
						t1060Cargo.setHpeBeginDt(beginDt);
						t1060Cargo.setHouseholdSize(hhSize);
						t1060Cargo.setIlResSw(ilResSw);
						t1060Cargo.setLawfulPresSw(lawPresSw);
						t1060Cargo.setNatAmerSw(natAmerSw);
						t1060Cargo.setMedicareSw(medicareSw);
						t1060Cargo.setUsCtznSw(usCitizenSw);

                        // ILIES- 291048 Prefill ABE For Parta & Partb
						Element otherMedicareDetails = root.getChild("APP_IN_MEDCRS");
						List otherMedicareDetailList = (otherMedicareDetails != null ? otherMedicareDetails.getChildren("APP_IN_MEDCR") : null);
						T1028AppInMedcrCollection collection = null;
						T1028AppInMedcrCargo cargo = null;

						if (otherMedicareDetailList != null && otherMedicareDetailList.size() > 0) {
							collection = (conn == null) ? new T1028AppInMedcrCollection() : new T1028AppInMedcrCollection(conn);
							Iterator iterator = otherMedicareDetailList.iterator();
							SimpleDateFormat simpleDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
							appNum = root.getChildTextTrim(AppRegConstants.BRIDGES_APP_NUM);

							while (iterator.hasNext()) {
								Element currentElement = (Element) iterator.next();
								if (getCharForString(currentElement.getChildTextTrim("PARTA_ETTL_RESP")) == 'Y' || 
									getCharForString(currentElement.getChildTextTrim("PARTB_ETTL_RESP")) == 'Y'){
									t1060Cargo.setMedicareSw('Y');
								}
							}
						}
						
						t1060Coll.setCargo(t1060Cargo);

						if (t1060Coll.size() > 0) {
							t1060Coll.insert();
						}
					}
				} 
			} 
		}
		catch (RuntimeException e) {
			log(ILog.ERROR, "exception in SelfServiceAppRegBO.buildT1060HpeApplication method : " + e.getMessage(), e);
			throw new Exception("exception in SelfServiceAppRegBO.buildT1060HpeApplication method : " + e.getMessage(),e);
		}

		log(ILog.DEBUG, "exiting SelfServiceAppRegBO.buildT1057AppInMedicalDisabilities method");
	}

	/**
	 * This method is used to fetch the HPE application data for the Self
	 * Service this method is invoked from Self Service App Reg Session EJB
	 * 
	 * @param threshold
	 *            - Threshold value
	 * @return HpeApplicationVO[]
	 * @throws ApplicationException
	 * @throws Exception
	 */
	public HpeApplicationVO[] fetchDataForHpeApplication(String[] appNums) throws ApplicationException, Exception {
		log(ILog.DEBUG, "entered SelfServiceAppRegBO.fetchDataForHpeApplication method");
		List<HpeApplicationVO> hpeApplicationVOList = null;

		HpeApplicationVO[] hpeApplicationVOArray = null;
		try {
			if (appNums != null && appNums.length > 0) {
				hpeApplicationVOList = new ArrayList<HpeApplicationVO>();
				Map<String, ArApplicationForAidCargo> arApplicationForAidMap = fetchArApplicationForAidData(appNums);

				for (String appNum : appNums) {
					HpeApplicationVO hpeApplicationVO = new HpeApplicationVO();
					List<HpeIndividualVO> hpeIndividualVOList = null;

					ArApplicationForAidCargo arAppForAidCargo = null;
					if (arApplicationForAidMap != null && arApplicationForAidMap.size() > 0) {
						arAppForAidCargo = arApplicationForAidMap.get(appNum);
					}

					if (arAppForAidCargo != null) {
						hpeApplicationVO.setAppNum(appNum);
						hpeApplicationVO.setAppStatus(arAppForAidCargo.getApplicationStatusCd());

						if (arAppForAidCargo.getApplicationSubDt() != null) {
							Calendar cal1 = Calendar.getInstance();
							cal1.setTimeInMillis(arAppForAidCargo.getApplicationSubDt().getTime());
							hpeApplicationVO.setAppSubmissionDt(cal1);
						} else {
							Calendar cal2 = Calendar.getInstance();
							cal2.setTimeInMillis(ALSOPUtil.getSystemDateTime().getTime());
							hpeApplicationVO.setAppSubmissionDt(cal2);
						}
						DcIndvCargo[] dcIndvCargoArray = fetchDcIndvData(appNum);

						buildhpeIndividualVOList(appNum, hpeApplicationVO, dcIndvCargoArray);
					} else {
						T1001AppRqstCargo[] t1001AppRqstCargoArray = fetchT1001AppRqstData(appNum);
						if (t1001AppRqstCargoArray != null && t1001AppRqstCargoArray.length > 0) {
							T1001AppRqstCargo t1001AppRqstCargo = t1001AppRqstCargoArray[0];
							ArHpeAssociationCargo[] arHpeAssociationCargoarray = fetchArHpeAssociationDataForDisposition(t1001AppRqstCargo);
							if (arHpeAssociationCargoarray != null && arHpeAssociationCargoarray.length > 0) {

								hpeApplicationVO.setAppNum(appNum);
								hpeApplicationVO.setAppStatus("DP");
								if (arHpeAssociationCargoarray[0].getCreateDt() != null) {
									Calendar cal3 = Calendar.getInstance();
									cal3.setTimeInMillis(arHpeAssociationCargoarray[0].getCreateDt().getTime());
									hpeApplicationVO.setAppSubmissionDt(cal3);
								}

								DcIndvCargo[] dcIndvCargoArray = fetchDcIndvDataForDisposition(appNum);

								buildhpeIndividualVOListForDisposition(appNum, hpeApplicationVO, dcIndvCargoArray);
							}
						}
					}

					hpeApplicationVOList.add(hpeApplicationVO);
				}

				return hpeApplicationVOArray = hpeApplicationVOList.toArray(new HpeApplicationVO[hpeApplicationVOList.size()]);

			}
		} catch (RuntimeException e) {
			log(ILog.ERROR, "exception in SelfServiceAppRegBO.fetchDataForHpeApplication method : " + e.getMessage(), e);
			throw new Exception("exception in SelfServiceAppRegBO.fetchDataForHpeApplication method : " + e.getMessage(),e);
		} catch (ApplicationException e) {
			log(ILog.ERROR, "exception in SelfServiceAppRegBO.fetchDataForHpeApplication method : " + e.getMessage(), e);
		} catch (FrameworkException e) {
			log(ILog.ERROR, "exception in SelfServiceAppRegBO.fetchDataForHpeApplication method : " + e.getMessage(), e);
		}
		log(ILog.DEBUG, "exiting SelfServiceAppRegBO.fetchDataForHpeApplication method");
		return hpeApplicationVOArray;
	}

	/**
	 * @param t1001AppRqstCargo
	 * @return ArHpeAssociationCargop[]
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	private ArHpeAssociationCargo[] fetchArHpeAssociationDataForDisposition(T1001AppRqstCargo t1001AppRqstCargo) throws ApplicationException, FrameworkException {
		ArHpeAssociationCargo arHpeAssnCargo = new ArHpeAssociationCargo();
		arHpeAssnCargo.setHpeAppNum(t1001AppRqstCargo.getAppNum());
		arHpeAssnCargo.setHpeTriggerStatusCd("CP");
		ArHpeAssociationCollection arHpeAssnColl = new ArHpeAssociationCollection();
		arHpeAssnColl.setCargo(arHpeAssnCargo);
		ArHpeAssociationCargo[] arHpeAssociationCargoarray = (ArHpeAssociationCargo[]) arHpeAssnColl.select("findByHpeAppNumAndTriggerCd");
		return arHpeAssociationCargoarray;
	}

	/**
	 * @param appNum
	 * @return ArHpeAssociationCargo[]
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	private ArHpeAssociationCargo[] fetchArHpeAssociationData(String appNum) throws ApplicationException, FrameworkException {
		ArHpeAssociationCargo arHpeAssnCargo = new ArHpeAssociationCargo();
		arHpeAssnCargo.setHpeAppNum(appNum);
		ArHpeAssociationCollection arHpeAssnColl = new ArHpeAssociationCollection();
		arHpeAssnColl.setCargo(arHpeAssnCargo);
		ArHpeAssociationCargo[] arHpeAssociationCargoarray = (ArHpeAssociationCargo[]) arHpeAssnColl.select("findByHpeAppNum");
		return arHpeAssociationCargoarray;
	}

	/**
	 * @param appNum
	 * @param progCd
	 * @return ArAppProgramCargo[]
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	private ArAppProgramCargo[] fetchArAppProgramData(String appNum) throws ApplicationException, FrameworkException {
		ArAppProgramCargo arAppProgramCargo = new ArAppProgramCargo();
		arAppProgramCargo.setProgramCd("MA");
		arAppProgramCargo.setAppNum(appNum);
		ArAppProgramCollection arAppProgColl = new ArAppProgramCollection();
		arAppProgColl.setCargo(arAppProgramCargo);
		ArAppProgramCargo[] arAppProgramCargoarray = (ArAppProgramCargo[]) arAppProgColl.select("findByAppNumAndProgramCode");
		return arAppProgramCargoarray;
	}

	/**
	 * @param appNum
	 * @return T1001AppRqstCargo[]
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	private T1001AppRqstCargo[] fetchT1001AppRqstData(String appNum) throws ApplicationException, FrameworkException {
		T1001AppRqstCargo t1001AppRqst = new T1001AppRqstCargo();
		t1001AppRqst.setAppNum(appNum);
		T1001AppRqstCollection t1001AppRqstColl = new T1001AppRqstCollection();
		t1001AppRqstColl.setCargo(t1001AppRqst);

		T1001AppRqstCargo[] t1001AppRqstCargoArray = (T1001AppRqstCargo[]) t1001AppRqstColl.select("findByAppNumAndStatusInd");
		return t1001AppRqstCargoArray;
	}

	/**
	 * @param appNum
	 * @param hpeApplicationVO
	 * @param dcIndvCargoArray
	 * @throws NumberFormatException
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	private void buildhpeIndividualVOList(String appNum, HpeApplicationVO hpeApplicationVO, DcIndvCargo[] dcIndvCargoArray) throws NumberFormatException, ApplicationException, FrameworkException {
		List<HpeIndividualVO> hpeIndividualVOList;
		if (dcIndvCargoArray != null && dcIndvCargoArray.length > 0) {
			hpeIndividualVOList = new ArrayList<HpeIndividualVO>();
			ArHpeEligDetailCargo[] arHpeEligDetailCargoArray = fetchArHpeEligDetailData(appNum);
			ArHpeAssociationCargo[] arHpeAssociationCargoArray = fetchArHpeAssociationData(appNum);
			ArAppProgramCargo[] arAppProgramCargoArray = fetchArAppProgramData(appNum);
			for (DcIndvCargo dcIndvCargo : dcIndvCargoArray) {

				HpeIndividualVO hpeIndividualVO = new HpeIndividualVO();
				hpeIndividualVO.setFirstName(dcIndvCargo.getFirstName());

				hpeIndividualVO.setLastName(dcIndvCargo.getLastName());
				hpeIndividualVO.setIndvId(dcIndvCargo.getIndvId());
				hpeIndividualVO.setRin(Long.parseLong(dcIndvCargo.getLegacyIndvId()));
				if (dcIndvCargo.getDobDt() != null) {
					Calendar cal3 = Calendar.getInstance();
					cal3.setTimeInMillis(dcIndvCargo.getDobDt().getTime());
					hpeIndividualVO.setDateOfBirth(cal3);
				}
				if (dcIndvCargo.getFileClearanceSw() != '\0') {
					hpeIndividualVO.setHpeHOHSw(String.valueOf(dcIndvCargo.getFileClearanceSw()));
				}

				ArHpeEligDetailIndvCargo[] arHpeEligDetailIndvCargoArray = fetchArHpeEligDetailIndvData(appNum, dcIndvCargo);

				if (arHpeEligDetailIndvCargoArray != null && arHpeEligDetailIndvCargoArray.length > 0) {
					ArHpeEligDetailIndvCargo arHpeEligDetailIndvCargo = arHpeEligDetailIndvCargoArray[0];
					if (arHpeEligDetailIndvCargo.getHpeEligSw() == 'N' && null != arHpeEligDetailIndvCargo.getHpeEligGrpCd() && arHpeEligDetailIndvCargo.getHpeEligGrpCd().equals("NA")) {
						continue;
					}
					if (arHpeEligDetailIndvCargo.getPrevMaEligSw() != '\0' && arHpeEligDetailIndvCargo.getPrevMaEligSw() == 'Y') {
						hpeIndividualVO.setHpeIndvEligSw("N"); 
					} else if (arHpeEligDetailIndvCargo.getPrevHpeEligSw() != '\0' && arHpeEligDetailIndvCargo.getPrevHpeEligSw() == 'Y') {
						hpeIndividualVO.setHpeIndvEligSw("F"); 
					} else if (arHpeEligDetailIndvCargo.getPrevMpeEligSw() != '\0' && arHpeEligDetailIndvCargo.getPrevMpeEligSw() == 'Y') {
						hpeIndividualVO.setHpeIndvEligSw("C"); 
					} else if ((arHpeAssociationCargoArray != null && arHpeAssociationCargoArray.length > 0 && arHpeAssociationCargoArray[0].getMaAppNum() != null)
							|| (arAppProgramCargoArray != null && arAppProgramCargoArray.length > 0)) {
						hpeIndividualVO.setHpeIndvEligSw("A"); 
					} else {
						hpeIndividualVO.setHpeIndvEligSw("E");
					}
					if (arHpeEligDetailIndvCargo.getHpeEligGrpCd() != null) {
						hpeIndividualVO.setMidName(null != dcIndvCargo.getMidName() ? dcIndvCargo.getMidName() + "," + arHpeEligDetailIndvCargo.getHpeEligGrpCd() : " " + ","
								+ arHpeEligDetailIndvCargo.getHpeEligGrpCd());
					} else {
						hpeIndividualVO.setMidName(dcIndvCargo.getMidName());
					}
					if (arHpeEligDetailCargoArray != null && arHpeEligDetailCargoArray.length > 0) {
						ArHpeEligDetailCargo arHpeEligDetailCargo = arHpeEligDetailCargoArray[0];
						Calendar cal = Calendar.getInstance();
						Timestamp beginDt = arHpeEligDetailCargo.getHpeBeginDt();
						Calendar end_dt = null;
						if ((arHpeEligDetailIndvCargo.getPrevHpeEligSw() == 'Y' || arHpeEligDetailIndvCargo.getPrevMpeEligSw() == 'Y') && null != beginDt) {
							// END_DT is BEG_DT + 1 Day
							cal.setTimeInMillis(beginDt.getTime());
							cal.add(Calendar.DATE, 1);
							end_dt = cal;
						} else if (null != arHpeEligDetailCargo.getHpeEndDt()) {
							cal.setTimeInMillis(arHpeEligDetailCargo.getHpeEndDt().getTime());
							end_dt = cal;
						}
						hpeIndividualVO.setHpeEndDate(end_dt);
						if (arHpeEligDetailCargo.getHpeBeginDt() != null) {
							Calendar calendar1 = Calendar.getInstance();
							calendar1.setTimeInMillis(arHpeEligDetailCargo.getHpeBeginDt().getTime());
							hpeIndividualVO.setHpeBeginDate(calendar1);
						}
					}
				}
				hpeIndividualVOList.add(hpeIndividualVO);
			}
			hpeApplicationVO.setHpeIndvVO(hpeIndividualVOList.toArray(new HpeIndividualVO[hpeIndividualVOList.size()]));
		}
	}

	/**
	 * @param appNum
	 * @param hpeApplicationVO
	 * @param dcIndvCargoArray
	 * @throws NumberFormatException
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	private void buildhpeIndividualVOListForDisposition(String appNum, HpeApplicationVO hpeApplicationVO, DcIndvCargo[] dcIndvCargoArray) throws NumberFormatException, ApplicationException,
			FrameworkException {
		List<HpeIndividualVO> hpeIndividualVOList;
		if (dcIndvCargoArray != null && dcIndvCargoArray.length > 0) {
			hpeIndividualVOList = new ArrayList<HpeIndividualVO>();

			for (DcIndvCargo dcIndvCargo : dcIndvCargoArray) {

				HpeIndividualVO hpeIndividualVO = new HpeIndividualVO();

				hpeIndividualVO.setFirstName(dcIndvCargo.getFirstName());
				hpeIndividualVO.setMidName(dcIndvCargo.getMidName());
				hpeIndividualVO.setLastName(dcIndvCargo.getLastName());
				hpeIndividualVO.setIndvId(dcIndvCargo.getIndvId());
				hpeIndividualVO.setRin(Long.parseLong(dcIndvCargo.getLegacyIndvId()));
				if (dcIndvCargo.getDobDt() != null) {
					Calendar cal3 = Calendar.getInstance();
					cal3.setTimeInMillis(dcIndvCargo.getDobDt().getTime());
					hpeIndividualVO.setDateOfBirth(cal3);
				}
				if (dcIndvCargo.getFileClearanceSw() != '\0') {
					hpeIndividualVO.setHpeHOHSw(String.valueOf(dcIndvCargo.getFileClearanceSw()));
				}
				hpeIndividualVO.setHpeIndvEligSw("C");
				hpeIndividualVOList.add(hpeIndividualVO);

			}
			hpeApplicationVO.setHpeIndvVO(hpeIndividualVOList.toArray(new HpeIndividualVO[hpeIndividualVOList.size()]));
		}
	}

	/**
	 * This method is used to retrieve HPE eligibility
	 * 
	 * @param appNum
	 * @param dcIndvCargo
	 * @return
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	private ArHpeEligDetailIndvCargo[] fetchArHpeEligDetailIndvData(String appNum, DcIndvCargo dcIndvCargo) throws ApplicationException, FrameworkException {
		ArHpeEligDetailIndvCargo[] arHpeEligDetailIndvCargoArray = null;
		ArHpeEligDetailIndvCollection arHpeEligDetailIndvCollection = new ArHpeEligDetailIndvCollection();
		ArHpeEligDetailIndvCargo hpeEligDetailIndvCargo = new ArHpeEligDetailIndvCargo();
		hpeEligDetailIndvCargo.setAppNum(appNum);
		hpeEligDetailIndvCargo.setIndvId(dcIndvCargo.getIndvId());
		arHpeEligDetailIndvCollection.setCargo(hpeEligDetailIndvCargo);
		arHpeEligDetailIndvCargoArray = (ArHpeEligDetailIndvCargo[]) arHpeEligDetailIndvCollection.select("findByAppNumIndvid");
		return arHpeEligDetailIndvCargoArray;
	}

	/**
	 * This method is used to retrieve HPE Begin and end dates
	 * 
	 * @param appNum
	 * @return ArHpeEligDetailCargo[]
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	private ArHpeEligDetailCargo[] fetchArHpeEligDetailData(String appNum) throws ApplicationException, FrameworkException {
		ArHpeEligDetailCargo[] arHpeEligDetailCargoArray = null;
		ArHpeEligDetailCollection arHpeEligDetailCollection = new ArHpeEligDetailCollection();
		ArHpeEligDetailCargo hpeEligDetailCargo = new ArHpeEligDetailCargo();
		hpeEligDetailCargo.setAppNum(appNum);
		arHpeEligDetailCollection.setCargo(hpeEligDetailCargo);
		arHpeEligDetailCargoArray = (ArHpeEligDetailCargo[]) arHpeEligDetailCollection.select("findUserByAppNum");
		return arHpeEligDetailCargoArray;
	}

	/**
	 * Use to return Date in String format for Timestamp
	 * 
	 * @param timestamp
	 * @return
	 */
	public String getStringFromTS(Timestamp aTimestamp) {
		FwCalendar _fwCalendar = FwCalendar.getInstance();
		FwDate fwDate = _fwCalendar.getDate();

		fwDate.setTime(aTimestamp);
		return fwDate.getFormattedDate();
	}

	/**
	 * This method is used to retrieve all the individual details associated
	 * with the appNum.
	 * 
	 * @param appNum
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	private DcIndvCargo[] fetchDcIndvData(String appNum) throws ApplicationException, FrameworkException {
		Object[] methodArgs = new Object[1];
		DcIndvCargo[] dcIndvCargoArray = null;
		DcIndvCollection dcIndvCollection = new DcIndvCollection();
		methodArgs[0] = appNum;

		return dcIndvCargoArray = (DcIndvCargo[]) dcIndvCollection.select("findByAppNum", methodArgs);
	}

	/**
	 * This method is used to retrieve all the individual details associated
	 * with the appNum.
	 * 
	 * @param appNum
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	private DcIndvCargo[] fetchDcIndvDataForDisposition(String appNum) throws ApplicationException, FrameworkException {
		Object[] methodArgs = new Object[1];
		DcIndvCargo[] dcIndvCargoArray = null;
		DcIndvCollection dcIndvCollection = new DcIndvCollection();
		methodArgs[0] = appNum;

		return dcIndvCargoArray = (DcIndvCargo[]) dcIndvCollection.select("findByAppNumForDisposition", methodArgs);
	}

	/**
	 * This method is used to fetch data from AR_APPLICATION_FOR_AID table
	 * 
	 * @param appNums
	 * @return
	 * @throws ApplicationException
	 * @throws FrameworkException
	 */
	private Map<String, ArApplicationForAidCargo> fetchArApplicationForAidData(String[] appNums) throws ApplicationException, FrameworkException {
		ArApplicationForAidCollection arApplicationForAidCollection = new ArApplicationForAidCollection();
		ArApplicationForAidCargo[] arApplicationForAidCargoArray = null;
		List<ArApplicationForAidCargo> arApplicationForAidCargoList = null;
		Map<String, ArApplicationForAidCargo> arApplicationForAidMap = null;

		List<String> argumentsList = new ArrayList<String>();
		Object[] methodArgs = new Object[1];

		StringBuffer appNumList_buf = new StringBuffer();

		for (String appNum : appNums) {
			appNumList_buf = appNumList_buf.append("'").append(appNum).append("',");
		}

		String appNumberList = appNumList_buf.toString();

		if (appNumberList.length() > 0) {
			appNumberList = appNumberList.substring(0, (appNumberList.length() - 1));
		}

		argumentsList.add(appNumberList);

		methodArgs[0] = argumentsList;

		arApplicationForAidCargoArray = (ArApplicationForAidCargo[]) arApplicationForAidCollection.select("findHpeRecordsByAppNumList", methodArgs);

		if (arApplicationForAidCargoArray != null && arApplicationForAidCargoArray.length > 0) {

			if (arApplicationForAidCargoArray != null && arApplicationForAidCargoArray.length > 0)
				arApplicationForAidCargoList = Arrays.asList(arApplicationForAidCargoArray);

			if (arApplicationForAidCargoList != null && arApplicationForAidCargoList.size() > 0) {
				arApplicationForAidMap = new HashMap<String, ArApplicationForAidCargo>();
				for (ArApplicationForAidCargo arApplicationForAidCargo : arApplicationForAidCargoList) {
					arApplicationForAidMap.put(arApplicationForAidCargo.getAppNum(), arApplicationForAidCargo);
				}
			}
		}
		return arApplicationForAidMap;
	}
	
	public void storeT6001PEBTAppRqst (T6001_PEBT_APP_RQSTCargo t6001Cargo) throws Exception {
		try{
			log(ILog.DEBUG, "SelfServiceAppRegBO::storeT6001PEBTAppRqst::Start");
			if (t6001Cargo != null) {
				T6001_PEBT_APP_RQSTCollection t6001Coll = new T6001_PEBT_APP_RQSTCollection(connection);
				t6001Coll.setCargo(t6001Cargo);
				if (t6001Coll.size() > 0) {
					t6001Coll.insert();
				}
			}
			log(ILog.DEBUG, "SelfServiceAppRegBO::storeT6001PEBTAppRqst::End");
		}catch(Exception ex){
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.storeT6001PEBTAppRqst: " + ex.getMessage());
			throw ex;
		}
	}
	
	
	
	public void storeT5002DSNAPAppRqst (T5002_DSNAP_RQSTCargo t5002Cargo) throws Exception {
		try{
			log(ILog.DEBUG, "SelfServiceAppRegBO::storeT5002DSNAPAppRqst::Start");
			if (t5002Cargo != null) {
				T5002_DSNAP_RQSTCollection t5002Coll = new T5002_DSNAP_RQSTCollection(connection);
				t5002Coll.setCargo(t5002Cargo);
				if (t5002Coll.size() > 0) {
					t5002Coll.update(t5002Coll);
				}
			}
			log(ILog.DEBUG, "SelfServiceAppRegBO::storeT5002DSNAPAppRqst::End");
		}catch(Exception ex){
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.storeT5002DSNAPAppRqst: "+t5002Cargo.getAppNum() + ex.getMessage());
			throw ex;
		}
	}
	
	

	public void storeT6002PEBTAppIndvs (T6002_PEBT_APP_INDVCargo[] t6002Cargos) throws Exception {
		try{
			log(ILog.DEBUG, "SelfServiceAppRegBO::storeT6002PEBTAppIndvs::Start");
			if (t6002Cargos != null && t6002Cargos.length > 0) {
				T6002_PEBT_APP_INDVCollection t6002Coll = new T6002_PEBT_APP_INDVCollection(connection);
				for(T6002_PEBT_APP_INDVCargo t6002Cargo: t6002Cargos){
					if(t6002Cargo != null){
						t6002Coll.add(t6002Cargo);
					}
				}
				if (t6002Coll.size() > 0) {
					t6002Coll.insert();
				}
			}
			log(ILog.DEBUG, "SelfServiceAppRegBO::storeT6002PEBTAppIndvs::End");
		}catch(Exception ex){
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.storeT6002PEBTAppIndvs: " + ex.getMessage());
			throw ex;
		}
	}
	
	
	
	
	public void storeT6003PEBTAppDemographics (T6003_PEBT_APP_DEMOGRAPHICSCargo t6003Cargo) throws Exception {
		try{
			log(ILog.DEBUG, "SelfServiceAppRegBO::storeT6003PEBTAppDemographics::Start");
			if (t6003Cargo != null) {
				T6003_PEBT_APP_DEMOGRAPHICSCollection t6003Coll = new T6003_PEBT_APP_DEMOGRAPHICSCollection(connection);
				t6003Coll.setCargo(t6003Cargo);
				if (t6003Coll.size() > 0) {
					t6003Coll.insert();
				}
			}
			log(ILog.DEBUG, "SelfServiceAppRegBO::storeT6003PEBTAppDemographics::End");
		}catch(Exception ex){
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.storeT6003PEBTAppDemographics: " + ex.getMessage());
			throw ex;
		}
	}
	
	public T6002_PEBT_APP_INDVCargo getT6002PEBTAppIndvCargo(String appNum) throws Exception {
		T6002_PEBT_APP_INDVCargo t6002Cargo = null;
		try{
			log(ILog.DEBUG, "SelfServiceAppRegBO::getT6002PEBTAppIndvCargo::Start");
			t6002Cargo = new T6002_PEBT_APP_INDVCargo();
			t6002Cargo.setAppNum(appNum);
			T6002_PEBT_APP_INDVCollection t6002Coll = new T6002_PEBT_APP_INDVCollection(connection);
			t6002Coll.setCargo(t6002Cargo);
			T6002_PEBT_APP_INDVCargo[] t6002CargoArray = (T6002_PEBT_APP_INDVCargo[]) t6002Coll.select("findHOHByAppNum");
			if(t6002CargoArray != null && t6002CargoArray.length > 0){
				t6002Cargo = t6002CargoArray[0];
			}
			log(ILog.DEBUG, "SelfServiceAppRegBO::getT6002PEBTAppIndvCargo::End");
		}catch(Exception ex){
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.getT6002PEBTAppIndvCargo: " + ex.getMessage());
			throw ex;
		}
		return t6002Cargo;
	}
	
	public T6001_PEBT_APP_RQSTCargo getT6001PEBTAppRqstCargo(String appNum) throws Exception {
		T6001_PEBT_APP_RQSTCargo t6001Cargo = null;
		try{
			log(ILog.DEBUG, "SelfServiceAppRegBO::getT6002PEBTAppIndvCargo::Start");
			t6001Cargo = new T6001_PEBT_APP_RQSTCargo();
			t6001Cargo.setAppNum(appNum);
			T6001_PEBT_APP_RQSTCollection t6001Coll = new T6001_PEBT_APP_RQSTCollection(connection);
			t6001Coll.setCargo(t6001Cargo);
			T6001_PEBT_APP_RQSTCargo[] t6001CargoArray = (T6001_PEBT_APP_RQSTCargo[]) t6001Coll.select("findByAppNum");
			if(t6001CargoArray != null && t6001CargoArray.length > 0){
				t6001Cargo = t6001CargoArray[0];
			}
			log(ILog.DEBUG, "SelfServiceAppRegBO::getT6002PEBTAppIndvCargo::End");
		}catch(Exception ex){
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.getT6002PEBTAppIndvCargo: " + ex.getMessage());
			throw ex;
		}
		return t6001Cargo;
	}
	
	
	public boolean appExists(String appNum) throws Exception {	
		log(ILog.DEBUG, "SelfServiceAppRegBO::appExists::Start " +appNum );
		T6001_PEBT_APP_RQSTCargo t6001PEBTAppRqstCargo = new T6001_PEBT_APP_RQSTCargo();
		t6001PEBTAppRqstCargo.setAppNum(appNum);
		T6001_PEBT_APP_RQSTCollection t6001Coll = new T6001_PEBT_APP_RQSTCollection(connection);
		t6001Coll.setCargo(t6001PEBTAppRqstCargo);
		T6001_PEBT_APP_RQSTCargo[] t6001CargoArray = (T6001_PEBT_APP_RQSTCargo[]) t6001Coll.select("findByAppNum");
		if(t6001CargoArray != null && t6001CargoArray.length > 0){
			return true;
		}		log(ILog.DEBUG, "SelfServiceAppRegBO::appExists::End "+appNum);

		return false;
	}
		
	
}