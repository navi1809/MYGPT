package IVA_Batch;
import egl.core.*;
import CommonMigratedParts.*;
import DataTables.*;
//*** PROGRAM=AME66A ****
// COMPONENT NAME: AME66A QC/XIX NEGATIVE CASE SAMPLE
// ===============
// 
// DESCRIPTION:
// ============
// THIS REPORT LISTS THE QC XIX MAO
// NEGATIVE  SAMPLE CASES FOR A MONTH.
// 
// 
// ***********************
Program AME66A type basicProgram //VAGen Info - main batch program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes
  }

  // Data Declarations
  AME66W AME66W; // record
  AME66W-DET AME66W-DET; // record
  AME66W-HEAD AME66W-HEAD; // record
  AME66W-SUBH AME66W-SUBH; // record
  CEP01W CEP01W; // record
  FORMATW FORMATW; // record
  GDW GDW; // record
  H2-2-CMH-PER H2-2-CMH-PER; // record
  H2-2-FCH-PER H2-2-FCH-PER; // record
  H2-2-NQS-PER H2-2-NQS-PER; // record
  H2-FAM-ACTNS H2-FAM-ACTNS; // record
  H2-FAM-ALT-PAYEE H2-FAM-ALT-PAYEE; // record
  H2-FAM-CASE H2-FAM-CASE; // record
  H2-PERSON-ADRS-HST H2-PERSON-ADRS-HST; // record
  REP-COMMON REP-COMMON; // record
  REP-EOFNOF REP-EOFNOF; // record
  SR-132REP-RECOUT SR-132REP-RECOUT; // record
  SR-AME66-RECIN SR-AME66-RECIN; // record
  VDBCOMMON VDBCOMMON; // record
  VDBCONTROL VDBCONTROL; // record
  VMESSAGE VMESSAGE; // record
  VSTRREC4 VSTRREC4; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use VDB00T1 {deleteAfterUse = yes}; // table

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    AME66P9-MAIN: AME66P9-MAIN();
  end // end main
end // end AME66A


// APPLICATION SPECIFIC PROCESS
Function AME66P9-APPLSPEC()
  /* cbsi start*/
  /* *************************************************************/
  /* WDS;08-01-2000;WI#14240 - DETERMINE WHICH RECORD TO RETRIVE*/
  /* FROM TWNFAM_ALT_PAYEE RECORD(F=FAME,C=CCPA,D=DCFS)*/
  /* ****************** START OF WI#14240 ************************/
  AME66W.WS-AID-CD = H2-2-NQS-PER.AID-CD;
  AME66W.WS-ALT-PYE-TYP = " ";
  if (AME66W.WS-AID-CD == "61")
    AME66W.WS-ALT-PYE-TYP = "C";
  else
    if (AME66W.WS-AID-CD == "22"
     || AME66W.WS-AID-CD == "26"
     || AME66W.WS-AID-CD == "27"
     || AME66W.WS-AID-CD == "52"
     || AME66W.WS-AID-CD == "53"
     || AME66W.WS-AID-CD == "54"
     || AME66W.WS-AID-CD == "55"
     || AME66W.WS-AID-CD == "56"
     || AME66W.WS-AID-CD == "57"
     || AME66W.WS-AID-CD == "58"
     || AME66W.WS-AID-CD == "59"
     || AME66W.WS-AID-CD == "60"
     || AME66W.WS-AID-CD == "62"
     || AME66W.WS-AID-CD == "63"
     || AME66W.WS-AID-CD == "65"
     || AME66W.WS-AID-CD == "67"
     || AME66W.WS-AID-CD == "68"
     || AME66W.WS-AID-CD == "69"
     || AME66W.WS-AID-CD == "70"
     || AME66W.WS-AID-CD == "72"
     || AME66W.WS-AID-CD == "73"
     || AME66W.WS-AID-CD == "75"
     || AME66W.WS-AID-CD == "76"
     || AME66W.WS-AID-CD == "77")
      AME66W.WS-ALT-PYE-TYP = "D";
    else
      AME66W.WS-ALT-PYE-TYP = "F";
    end
  end
  /* ***************** END OF WI#14240 *****************/
  AME66Q4-S04();
  if (sysVar.sqlData.sqlcode == 100)
    AME66Q5-S05();
    if (H2-2-CMH-PER.HH-LEFT-RSN-CD != " ")
      AME66Q6-S06();
      set VSTRREC4 empty;
      VSTRREC4.USTRING = H2-2-FCH-PER.LST-NM;
      VSTRREC4.UCONCAT = H2-2-FCH-PER.FRST-NM;
      VSTRREC4.UCONCAT2 = H2-2-FCH-PER.MID-NM;
      VSTRREC4.UCONCAT3 = H2-2-FCH-PER.MODFR;
      VSTRREC4.USTRLEN = 21;
      VSTRREC4.UCONLEN = 16;
      VSTRREC4.UCONLEN2 = 16;
      VSTRREC4.UCONLEN3 = 3;
      call "WST50A" (VSTRREC4) {isNoRefresh = yes};
      AME66W.WS-STRING4 = VSTRREC4.USTRING;
      AME66W-DET.S-CASE-NAME = AME66W.WS-STRING5;
    else
      set VSTRREC4 empty;
      VSTRREC4.USTRING = H2-2-CMH-PER.LST-NM;
      VSTRREC4.UCONCAT = H2-2-CMH-PER.FRST-NM;
      VSTRREC4.UCONCAT2 = H2-2-CMH-PER.MID-NM;
      VSTRREC4.UCONCAT3 = H2-2-CMH-PER.MODFR;
      VSTRREC4.USTRLEN = 21;
      VSTRREC4.UCONLEN = 16;
      VSTRREC4.UCONLEN2 = 16;
      VSTRREC4.UCONLEN3 = 3;
      call "WST50A" (VSTRREC4) {isNoRefresh = yes};
      AME66W.WS-STRING4 = VSTRREC4.USTRING;
      AME66W-DET.S-CASE-NAME = AME66W.WS-STRING5;
    end
  else
    set VSTRREC4 empty;
    VSTRREC4.USTRING = H2-FAM-ALT-PAYEE.ALT-PYE-LST-NM;
    VSTRREC4.UCONCAT = H2-FAM-ALT-PAYEE.ALT-PYE-FRST-NM;
    VSTRREC4.UCONCAT2 = H2-FAM-ALT-PAYEE.ALT-PYE-MID-NM;
    VSTRREC4.UCONCAT3 = H2-FAM-ALT-PAYEE.ALT-PYE-MODFR;
    VSTRREC4.USTRLEN = 21;
    VSTRREC4.UCONLEN = 16;
    VSTRREC4.UCONLEN2 = 16;
    VSTRREC4.UCONLEN3 = 3;
    call "WST50A" (VSTRREC4) {isNoRefresh = yes};
    AME66W.WS-STRING4 = VSTRREC4.USTRING;
    AME66W-DET.S-CASE-NAME = AME66W.WS-STRING5;
  end
  /* cbsi end*/
end // end AME66P9-APPLSPEC


// PROGRAM TERMINATION PROCESS
Function AME66P9-CLOS-PARA()
  /* cbsi start*/
  /* report termination process*/
  exit program;
  /* cbsi end*/
end // end AME66P9-CLOS-PARA


// INTIALISE ALL VARIABLES
Function AME66P9-INIT-PARA()
  /* cbsi start*/
  /* perform process to initialize all additional records*/

  AME66P9-SET-EMPTY();

  /* set all report variables to initial values*/
  /* ws-page-no      - current printing page number*/
  /* ws-line-no      - current page line no*/
  /* ws-new-page     - a new page indicator*/
  /* ws-max-no-lines - lineage for a standard report frame*/

  REP-COMMON.WS-PAGE-NO = 1;
  REP-COMMON.WS-LINE-NO = 1;
  REP-COMMON.WS-NEW-PAGE = "Y";
  REP-COMMON.WS-MAX-NO-LINES = 56;

  /* perform process to initialize constants*/

  AME66P9-INITCON();

  /* set standard header variables*/

  call "DATEAPP" (GDW, VDBCONTROL, VMESSAGE) {isNoRefresh = yes};
  REP-COMMON.WS-DT = GDW.DTL; /* current date*/
  REP-COMMON.WS-YEAR = REP-COMMON.WS-YY;
  REP-COMMON.WS-MONTH = REP-COMMON.WS-MM;
  REP-COMMON.WS-DAY = REP-COMMON.WS-DD;
  REP-COMMON.WS-F1 = "/";
  REP-COMMON.WS-F2 = "/";
  AME66W-HEAD.UDATE = REP-COMMON.WS-DATE;
  AME66W-HEAD.UTIME = VGVar.currentFormattedTime; /* current time*/
  AME66W-HEAD.UAPPL = "AME66A"; /* report name*/
  VDBCOMMON.UAPPLNAM = "AME66A";
  /* perform process to read input parameter file*/
  /* perform process to read input parameter file*/
  /* validate date parameters, mandatory fields for*/
  /* input records*/

  AME66P9-READIP();

  /* perform validation of input parameters*/
  if ((AME66W.WS-RPT-MONTH < 1 || 
  AME66W.WS-RPT-MONTH > 12) || (AME66W.WS-RPT-YEAR < 1900))
  /* ***************** PTR 11842 STARTS HERE ********************/
  /* call CEP01A for invalid parameters               **/
  /* ************************************************************/
    VMESSAGE.UMSGCODE-JCL-ERR = 0;
    VMESSAGE.UMSGCODE = "ARX0402E";
    VMESSAGE.UMSGINS[2] = "AME66A";
    VDBCONTROL.UPROC-NM = "AME66P9-INIT-PARA";
    VDBCONTROL.UPROC-OPT = "SCAN";
    VDBCONTROL.UPROC-OBJ = "SR-AME66-RECIN";
    VMESSAGE.UMSGINS[1] = " ";
    VDBCONTROL.UMSQLCODE = 0;
    WCM00P2-TO-CEP01A();
  /* MOVE 'Y' TO AME66W.WS-INVALID-FLAG;*/
   /* print the header details*/
  /* PERFORM AME66P9-PRN-HEAD;*/
  /* PERFORM REP132P9-INV-PARM;*/
  /* ***************** PTR 11842 ENDS HERE **********************/
  end
  /* computation of rpt-beg-date and rpt-end-date*/

  /* wi17045 remove all reference to previou month*/
  /* IF (AME66W.WS-RPT-MONTH = 01);*/
  /* MOVE 12 TO AME66W.WS-PREV-MONTH;*/
  /* AME66W.WS-PREV-yeAR = AME66W.WS-RPT-YEAR - 1;*/
  /* ELSE;*/
  /* AME66W.WS-PREV-MONTH = AME66W.WS-RPT-MONTH - 1;*/
  /* MOVE AME66W.WS-RPT-YEAR TO AME66W.WS-PREV-yeAR;*/
  /* END;*/

  AME66W-HEAD.S-SAMPLE-YR = AME66W.WS-RPT-YEAR;
  /* MOVE AME66W.WS-RPT-yeAR TO AME66W-HEAD.S-PREV-YR;*/

  WS-RPT-BEG-DATE-YEAR = AME66W.WS-RPT-YEAR;
  WS-RPT-BEG-DATE-MONTH = AME66W.WS-RPT-MONTH;

  AME66W.WS-RPT-BEG-DATE-DAY = "01";
  AME66W.WS-FILLER1 = "-";
  AME66W.WS-RPT-MONTH-BIN = AME66W.WS-RPT-MONTH;
  AME66W.WS-FILLER2 = "-";
  AME66W.WS-RPT-YEAR-BIN = AME66W.WS-RPT-YEAR;

  if ((AME66W.WS-RPT-MONTH == 04) || 
  (AME66W.WS-RPT-MONTH == 06) || 
  (AME66W.WS-RPT-MONTH == 09) || 
  (AME66W.WS-RPT-MONTH == 11))
    AME66W.WS-RPT-END-DATE-DAY = "30";
  else
    if (AME66W.WS-RPT-MONTH == 02)
      REP-COMMON.WS-YYYY = AME66W.WS-RPT-YEAR;
      LEAP-YEAR-CHECK();
      if (REP-COMMON.WS-LEAP-FLAG == "Y")
        AME66W.WS-RPT-END-DATE-DAY = "29";
      else
        AME66W.WS-RPT-END-DATE-DAY = "28";
      end
    else
      AME66W.WS-RPT-END-DATE-DAY = "31";
    end
  end
  AME66W.WS-FILLER3 = "-";
  AME66W.WS-RPT-END-DATE-MONTH = AME66W.WS-RPT-MONTH;
  AME66W.WS-FILLER4 = "-";
  AME66W.WS-RPT-END-DATE-YEAR = AME66W.WS-RPT-YEAR;

  /* set standard header variables*/


  /* populate sub header variables*/

  if ((AME66W.WS-RPT-MONTH == 01))
    AME66W-HEAD.S-SAMPLE-MTH = "JAN,";
    /* MOVE 'DEC,' TO AME66W-HEAD.S-PREV-MTH;*/
  else
    if ((AME66W.WS-RPT-MONTH == 02))
      AME66W-HEAD.S-SAMPLE-MTH = "FEB,";
      /* MOVE 'JAN,' TO AME66W-HEAD.S-PREV-MTH;*/
    else
      if ((AME66W.WS-RPT-MONTH == 03))
        AME66W-HEAD.S-SAMPLE-MTH = "MAR,";
        /* MOVE 'FEB,' TO AME66W-HEAD.S-PREV-MTH;*/
      else
        if ((AME66W.WS-RPT-MONTH == 04))
          AME66W-HEAD.S-SAMPLE-MTH = "APR,";
          /* MOVE 'MAR,' TO AME66W-HEAD.S-PREV-MTH;*/
        else
          if ((AME66W.WS-RPT-MONTH == 05))
            AME66W-HEAD.S-SAMPLE-MTH = "MAY,";
            /* MOVE 'APR,' TO AME66W-HEAD.S-PREV-MTH;*/
          else
            if ((AME66W.WS-RPT-MONTH == 06))
              AME66W-HEAD.S-SAMPLE-MTH = "JUN,";
              /* MOVE 'MAY,' TO AME66W-HEAD.S-PREV-MTH;*/
            else
              if ((AME66W.WS-RPT-MONTH == 07))
                AME66W-HEAD.S-SAMPLE-MTH = "JUL,";
                /* MOVE 'JUN,' TO AME66W-HEAD.S-PREV-MTH;*/
              else
                if ((AME66W.WS-RPT-MONTH == 08))
                  AME66W-HEAD.S-SAMPLE-MTH = "AUG,";
                  /* MOVE 'SEP,' TO AME66W-HEAD.S-PREV-MTH;*/
                else
                  if ((AME66W.WS-RPT-MONTH == 09))
                    AME66W-HEAD.S-SAMPLE-MTH = "SEP,";
                    /* MOVE 'AUG,' TO AME66W-HEAD.S-PREV-MTH;*/
                  else
                    if ((AME66W.WS-RPT-MONTH == 10))
                      AME66W-HEAD.S-SAMPLE-MTH = "OCT,";
                      /* MOVE 'SEP,' TO AME66W-HEAD.S-PREV-MTH;*/
                    else
                      if ((AME66W.WS-RPT-MONTH == 11))
                        AME66W-HEAD.S-SAMPLE-MTH = "NOV,";
                        /* MOVE 'OCT,' TO AME66W-HEAD.S-PREV-MTH;*/
                      else
                        if ((AME66W.WS-RPT-MONTH == 12))
                          AME66W-HEAD.S-SAMPLE-MTH = "DEC,";
                          /* MOVE 'NOV,' TO AME66W-HEAD.S-PREV-MTH;*/
                        end /* end of if rpt-month = 12*/
                      end /* end of if rpt-month = 11*/
                    end /* end of if rpt-month = 10*/
                  end /* end of if rpt-month = 09*/
                end /* end of if rpt-month = 08*/
              end /* end of if rpt-month = 07*/
            end /* end of if rpt-month = 06*/
          end /* end of if rpt-month = 05*/
        end /* end of if rpt-month = 04*/
      end /* end of if rpt-month = 03*/
    end /* end of if rpt-month = 02*/
  end /* end of if rpt-month = 01*/

  /* cbsi end*/
end // end AME66P9-INIT-PARA


// INITIALISE CONSTANTS
Function AME66P9-INITCON()
  /* this process intialises all the reports constants*/
  AME66W-HEAD.CONSTANT1 = "PAGE-NBR";
  AME66W-HEAD.FILLER1 = " ";
  AME66W-HEAD.FILLER2 = " ";
  AME66W-HEAD.CONSTANT2 = "STATE";
  AME66W-HEAD.FILLER3 = " ";
  AME66W-HEAD.CONSTANT3 = "OF";
  AME66W-HEAD.FILLER4 = " ";
  AME66W-HEAD.CONSTANT4 = "NEVADA";
  AME66W-HEAD.FILLER5 = " ";
  AME66W-HEAD.CONSTANT5 = "DATE";
  AME66W-HEAD.FILLER6 = " ";
  AME66W-HEAD.FILLER7 = " ";
  AME66W-HEAD.CONSTANT6 = "QC/XIX";
  AME66W-HEAD.FILLER8 = " ";
  AME66W-HEAD.CONSTANT7 = "NEGATIVE";
  AME66W-HEAD.FILLER9 = " ";
  AME66W-HEAD.CONSTANT8 = "CASE";
  AME66W-HEAD.FILLER10 = " ";
  AME66W-HEAD.CONSTANT9 = "SAMPLE";
  AME66W-HEAD.FILLER11 = " ";
  AME66W-HEAD.CONSTANT10 = "TIME";
  AME66W-HEAD.FILLER12 = " ";
  AME66W-HEAD.CONSTANT11 = "SAMPLE";
  AME66W-HEAD.FILLER13 = " ";
  AME66W-HEAD.CONSTANT12 = "MONTH";
  AME66W-HEAD.FILLER14 = " ";
  AME66W-HEAD.FILLER15 = " ";
  /* WI17045 REMOVE ALL REFERENCE TO PREVIOUS MONTH*/
  /* MOVE ' ' TO AME66W-HEAD.FILLER15A;*/
  /* MOVE '(NEGATIVE' TO AME66W-HEAD.CONSTANT12A;*/
  /* MOVE ' ' TO AME66W-HEAD.FILLER15B;*/
  /* MOVE 'ACTIONS' TO AME66W-HEAD.CONSTANT12B;*/
  /* MOVE ' ' TO AME66W-HEAD.FILLER15C;*/
  /* MOVE ' ' TO AME66W-HEAD.FILLER15D;*/
  /* MOVE ')' TO AME66W-HEAD.CONSTANT12C;*/
  AME66W-HEAD.FILLER16 = " ";
  AME66W-SUBH.CONSTANT1 = "REV";
  AME66W-SUBH.FILLER1 = " ";
  AME66W-SUBH.CONSTANT2 = "#";
  AME66W-SUBH.FILLER2 = " ";
  AME66W-SUBH.CONSTANT3 = "PSEQ";
  AME66W-SUBH.FILLER3 = " ";
  AME66W-SUBH.CONSTANT4 = "#";
  AME66W-SUBH.FILLER4 = " ";
  AME66W-SUBH.CONSTANT5 = "CASE";
  AME66W-SUBH.FILLER5 = " ";
  AME66W-SUBH.CONSTANT6 = "NAME";
  AME66W-SUBH.FILLER6 = " ";
  AME66W-SUBH.CONSTANT7 = "<-";
  AME66W-SUBH.FILLER7 = " ";
  AME66W-SUBH.CONSTANT8 = "CLOSURE";
  AME66W-SUBH.FILLER8 = " ";
  AME66W-SUBH.CONSTANT9 = "->";
  AME66W-SUBH.FILLER9 = " ";
  AME66W-SUBH.CONSTANT10 = "CASE";
  AME66W-SUBH.FILLER10 = " ";
  AME66W-SUBH.CONSTANT11 = "D";
  AME66W-SUBH.FILLER11 = " ";
  AME66W-SUBH.CONSTANT12 = "AID";
  AME66W-SUBH.FILLER12 = " ";
  AME66W-SUBH.CONSTANT13 = "CASE";
  AME66W-SUBH.FILLER13 = " ";
  AME66W-SUBH.CONSTANT14 = "#";
  AME66W-SUBH.FILLER14 = " ";
  AME66W-SUBH.CONSTANT15 = "CASE";
  AME66W-SUBH.FILLER15 = " ";
  AME66W-SUBH.CONSTANT16 = "MAILING";
  AME66W-SUBH.FILLER16 = " ";
  AME66W-SUBH.CONSTANT17 = "ADDRESS";
  AME66W-SUBH.FILLER17 = " ";
  AME66W-SUBH.CONSTANT18 = "CD";
  AME66W-SUBH.FILLER18 = " ";
  AME66W-SUBH.CONSTANT19 = "EFF-DATE";
  AME66W-SUBH.FILLER19 = " ";
  AME66W-SUBH.CONSTANT20 = "LOAD";
  AME66W-SUBH.FILLER20 = " ";
  AME66W-SUBH.CONSTANT21 = "CLS-TP";
  AME66W-SUBH.FILLER21 = " ";
  AME66W-SUBH.FILLER22 = " ";
  AME66W-SUBH.CONSTANT22 = "CASE";
  AME66W-SUBH.FILLER23 = " ";
  AME66W-SUBH.CONSTANT23 = "RESIDENCE";
  AME66W-SUBH.FILLER24 = " ";
  AME66W-SUBH.CONSTANT24 = "ADDRESS";
  AME66W-SUBH.CONSTANT25 = "ACTION TAKEN";
  AME66W-SUBH.FILLER25 = " ";
  AME66W-SUBH.FILLER26 = " ";
  AME66W-DET.FILLER1 = " ";
  AME66W-DET.FILLER2 = " ";
  AME66W-DET.FILLER3 = " ";
  AME66W-DET.FILLER4 = " ";
  AME66W-DET.FILLER5 = "/";
  AME66W-DET.FILLER6 = "/";
  AME66W-DET.FILLER7 = " ";
  AME66W-DET.FILLER8 = " ";
  AME66W-DET.FILLER9 = " ";
  AME66W-DET.FILLER10 = " ";
  AME66W-DET.FILLER11 = " ";
  AME66W-DET.FILLER12 = " ";
  AME66W-DET.FILLER13 = " ";
  AME66W-DET.FILLER14 = " ";
  AME66W-DET.FILLER15 = " ";
  AME66W-DET.FILLER16 = " ";
  AME66W-DET.FILLER17 = " ";
  AME66W-DET.FILLER18 = " ";
  AME66W-DET.FILLER19 = " ";
  AME66W-DET.FILLER20 = " ";
  AME66W-DET.FILLER21 = " ";
  AME66W-DET.FILLER22 = " ";
  AME66W-DET.FILLER23 = " ";
  AME66W-DET.FILLER24 = " ";
  AME66W-DET.FILLER25 = " ";
  AME66W-DET.FILLER26 = " ";
  AME66W-DET.FILLER27 = " ";
  AME66W-DET.FILLER28 = " ";
  AME66W-DET.FILLER29 = " ";
  AME66W-DET.FILLER30 = " ";
  AME66W-DET.FILLER31 = " ";
  AME66W-DET.FILLER32 = " ";
  AME66W-DET.FILLER33 = " ";
  AME66W-DET.FILLER34 = " ";
  AME66W-DET.FILLER35 = " ";
  AME66W-DET.FILLER36 = " ";
end // end AME66P9-INITCON


// REPORTS MAIN PARA
Function AME66P9-MAIN()
  /* cbsi start*/
  /* PERFORM PROCESS TO INITIALISE VARIABLES*/

  AME66P9-INIT-PARA();

  /* PERFORM PROCESS TO PRINT REPORT*/

  AME66P9-PRINT-PARA();

  /* PERFORM PROCESS TO CLOSE APPLICATION*/

  AME66P9-CLOS-PARA();
  /* cbsi end*/
end // end AME66P9-MAIN


// POPULATING REPORTS DETAILS
Function AME66P9-POP-DET()
  /* cbsi start*/
  AME66W.WS-RES-ADR-PRN-FLAG = "N";

  /* compute and move REVIEW NUMBER to detail record*/
  AME66W.WS-REVIEW-SQ-NMB = H2-2-NQS-PER.RVW-SQ-NMB;
  AME66W.WS-SMPLE-MTH = H2-2-NQS-PER.SMPLE-MTH;
  AME66W.WS-QC-PRGM-CD = H2-2-NQS-PER.QC-PRGM-CD;
  AME66W.WS-RVW-SQ-NMB = AME66W.WS-NMB2;
  AME66W-DET.S-REVIEW-NMB = AME66W.WS-REVIEW-NMB;

  AME66W.WS-PSEQ-NMB = H2-2-NQS-PER.PSEQ-NMB;
  set FORMATW empty;
  FORMATW.INPUT-NUMBER = AME66W.WS-PSEQ-NMB;
  FORMATW.LENGTH = 6;
  FORMATW.DEC-COUNT = 0;
  FORMATW.FORMAT-FLAG = "N";
  FORMATW.DOLLAR-FLAG = "N";
  REPP9-FORMAT-PROC();
  AME66W-DET.S-PSEQ-NMB = FORMATW.OUTPUT-CHAR;

  AME66W-DET.S-CASELOAD = H2-2-NQS-PER.CASLD-ID;

  AME66W-DET.S-OFC-CD = H2-2-NQS-PER.OFC-CD;

  AME66W-DET.S-AID-CD = H2-2-NQS-PER.AID-CD;

  AME66W.WS-CASE-ID = H2-2-NQS-PER.SSN;
  AME66W-DET.S-CASE-ID1 = AME66W.WS-CASE-ID1;
  AME66W-DET.S-CASE-ID2 = AME66W.WS-CASE-ID2;
  AME66W-DET.S-CASE-ID3 = AME66W.WS-CASE-ID3;
  set H2-FAM-ACTNS empty;
  AME66Q2-S02();

  AME66W.WS-DAT1 = AME66W.WS-ACTN-DT;
  AME66W-DET.S-ACT-DATE-YEAR = AME66W.WS-CCYY1;
  AME66W-DET.S-ACT-DATE-MON = AME66W.WS-MM1;
  AME66W-DET.S-ACT-DATE-DAY = AME66W.WS-DD1;
  AME66W-DET.FILLER37 = "/";
  AME66W-DET.FILLER38 = "/";
  AME66W-DET.FILLER5 = "/";
  AME66W-DET.FILLER6 = "/";
  if (H2-FAM-ACTNS.ACTN-TYP == "DN")
    AME66W-DET.S-CLS-TP = "DENIAL";
    if (H2-FAM-ACTNS.ACTN-EFF-DT == "9999-12-31" || 
    H2-FAM-ACTNS.ACTN-EFF-DT == "0001-01-01")
      AME66W.WS-DAT1 = " ";
    else
      AME66W.WS-DAT1 = H2-FAM-ACTNS.ACTN-EFF-DT;
    end
    AME66W-DET.S-EFF-DATE-YEAR = AME66W.WS-CCYY1;
    AME66W-DET.S-EFF-DATE-MON = AME66W.WS-MM1;
    AME66W-DET.S-EFF-DATE-DAY = AME66W.WS-DD1;

    AME66W.WS-FILL3 = "/";
    AME66W.WS-FILL4 = "/";
    AME66W-DET.S-CD = H2-FAM-ACTNS.ACTN-TYP;
  else
    if (H2-FAM-ACTNS.ACTN-TYP == "TR")
      AME66W-DET.S-CLS-TP = "TERMIN";
      if (H2-FAM-ACTNS.ACTN-EFF-DT == "9999-12-31" || 
      H2-FAM-ACTNS.ACTN-EFF-DT == "0001-01-01")
        AME66W.WS-DAT1 = " ";
      else
        AME66W.WS-DAT1 = H2-FAM-ACTNS.ACTN-EFF-DT;
      end
      AME66W-DET.S-EFF-DATE-YEAR = AME66W.WS-CCYY1;
      AME66W-DET.S-EFF-DATE-MON = AME66W.WS-MM1;
      AME66W-DET.S-EFF-DATE-DAY = AME66W.WS-DD1;

      AME66W.WS-FILL3 = "/";
      AME66W.WS-FILL4 = "/";
      AME66W-DET.S-CD = H2-FAM-ACTNS.ACTN-TYP;
    end
  end

  /* CHANGE DUE TO PTR 4854, 6650 START*/

  /* Get the appl upi for the case*/
  AME66Q7-S07();

  AME66W.WS-ADR-TYPE-1 = "CM";
  AME66W.WS-ADR-TYPE-2 = "MA";

  AME66Q3-S03();

  if (sysVar.sqlData.sqlcode == 0)
    AME66Q3-S03-SCAN();
    if (sysVar.sqlData.sqlcode == 0)
      AME66W-DET.S-H-NMB-M = H2-PERSON-ADRS-HST.HOUSE-NMB;
      AME66W-DET.S-STR-DIR-M = H2-PERSON-ADRS-HST.STR-DIR;
      AME66W-DET.S-STR-NM-M = H2-PERSON-ADRS-HST.STR-NM;
      AME66W-DET.S-STR-TYPE-M = H2-PERSON-ADRS-HST.STR-TYPE;
      AME66W-DET.S-APT-NMB-M = H2-PERSON-ADRS-HST.APT-NMB;
      AME66W-DET.S-OTH-ADDR-M = H2-PERSON-ADRS-HST.OTH-ADDR;
      AME66W-DET.S-CITY-M = H2-PERSON-ADRS-HST.CITY;
      AME66W-DET.S-ST-CD-M = H2-PERSON-ADRS-HST.ST-CD;
      AME66W.WS-ZIP-CODE = H2-PERSON-ADRS-HST.ZIP-CD;
      AME66W.WS-ZIP-FINAL-5 = AME66W.WS-ZIP-F-5;
      AME66W.WS-ZIP-FILL-1 = "-";
      AME66W.WS-ZIP-FINAL-4 = AME66W.WS-ZIP-N-4;
      AME66W.WS-ZIP-FILL-2 = "-";
      AME66W.WS-ZIP-FINAL-2 = AME66W.WS-ZIP-L-2;
      AME66W-DET.S-ZIP-CD-M = AME66W.WS-ZIP-FINAL;
    end
  end

  AME66W.WS-ADR-TYPE-1 = "CR";
  AME66W.WS-ADR-TYPE-2 = "RA";

  AME66Q3-S03();

  if (sysVar.sqlData.sqlcode == 0)
    AME66Q3-S03-SCAN();
    if (sysVar.sqlData.sqlcode == 0)
      AME66W-DET.S-H-NMB-R = H2-PERSON-ADRS-HST.HOUSE-NMB;
      AME66W-DET.S-STR-DIR-R = H2-PERSON-ADRS-HST.STR-DIR;
      AME66W-DET.S-STR-NM-R = H2-PERSON-ADRS-HST.STR-NM;
      AME66W-DET.S-STR-TYPE-R = H2-PERSON-ADRS-HST.STR-TYPE;
      AME66W-DET.S-APT-NMB-R = H2-PERSON-ADRS-HST.APT-NMB;
      AME66W-DET.S-OTH-ADDR-R = H2-PERSON-ADRS-HST.OTH-ADDR;
      AME66W-DET.S-CITY-R = H2-PERSON-ADRS-HST.CITY;
      AME66W-DET.S-ST-CD-R = H2-PERSON-ADRS-HST.ST-CD;
      AME66W.WS-ZIP-CODE = H2-PERSON-ADRS-HST.ZIP-CD;
      AME66W.WS-ZIP-FINAL-5 = AME66W.WS-ZIP-F-5;
      AME66W.WS-ZIP-FILL-1 = "-";
      AME66W.WS-ZIP-FINAL-4 = AME66W.WS-ZIP-N-4;
      AME66W.WS-ZIP-FILL-2 = "-";
      AME66W.WS-ZIP-FINAL-2 = AME66W.WS-ZIP-L-2;
      AME66W-DET.S-ZIP-CD-R = AME66W.WS-ZIP-FINAL;

      if (AME66W-DET.S-H-NMB-M != AME66W-DET.S-H-NMB-R || 
      AME66W-DET.S-STR-DIR-M != AME66W-DET.S-STR-DIR-R || 
      AME66W-DET.S-STR-NM-M != AME66W-DET.S-STR-NM-R || 
      AME66W-DET.S-STR-TYPE-M != AME66W-DET.S-STR-TYPE-R || 
      AME66W-DET.S-APT-NMB-M != AME66W-DET.S-APT-NMB-R || 
      AME66W-DET.S-OTH-ADDR-M != AME66W-DET.S-OTH-ADDR-R || 
      AME66W-DET.S-CITY-M != AME66W-DET.S-CITY-R || 
      AME66W-DET.S-ST-CD-M != AME66W-DET.S-ST-CD-R || 
      AME66W-DET.S-ZIP-CD-M != AME66W-DET.S-ZIP-CD-R)
        AME66W.WS-RES-ADR-PRN-FLAG = "Y";
      end
    end
  end

  /* cbsi end*/
end // end AME66P9-POP-DET


// PROCESS TO PRINT THE REPORT
Function AME66P9-PRINT-PARA()
  /* cbsi start*/

  /* perform process to set the cursor*/
  AME66Q1-S01();

  /* perform process to scan the cursor*/

  if (H2-2-NQS-PER not ioError)
    AME66Q1-S01-SCAN();
  end

  /* check for no data condition*/

  if ((VDBCONTROL.URC == 100))

  /* print the header details*/
    AME66P9-PRN-HEAD();
    /* perform process to indicate data error*/
    REP132P9-NRF-PROC();
    /* perform termination process*/
    AME66P9-CLOS-PARA();
  end

  /* print all the details retrieved from the data base*/

  while (H2-2-NQS-PER not ioError)

   /* set the detail line record empty*/
    set AME66W-DET empty;

    if ((REP-COMMON.WS-NEW-PAGE == "Y"))
      AME66P9-PRN-HEAD(); /* print the header details*/
      AME66P9-PRN-SUBH(); /* print the subheader*/
      REP-COMMON.WS-NEW-PAGE = "N"; /* reset new page  indicator*/
    end

    /* perform processing specific to the application*/
    AME66P9-APPLSPEC();

    /* perform process to populate the details*/
    AME66P9-POP-DET();

    /* perform process to print the details*/
    AME66P9-PRN-DETAIL();

    /* perform process to scan the cursor*/
    AME66Q1-S01-SCAN();

    AME66W.WS-REM-LINES = REP-COMMON.WS-MAX-NO-LINES -     REP-COMMON.WS-LINE-NO;
   /* print the heading and sub heading if end of page is encountered*/
    if ((AME66W.WS-REM-LINES < 4))
      REP-COMMON.WS-NEW-PAGE = "Y";
   /* set the print control character to page feed*/
      SR-132REP-RECOUT.PRNT-CC = "1";
    end

  end /* end of while loop*/

  /* print end of report*/

  AME66W.WS-REM-LINES = REP-COMMON.WS-MAX-NO-LINES - REP-COMMON.WS-LINE-NO;

  if ((AME66W.WS-REM-LINES < 2))
  /* set print control character to form feed*/
    SR-132REP-RECOUT.PRNT-CC = "1";
    AME66W.WS-INVALID-FLAG = "Y";
    AME66P9-PRN-HEAD(); /* print header details*/
  end

  /* perform process to print end of report indicator*/
  REP132P9-EOR-PROC();
  /* cbsi end*/
end // end AME66P9-PRINT-PARA


// PROCESS TO PRINT DETAILS
Function AME66P9-PRN-DETAIL()
  /* cbsi start*/
  SR-132REP-RECOUT.PRNT-CC = "0";
  SR-132REP-RECOUT.UFIELD = AME66W-DET.LINE1;
  WR-132REP-OUT-FILE();

  /* RESET CONTROL CHARACTER*/
  SR-132REP-RECOUT.PRNT-CC = " ";
  SR-132REP-RECOUT.UFIELD = AME66W-DET.LINE2;
  WR-132REP-OUT-FILE();
  SR-132REP-RECOUT.UFIELD = AME66W-DET.LINE3;
  WR-132REP-OUT-FILE();

  if (AME66W.WS-RES-ADR-PRN-FLAG == "Y")
    AME66W.WS-RES-ADR-PRN-FLAG = "N";
    SR-132REP-RECOUT.UFIELD = AME66W-DET.LINE4;
    WR-132REP-OUT-FILE();
    SR-132REP-RECOUT.UFIELD = AME66W-DET.LINE5;
    WR-132REP-OUT-FILE();
  end
  /* cbsi end*/
end // end AME66P9-PRN-DETAIL


// PROCESS TO PRINT HEADER
Function AME66P9-PRN-HEAD()
  /* cbsi start*/
  AME66W-HEAD.UPAGE = REP-COMMON.WS-PAGE-NO;

  /* move each line of header to map and print*/
  SR-132REP-RECOUT.UFIELD = AME66W-HEAD.LINE1;
  WR-132REP-OUT-FILE();

  /* reset control character*/
  SR-132REP-RECOUT.PRNT-CC = " ";

  SR-132REP-RECOUT.UFIELD = AME66W-HEAD.LINE2;
  WR-132REP-OUT-FILE();

  if (AME66W.WS-INVALID-FLAG == "Y")
    return;
  end

  SR-132REP-RECOUT.PRNT-CC = "0";

  SR-132REP-RECOUT.UFIELD = AME66W-HEAD.LINE3;
  WR-132REP-OUT-FILE();
  REP-COMMON.WS-PAGE-NO = REP-COMMON.WS-PAGE-NO + 1;
  /* cbsi end*/
end // end AME66P9-PRN-HEAD


// PRINTING THE REPORT'S SUB-HEAD
Function AME66P9-PRN-SUBH()
  /* cbsi start*/
  /* MOVE EACH LINE OF SUBHEADER TO MAP*/

  /* SET CONTROL CHARACTER TO MOVE ONE LINE BEFORE PRINTING CURR LINE*/
  SR-132REP-RECOUT.PRNT-CC = "0";
  SR-132REP-RECOUT.UFIELD = AME66W-SUBH.LINE1;
  WR-132REP-OUT-FILE();


  /* SET CONTROL CHARACTER TO MOVE ONE LINE BEFORE PRINTING CURR LINE*/
  SR-132REP-RECOUT.PRNT-CC = " ";
  SR-132REP-RECOUT.UFIELD = AME66W-SUBH.LINE2;
  WR-132REP-OUT-FILE();
  /* SET CONTROL CHARACTER TO MOVE ONE LINE BEFORE PRINTING CURR LINE*/
  SR-132REP-RECOUT.PRNT-CC = " ";
  SR-132REP-RECOUT.UFIELD = AME66W-SUBH.LINE3;
  WR-132REP-OUT-FILE();

  /* SET CONTROL CHARACTER TO MOVE ONE LINE AFTER PRINTING CURR LINE*/
  SR-132REP-RECOUT.PRNT-CC = "0";
  /* cbsi end*/
end // end AME66P9-PRN-SUBH


// PROCESS TO READ INPUT FILE
Function AME66P9-READIP()
  /* cbsi start*/
  VDBCONTROL.UPROC-NM = "AME66P9-READIP";
  VDBCONTROL.UPROC-OPT = "SCAN";
  VDBCONTROL.UPROC-OBJ = "SR-AME66-RECIN";
  VMESSAGE.UMSGINS[2] = "AME66A";
  VGVar.handleHardIOErrors = 1;
  try
    get next SR-AME66-RECIN ;
  end
  /* check if any i/o error has occured*/
  if (SR-AME66-RECIN is ioError && 
  SR-AME66-RECIN not endOfFile)
  /* ************* PTR 11842 STARTS HERE ***********************/
    VMESSAGE.UMSGCODE-JCL-ERR = 0;
    AME66W.WS-ERR-CD = sysVar.errorCode;
    VMESSAGE.UMSGINS[1] = AME66W.WS-ERR-LAST-FOUR;
  /* MOVE 8 TO EZERCODE;*/
    WCM00P2-TO-CEP01A();
  /* ************* PTR 11842 ENDS HERE *************************/
  end

  /* ************* PTR 11842 STARTS HERE ***********************/
  if (SR-AME66-RECIN is endOfFile)
    VMESSAGE.UMSGCODE-JCL-ERR = 0;
    AME66W.WS-ERR-CD = sysVar.errorCode;
    VMESSAGE.UMSGINS[1] = AME66W.WS-ERR-LAST-FOUR;
    WCM00P2-TO-CEP01A();
  end
  /* ************* PTR 11842 ENDS HERE *************************/

  if (SR-AME66-RECIN.RPT-MONTH not numeric || 
  SR-AME66-RECIN.RPT-YEAR not numeric)
    AME66W.WS-INVALID-FLAG = "Y";
  /* ***************** PTR 11842 STARTS HERE ********************/
  /* call CEP01A for invalid parameters               **/
  /* ************************************************************/
    VMESSAGE.UMSGCODE-JCL-ERR = 0;
    VMESSAGE.UMSGCODE = "ARX0402E";
    VMESSAGE.UMSGINS[2] = "AME66A";
    VDBCONTROL.UPROC-NM = "AME66P9-READIP";
    VDBCONTROL.UPROC-OPT = "SCAN";
    VDBCONTROL.UPROC-OBJ = "SR-AME66-RECIN";
    VMESSAGE.UMSGINS[1] = " ";
    VDBCONTROL.UMSQLCODE = 0;
    WCM00P2-TO-CEP01A();
  /* PERFORM AME66P9-PRN-HEAD;*/
  /* PERFORM REP132P9-INV-PARM;*/
  /* ***************** PTR 11842 ENDS HERE **********************/
  end
  AME66W.WS-TOPREC = SR-AME66-RECIN.TOPREC;
  /* cbsi end*/
end // end AME66P9-READIP


// INITIALIZE ALL RECORDS
Function AME66P9-SET-EMPTY()
  /* cbsi start*/
  set REP-COMMON empty;
  set AME66W-DET empty;
  set AME66W-HEAD empty;
  set AME66W-SUBH empty;
  set VMESSAGE empty;
  set CEP01W empty;
  set VDBCONTROL empty;
  set VDBCOMMON empty;
  set FORMATW empty;
  set AME66W empty;
  set REP-EOFNOF empty;

  /* set all h2 records empty*/
  set H2-2-NQS-PER empty;
  set H2-FAM-ACTNS empty;
  set H2-PERSON-ADRS-HST empty;
  set H2-FAM-ALT-PAYEE empty;
  set H2-2-CMH-PER empty;
  set H2-2-FCH-PER empty;

  /* set all serial records empty*/

  set SR-AME66-RECIN empty;
  set SR-132REP-RECOUT empty;
  /* cbsi end*/
end // end AME66P9-SET-EMPTY


// SETINQ : JOIN OF NQS-PER
Function AME66Q1-S01()
  /* csbi start*/
  VDBCOMMON.USQLREC = "H2-2-NQS-PER";
  VDBCONTROL.UPROC-NM = "AME66Q1-S01";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  VDBCONTROL.UPROC-OBJ = "H2-2-NQS-PER";

  VDBCONTROL.UACCTYP = "R";
  try
    open AME66Q1-S01_RSI01
      with #sql{
        select T1.ICI,T1.HOH_UPI,T1.RVW_SQ_NMB,T1.PSEQ_NMB,T1.SMPLE_MTH,
           T1.CASLD_ID,T1.QC_PRGM_CD,T1.OFC_CD,T1.AID_CD,
           T2.SSN
        from TWNNGTV_QC_SMPLE T1,
             TWNPERSON T2
        WHERE
          T1.SMPLE_MTH = :AME66W.WS-RPT-MONTH-BIN
        AND T1.SMPLE_YR = :AME66W.WS-RPT-YEAR-BIN
        AND T1.MAO_IND = 'Y'
        AND T1.QC_PRGM_CD = '17'
        AND T2.UPI = T1.HOH_UPI
        ORDER BY T1.RVW_SQ_NMB
      }      
      into ICI,HOH-UPI,RVW-SQ-NMB,PSEQ-NMB,SMPLE-MTH,
           CASLD-ID,QC-PRGM-CD,OFC-CD,AID-CD,
           SSN
      for H2-2-NQS-PER ;
  end

  VDBCONTROL.URC = 0;
  if (sysVar.sqlData.sqlcode != 0)
    REPP9-SQL-CHKERR();
  end
  /* cbsi end*/
end // end AME66Q1-S01


// SCAN : JOIN OF NQS-PER
Function AME66Q1-S01-SCAN()
  /* cbsi start*/
  VDBCOMMON.USQLREC = "H2-2-NQS-PER";
  VDBCONTROL.UPROC-NM = "AME66Q1-S01-SCAN";
  VDBCONTROL.UPROC-OPT = "SCAN";
  VDBCONTROL.UPROC-OBJ = "H2-2-NQS-PER";

  VDBCONTROL.UACCTYP = "R";
  try
    get next H2-2-NQS-PER ;
  end

  VDBCONTROL.URC = 0;
  if (sysVar.sqlData.sqlcode != 0)
    REPP9-SQL-CHKERR();
  end
  /* cbsi end*/
end // end AME66Q1-S01-SCAN


// INQUIRY : TWNFAM_ACTNS
Function AME66Q2-S02()
  /* wi      :02/04/2000:CMcK: Changed query from selecting from*/
  /* TWNPRGM_CASE_HSTRY to TWNFAM_ACTNS so ANY termination or denial*/
  /* would be captured regardless of current case status.*/
  /* csbi start*/
  VDBCOMMON.USQLREC = "H2-FAM-ACTNS";
  VDBCONTROL.UPROC-NM = "AME66Q2-S02";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  VDBCONTROL.UPROC-OBJ = "H2-FAM-ACTNS";

  VDBCONTROL.UACCTYP = "R";
  try
    get H2-FAM-ACTNS
      with #sql{
        select ACTN_TYP,
        ACTN_EFF_DT,
        DATE(ACTN_TS)
        from twnfam_actns T1
        WHERE
             ICI = :H2-2-NQS-PER.ICI
        AND ACTN_TYP IN ('TR','DN')
         --AND BNFT_MTH = :AME66W.WS-RPT-MONTH-BIN
         --AND BNFT_YR = :AME66W.WS-RPT-YEAR-BIN
         --AND ACTN_EFF_DT >= :AME66W.WS-RPT-BEG-DATE
        AND ACTN_EFF_DT <= :AME66W.WS-RPT-END-DATE
        AND PRGM_TYP IN ('AF','MA','CC','CW','MC')
        order by ACTN_TS desc for fetch only
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into ACTN-TYP,
           ACTN-EFF-DT,
           AME66W.WS-ACTN-DT ;
  end

  VDBCONTROL.URC = 0;
  if (sysVar.sqlData.sqlcode != 0)
    REPP9-SQL-CHKERR();
  end
  /* cbsi end*/
end // end AME66Q2-S02


// SETINQ : TWNPERSON_ADRS_HST
Function AME66Q3-S03()
  /* csbi start*/
  VDBCOMMON.USQLREC = "H2-PERSON-ADRS-HST";
  VDBCONTROL.UPROC-NM = "AME66Q3-S03";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  VDBCONTROL.UPROC-OBJ = "H2-PERSON-ADRS-HST";

  VDBCONTROL.UACCTYP = "R";
  try
    open AME66Q3-S03_RSI01
      with #sql{
        select ADR_TYPE,HOUSE_NMB,STR_DIR,STR_NM,STR_TYPE,
          APT_NMB,OTH_ADDR,CITY,ST_CD,ZIP_CD,PRD_BEG_TS
        from TWNPERSON_ADRS_HST T1
        WHERE
         -- CHANGE DUE TO PTR 4854, 6650 START
        UPI = :H2-FAM-CASE.APPL-UPI
        AND ADR_TYPE IN (:WS-ADR-TYPE-1,:WS-ADR-TYPE-2)
        ORDER BY PRD_BEG_TS DESC
         -- CHANGE DUE TO PTR 4854, 6650 END
      }      
      into ADR-TYPE,HOUSE-NMB,STR-DIR,STR-NM,STR-TYPE,
           APT-NMB,OTH-ADDR,CITY,ST-CD,ZIP-CD,PRD-BEG-TS
      for H2-PERSON-ADRS-HST ;
  end

  VDBCONTROL.URC = 0;
  if (sysVar.sqlData.sqlcode != 0)
    REPP9-SQL-CHKERR();
  end
  /* cbsi end*/
end // end AME66Q3-S03


// SCAN : TWNPERSON_ADRS_HST
Function AME66Q3-S03-SCAN()
  /* cbsi start*/
  VDBCOMMON.USQLREC = "H2-PERSON-ADRS-HST";
  VDBCONTROL.UPROC-NM = "AME66Q3-S03-SCAN";
  VDBCONTROL.UPROC-OPT = "SCAN";
  VDBCONTROL.UPROC-OBJ = "H2-PERSON-ADRS-HST";


  VDBCONTROL.UACCTYP = "R";
  try
    get next H2-PERSON-ADRS-HST ;
  end

  VDBCONTROL.URC = 0;
  if (sysVar.sqlData.sqlcode != 0)
    REPP9-SQL-CHKERR();
  end
  /* cbsi end*/
end // end AME66Q3-S03-SCAN


// INQUIRY : TWNFAM_ALT_PAYEE
Function AME66Q4-S04()
  /* csbi start*/
  VDBCOMMON.USQLREC = "H2-FAM-ALT-PAYEE";
  VDBCONTROL.UPROC-NM = "AME66Q4-S04";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  VDBCONTROL.UPROC-OBJ = "H2-FAM-ALT-PAYEE";

  VDBCONTROL.UACCTYP = "R";
  try
    get H2-FAM-ALT-PAYEE singleRow
      with #sql{
        select ALT_PYE_LST_NM,ALT_PYE_FRST_NM,ALT_PYE_MID_NM,
           ALT_PYE_MODFR
        from twnfam_alt_payee T1
        WHERE
        ICI = :H2-2-NQS-PER.ICI
        AND ALT_PYE_TYP = :AME66W.WS-ALT-PYE-TYP
        AND EFF_FR_DT <= :AME66W.WS-RPT-END-DATE
        AND EFF_TO_DT >= :AME66W.WS-RPT-END-DATE
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into ALT-PYE-LST-NM,ALT-PYE-FRST-NM,ALT-PYE-MID-NM,
           ALT-PYE-MODFR ;
  end

  VDBCONTROL.URC = 0;
  if (sysVar.sqlData.sqlcode != 0)
    REPP9-SQL-CHKERR();
  end
  /* cbsi end*/
end // end AME66Q4-S04


// INQUIRY : JOIN OF CMH-PER
Function AME66Q5-S05()
  /* csbi start*/
  VDBCOMMON.USQLREC = "H2-2-CMH-PER";
  VDBCONTROL.UPROC-NM = "AME66Q5-S05";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  VDBCONTROL.UPROC-OBJ = "H2-2-CMH-PER";

  VDBCONTROL.UACCTYP = "R";
  try
    get H2-2-CMH-PER singleRow
      with #sql{
        select T1.HH_LEFT_RSN_CD,T2.LST_NM,T2.FRST_NM,T2.MID_NM,
           T2.MODFR
        from TWNCASE_MEMBER_HST T1,
             TWNPERSON T2
        WHERE
            T1.ICI = :H2-2-NQS-PER.ICI
        AND T1.UPI = :H2-2-NQS-PER.HOH-UPI
        AND T1.PRD_BEG_DT <= :AME66W.WS-RPT-END-DATE
        AND T1.PRD_END_DT >= :AME66W.WS-RPT-END-DATE
        AND T2.UPI = T1.UPI
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into HH-LEFT-RSN-CD,LST-NM,FRST-NM,MID-NM,
           MODFR ;
  end

  VDBCONTROL.URC = 0;
  if (sysVar.sqlData.sqlcode != 0)
    REPP9-SQL-CHKERR();
  end
  /* cbsi end*/
end // end AME66Q5-S05


// INQUIRY : JOIN OF FCH-PER
Function AME66Q6-S06()
  /* csbi start*/
  VDBCOMMON.USQLREC = "H2-2-FCH-PER";
  VDBCONTROL.UPROC-NM = "AME66Q6-S06";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  VDBCONTROL.UPROC-OBJ = "H2-2-FCH-PER";

  VDBCONTROL.UACCTYP = "R";
  try
    get H2-2-FCH-PER singleRow
      with #sql{
        select T1.LST_NM,T1.FRST_NM,T1.MID_NM,T1.MODFR
        from TWNPERSON T1,
             TWNFAM_CASE_HSTRY T2
        WHERE
            T2.ICI = :H2-2-NQS-PER.ICI
        AND T2.APPL_UPI = T1.UPI
        AND T2.PRD_BEG_DT <= :AME66W.WS-RPT-END-DATE
        AND T2.PRD_END_DT >= :AME66W.WS-RPT-END-DATE
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into LST-NM,FRST-NM,MID-NM,MODFR ;
  end

  VDBCONTROL.URC = 0;
  if (sysVar.sqlData.sqlcode != 0)
    REPP9-SQL-CHKERR();
  end
  /* cbsi end*/
end // end AME66Q6-S06


// INQUIRY : TWNFAM_CASE
Function AME66Q7-S07()
  /* csbi start*/
  set H2-FAM-CASE empty;
  VDBCOMMON.USQLREC = "H2-FAM-CASE";
  VDBCONTROL.UPROC-NM = "AME66Q7-S07";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  VDBCONTROL.UPROC-OBJ = "H2-FAM-CASE";

  VDBCONTROL.UACCTYP = "R";
  try
    get H2-FAM-CASE singleRow
      with #sql{
        select APPL_UPI
        from TWNFAM_CASE T1
        WHERE  ICI = :H2-2-NQS-PER.ICI
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into APPL-UPI ;
  end

  VDBCONTROL.URC = 0;
  if (sysVar.sqlData.sqlcode != 0)
    REPP9-SQL-CHKERR();
  end
  /* cbsi end*/
end // end AME66Q7-S07


Record AME66W type basicRecord
  10 WS-INVALID-FLAG char(1) ; 
  10 WS-TOT-ACT num(6) ; 
  10 WS-TOT-AFDC num(6) ; 
  10 WS-TOT-MAO-CW num(6) ; 
  10 WS-G-TOT-ACT num(7) ; 
  10 WS-G-TOT-AFDC num(7) ; 
  10 WS-G-TOT-MAO-CW num(7) ; 
  10 WS-REM-LINES num(3) ; 
  10 WS-RPT-BEG-DATE char(10) ; 
    15 WS-RPT-BEG-DATE-YEAR char(4) ; 
    15 WS-FILLER1 char(1) ; 
    15 WS-RPT-BEG-DATE-MONTH char(2) ; 
    15 WS-FILLER2 char(1) ; 
    15 WS-RPT-BEG-DATE-DAY char(2) ; 
  10 WS-RPT-END-DATE char(10) ; 
    15 WS-RPT-END-DATE-YEAR char(4) ; 
    15 WS-FILLER3 char(1) ; 
    15 WS-RPT-END-DATE-MONTH char(2) ; 
    15 WS-FILLER4 char(1) ; 
    15 WS-RPT-END-DATE-DAY char(2) ; 
  10 WS-SMPLE-MTH-BIN num(2) ; 
  10 WS-SMPLE-MTH-CHAR char(2) ; 
    15 WS-SMPLE-MTH-CHAR1 num(2) ; 
  10 WS-RVW-SQ-NMB-BIN num(2) ; 
  10 WS-RVW-SQ-NMB-CHAR char(2) ; 
    15 WS-RVW-SQ-NMB-CHAR1 num(2) ; 
  10 WS-STRING char(100) ; 
    15 WS-STRING1 char(6) ; 
    15 WS-FIL char(94) ; 
  10 WS-STRING2 char(100) ; 
    15 WS-STRING3 char(53) ; 
    15 WS-FIL1 char(47) ; 
  10 WS-STRING4 char(100) ; 
    15 WS-STRING5 char(27) ; 
    15 WS-FIL2 char(73) ; 
  10 WS-DAT1 char(10) ; 
    15 WS-CCYY1 char(4) ; 
      20 WS-CC1 char(2) ; 
      20 WS-YY1 char(2) ; 
    15 WS-FILL1 char(1) ; 
    15 WS-MM1 char(2) ; 
    15 WS-FILL2 char(1) ; 
    15 WS-DD1 char(2) ; 
  10 WS-DAT2 char(8) ; 
    15 WS-MM2 char(2) ; 
    15 WS-FILL3 char(1) ; 
    15 WS-DD2 char(2) ; 
    15 WS-FILL4 char(1) ; 
    15 WS-YY2 char(2) ; 
  10 WS-RES-ADR-PRN-FLAG char(1) ; 
  10 WS-RPT-MONTH-BIN smallint ; 
  10 WS-RPT-YEAR-BIN smallint ; 
  10 WS-PSEQ-NMB num(4) ; 
  10 WS-CASE-ID char(9) ; 
    15 WS-CASE-ID1 char(3) ; // WS-CASE-ID1
    15 WS-CASE-ID2 char(2) ; 
    15 WS-CASE-ID3 char(4) ; 
  10 WS-ZIP-CODE char(11) ; 
    15 WS-ZIP-F-5 char(5) ; 
    15 WS-ZIP-N-4 char(4) ; 
    15 WS-ZIP-L-2 char(2) ; 
  10 WS-ZIP-FINAL char(13) ; 
    15 WS-ZIP-FINAL-5 char(5) ; 
    15 WS-ZIP-FILL-1 char(1) ; 
    15 WS-ZIP-FINAL-4 char(4) ; 
    15 WS-ZIP-FILL-2 char(1) ; 
    15 WS-ZIP-FINAL-2 char(2) ; 
  10 WS-TOPREC char(80) ; 
    15 WS-RPT-MONTH num(2) ; 
    15 WS-RPT-YEAR num(4) ; 
    15 * char(74) ; 
  10 WS-REVIEW-SQ-NMB num(4) ; 
    15 WS-NMB1 num(2) ; 
    15 WS-NMB2 num(2) ; 
  10 WS-REVIEW-NMB char(6) ; 
    15 WS-QC-PRGM-CD char(2) ; 
    15 WS-SMPLE-MTH num(2) ; 
    15 WS-RVW-SQ-NMB num(2) ; 
  10 WS-ADR-TYPE-1 char(2) ; 
  10 WS-ADR-TYPE-2 char(2) ; 
  10 WS-ERR-CD char(14) ; 
    15 WS-ERR-FIRST-FOUR char(4) ; 
    15 WS-ERR-LAST-FOUR char(4) ; 
    15 WS-PREV-MONTH num(2) ; 
    15 WS-PREV-YEAR num(4) ; 
  10 WS-ALT-PYE-TYP char(1) ; 
  10 WS-AID-CD char(3) ; 
  10 WS-ACTN-DT char(10) ; 
end // end AME66W


Record AME66W-DET type basicRecord
  10 LINE1 char(132) ; 
    15 S-REVIEW-NMB char(6) ; 
    15 FILLER1 char(1) ; 
    15 S-PSEQ-NMB char(6) ; 
    15 FILLER2 char(7) ; 
    15 S-CASE-NAME char(27) ; 
    15 FILLER3 char(8) ; 
    15 S-CD char(2) ; 
    15 FILLER4 char(1) ; 
    15 S-EFF-DATE-MON char(2) ; 
    15 FILLER5 char(1) ; 
    15 S-EFF-DATE-DAY char(2) ; 
    15 FILLER6 char(1) ; 
    15 S-EFF-DATE-YEAR char(4) ; 
    15 FILLER7 char(2) ; 
    15 S-CASELOAD char(5) ; 
    15 FILLER8 char(2) ; 
    15 S-CLS-TP char(6) ; 
    15 FILLER36 char(2) ; 
    15 S-ACT-DATE-MON char(2) ; 
    15 FILLER37 char(1) ; 
    15 S-ACT-DATE-DAY char(2) ; 
    15 FILLER38 char(1) ; 
    15 S-ACT-DATE-YEAR char(4) ; 
    15 FILLER9 char(37) ; 
  10 LINE2 char(132) ; 
    15 S-OFC-CD char(2) ; 
    15 FILLER10 char(1) ; 
    15 S-AID-CD char(3) ; 
    15 FILLER11 char(1) ; 
    15 S-CASE-ID1 char(3) ; 
    15 FILLER12 char(1) ; 
    15 S-CASE-ID2 char(2) ; 
    15 FILLER13 char(1) ; 
    15 S-CASE-ID3 char(4) ; 
    15 FILLER14 char(2) ; 
    15 S-H-NMB-M char(8) ; 
    15 FILLER15 char(1) ; 
    15 S-STR-DIR-M char(2) ; 
    15 FILLER16 char(1) ; 
    15 S-STR-NM-M char(25) ; 
    15 FILLER17 char(1) ; 
    15 S-STR-TYPE-M char(4) ; 
    15 FILLER18 char(1) ; 
    15 S-APT-NMB-M char(5) ; 
    15 FILLER19 char(1) ; 
    15 S-OTH-ADDR-M char(25) ; 
    15 FILLER20 char(38) ; 
  10 LINE3 char(132) ; 
    15 FILLER21 char(20) ; 
    15 S-CITY-M char(20) ; 
    15 FILLER22 char(1) ; 
    15 S-ST-CD-M char(3) ; 
    15 FILLER23 char(1) ; 
    15 S-ZIP-CD-M char(13) ; 
    15 FILLER24 char(74) ; 
  10 LINE4 char(132) ; 
    15 FILLER25 char(20) ; 
    15 S-H-NMB-R char(8) ; 
    15 FILLER26 char(1) ; 
    15 S-STR-DIR-R char(2) ; 
    15 FILLER27 char(1) ; 
    15 S-STR-NM-R char(25) ; 
    15 FILLER28 char(1) ; 
    15 S-STR-TYPE-R char(4) ; 
    15 FILLER29 char(1) ; 
    15 S-APT-NMB-R char(5) ; 
    15 FILLER30 char(1) ; 
    15 S-OTH-ADDR-R char(25) ; 
    15 FILLER31 char(38) ; 
  10 LINE5 char(132) ; 
    15 FILLER32 char(20) ; 
    15 S-CITY-R char(20) ; 
    15 FILLER33 char(1) ; 
    15 S-ST-CD-R char(3) ; 
    15 FILLER34 char(1) ; 
    15 S-ZIP-CD-R char(13) ; 
    15 FILLER35 char(74) ; 
end // end AME66W-DET


Record AME66W-HEAD type basicRecord
  10 LINE1 char(132) ; 
    15 CONSTANT1 char(8) ; 
    15 FILLER1 char(1) ; 
    15 UPAGE char(4) ; 
    15 FILLER2 char(47) ; 
    15 CONSTANT2 char(5) ; 
    15 FILLER3 char(1) ; 
    15 CONSTANT3 char(2) ; 
    15 FILLER4 char(1) ; 
    15 CONSTANT4 char(6) ; 
    15 FILLER5 char(44) ; 
    15 CONSTANT5 char(4) ; 
    15 FILLER6 char(1) ; 
    15 UDATE char(8) ; 
  10 LINE2 char(132) ; 
    15 UAPPL char(8) ; 
    15 FILLER7 char(45) ; 
    15 CONSTANT6 char(6) ; 
    15 FILLER8 char(1) ; 
    15 CONSTANT7 char(8) ; 
    15 FILLER9 char(1) ; 
    15 CONSTANT8 char(4) ; 
    15 FILLER10 char(1) ; 
    15 CONSTANT9 char(6) ; 
    15 FILLER11 char(39) ; 
    15 CONSTANT10 char(4) ; 
    15 FILLER12 char(1) ; 
    15 UTIME char(8) ; 
  10 LINE3 char(132) ; 
    15 CONSTANT11 char(6) ; 
    15 FILLER13 char(1) ; 
    15 CONSTANT12 char(5) ; 
    15 FILLER14 char(1) ; 
    15 S-SAMPLE-MTH char(4) ; 
    15 FILLER15 char(1) ; 
    15 S-SAMPLE-YR char(4) ; 
    15 FILLER15A char(1) ; 
    15 CONSTANT12A char(9) ; 
    15 FILLER15B char(1) ; 
    15 CONSTANT12B char(7) ; 
    15 FILLER15C char(1) ; 
    15 S-PREV-MTH char(4) ; 
    15 FILLER15D char(1) ; 
    15 S-PREV-YR char(4) ; 
    15 CONSTANT12C char(1) ; 
    15 FILLER16 char(81) ; 
end // end AME66W-HEAD


Record AME66W-SUBH type basicRecord
  10 LINE1 char(132) ; 
    15 CONSTANT1 char(3) ; 
    15 FILLER1 char(1) ; 
    15 CONSTANT2 char(1) ; 
    15 FILLER2 char(2) ; 
    15 CONSTANT3 char(4) ; 
    15 FILLER3 char(1) ; 
    15 CONSTANT4 char(1) ; 
    15 FILLER4 char(7) ; 
    15 CONSTANT5 char(4) ; 
    15 FILLER5 char(1) ; 
    15 CONSTANT6 char(4) ; 
    15 FILLER6 char(26) ; 
    15 CONSTANT7 char(2) ; 
    15 FILLER7 char(1) ; 
    15 CONSTANT8 char(7) ; 
    15 FILLER8 char(1) ; 
    15 CONSTANT9 char(2) ; 
    15 FILLER9 char(2) ; 
    15 CONSTANT10 char(4) ; 
    15 FILLER10 char(58) ; 
  10 LINE2 char(132) ; 
    15 CONSTANT11 char(1) ; 
    15 FILLER11 char(2) ; 
    15 CONSTANT12 char(3) ; 
    15 FILLER12 char(1) ; 
    15 CONSTANT13 char(4) ; 
    15 FILLER13 char(1) ; 
    15 CONSTANT14 char(1) ; 
    15 FILLER14 char(7) ; 
    15 CONSTANT15 char(4) ; 
    15 FILLER15 char(1) ; 
    15 CONSTANT16 char(7) ; 
    15 FILLER16 char(1) ; 
    15 CONSTANT17 char(7) ; 
    15 FILLER17 char(15) ; 
    15 CONSTANT18 char(2) ; 
    15 FILLER18 char(1) ; 
    15 CONSTANT19 char(8) ; 
    15 FILLER19 char(4) ; 
    15 CONSTANT20 char(4) ; 
    15 FILLER20 char(3) ; 
    15 CONSTANT21 char(6) ; 
    15 FILLER26 char(2) ; 
    15 CONSTANT25 char(12) ; 
    15 FILLER21 char(35) ; 
  10 LINE3 char(132) ; 
    15 FILLER22 char(20) ; 
    15 CONSTANT22 char(4) ; 
    15 FILLER23 char(1) ; 
    15 CONSTANT23 char(9) ; 
    15 FILLER24 char(1) ; 
    15 CONSTANT24 char(7) ; 
    15 FILLER25 char(90) ; 
end // end AME66W-SUBH


