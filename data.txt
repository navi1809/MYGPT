

Function AIN49P9-READ-S38()
  try
    get H2-CASE-MEMBER-HST singleRow
      with #sql{
        select ICI
        from TWNCASE_MEMBER_HST T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE   UPI = :UPI
        AND PRD_BEG_DT <= :PRD-BEG-DT
        AND PRD_END_DT >= :PRD-END-DT
        AND (AFDC_ELIG_CD NOT IN ('9',' ') OR
             TC_ELIG_CD NOT IN ('9',' ') OR
             TL_ELIG_CD NOT IN ('9',' ') OR
             TN_ELIG_CD NOT IN ('9',' ') OR
             TP_ELIG_CD NOT IN ('9',' ') OR
             FS_ELIG_CD NOT IN ('9',' ') OR
             MA_ELIG_CD NOT IN ('9',' '))
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into ICI ;
  end
  VDBCONTROL.UPROC-NM = "AIN49P9-READ-S38";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  VDBCONTROL.UPROC-OBJ = "H2-CASE-MEMBER-HST";
  VDBCOMMON.USQLREC = "H2-CASE-MEMBER-HST";
end // end AIN49P9-READ-S38


// READ PROGRAM CASE HSTRY
Function AIN49P9-READ-S39()
  VDBCONTROL.UPROC-NM = "AIN49P9-READ-S39";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  VDBCONTROL.UPROC-OBJ = "H2-PRGM-CASE-HSTRY";
  VDBCOMMON.USQLREC = "H2-PRGM-CASE-HSTRY";
  try
    get H2-PRGM-CASE-HSTRY
      with #sql{
        select ICI, PRGM_CASE_TYPE
        from TWNPRGM_CASE_HSTRY T1
        WHERE ICI = :ICI AND
        PRD_BEG_DT <= :PRD-BEG-DT AND
        PRD_END_DT >= :PRD-BEG-DT AND
        PRGM_CASE_TYPE <> 'CW' AND
        PRGM_CASE_STS IN ('P','O')
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into ICI, PRGM-CASE-TYPE ;
  end
  AIN49W5.WS-SQCOD = sysVar.sqlData.sqlcode;
end // end AIN49P9-READ-S39


Function AIN49P9-READ-S40()
  VDBCONTROL.UPROC-NM = "AIN49P9-READ-S40";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  VDBCONTROL.UPROC-OBJ = "H2-PRGM-CASE-HSTRY";
  VDBCOMMON.USQLREC = "H2-PRGM-CASE-HSTRY";
  try
    get H2-PRGM-CASE-HSTRY
      with #sql{
        select ICI, PRGM_CASE_TYPE
        from TWNPRGM_CASE_HSTRY T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE ICI = :ICI
        AND PRGM_CASE_TYPE = 'CW'
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into ICI, PRGM-CASE-TYPE ;
  end
  AIN49W5.WS-SQCOD = sysVar.sqlData.sqlcode;
end // end AIN49P9-READ-S40


Function AIN49P9-READ-S41()
  VDBCONTROL.UPROC-NM = "AIN49P9-READ-S41";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  VDBCONTROL.UPROC-OBJ = "H3-PERSON";
  VDBCOMMON.USQLREC = "H3-PERSON";
  try
    get H3-PERSON
      with #sql{
        select SSN
        from TWNPERSON T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE MEDIC_BLNG_SQ_NMB = :MEDIC-BLNG-SQ-NMB
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into SSN ;
  end
  AIN49W5.WS-SQCOD = sysVar.sqlData.sqlcode;
end // end AIN49P9-READ-S41


// REFERRAL PROCESS
Function AIN49P9-REF-PRCS()
  /* REFERRAL PROCESS*/
  /*  */
  /* --------------------------PTR 4635 BEGIN ----------------------*/
  /* the referral process is triggered when every grant is reported for*/
  /* a retro month, or the aid code / elig code changes across categories*/
  /* or becomes ineligible.*/
  /*  */
  /* all dates passed to APO30A are in CCYY-MM-DD format*/
  /*  */
  set APO04W1 empty;

  APO04W1.FAPO-ICI = AIN49W.WS-IVA-ICI;
  APO04W1.FAPO-SYS-DATE = AIN49W.WS-PROCESS-DT;

  AIN49W.WS-REFERAL-DD = "01";
  APO04W1.FAPO-BENEFIT-DT = AIN49W.WS-REFERAL-DATE;

  AIN49W.WS-TEMP-DATE = AIN49W.WS-REFERAL-DATE;
  AIN49P9-LST-DATE();
  APO04W1.FAPO-BENEFIT-MTH-END-DT = AIN49W.WS-LAST-DATE;

  AIN49W.WS-TEMP-DATE = AIN49W.WS-REFERAL-DATE;
  AIN49W.WS-TEMP-MM-NUM = AIN49W.WS-TEMP-MM-NUM + 1;
  if (AIN49W.WS-TEMP-MM-NUM > 12)
    AIN49W.WS-TEMP-MM = "01";
    AIN49W.WS-TEMP-CCYY-NUM = AIN49W.WS-TEMP-CCYY-NUM + 1;
  end
  APO04W1.FAPO-NEXT-MTH-BEG-DT = AIN49W.WS-TEMP-DATE;

  AIN49W.WS-TEMP-DATE = AIN49W.WS-REFERAL-DATE;
  AIN49P9-LAST-DATE();
  APO04W1.FAPO-PREV-MTH-END-DT = AIN49W.WS-LAST-DATE;

  /*  */
  APO04W1.FAPO-BNFT-AMT = 0;
  APO04W1.FAPO-PGM-TYPE = "CW";
  if (SR-Q-DCF-REC.D-NEW-LAYOUT-FLAG == " ")
    APO04W1.FAPO-ELIG-CD = SR-Q-DCF-REC.D-MEMB-MA-ELIG-CODE;
  else
    APO04W1.FAPO-ELIG-CD = AIN49W3.RPT-ELIG-CD;
  end
  /*  */
  call "APO30A" (VDBCONTROL, VMESSAGE, APO04W1) {isNoRefresh = yes};

  /* ----------------------PTR 4635 END--------------------------------*/
end // end AIN49P9-REF-PRCS


// DERIVE REJECTION REASON
Function AIN49P9-REJ-RSN()
  /* ----------------changes due to PTR 5492 Begin -----------*/
  /* the reasons for rejection are derived in a seperate para*/
  /*  */
  if (AIN49W.WS-REJECT-RSN == "NM") /* name mismatch*/
    SR-Q-01F-REC.AIN49A-01-RSN = "NM";
  else
    if (AIN49W.WS-REJECT-RSN == "HM") /* HOH Mismatch*/
      SR-Q-01F-REC.AIN49A-01-RSN = "HM";
    else
      if (AIN49W.WS-REJECT-RSN == "DP") /* Duplicate record mismatch*/
        SR-Q-01F-REC.AIN49A-01-RSN = "DP";
      else
        if (AIN49W.WS-REJECT-RSN == "AM") /* Aid code mismatch*/
          SR-Q-01F-REC.AIN49A-01-RSN = "AM";
        else
          if (AIN49W.WS-REJECT-RSN == "EM") /* Eligibility code mismatch*/
            SR-Q-01F-REC.AIN49A-01-RSN = "EM";
          else
            if (AIN49W.WS-REJECT-RSN == "OM") /* office code mismatch*/
              SR-Q-01F-REC.AIN49A-01-RSN = "OM";
            else
              if (AIN49W.WS-REJECT-RSN == "CM") /* county code mismatch*/
                SR-Q-01F-REC.AIN49A-01-RSN = "CM";
              else
  /* ------------------------PTR 7458 BEGIN------------------------------*/
                if (AIN49W.WS-REJECT-RSN == "SM") /* SSN MISMATCH*/
                  SR-Q-01F-REC.AIN49A-01-RSN = "SM";
                else
  /* ------------------------PTR 7458 END--------------------------------*/
                  if (AIN49W.WS-REJECT-RSN == "IS") /* INVALID SSN*/
                    SR-Q-01F-REC.AIN49A-01-RSN = "IS";
                  else
  /* -----------------PTR 8170 BEGIN--------------------------------*/
                    if (AIN49W.WS-REJECT-RSN == "IC") /* INVALID CASE ID*/
                      SR-Q-01F-REC.AIN49A-01-RSN = "IC";
                    else
                      if (AIN49W.WS-REJECT-RSN == "IG") /* INVALID CASE ID*/
                        SR-Q-01F-REC.AIN49A-01-RSN = "IG";
  /* -----------------PTR 8170 END----------------------------------*/
                      else
  /* -----------------PTR 12899 BEGIN--------------------------------*/
                        if (AIN49W.WS-REJECT-RSN == "IP")
                          SR-Q-01F-REC.AIN49A-01-RSN = "IP";
  /* CHANGES DUE TO WI# 15289 - BEGIN;*/
                        else
                          if (AIN49W.WS-REJECT-RSN == "CC")
                            SR-Q-01F-REC.AIN49A-01-RSN = "CC";
  /* CHANGES DUE TO WI# 15289 - END;*/
                          else
                            if (AIN49W.WS-REJECT-RSN == "DB")
  /* CHANGES DUE TO WI# 25430 - FOR NEW RECORD IF SSN MATCHES AND DOB*/
  /* DOESN'T MATCH -*/
                              SR-Q-01F-REC.AIN49A-01-RSN = "DB";

                            end
                          end
                        end
                      end
  /* -----------------PTR 12899 END ---------------------------------*/
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  if (AIN49W.WS-REJECT-RSN == "IT") /* INVALID TERMINATION CODE*/
    SR-Q-01F-REC.AIN49A-01-RSN = "IT";
  else
    if (AIN49W.WS-REJECT-RSN == "ID") /* INVALID DENIAL CODE*/
      SR-Q-01F-REC.AIN49A-01-RSN = "ID";
    else
      if (AIN49W.WS-REJECT-RSN == "PP") /* PROOF OF PRIOR MED EXPENCE NOT 'Y'*/
        SR-Q-01F-REC.AIN49A-01-RSN = "PP";
      else
        if (AIN49W.WS-REJECT-RSN == "CA")
                                   /* CITIZENSHIP, ALIEN, AIDCODE MISMATCH*/
          SR-Q-01F-REC.AIN49A-01-RSN = "CA";
        end
      end
    end
  end
  /* PTR 5492 END*/
end // end AIN49P9-REJ-RSN


// READ UNEARNED INCOME DETAIL
Function AIN49P9-REP-U01()
  VDBCONTROL.UPROC-NM = "AIN49P9-REP-U01";
  VDBCONTROL.UPROC-OPT = "REPLACE";
  VDBCONTROL.UPROC-OBJ = "H2-UERND-INCM-DTL";
  VDBCOMMON.USQLREC = "H2-UERND-INCM-DTL";

  call "DATEAPP" (GDW, VDBCONTROL, VMESSAGE) {isNoRefresh = yes};
  try
    replace H2-UERND-INCM-DTL
      with #sql{
         update TWNUERND_INCM_DTL
         set RSDI_CLM_NUM=:RSDI-CLM-NUM,
            UERND_INC_AMT=:UERND-INC-AMT,
            CHNG_ENTRY_DT=:GDW.DTCD
      }
      from AIN49P9-READ-S09_RSI01 ;
  end
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-REP-U01


// READ FAM ALTERNATE PAYEE
Function AIN49P9-REP-U03()
  VDBCONTROL.UPROC-NM = "AIN49P9-REP-U03";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-FAM-ALT-PAYEE";
  VDBCOMMON.USQLREC = "H2-FAM-ALT-PAYEE";
  try
    execute update 
      #sql{
        UPDATE
          twnfam_alt_payee T1
        SET
            HOUSE_NMB = :HOUSE-NMB ,
            STR_DIR   = :STR-DIR ,
            STR_NM    = :STR-NM,
            STR_TYPE  = :STR-TYPE,
            APT_NMB   = :APT-NMB,
            OTH_ADDR  = :OTH-ADDR,
            CITY      = :CITY,
            ST_CD     = :ST-CD,
            ZIP_CD    = :ZIP-CD,
            PHN_NMB   = :PHN-NMB,
            ALT_PYE_LST_NM = :ALT-PYE-LST-NM,
            ALT_PYE_FRST_NM = :ALT-PYE-FRST-NM,
            ALT_PYE_MID_NM = :ALT-PYE-MID-NM
        WHERE
             ICI = :ICI
        AND  EFF_TO_DT >= :EFF-TO-DT
        AND  ALT_PYE_TYP = :ALT-PYE-TYP
      }
      for H2-FAM-ALT-PAYEE ; // model = update
  end
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-REP-U03


// READ PERSON HISTORY
Function AIN49P9-REP-U05()
  VDBCONTROL.UPROC-NM = "AIN49P9-REP-U05";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-PERSON-HSTRY";
  VDBCOMMON.USQLREC = "H2-PERSON-HSTRY";
  try
    execute update 
      #sql{
        UPDATE
          TWNPERSON_HSTRY T1
        SET
          US_CTZN_IND=:US-CTZN-IND
        WHERE
             UPI = :UPI
        AND  PRD_END_DT >= :PRD-END-DT
      }
      for H2-PERSON-HSTRY ; // model = update
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-REP-U05


// Process Retro Grants
Function AIN49P9-RETRO-GRNT()
  /* The following code was added due to WI# 13992*/
  /* This process is used to collect multiple retro grants.*/
  /* Whenever AIN49P9-CRT-UNIN detect a retro grant (prior to the*/
  /* date the case was converted) it call this process.*/

  AIN49W9.WS-9-GRNT-DT[WS-INDEX-1] = SR-Q-DCF-REC.D-BENEFIT-DATE[WS-INDEX];

  AIN49W9.WS-9-GRNT-AMT[WS-INDEX-1] = SR-Q-DCF-REC.D-CHECK-AMOUNT[WS-INDEX];

  AIN49W9.WS-INDEX-1 = AIN49W9.WS-INDEX-1 + 1;
end // end AIN49P9-RETRO-GRNT


// READ CMH / FCE / PER
Function AIN49P9-SCAN-S02()
  VDBCONTROL.UPROC-NM = "AIN49P9-SCAN-S02";
  VDBCONTROL.UPROC-OPT = "SCAN";
  VDBCONTROL.UPROC-OBJ = "H2-3-CMH-FCE-PER";
  VDBCOMMON.USQLREC = "H2-3-CMH-FCE-PER";
  try
    get next H2-3-CMH-FCE-PER ;
  end
end // end AIN49P9-SCAN-S02


// READ UNERANED INCOME DETAIL
Function AIN49P9-SCAN-S09()
  VDBCONTROL.UPROC-NM = "AIN49P9-SCAN-S09";
  VDBCONTROL.UPROC-OPT = "SCAN";
  VDBCONTROL.UPROC-OBJ = "H2-UERND-INCM-DTL";
  VDBCOMMON.USQLREC = "H2-UERND-INCM-DTL";
  try
    get next H2-UERND-INCM-DTL ;
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  AIN49W5.WS-SQCOD = sysVar.sqlData.sqlcode;
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-SCAN-S09


// READ IVD CASE
Function AIN49P9-SCAN-S10()
  VDBCONTROL.UPROC-NM = "AIN49P9-SCAN-S10";
  VDBCONTROL.UPROC-OPT = "SCAN";
  VDBCONTROL.UPROC-OBJ = "H2-IVD-CASE";
  VDBCOMMON.USQLREC = "H2-IVD-CASE";
  try
    get next H2-IVD-CASE ;
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  AIN49W5.WS-SQCOD = sysVar.sqlData.sqlcode;
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-SCAN-S10


// READ IVD CASE
Function AIN49P9-SCAN-S11()
  VDBCONTROL.UPROC-NM = "AIN49P9-SCAN-S11";
  VDBCONTROL.UPROC-OPT = "SCAN";
  VDBCONTROL.UPROC-OBJ = "H2-IVD-CASE";
  VDBCOMMON.USQLREC = "H2-IVD-CASE";
  try
    get next H2-IVD-CASE ;
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  AIN49W5.WS-SQCOD = sysVar.sqlData.sqlcode;
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-SCAN-S11


// READ IVD CASE CHILD
Function AIN49P9-SCAN-S12()
  VDBCONTROL.UPROC-NM = "AIN49P9-SCAN-S12";
  VDBCONTROL.UPROC-OPT = "SCAN";
  VDBCONTROL.UPROC-OBJ = "H2-IVD-CASE-CHILD";
  VDBCOMMON.USQLREC = "H2-IVD-CASE-CHILD";
  try
    get next H2-IVD-CASE-CHILD ;
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  AIN49W5.WS-SQCOD = sysVar.sqlData.sqlcode;
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-SCAN-S12


// READ CASE MEMBER HISTORY
Function AIN49P9-SCAN-S16()
  VDBCONTROL.UPROC-NM = "AIN49P9-SCAN-S16";
  VDBCONTROL.UPROC-OPT = "SCAN";
  VDBCONTROL.UPROC-OBJ = "H2-CASE-MEMBER-HST";
  VDBCOMMON.USQLREC = "H2-CASE-MEMBER-HST";
  try
    get next H2-CASE-MEMBER-HST ;
  end
end // end AIN49P9-SCAN-S16


// READ FAM NCP
Function AIN49P9-SCAN-S26()
  VDBCONTROL.UPROC-NM = "AIN49P9-SCAN-S26";
  VDBCONTROL.UPROC-OPT = "SCAN";
  VDBCONTROL.UPROC-OBJ = "H2-FAM-NCP";
  VDBCOMMON.USQLREC = "H2-FAM-NCP";
  /*  */
  try
    get next H2-FAM-NCP ;
  end
end // end AIN49P9-SCAN-S26


// scans person_adrs_hst
Function AIN49P9-SCAN-S28()
  VDBCONTROL.UPROC-NM = "AIN49P9-SCAN-S28";
  VDBCONTROL.UPROC-OPT = "SCAN";
  VDBCONTROL.UPROC-OBJ = "H2-PERSON-ADRS-HST";
  VDBCOMMON.USQLREC = "H2-PERSON-ADRS-HST";
  try
    get next H2-PERSON-ADRS-HST ;
  end
end // end AIN49P9-SCAN-S28


// PROCESS TO GET PRGM-CASE-STS
Function AIN49P9-SCAN-S29()
  try
    get next H2-PRGM-CASE-HSTRY ;
  end

  VDBCONTROL.UPROC-OBJ = "H2-PRGM-CASE-HSTRY";
  VDBCONTROL.UPROC-NM = "AIN49P9-SCAN-S29";
  VDBCONTROL.UPROC-OPT = "SCAN"; /* OC-NM;*/
  VDBCOMMON.USQLREC = "H2-PRGM-CASE-HSTRY";
end // end AIN49P9-SCAN-S29


// READ FCE / CMH / PER
Function AIN49P9-SETINQ-S02()
  VDBCONTROL.UPROC-NM = "AIN49P9-SETINQ-S02";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  /*  */
  /* ---------PTR # AIN49001 CHANGE BEGINS--------------*/
  /*  */
  VDBCONTROL.UPROC-OBJ = "H2-3-CMH-FCE-PER";
  VDBCOMMON.USQLREC = "H2-3-CMH-FCE-PER";
  /*  */
  /* ---------PTR # AIN49001 CHANGE ENDS----------------*/
  /*  */
  try
    open AIN49P9-SETINQ-S02_RSI01
      with #sql{
        select T1.UPI, T1.ICI,
         --
         -----------PTR # AIN49001 CHANGE BEGINS--------------*/
         --
         --***********************CHANGES DUE TO PTR#12866*************START
         T2.LST_NM, T2.FRST_NM, T2.MID_NM, T2.MODFR, T2.SSN ,
         --************************************************************END
            T2.IVA_CASE_MBR_FG,T2.NCP_FG,T2.CST_FG,T2.CHD_FG
        from twncase_member_hst T1,
             twnperson T2,
             twnfam_case T3
        WHERE T3.IVE_CASE_ID = :IVE-CASE-ID AND
        T3.ICI = T1.ICI AND
        T3.HOH_UPI = T1.UPI AND
        T1.UPI = T2.UPI
         --
         -----------PTR # AIN49001 CHANGE ENDS----------------*/
         --** INSERT ORDER BY CLAUSE HERE **
      }      
      into UPI, ICI, LST-NM, FRST-NM, MID-NM, MODFR, SSN,
           IVA-CASE-MBR-FG, NCP-FG, CST-FG, CHD-FG
      for H2-3-CMH-FCE-PER ;
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-SETINQ-S02


// READ FAM NCP
Function AIN49P9-SETINQ-S26()

  VDBCONTROL.UPROC-NM = "AIN49P9-READ-S26";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  VDBCONTROL.UPROC-OBJ = "H2-FAM-NCP";
  VDBCOMMON.USQLREC = "H2-FAM-NCP";
  /*  */
  try
    open AIN49P9-SETINQ-S26_RSI01
      with #sql{
        select NCP_UPI,
          CASE_SUFX,
          RFRL_STS
        from TWNFAM_NCP T1
        WHERE
              ICI = :ICI
        AND   PRD_BEG_DT <= :PRD-BEG-DT
        AND   PRD_END_DT >= :PRD-BEG-DT
         --** INSERT ORDER BY CLAUSE HERE **
      }      
      into NCP-UPI,
           CASE-SUFX,
           RFRL-STS
      for H2-FAM-NCP ;
  end
end // end AIN49P9-SETINQ-S26


// Sets cursor for pah
Function AIN49P9-SETINQ-S28()
  VDBCONTROL.UPROC-NM = "AIN49P9-SETINQ-S28";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  VDBCONTROL.UPROC-OBJ = "H2-PERSON-ADRS-HST";
  VDBCOMMON.USQLREC = "H2-PERSON-ADRS-HST";
  try
    open AIN49P9-SETINQ-S28_RSI01
      with #sql{
        select UPI, PRD_BEG_TS, ADR_TYPE, ADR_STS, ADR_SRC,
          ZIP_CD, ST_CD, CITY, OTH_ADDR, APT_NMB,
          STR_TYPE, STR_NM, STR_DIR, HOUSE_NMB, CNTRY_CD,
          ADR_VRFD_BY, ADR_VRFD_DT, FIPS_CD, AS_OF_DT,
          PRD_END_DT, SYS_ID, ADR_VRFD_CD,
          ADR_STS_EFF_DT, NOTE, NOMADS_USRID, INST_NM,
          RSDN_CNTY_CD, OOS_SSP_VRFD_IND,
          GENRL_DLVRY_IND, FIPS_CD_SUFX, INTRFC_SSN
        from TWNPERSON_ADRS_HST T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE PRD_BEG_TS <= :PRD-BEG-TS
        AND PRD_END_DT >= :PRD-END-DT
        AND ADR_TYPE in ('CM','CR')
        AND UPI = :UPI
         --** INSERT ORDER BY CLAUSE HERE **
      }      
      into UPI, PRD-BEG-TS, ADR-TYPE, ADR-STS, ADR-SRC,
           ZIP-CD, ST-CD, CITY, OTH-ADDR, APT-NMB,
           STR-TYPE, STR-NM, STR-DIR, HOUSE-NMB, CNTRY-CD,
           ADR-VRFD-BY, ADR-VRFD-DT, FIPS-CD, AS-OF-DT,
           PRD-END-DT, SYS-ID, ADR-VRFD-CD,
           ADR-STS-EFF-DT, NOTE, NOMADS-USRID, INST-NM,
           RSDN-CNTY-CD, OOS-SSP-VRFD-IND,
           GENRL-DLVRY-IND, FIPS-CD-SUFX, INTRFC-SSN
      for H2-PERSON-ADRS-HST ;
  end
end // end AIN49P9-SETINQ-S28


// PROCESS TO SET CURSOR S29
Function AIN49P9-SETINQ-S29()
  try
    open AIN49P9-SETINQ-S29_RSI01
      with #sql{
        select PRGM_CASE_STS
        from TWNPRGM_CASE_HSTRY T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE T1.ICI = :ICI
        AND T1.PRD_END_DT >= :PRD-END-DT
        AND T1.PRD_BEG_DT <= :PRD-END-DT
         --** INSERT ORDER BY CLAUSE HERE **
      }      
      into PRGM-CASE-STS
      for H2-PRGM-CASE-HSTRY ;
  end

  WDB00PI();
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN49A";
  VDBCONTROL.UPROC-OBJ = "H2-PRGM-CASE-HSTRY";
  VDBCONTROL.UPROC-NM = "AIN49P9-SETINQ-S29";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  VDBCOMMON.USQLREC = "H2-PRGM-CASE-HSTRY";

  /*  */
end // end AIN49P9-SETINQ-S29


// SPLIT CASELOAD CASE HISTORY
Function AIN49P9-SPLIT-CCH()
  /* -------------------- PTR 4646 BEGIN --------------------*/
  /* SPLI-DO-CASELOAD-CASE-HISTORY*/
  /* the record for a given ICI is accessed. The period end date for the*/
  /* record accessed is updated to the last date of the previous month*/
  /* using WS-MONTH-RUN as the base. A new record is inserted for the*/
  /* ICI with the changed districi office and "XBW01" caseload.*/
  /*  */
  H2-CASLD-CASE-HST.ICI = AIN49W.WS-IVA-ICI;
  H2-CASLD-CASE-HST.PRD-BEG-DT = AIN49W.WS-PROCESS-DT;
  AIN49P9-READ-S25();
  VDBCOMMON.UNRF = "Y";
  /*  */
  WDB00PE-SQLERR();
  /* Check for fatal errors*/
  /*  */
  if (VDBCONTROL.URC >= 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
  /* if record found*/
  if (sysVar.sqlData.sqlcode == 0)
    if (H2-CASLD-CASE-HST.PRD-END-DT != "9999-12-31")
      AIN49P9-ALRT-WRK();
    else
  /* ------------------------PTR 8170 - 8 BEGIN---------------------------*/
      if (H2-CASLD-CASE-HST.PRD-BEG-DT == AIN49W.WS-PROCESS-DT)
        H2-CASLD-CASE-HST.ICI = AIN49W.WS-IVA-ICI;
        H2-CASLD-CASE-HST.PRD-BEG-DT = AIN49W.WS-PROCESS-DT;
        H2-CASLD-CASE-HST.PRD-END-DT = AIN49W.WS-PROCESS-DT;

        WDB00PI();
        AIN49P9-DEL-D02();
        VDBCOMMON.UNRF = "Y";
        VDBCOMMON.UDUP = "N";
        WDB00PE-SQLERR();
        if (VDBCONTROL.URC > 104)
          WCM00P2-TO-CEP01A();
        end

        H2-CASELD-DEBTLD.OFC-CD = SR-Q-DCF-REC.D-APPL-DISTRICT-OFFICE;
        H2-CASELD-DEBTLD.PRGM-OFC-TYPE = "A";
        AIN49W.WS-APPL-CASLD-ID = "XBW01";
        H2-CASELD-DEBTLD.SPRVS-UNIT = AIN49W.WS-SPRVS-UNIT;
        H2-CASELD-DEBTLD.PSN-NMB = AIN49W.WS-PSN-NMB;
        H2-CASELD-DEBTLD.FUNC-AREA-CD = AIN49W.WS-FUNC-AREA-CODE;
        H2-CASELD-DEBTLD.WRKR-TYPE = AIN49W.WS-WRKR-TYPE;

        WDB00PI();
        VDBCONTROL.UACCTYP = "R";
        VDBCOMMON.UAPPLNAM = "AIN49A";
        AIN49P9-READ-S20();
        VDBCOMMON.UNRF = "Y";
        VDBCOMMON.UDUP = "N";
        WDB00PE-SQLERR();
  /*  */
        if (VDBCONTROL.URC >= 104)
          WCM00P2-TO-CEP01A();
        end

        H2-CASLD-CASE-HST.ICI = AIN49W.WS-IVA-ICI;
        H2-CASLD-CASE-HST.OFC-CD = SR-Q-DCF-REC.D-APPL-DISTRICT-OFFICE;
        H2-CASLD-CASE-HST.SPRVS-UNIT = AIN49W.WS-SPRVS-UNIT;
        H2-CASLD-CASE-HST.PSN-NMB = AIN49W.WS-PSN-NMB;
        H2-CASLD-CASE-HST.FUNC-AREA-CD = AIN49W.WS-FUNC-AREA-CODE;
        H2-CASLD-CASE-HST.WRKR-TYPE = AIN49W.WS-WRKR-TYPE;
  /*  */
  /* Changes due to PTR 7826 - 13*/
        H2-CASLD-CASE-HST.PRGM-OFC-TYPE = "A";
  /*  */
  /* the caseload effective date read from the caseload debtload table*/
  /* is moved to the caseload effective date of TWNCASLD CASE HST*/
  /*  */
        H2-CASLD-CASE-HST.CASLD-EFF-DT = H2-CASELD-DEBTLD.CASLD-EFF-DT;
        H2-CASLD-CASE-HST.PRD-BEG-DT = AIN49W.WS-PROCESS-DT;
        H2-CASLD-CASE-HST.PRD-END-DT = "9999-12-31";

        WDB00PI();
        AIN49P9-INS-I20();
        VDBCOMMON.UNRF = "N";
        VDBCOMMON.UDUP = "Y";
        WDB00PE-SQLERR();
  /*  */
        if (VDBCONTROL.URC >= 104)
          WCM00P2-TO-CEP01A();
        end

      else
  /*  */
  /* all the values read from the SQL S25 are stored in the working storage*/
  /* variables. The PRD-END-DATE only is updated with the last date the*/
  /* previous month using WS-process-DT as base.*/
  /*  */
        P-DATE-REC2.C-INPUT-DATE = AIN49W.WS-PROCESS-DT;
        P-DATE-REC2.N-SUB-DAYS = 1;
        call "DATES1A" (VDBCONTROL, VMESSAGE, P-DATE-REC2) {isNoRefresh = yes};

        H2-CASLD-CASE-HST.PRD-END-DT = P-DATE-REC2.C-OUTPUT-DATE;
        H2-CASLD-CASE-HST.ICI = AIN49W.WS-IVA-ICI;
        H2-CASLD-CASE-HST.PRD-BEG-DT = AIN49W.WS-PROCESS-DT;
        WDB00PI();
        AIN49P9-UPD-U20();
  /* Set the value for NRF flag*/
  /*  */
        VDBCOMMON.UNRF = "Y";
  /*  */
        WDB00PE-SQLERR();
  /*  */
  /* Check for fatal errors*/
  /*  */
        if (VDBCONTROL.URC >= 104)
          WCM00P2-TO-CEP01A();
        end
  /*  */
  /* the case is assigned to caseload "XBW01" in the new districi office*/
  /*  */
        H2-CASLD-CASE-HST.ICI = AIN49W.WS-IVA-ICI;
        AIN49W.WS-APPL-CASLD-ID = "XBW01";
        H2-CASLD-CASE-HST.OFC-CD = SR-Q-DCF-REC.D-APPL-DISTRICT-OFFICE;
        H2-CASLD-CASE-HST.PRGM-OFC-TYPE = "A";
        H2-CASLD-CASE-HST.SPRVS-UNIT = AIN49W.WS-SPRVS-UNIT;
        H2-CASLD-CASE-HST.PSN-NMB = AIN49W.WS-PSN-NMB;
        H2-CASLD-CASE-HST.FUNC-AREA-CD = AIN49W.WS-FUNC-AREA-CODE;
        H2-CASLD-CASE-HST.WRKR-TYPE = AIN49W.WS-WRKR-TYPE;
  /*  */
  /* the caseload effective date read from the caseload debtload table is*/
  /* moved to the caseload effective date of TWNCASLD-CASE-HST*/
  /*  */
        AIN49W.WS-APPL-CASLD-ID = "XBW01";
        H2-CASELD-DEBTLD.SPRVS-UNIT = AIN49W.WS-SPRVS-UNIT;
        H2-CASELD-DEBTLD.PSN-NMB = AIN49W.WS-PSN-NMB;
        H2-CASELD-DEBTLD.FUNC-AREA-CD = AIN49W.WS-FUNC-AREA-CODE;
        H2-CASELD-DEBTLD.WRKR-TYPE = AIN49W.WS-WRKR-TYPE;

        WDB00PI();
        VDBCONTROL.UACCTYP = "R";
        VDBCOMMON.UAPPLNAM = "AIN49A";
        AIN49P9-READ-S20();
        VDBCOMMON.UNRF = "Y";
        VDBCOMMON.UDUP = "N";
        WDB00PE-SQLERR();
  /*  */
        if (VDBCONTROL.URC >= 104)
          WCM00P2-TO-CEP01A();
        end

        H2-CASLD-CASE-HST.CASLD-EFF-DT = H2-CASELD-DEBTLD.CASLD-EFF-DT;
        H2-CASLD-CASE-HST.PRD-BEG-DT = AIN49W.WS-PROCESS-DT;
        H2-CASLD-CASE-HST.PRD-END-DT = "9999-12-31";
        AIN49P9-INS-I20();
  /* Set the value for NRF flag*/
  /*  */
        VDBCOMMON.UNRF = "Y";
  /*  */
        WDB00PE-SQLERR();
  /*  */
  /* Check for fatal errors*/
  /*  */
        if (VDBCONTROL.URC >= 104)
          WCM00P2-TO-CEP01A();
        end
  /*  */
      end
    end
  /* ----------------------------PTR 8170 -8 END-------------------------*/
  else
    AIN49P9-ALRT-WRK();
  end

  /* END SPLIT-DO-CASELOAD-CASE-HISTORY*/
  /* --------------------------------PTR 4646 END ----------------------*/
end // end AIN49P9-SPLIT-CCH


// SPLIT IVD ALTERNATE PAYEE
Function AIN49P9-SPLIT-DAP()
  /* -----------------------------------------------------------------------*/
  /* this process checks if the case NCPs which have already been refered*/
  /* to IV-D i.e. cases exist for the NCP's in IV-D. If so, updates*/
  /* alternate payee details for all relevant IV-D cases.*/
  /*  */
  /* Instead the IV-D Payee infomation being place into the IVD alt payee*/
  /* table, it will now be placed in the TWNPERSON_ADRS_HST table.*/
  /* -----------------------------------------------------------------------*/

  H2-FAM-NCP.ICI = AIN49W.WS-IVA-ICI;
  H2-FAM-NCP.PRD-BEG-DT = AIN49W.WS-PROCESS-DT;

  WDB00PI();
  AIN49P9-SETINQ-S26(); /* TWNFAM_NCP*/
  VDBCOMMON.UNRF = "Y";

  WDB00PE-SQLERR();

  if (VDBCONTROL.URC >= 104)
    WCM00P2-TO-CEP01A();
  end

  AIN49P9-SCAN-S26();
  VDBCOMMON.UNRF = "Y";

  WDB00PE-SQLERR();

  if (VDBCONTROL.URC >= 104)
    WCM00P2-TO-CEP01A();
  end

  while (sysVar.sqlData.sqlcode == 0)
    if (H2-FAM-NCP.RFRL-STS == "A"
     || H2-FAM-NCP.RFRL-STS == "C"
     || H2-FAM-NCP.RFRL-STS == "G")
  /* The case has already been referred. The TWNPERSON_ADRS_HST table*/
  /* is read to determine if the record already exists.*/
  /* If the record exists, the IV-D worker is alerted, else a record is*/
  /* inserted into the TWNPERSON_ADRS_HST table.*/
  /*  */
      AIN49W9.WS-END-TS-DT = AIN49W.WS-PROCESS-DT;
      AIN49W9.WS-END-TS-TM = "-23.59.59.999999";

      H2-PERSON-ADRS-HST.UPI = AIN49W.WS-IVA-UPI;
      H2-PERSON-ADRS-HST.PRD-BEG-TS = AIN49W9.WS-END-TS;
      H2-PERSON-ADRS-HST.PRD-END-DT = AIN49W.WS-PROCESS-DT;

      WDB00PI();
      AIN49P9-SETINQ-S28(); /* TWNPERSON_ADRS_HST*/
      VDBCOMMON.UNRF = "Y";

      WDB00PE-SQLERR();

      if (VDBCONTROL.URC >= 104)
        WCM00P2-TO-CEP01A();
      end

      AIN49P9-SCAN-S28(); /* FETCH THE RECORD*/
      if (VDBCONTROL.URC >= 104)
        WCM00P2-TO-CEP01A();
      end

      if (sysVar.sqlData.sqlcode == 0)
        while (sysVar.sqlData.sqlcode == 0)
          if (H2-PERSON-ADRS-HST.ADR-TYPE == "CM")
            H2-PERSON-ADRS-HST.ADR-TYPE = "MA";
            AIN49W9.WS-ADR-TYPE = "CM";
          else
            if (H2-PERSON-ADRS-HST.ADR-TYPE == "CR")
              H2-PERSON-ADRS-HST.ADR-TYPE = "RA";
              AIN49W9.WS-ADR-TYPE = "CR";
            end
          end
          P-DATE-REC2.C-INPUT-DATE = AIN49W.WS-PROCESS-DT;
          P-DATE-REC2.N-SUB-DAYS = 1;
          call "DATES1A" (VDBCONTROL, VMESSAGE, P-DATE-REC2) {isNoRefresh = yes};

          H2-PERSON-ADRS-HST.PRD-END-DT = P-DATE-REC2.C-OUTPUT-DATE;
          H2-PERSON-ADRS-HST.UPI = WS-IVA-UPI;
          H2-PERSON-ADRS-HST.LAST-UPD-DT = GDW.DTCD;

          AIN49P9-UPD-PAH();

          AIN49P9-SCAN-S28();
          if (VDBCONTROL.URC >= 104)
            WCM00P2-TO-CEP01A();
          end
        end

        H2-PERSON-ADRS-HST.UPI = WS-IVA-UPI;
        AIN49P9-INSERT-IVD(); /* perfs AIN49P9-INS-I23 -- PAH*/

        AIN49W.WS-ALERT-IVD-ID = 390046;
        AIN49P9-ALRT-IVD();
      else
        if (SR-Q-DCF-REC.D-ADDR-CHANGED == "Y"
         && SR-Q-DCF-REC.D-ALTP-CHANGED == "Y")

          H2-PERSON-ADRS-HST.UPI = WS-IVA-UPI;
          AIN49P9-INSERT-IVD();
        else
  /* the IVD worker is alerted*/
          AIN49W.WS-ALERT-IVD-ID = 390046;
          AIN49P9-ALRT-IVD();
        end
      end

      return;

    end
    AIN49P9-SCAN-S26();
    VDBCOMMON.UNRF = "Y";

    WDB00PE-SQLERR();

    if (VDBCONTROL.URC >= 104)
      WCM00P2-TO-CEP01A();
    end
  end
end // end AIN49P9-SPLIT-DAP


// SPLIT FAME CASE HISTORY
Function AIN49P9-SPLIT-FCH()
  /* ---------------------- PTR 5485 BEGIN --------------------------*/
  /* if the resident county code changes, the TWNFAM CASE HSTRY is split*/
  /*  */
  /* SPLIT FAME CASE HISTORY*/
  /*  */
  set H2-FAM-CASE-HSTRY empty;
  H2-FAM-CASE-HSTRY.ICI = H2-3-CMH-FCE-PER.ICI;
  H2-FAM-CASE-HSTRY.PRD-BEG-DT = AIN49W.WS-PROCESS-DT;

  WDB00PI();
  AIN49P9-READ-S24();
  /*  */
  VDBCOMMON.UDUP = "N";
  /* Perform the process for sql error processing*/
  WDB00PE-SQLERR();
  /* Check for fatal errors*/
  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
  if (sysVar.sqlData.sqlcode == 0)
  /* -------------------PTR 8170 - 13 BEGIN-------------------------*/
    if (H2-FAM-CASE-HSTRY.PRD-BEG-DT != AIN49W.WS-FIRST-DATE)
      AIN49W.WS-PRD-END-DT = H2-FAM-CASE-HSTRY.PRD-END-DT;
      AIN49W.WS-TEMP-DATE = AIN49W.WS-PROCESS-DT;
      AIN49P9-LAST-DATE();
      H2-FAM-CASE-HSTRY.PRD-END-DT = AIN49W.WS-LAST-DATE;
  /* -----------------------------PTR 4645 END--------------------------*/

      WDB00PI();
      AIN49P9-UPD-U19();
  /*  */
      VDBCOMMON.UDUP = "N";
  /* Perform the process for sql error processing*/
      WDB00PE-SQLERR();
  /* Check for fatal errors*/
      if (VDBCONTROL.URC > 104)
        WCM00P2-TO-CEP01A();
      end
  /*  */
      if (AIN49W.WS-PRD-END-DT == "9999-12-31")
        H2-FAM-CASE-HSTRY.ICI = H2-3-CMH-FCE-PER.ICI;
        H2-FAM-CASE-HSTRY.PRD-BEG-DT = AIN49W.WS-FIRST-DATE;
        H2-FAM-CASE-HSTRY.PRD-END-DT = "9999-12-31";
        H2-FAM-CASE-HSTRY.DCFS-OFC-CNTY-CD = SR-Q-DCF-REC.D-ADDR-RESIDENT-COUNTY;

        WDB00PI();
        AIN49P9-INS-I19();
  /*  */
        VDBCOMMON.UDUP = "N";
  /* Perform the process for sql error processing*/
        WDB00PE-SQLERR();
  /* Check for fatal errors*/
        if (VDBCONTROL.URC > 104)
          WCM00P2-TO-CEP01A();
        end
      else
        AIN49W.WS-TEMP-DATE = AIN49W.WS-PROCESS-DT;
        AIN49W.WS-TEMP-DD = "01";
        H2-FAM-CASE-HSTRY.PRD-BEG-DT = AIN49W.WS-TEMP-DATE;
        H2-FAM-CASE-HSTRY.PRD-END-DT = AIN49W.WS-PRD-END-DT;
        H2-FAM-CASE-HSTRY.DCFS-OFC-CNTY-CD = SR-Q-DCF-REC.D-ADDR-RESIDENT-COUNTY;
        WDB00PI();
        AIN49P9-INS-I19();
  /*  */
        VDBCOMMON.UDUP = "N";
  /* Perform the process for sql error processing*/
        WDB00PE-SQLERR();
  /* Check for fatal errors*/
        if (VDBCONTROL.URC > 104)
          WCM00P2-TO-CEP01A();
        end
        H2-FAM-CASE-HSTRY.DCFS-OFC-CNTY-CD = SR-Q-DCF-REC.D-ADDR-RESIDENT-COUNTY;
        H2-FAM-CASE-HSTRY.PRD-END-DT = AIN49W.WS-PROCESS-DT;
        WDB00PI();
        AIN49P9-UPD-U24();
  /*  */
        VDBCOMMON.UDUP = "N";
  /* Perform the process for sql error processing*/
        WDB00PE-SQLERR();
  /* Check for fatal errors*/
        if (VDBCONTROL.URC > 104)
          WCM00P2-TO-CEP01A();
        end
      end
    else
      if (H2-FAM-CASE-HSTRY.PRD-BEG-DT == AIN49W.WS-FIRST-DATE)
        H2-FAM-CASE-HSTRY.DCFS-OFC-CNTY-CD = SR-Q-DCF-REC.D-ADDR-RESIDENT-COUNTY;
        H2-FAM-CASE-HSTRY.ICI = H2-3-CMH-FCE-PER.ICI;
        H2-FAM-CASE-HSTRY.PRD-END-DT = AIN49W.WS-PROCESS-DT;
        WDB00PI();
        AIN49P9-UPD-U24();
  /*  */
        VDBCOMMON.UDUP = "N";
  /* Perform the process for sql error processing*/
        WDB00PE-SQLERR();
  /* Check for fatal errors*/
        if (VDBCONTROL.URC > 104)
          WCM00P2-TO-CEP01A();
        end
      end
    end
  end
  /* --------------------------PTR 8170 - 13 END--------------------*/
end // end AIN49P9-SPLIT-FCH


Function AIN49P9-SPLT-REUNI()
  if (H2-REUNIF-DATA.PRD-BEG-DATE == AIN49W.WS-FIRST-DATE)
    if (SR-Q-DCF-REC.D-REUNIF-IND != " ")
      H2-REUNIF-DATA.REUNIF-IND = SR-Q-DCF-REC.D-REUNIF-IND;
    end
    if (SR-Q-DCF-REC.D-REUNIF-START-DATE != " ")
      AIN49W5.WS-DATE3 = SR-Q-DCF-REC.D-REUNIF-START-DATE;
      AIN49W.WS-YY-CC1 = AIN49W5.WS-CC3;
      AIN49W.WS-YY-CC2 = AIN49W5.WS-YY3;
      AIN49W.WS-MM = AIN49W5.WS-MM3;
      AIN49W.WS-DD = AIN49W5.WS-DD3;
      AIN49W.WS-FIL1 = "-";
      AIN49W.WS-FIL2 = "-";
      H2-REUNIF-DATA.REUNIF-START-DATE = AIN49W.WS-DATE;
    end
    if (SR-Q-DCF-REC.D-REUNIF-STOP-DATE != " ")
      AIN49W5.WS-DATE3 = SR-Q-DCF-REC.D-REUNIF-STOP-DATE;
      AIN49W.WS-YY-CC1 = AIN49W5.WS-CC3;
      AIN49W.WS-YY-CC2 = AIN49W5.WS-YY3;
      AIN49W.WS-MM = AIN49W5.WS-MM3;
      AIN49W.WS-DD = AIN49W5.WS-DD3;
      AIN49W.WS-FIL1 = "-";
      AIN49W.WS-FIL2 = "-";
      H2-REUNIF-DATA.REUNIF-STOP-DATE = AIN49W.WS-DATE;
    end
    WDB00PI();
    AIN49P9-UPD-U29();
    VDBCOMMON.UNRF = "Y";
    VDBCOMMON.UDUP = "N";
    WDB00PE-SQLERR();
    if (VDBCONTROL.URC > 104)
      WCM00P2-TO-CEP01A();
    end
  else
    if (H2-REUNIF-DATA.PRD-BEG-DATE < AIN49W.WS-FIRST-DATE)
      AIN49W.WS-TEMP-DATE = AIN49W.WS-CURRENT-DATE;
      AIN49P9-LAST-DATE();
      H2-REUNIF-DATA.PRD-END-DATE = AIN49W.WS-LAST-DATE;
      WDB00PI();
      AIN49P9-UPD-U30();
      VDBCOMMON.UNRF = "Y";
      VDBCOMMON.UDUP = "N";
      WDB00PE-SQLERR();
      if (VDBCONTROL.URC > 104)
        WCM00P2-TO-CEP01A();
      end
      if (SR-Q-DCF-REC.D-RECORD-TYPE == "U")
        H2-REUNIF-DATA.ICI = WS-IVA-ICI;
        H2-REUNIF-DATA.UPI = WS-IVA-UPI;
      else
        if (SR-Q-DCF-REC.D-RECORD-TYPE == "N")
          H2-REUNIF-DATA.UPI = AIN49W.WS-UPI;
          H2-REUNIF-DATA.ICI = AIN49W.WS-ICI;
        end
      end
      AIN49P9-CRT-REUNIF();
    end
  end
end // end AIN49P9-SPLT-REUNI


// UPDATE OF RETRO GRANT DATE
Function AIN49P9-U-NCP-RDT()
  VDBCONTROL.UPROC-NM = "AIN49P9-U-NCP-RDT";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-FAM-NCP";
  VDBCOMMON.USQLREC = "H2-FAM-NCP";
  /*  */
  try
    execute update 
      #sql{
        UPDATE
          TWNFAM_NCP T1
        SET
          RETRO_GRNT_DT = :RETRO-GRNT-DT
        WHERE ICI = :ICI
        AND   PRD_BEG_DT <= :PRD-BEG-DT
        AND   PRD_END_DT >= :PRD-END-DT
      }
      for H2-FAM-NCP ; // model = update
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-U-NCP-RDT


// UPDATE PERSON-ADRS-HST
Function AIN49P9-UPD-PAH()
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U27";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-PERSON";
  VDBCOMMON.USQLREC = "H2-PERSON";
  try
    execute update 
      #sql{
        UPDATE
          TWNPERSON_ADRS_HST T1
        SET
          ADR_TYPE = :ADR-TYPE,
          PRD_END_DT = :PRD-END-DT
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE UPI = :UPI
        AND ADR_TYPE = :AIN49W9.WS-ADR-TYPE
      }
      for H2-PERSON-ADRS-HST ; // model = update
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-UPD-PAH


// UPDATE PERSON-DTLS
Function AIN49P9-UPD-PED()
  WDB00PI();

  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-PED";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-PERSON-DTLS";
  VDBCOMMON.USQLREC = "H2-PERSON-DTLS";
  try
    execute update 
      #sql{
        UPDATE
          TWNPERSON_DTLS T1
        SET
          AGEDOUT_FSTR_CARE = :AGEDOUT-FSTR-CARE
        WHERE UPI = :UPI
         --
      }
      for H2-PERSON-DTLS ; // model = update
  end
  /*  */
  REPP9-SQL-CHKERR();

  /*  */
end // end AIN49P9-UPD-PED


// UPDATE  PERSON
Function AIN49P9-UPD-U04()
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U04";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-PERSON";
  VDBCOMMON.USQLREC = "H2-PERSON";
  /*  */
  try
    execute update 
      #sql{
        UPDATE
          twnperson T1
        SET
          DOB=:DOB,
          ETHNC_CD=:ETHNC-CD,
          HM_PHN_NMB=:HM-PHN-NMB,
          LST_NM=:LST-NM,
          FRST_NM=:FRST-NM,
          MID_NM=:MID-NM,
          SEX_CD=:SEX-CD,
          SSN=:SSN,
          SSN_VRFN_STS_CD=:SSN-VRFN-STS-CD,
          PHONETIC_NM1 = :PHONETIC-NM1,
          PHONETIC_NM2 = :PHONETIC-NM2
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE UPI = :UPI
      }
      for H2-PERSON ; // model = update
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-UPD-U04

/* Begin WI 2445 mt - */
// UPDATE CASE MEMBER HISTORY
Function AIN49P9-UPD-U05()
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U05";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-CASE-MEMBER-HST";
  VDBCOMMON.USQLREC = "H2-CASE-MEMBER-HST";
  try
    execute update 
      #sql{
        UPDATE
          TWNCASE_MEMBER_HST T1
        SET
         --MEDIC_BLNG_SQ_NMB = :MEDIC-BLNG-SQ-NMB,
          --AFDC_ELIG_CD = :AFDC-ELIG-CD,
          --IVE_AID_CD = :IVE-AID-CD,
          --IVE_ELIG_CD = :IVE-ELIG-CD,
          --HH_LEFT_DT = :HH-LEFT-DT,
          PRD_END_DT = :PRD-END-DT
        WHERE
            ICI = :ICI AND
            upi = :UPI AND
         --**
         --*** P-07>Changes due to ptr ain49003 start **********/
          PRD_BEG_DT <= :PRD-BEG-DT AND
          PRD_END_DT >= :PRD-BEG-DT
         --**
         --*** P-07>Changes due to ptr ain49003 end *********/
      }
      for H2-CASE-MEMBER-HST ; // model = update
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-UPD-U05
/* End WI 2445 mt - */

// UPDATE CASE MEMBER HISTORY
Function AIN49P9-UPD-U06()
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U06";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-CASE-MEMBER-HST";
  VDBCOMMON.USQLREC = "H2-CASE-MEMBER-HST";
  try
    execute update 
      #sql{
        UPDATE
          TWNCASE_MEMBER_HST T1
        SET
         --MEDIC_BLNG_SQ_NMB = :MEDIC-BLNG-SQ-NMB,
          AFDC_ELIG_CD = :AFDC-ELIG-CD,
          IVE_AID_CD = :IVE-AID-CD,
          IVE_ELIG_CD = :IVE-ELIG-CD,
          HH_LEFT_DT = :HH-LEFT-DT,
          PRD_END_DT = :PRD-END-DT
        WHERE
            ICI = :ICI AND
            upi = :UPI AND
         --**
         --*** P-07>Changes due to ptr ain49003 start **********/
          PRD_BEG_DT <= :PRD-BEG-DT AND
          PRD_END_DT >= :PRD-BEG-DT
         --**
         --*** P-07>Changes due to ptr ain49003 end *********/
      }
      for H2-CASE-MEMBER-HST ; // model = update
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-UPD-U06


// UPDATE PROGRAM CASE HISTORY
Function AIN49P9-UPD-U07()
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U07";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-PRGM-CASE-HSTRY";
  VDBCOMMON.USQLREC = "H2-PRGM-CASE-HSTRY";
  try
    execute update 
      #sql{
        UPDATE
          TWNPRGM_CASE_HSTRY T1
        SET
          AID_CD=:AID-CD,
          ELIG_CD=:ELIG-CD,
          PRGM_CASE_STS = :PRGM-CASE-STS
        WHERE ICI = :ICI AND
        PRD_BEG_DT <= :PRD-BEG-DT AND
        PRD_END_DT >= :PRD-BEG-DT AND
        PRGM_CASE_TYPE = :PRGM-CASE-TYPE
      }
      for H2-PRGM-CASE-HSTRY ; // model = update
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-UPD-U07


// UPDATE FAM CASE
Function AIN49P9-UPD-U12()
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U12";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-FAM-CASE";
  VDBCOMMON.USQLREC = "H2-FAM-CASE";
  try
    execute update 
      #sql{
        UPDATE
          twnfam_case T1
        SET
          CASE_APPL_DT=:CASE-APPL-DT
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE ICI = :ICI
      }
      for H2-FAM-CASE ; // model = update
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-UPD-U12


// UPDATE ELIG VERSION (POST IND)
Function AIN49P9-UPD-U14()
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U14";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-ELIG-VERSION";
  VDBCOMMON.USQLREC = "H2-ELIG-VERSION";
  try
    execute update 
      #sql{
        UPDATE
          twnelig_version T1
        SET
          LST_POSTD_VER_IND= ' ',
          ISSUE_IND = :ISSUE-IND
        WHERE
         ICI = :ICI
        AND PRGM_CASE_TYPE = 'CW'
        AND BNFT_YR = :BNFT-YR
        AND BNFT_MTH = :BNFT-MTH
        AND VER_NMB = :VER-NMB
      }
      for H2-ELIG-VERSION ; // model = update
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-UPD-U14


// UPDATE ELIG VERSION (OTH FLDS)
Function AIN49P9-UPD-U17()
  VDBCONTROL.UPROC-OBJ = "H2-ELIG-VERSION";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U17";
  VDBCOMMON.USQLREC = "H2-ELIG-VERSION";
  try
    execute update 
      #sql{
         --**
         --*** changes due to ptr # AIN49003 begin ------ *****/
        UPDATE
          TWNELIG_VERSION T1
        SET
          POSTD_DT=:POSTD-DT,
          POSTD_BY=:POSTD-BY,
          POST_TYPE=:POST-TYPE,
          LST_POSTD_VER_IND=:LST-POSTD-VER-IND,
          BNFT_TYPE = :BNFT-TYPE,
          ISSUE_IND = :ISSUE-IND,
          SCHD_PAY_DT = :SCHD-PAY-DT,
          CASE_RSLT_CD = :CASE-RSLT-CD
         WHERE ICI = :ICI AND
        PRGM_CASE_TYPE = 'CW' AND
        BNFT_YR = :BNFT-YR AND
        BNFT_MTH = :BNFT-MTH AND
        VER_NMB = :VER-NMB
         --*** changes due to ptr # AIN49003 end ------ *****/
      }
      for H2-ELIG-VERSION ; // model = update
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
end // end AIN49P9-UPD-U17


// UPDATE ELIG VERSION MEMBER
Function AIN49P9-UPD-U18()
  VDBCONTROL.UPROC-OBJ = "H2-ELG-VER-MBR";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U18";
  VDBCOMMON.USQLREC = "H2-ELG-VER-MBR";
  try
    execute update 
      #sql{
        UPDATE
          TWNELG_VER_MBR T1
        SET
          AID_CD=:AID-CD,
          ELIG_CD=:ELIG-CD
         WHERE
        ICI=:ICI and
        PRGM_CASE_TYPE= 'CW' and
        BNFT_YR=:BNFT-YR and
        BNFT_MTH=:BNFT-MTH and
        VER_NMB=:VER-NMB
      }
      for H2-ELG-VER-MBR ; // model = update
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
end // end AIN49P9-UPD-U18


// UPDATE FAM CASE HISTORY
Function AIN49P9-UPD-U19()
  /*  */
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U19";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-FAM-CASE-HSTRY";
  VDBCOMMON.USQLREC = "H2-FAM-CASE-HSTRY";
  try
    execute update 
      #sql{
        UPDATE
              TWNFAM_CASE_HSTRY T1
        SET
              PRD_END_DT = :PRD-END-DT
        WHERE
              ICI = :ICI
        AND   PRD_BEG_DT <= :PRD-BEG-DT
        AND   PRD_END_DT >= :PRD-BEG-DT
      }
      for H2-FAM-CASE-HSTRY ; // model = update
  end
end // end AIN49P9-UPD-U19


// UPDATE CASELOAD CASE HISTORY
Function AIN49P9-UPD-U20()
  VDBCONTROL.UPROC-NM = "AIN49P9-U20";
  VDBCONTROL.UPROC-OPT = "REPLACE";
  VDBCONTROL.UPROC-OBJ = "H2-CASLD-CASE-HST";
  VDBCOMMON.USQLREC = "H2-CASLD-CASE-HST";
  /*  */
  try
    execute update 
      #sql{
        UPDATE
           TWNCASLD_CASE_HST T1
        SET
           PRD_END_DT = :PRD-END-DT
        WHERE
              ICI = :ICI
        AND   PRD_BEG_DT <= :PRD-BEG-DT
        AND   PRD_END_DT >= :PRD-BEG-DT
      }
      for H2-CASLD-CASE-HST ; // model = update
  end
end // end AIN49P9-UPD-U20


// UPDATE ELIG VERSION
Function AIN49P9-UPD-U21()
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U21";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-ELIG-VERSION";
  VDBCOMMON.USQLREC = "H2-ELIG-VERSION";
  try
    execute update 
      #sql{
        UPDATE
          TWNELIG_VERSION T1
        SET
          ISSUE_IND= 'X'
        WHERE
             ICI = :ICI AND
             BNFT_MTH = :BNFT-MTH AND
             BNFT_YR  = :BNFT-YR  AND
             PRGM_CASE_TYPE = 'CW' AND
             VER_NMB <= :VER-NMB AND
             ISSUE_IND = 'N' AND
             POSTD_DT IS NOT NULL
      }
      for H2-ELIG-VERSION ; // model = update
  end
end // end AIN49P9-UPD-U21


// UPDATE PROGRAM CASE HISTORY
Function AIN49P9-UPD-U22()
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U22";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-PRGM-CASE-HSTRY";
  VDBCOMMON.USQLREC = "H2-PRGM-CASE-HSTRY";
  try
    execute update 
      #sql{
        UPDATE
          TWNPRGM_CASE_HSTRY T1
        SET
          APPL_DT = :APPL-DT
        WHERE
             ICI = :ICI AND
             PRGM_CASE_TYPE = :PRGM-CASE-TYPE AND
             PRD_END_DT >= :PRD-END-DT
      }
      for H2-PRGM-CASE-HSTRY ; // model = update
  end
end // end AIN49P9-UPD-U22


// UPDATE PRGM CASE HISTORY
Function AIN49P9-UPD-U23()
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U22";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-PRGM-CASE-HSTRY";
  VDBCOMMON.USQLREC = "H2-PRGM-CASE-HSTRY";
  try
    execute update 
      #sql{
        UPDATE
          TWNPRGM_CASE_HSTRY T1
        SET
          PRD_END_DT = :PRD-END-DT
        WHERE
             ICI = :ICI AND
             PRGM_CASE_TYPE = :PRGM-CASE-TYPE AND
             PRD_BEG_DT <= :PRD-BEG-DT AND
             PRD_END_DT >= :PRD-END-DT
      }
      for H2-PRGM-CASE-HSTRY ; // model = update
  end
end // end AIN49P9-UPD-U23


// UPDATE FAM CASE HISTORY
Function AIN49P9-UPD-U24()
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U22";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-FAM-CASE-HSTRY";
  VDBCOMMON.USQLREC = "H2-FAM-CASE-HSTRY";
  try
    execute update 
      #sql{
        UPDATE
          TWNFAM_CASE_HSTRY T1
        SET
          CASE_STS=:CASE-STS,
          DCFS_OFC_CNTY_CD = :DCFS-OFC-CNTY-CD
        WHERE
             ICI = :ICI AND
             PRD_END_DT >= :PRD-END-DT
      }
      for H2-FAM-CASE-HSTRY ; // model = update
  end
end // end AIN49P9-UPD-U24


// UPDATE FAM ALT PAYEE
Function AIN49P9-UPD-U25()
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U25";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-FAM-ALT-PAYEE";
  VDBCOMMON.USQLREC = "H2-FAM-ALT-PAYEE";
  try
    execute update 
      #sql{
        UPDATE
          TWNFAM_ALT_PAYEE T1
        SET
          EFF_TO_DT = :EFF-TO-DT
        WHERE
             ICI = :ICI
        AND  EFF_FR_DT <= :EFF-TO-DT
        AND  EFF_TO_DT >= :EFF-TO-DT
        AND  ALT_PYE_TYP = :ALT-PYE-TYP
      }
      for H2-FAM-ALT-PAYEE ; // model = update
  end
end // end AIN49P9-UPD-U25


// UPDATE PERSON HISTORY
Function AIN49P9-UPD-U26()
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U26";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-PERSON-HSTRY";
  VDBCOMMON.USQLREC = "H2-PERSON-HSTRY";
  try
    execute update 
      #sql{
        UPDATE
          TWNPERSON_HSTRY T1
        SET
          PRD_END_DT = :PRD-END-DT
        WHERE
             UPI = :UPI
        AND  PRD_BEG_DT <= :PRD-BEG-DT
        AND  PRD_END_DT >= :PRD-BEG-DT
      }
      for H2-PERSON-HSTRY ; // model = update
  end
end // end AIN49P9-UPD-U26


// UPDATE IVE MMBR IND
Function AIN49P9-UPD-U27()
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U27";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-PERSON";
  VDBCOMMON.USQLREC = "H2-PERSON";
  /*  */
  try
    execute update 
      #sql{
        UPDATE
          TWNPERSON T1
        SET
          IVE_MMBR_IND = :IVE-MMBR-IND,
          MEDIC_BLNG_SQ_NMB = :MEDIC-BLNG-SQ-NMB,
          MID_NM = :MID-NM,
          FRST_NM = :FRST-NM,
          LST_NM = :LST-NM,
          PHONETIC_NM1 = :PHONETIC-NM1,
          PHONETIC_NM2 = :PHONETIC-NM2
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE UPI = :UPI
      }
      for H2-PERSON ; // model = update
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-UPD-U27


// UPDATE IVE MMBR IND
Function AIN49P9-UPD-U28()
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U28";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-MA-BILL-SQ-NMB";
  VDBCOMMON.USQLREC = "H2-MA-BILL-SQ-NMB";
  /*  */
  try
    execute update for H2-MA-BILL-SQ-NMB ;
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-UPD-U28


Function AIN49P9-UPD-U29()
  try
    execute update 
      #sql{
        UPDATE
          TWNREUNIF_DATA T1
        SET
          REUNIF_START_DATE=:REUNIF-START-DATE,
          REUNIF_STOP_DATE=:REUNIF-STOP-DATE,
          REUNIF_IND=:REUNIF-IND
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        where UPI=:UPI
        and ICI=:ICI
        and PRD_BEG_DATE <= :PRD-BEG-DATE
        and PRD_END_DATE >= :PRD-END-DATE
      }
      for H2-REUNIF-DATA ; // model = update
  end
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U29";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-REUNIF-DATA";
  VDBCOMMON.USQLREC = "H2-REUNIF-DATA";
  /*  */
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-UPD-U29


Function AIN49P9-UPD-U30()
  try
    execute update 
      #sql{
        UPDATE
          TWNREUNIF_DATA T1
        SET
          PRD_END_DATE=:PRD-END-DATE
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        where UPI = :UPI
        and ICI = :ICI
        and PRD_BEG_DATE <= :PRD-BEG-DATE
        and PRD_END_DATE >= :PRD-END-DATE
      }
      for H2-REUNIF-DATA ; // model = update
  end
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U30";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-REUNIF-DATA";
  VDBCOMMON.USQLREC = "H2-REUNIF-DATA";
  /*  */
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-UPD-U30


// UPDATE FAM CASE
Function AIN49P9-UPD-U31()
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U31";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-FAM-CASE";
  VDBCOMMON.USQLREC = "H2-FAM-CASE";
  try
    execute update 
      #sql{
        UPDATE
          TWNFAM_CASE T1
        SET
          IVE_CASE_ID=:IVE-CASE-ID,
          ALT_PAYEE_IND=:ALT-PAYEE-IND
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE ICI = :ICI
      }
      for H2-FAM-CASE ; // model = update
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-UPD-U31


// UPDATE CASE MEMBER HISTORY
Function AIN49P9-UPD-U32()
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U32";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-CASE-MEMBER-HST";
  VDBCOMMON.USQLREC = "H2-CASE-MEMBER-HST";
  try
    execute update 
      #sql{
        UPDATE
          TWNCASE_MEMBER_HST T1
        SET
          IVE_AID_CD = :IVE-AID-CD,
          IVE_ELIG_CD = :IVE-ELIG-CD,
          HH_LEFT_DT = :HH-LEFT-DT
        WHERE
            ICI = :ICI AND
            upi = :UPI AND
          PRD_BEG_DT >= :PRD-BEG-DT
      }
      for H2-CASE-MEMBER-HST ; // model = update
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-UPD-U32


// UPDATE FAM CASELOAD CASE
Function AIN49P9-UPD-U33()
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U33";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-FAM-CASELD-CASE";
  VDBCOMMON.USQLREC = "H2-FAM-CASELD-CASE";
  try
    execute update 
      #sql{
        UPDATE
          twnfam_caseld_case T1
        SET
          IVE_CASLD_ID=:IVE-CASLD-ID
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE ICI=:ICI
      }
      for H2-FAM-CASELD-CASE ; // model = update
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-UPD-U33


// UPDATE PROGRAM CASE HISTORY
Function AIN49P9-UPD-U34()
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U34";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-FAM-CASE-HSTRY";
  VDBCOMMON.USQLREC = "H2-FAM-CASE-HSTRY";
  try
    execute update 
      #sql{
        UPDATE
          TWNFAM_CASE_HSTRY T1
        SET
        CASE_STS = :CASE-STS
        WHERE ICI = :ICI AND
        PRD_BEG_DT <= :PRD-BEG-DT AND
        PRD_END_DT >= :PRD-BEG-DT
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
      }
      for H2-FAM-CASE-HSTRY ; // model = update
  end
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-UPD-U34


Function AIN49P9-UPD-U35()
  try
    execute update 
      #sql{
        UPDATE
          TWNREUNIF_DATA T1
        SET
          REUNIF_STOP_DATE=:REUNIF-STOP-DATE
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE UPI=:UPI
        AND ICI=:ICI
        AND PRD_END_DATE = '9999-12-31'
      }
      for H2-REUNIF-DATA ; // model = update
  end
  VDBCONTROL.UPROC-NM = "AIN49P9-UPD-U35";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";
  VDBCONTROL.UPROC-OBJ = "H2-REUNIF-DATA";
  VDBCOMMON.USQLREC = "H2-REUNIF-DATA";
  /*  */
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN49A";
end // end AIN49P9-UPD-U35


// VALIDATE CODES
Function AIN49P9-VAL-CD()
  /* PTR 5492 BEGIN*/
  /* A Check is made to determine valid Aid codes, eligibility codes,*/
  /* office code and county code. If an invalid code is determined the*/
  /* record is written into the reject file and the child welfare report*/
  /* is built*/

  AIN49W.WS-VALID-CODES = "T";
  /* validate the aid code by reading the DCFS Aid-code table*/

  if (SR-Q-DCF-REC.D-RECORD-TYPE == "N"
   || (SR-Q-DCF-REC.D-RECORD-TYPE == "U"
   && SR-Q-DCF-REC.D-MEMB-MA-AID-CODE != " "))

  /* VALIDATE THE AID CODE BY READING THE DCFS AID-CODE TABLE*/
    H2-CODE-TBL.CODE-TBL-TYP = "DCFSAID";
    H2-CODE-TBL.CODE-TBL-CD = SR-Q-DCF-REC.D-MEMB-MA-AID-CODE;
    AIN49P9-RD-CODE();

    if (sysVar.sqlData.sqlcode == 100) /* record not found*/
      AIN49W.WS-VALID-CODES = "F";
      AIN49W.WS-REJECT-RECORD = "Y";
      AIN49W.WS-REJECT-RSN = "AM"; /* AID CODE MISMATCH*/
      SR-Q-CNT-REC.AININT-CNT-REC-SKIP = SR-Q-CNT-REC.AININT-CNT-REC-SKIP +       1;
      move SR-Q-DCF-REC to SR-Q-04F-REC withV60Compat;
      AIN49P9-WRITE-04();
      return;
    end

    if (sysVar.sqlData.sqlcode != 0)
      WDB00PE-SQLERR();
      if (VDBCONTROL.URC > 104)
        WCM00P2-TO-CEP01A();
      end
    end /* sql error processing*/
    AIN49W3.RPT-AID-CD = SR-Q-DCF-REC.D-MEMB-MA-AID-CODE;
  end

  if (SR-Q-DCF-REC.D-NEW-LAYOUT-FLAG == " ")
    if (SR-Q-DCF-REC.D-RECORD-TYPE == "N"
     || (SR-Q-DCF-REC.D-RECORD-TYPE == "U"
     && SR-Q-DCF-REC.D-MEMB-MA-ELIG-CODE != " "))

  /* validate the eligibility code by reading the dcfs elig-code table*/
      H2-CODE-TBL.CODE-TBL-TYP = "DCFSELIG";
      H2-CODE-TBL.CODE-TBL-CD = SR-Q-DCF-REC.D-MEMB-MA-ELIG-CODE;
      AIN49P9-RD-CODE();

      if (sysVar.sqlData.sqlcode == 100) /* record not found*/
        AIN49W.WS-VALID-CODES = "F";
        AIN49W.WS-REJECT-RECORD = "Y";
        AIN49W.WS-REJECT-RSN = "EM"; /* eligibility code mismatch*/
        SR-Q-CNT-REC.AININT-CNT-REC-SKIP = SR-Q-CNT-REC.AININT-CNT-REC-SKIP         +         1;
        move SR-Q-DCF-REC to SR-Q-04F-REC withV60Compat;
        AIN49P9-WRITE-04();
        return;
      end
    end
  else
    if (SR-Q-DCF-REC.D-NEW-LAYOUT-FLAG == "Y")
      AIN49W3.RPT-ELIG-CD = " ";
      if (SR-Q-DCF-REC.D-MEMB-US-CITIZEN == "N" && 
      SR-Q-DCF-REC.D-QUALIFIED-ALIEN-IND == "N" && 
      SR-Q-DCF-REC.D-MEMB-MA-AID-CODE != "70" && 
      SR-Q-DCF-REC.D-MEMB-MA-AID-CODE != "72" && 
      SR-Q-DCF-REC.D-MEMB-MA-AID-CODE != "73" && 
      SR-Q-DCF-REC.D-MEMB-MA-AID-CODE != "75")
        AIN49W.WS-VALID-CODES = "F";
        AIN49W.WS-REJECT-RECORD = "Y";
        AIN49W.WS-REJECT-RSN = "CA";
        SR-Q-CNT-REC.AININT-CNT-REC-SKIP = SR-Q-CNT-REC.AININT-CNT-REC-SKIP + 1;
        move SR-Q-DCF-REC to SR-Q-04F-REC withV60Compat;
        AIN49P9-WRITE-04();
        return;
      end
      if (SR-Q-DCF-REC.D-PRIOR-MEDICAL-EXP-IND == "Y" && 
      SR-Q-DCF-REC.D-PROOF-OF-PRIOR-MEDICAL-IND != "Y")
        AIN49W.WS-VALID-CODES = "F";
        AIN49W.WS-REJECT-RECORD = "Y";
        AIN49W.WS-REJECT-RSN = "PP"; /**/
        SR-Q-CNT-REC.AININT-CNT-REC-SKIP = SR-Q-CNT-REC.AININT-CNT-REC-SKIP + 1;
        move SR-Q-DCF-REC to SR-Q-04F-REC withV60Compat;
        AIN49P9-WRITE-04();
        return;
      end
      AIN49W3.RPT-PRIOR-MED-IND = SR-Q-DCF-REC.D-PRIOR-MEDICAL-EXP-IND;
      if ((SR-Q-DCF-REC.D-RECORD-TYPE == "N"
       || SR-Q-DCF-REC.D-RECORD-TYPE == "U")
       && SR-Q-DCF-REC.D-DENIAL-TERM-REASON-CODE != " ")

        H2-CODE-TBL.CODE-TBL-TYP = "DCFSDENL";
        H2-CODE-TBL.CODE-TBL-CD = SR-Q-DCF-REC.D-DENIAL-TERM-REASON-CODE;
        AIN49P9-RD-CODE();

        if (sysVar.sqlData.sqlcode == 100) /* record not found*/
          AIN49W.WS-VALID-CODES = "F";
          AIN49W.WS-REJECT-RECORD = "Y";
          AIN49W.WS-REJECT-RSN = "ID"; /* invalid denial reason code*/
          SR-Q-CNT-REC.AININT-CNT-REC-SKIP = SR-Q-CNT-REC.AININT-CNT-REC-SKIP           +           1;
          move SR-Q-DCF-REC to SR-Q-04F-REC withV60Compat;
          AIN49P9-WRITE-04();
          return;
        else
          AIN49W3.RPT-DNL-CODE = SR-Q-DCF-REC.D-DENIAL-TERM-REASON-CODE;
          AIN49W3.RPT-ELIG-CD = "9";
        end
      end
      if ((SR-Q-DCF-REC.D-RECORD-TYPE == "N"
       || SR-Q-DCF-REC.D-RECORD-TYPE == "U")
       && SR-Q-DCF-REC.D-TERM-REASON-CODE != " ")

        H2-CODE-TBL.CODE-TBL-TYP = "DCFSTERM";
        H2-CODE-TBL.CODE-TBL-CD = SR-Q-DCF-REC.D-TERM-REASON-CODE;
        AIN49P9-RD-CODE();

        if (sysVar.sqlData.sqlcode == 100) /* record not found*/
          AIN49W.WS-VALID-CODES = "F";
          AIN49W.WS-REJECT-RECORD = "Y";
          AIN49W.WS-REJECT-RSN = "IT";
                                   /* invalid termination reason code*/
          SR-Q-CNT-REC.AININT-CNT-REC-SKIP = SR-Q-CNT-REC.AININT-CNT-REC-SKIP           +           1;
          move SR-Q-DCF-REC to SR-Q-04F-REC withV60Compat;
          AIN49P9-WRITE-04();
          return;
        else
          AIN49W3.RPT-ELIG-CD = "9";
          AIN49W3.RPT-TRM-CODE = SR-Q-DCF-REC.D-TERM-REASON-CODE;
        end
      end
      if (AIN49W3.RPT-ELIG-CD != "9")
        if (SR-Q-DCF-REC.D-CASH-IND == "N" && 
        SR-Q-DCF-REC.D-MEDICAL-IND == "N")
          AIN49W3.RPT-ELIG-CD = "8";
        else
          if (SR-Q-DCF-REC.D-CASH-IND == "N" && 
          SR-Q-DCF-REC.D-MEDICAL-IND == "Y")
            AIN49W3.RPT-ELIG-CD = "5";
          else
            if (SR-Q-DCF-REC.D-CASH-IND == "Y" && 
            SR-Q-DCF-REC.D-MEDICAL-IND == "N")
              AIN49W3.RPT-ELIG-CD = "4";
            else
              if ((SR-Q-DCF-REC.D-MEMB-MA-AID-CODE == "22" || 
              SR-Q-DCF-REC.D-MEMB-MA-AID-CODE == "26" || 
              SR-Q-DCF-REC.D-MEMB-MA-AID-CODE == "27" || 
              SR-Q-DCF-REC.D-MEMB-MA-AID-CODE == "60" || 
              SR-Q-DCF-REC.D-MEMB-MA-AID-CODE == "62" || 
              SR-Q-DCF-REC.D-MEMB-MA-AID-CODE == "63" || 
              SR-Q-DCF-REC.D-MEMB-MA-AID-CODE == "65" || 
              SR-Q-DCF-REC.D-MEMB-MA-AID-CODE == "67" || 
              SR-Q-DCF-REC.D-MEMB-MA-AID-CODE == "69" || 
              SR-Q-DCF-REC.D-MEMB-MA-AID-CODE == "70" || 
              SR-Q-DCF-REC.D-MEMB-MA-AID-CODE == "72" || 
              SR-Q-DCF-REC.D-MEMB-MA-AID-CODE == "73" || 
              SR-Q-DCF-REC.D-MEMB-MA-AID-CODE == "75") && 
              SR-Q-DCF-REC.D-CASH-IND == "Y" && 
              SR-Q-DCF-REC.D-MEDICAL-IND == "Y")
                AIN49W3.RPT-ELIG-CD = "2";
              else
                if ((SR-Q-DCF-REC.D-MEMB-MA-AID-CODE == "53" || 
                SR-Q-DCF-REC.D-MEMB-MA-AID-CODE == "54" || 
                SR-Q-DCF-REC.D-MEMB-MA-AID-CODE == "55" || 
                SR-Q-DCF-REC.D-MEMB-MA-AID-CODE == "56" || 
                SR-Q-DCF-REC.D-MEMB-MA-AID-CODE == "57" || 
                SR-Q-DCF-REC.D-MEMB-MA-AID-CODE == "58" || 
                SR-Q-DCF-REC.D-MEMB-MA-AID-CODE == "59") && 
                SR-Q-DCF-REC.D-CASH-IND == "Y" && 
                SR-Q-DCF-REC.D-MEDICAL-IND == "Y")
                  AIN49W3.RPT-ELIG-CD = "1";
                end
              end
            end
          end
        end
      end
    end
  end
  if (SR-Q-DCF-REC.D-MEMB-MA-AID-CODE != " " && AIN49W3.RPT-ELIG-CD == " "
   && SR-Q-DCF-REC.D-MEMB-MA-ELIG-CODE == " ")
    AIN49W.WS-VALID-CODES = "F";
    AIN49W.WS-REJECT-RECORD = "Y";
    AIN49W.WS-REJECT-RSN = "EM"; /* eligibility code mismatch*/
    SR-Q-CNT-REC.AININT-CNT-REC-SKIP = SR-Q-CNT-REC.AININT-CNT-REC-SKIP     + 1;
    move SR-Q-DCF-REC to SR-Q-04F-REC withV60Compat;
    AIN49P9-WRITE-04();
    return;
  end
  if (SR-Q-DCF-REC.D-RECORD-TYPE == "N"
   || (SR-Q-DCF-REC.D-RECORD-TYPE == "U"
   && SR-Q-DCF-REC.D-APPL-DISTRICT-OFFICE != " "))

  /* ----------------------PTR    BEGIN---------------------------------*/
  /* validate the office code USING TWNOFFICE BASE TABLE*/
    H2-OFFICE.OFC-CD = SR-Q-DCF-REC.D-APPL-DISTRICT-OFFICE;

    AIN49P9-READ-S31();
  /* ----------------------PTR    END-----------------------------------*/

    if (sysVar.sqlData.sqlcode == 100) /* record not found*/
      AIN49W.WS-VALID-CODES = "F";
      AIN49W.WS-REJECT-RECORD = "Y";
      AIN49W.WS-REJECT-RSN = "OM"; /* office code mismatch*/
      SR-Q-CNT-REC.AININT-CNT-REC-SKIP = SR-Q-CNT-REC.AININT-CNT-REC-SKIP +       1;
      move SR-Q-DCF-REC to SR-Q-04F-REC withV60Compat;
      AIN49P9-WRITE-04();
      return;
    end

    if (sysVar.sqlData.sqlcode != 0)
      WDB00PE-SQLERR();
      if (VDBCONTROL.URC > 104)
        WCM00P2-TO-CEP01A();
      end
    end /* sql error processing*/

  end

  /* IF SR-Q-DCF-REC.D-RECORD-TYPE = 'N'*/
  /* OR (SR-Q-DCF-REC.D-RECORD-TYPE = 'U'*/
  /* AND SR-Q-DCF-REC.D-ADDR-RESIDENT-COUNTY NE ' ');*/
  if ((SR-Q-DCF-REC.D-RECORD-TYPE == "N"
   || SR-Q-DCF-REC.D-RECORD-TYPE == "U")
   && SR-Q-DCF-REC.D-ADDR-RESIDENT-COUNTY != " ")

  /* validate the county code by reading the COUNTY table*/
    H2-CODE-TBL.CODE-TBL-TYP = "COUNTY";
    H2-CODE-TBL.CODE-TBL-CD = SR-Q-DCF-REC.D-ADDR-RESIDENT-COUNTY;
    AIN49P9-RD-CODE();

    if (sysVar.sqlData.sqlcode == 100) /* record not found*/
      AIN49W.WS-VALID-CODES = "F";
      AIN49W.WS-REJECT-RECORD = "Y";
      AIN49W.WS-REJECT-RSN = "CM"; /* COUNTY code mismatch*/
      SR-Q-CNT-REC.AININT-CNT-REC-SKIP = SR-Q-CNT-REC.AININT-CNT-REC-SKIP +       1;
      move SR-Q-DCF-REC to SR-Q-04F-REC withV60Compat;
      AIN49P9-WRITE-04();
      return;
    end
    if (sysVar.sqlData.sqlcode != 0)
      WDB00PE-SQLERR();
      if (VDBCONTROL.URC > 104)
        WCM00P2-TO-CEP01A();
      end
    end /* sql error processing*/

  end


  /* PTR 5492 END*/
end // end AIN49P9-VAL-CD


// VERIFY REFERAL FOR UNIN
Function AIN49P9-VER-REF()
  /* -----------------------PTR 4635 BEGIN ----------------------------*/
  /*  */
  /* If the benefit month and the year for the grant is less than the*/
  /* current month and year, the referal process is triggered.*/
  /*  */
  set APO04W1 empty;

  AIN49W.WS-TEMP-CCYY = AIN49W.WS-CHECK-DATE-CCYY[WS-INDEX];
  AIN49W.WS-TEMP-MM = AIN49W.WS-CHECK-DATE-MM[WS-INDEX];
  /* IF AIN49W.WS-TEMP-YY > '90';*/
  /* MOVE '19' TO AIN49W.WS-TEMP-CC;*/
  /* ELSE;*/
  /* MOVE '20' TO AIN49W.WS-TEMP-CC;*/
  /* END;*/
  AIN49W.WS-TEMP-DD = AIN49W.WS-CHECK-DATE-DD[WS-INDEX];
  AIN49W.WS-TEMP-SEP1 = "-";
  AIN49W.WS-TEMP-SEP2 = "-";

  /*  */
  if (AIN49W.WS-TEMP-DATE < AIN49W.WS-PROCESS-DT)
    APO04W1.FAPO-ICI = AIN49W.WS-IVA-ICI;
    APO04W1.FAPO-SYS-DATE = AIN49W.WS-PROCESS-DT;
  /*  */
    APO04W1.FAPO-BENEFIT-MM = AIN49W.WS-TEMP-MM;
    APO04W1.FAPO-BENEFIT-YEAR = AIN49W.WS-TEMP-CCYY;
    APO04W1.FAPO-BENEFIT-DD = "01";
    APO04W1.FAPO-DASH1 = "-";
    APO04W1.FAPO-DASH2 = "-";
  /*  */
    AIN49W.WS-TEMP-DD = "01";
    AIN49P9-LST-DATE();
    APO04W1.FAPO-BENEFIT-MTH-END-DT = AIN49W.WS-LAST-DATE;
  /*  */

    AIN49W.WS-TEMP-MM-NUM = AIN49W.WS-TEMP-MM-NUM + 1;
    if (AIN49W.WS-TEMP-MM-NUM > 12)
      AIN49W.WS-TEMP-MM-NUM = 1;
      AIN49W.WS-TEMP-CCYY-NUM = AIN49W.WS-TEMP-CCYY-NUM + 1;
    end
  /*  */
    APO04W1.FAPO-NEXT-MTH-BEG-YEAR = AIN49W.WS-TEMP-CCYY;
    APO04W1.FAPO-NEXT-MTH-BEG-MM = AIN49W.WS-TEMP-MM;
    APO04W1.FAPO-NEXT-MTH-BEG-DD = "01";
    APO04W1.FAPO-DASH7 = "-";
    APO04W1.FAPO-DASH8 = "-";

  /* ---------------------PTR 6311 BEGIN ------------------------------*/
    AIN49W.WS-TEMP-CCYY = AIN49W.WS-CHECK-DATE-CCYY[WS-INDEX];
    AIN49W.WS-TEMP-MM = AIN49W.WS-CHECK-DATE-MM[WS-INDEX];
    AIN49W.WS-TEMP-DD = "01";
  /* IF AIN49W.WS-TEMP-YY > '90';*/
  /* MOVE '19' TO AIN49W.WS-TEMP-CC;*/
  /* ELSE;*/
  /* MOVE '20' TO AIN49W.WS-TEMP-CC;*/
  /* END;*/
    AIN49P9-LAST-DATE();
    APO04W1.FAPO-PREV-MTH-END-DT = AIN49W.WS-LAST-DATE;
  /* ---------------------PTR 6311 END ---------------------------------*/
  /*  */
    APO04W1.FAPO-BNFT-AMT = AIN49W.WS-D-CHECK-AMOUNT[WS-INDEX];
  /* MOVE 0 TO APO04W1.FAPO-PREV-BNFT-AMT;*/

    call "APO30A" (VDBCONTROL, VMESSAGE, APO04W1) {isNoRefresh = yes};


  end
end // end AIN49P9-VER-REF


// WRITE SEQ FILE REC
Function AIN49P9-WR-01-REC()
  VGVar.handleHardIOErrors = 1;
  try
    add SR-Q-01F-REC ;
  end
  if (SR-Q-01F-REC is ioError)
    VDBCONTROL.UPROC-NM = "AIN49P9-WR-01-REC";
    VDBCONTROL.UPROC-OBJ = "SR-Q-01F-REC";
    VDBCONTROL.UPROC-OPT = "ADD";
    VMESSAGE.UMSGINS[2] = "AIN49A";
    AIN49W1.WS-ERR-CD = sysVar.errorCode;
    VMESSAGE.UMSGINS[1] = AIN49W1.WS-ERR-LAST-FOUR;
      /*  */
      /* the following conditions are added to move the corresponding*/
      /* error message*/
    /*  */
    if (SR-Q-01F-REC is fileNotAvailable)
      VDBCONTROL.UEZESQRRM = "FILE IS NOT AVAILABLE";
    else
      if (SR-Q-01F-REC is fileNotFound)
        VDBCONTROL.UEZESQRRM = "FILE NOT FOUND";
      else
        if (SR-Q-01F-REC is invalidFormat)
          VDBCONTROL.UEZESQRRM = "FILE FORMAT MISMATCH";
        end /* ** end check for format mismatch*/
      end /* ** end check for file not found*/
    end /* ** end check for file not available*/
    WCM00P2-TO-CEP01A();
  end /* ** end check for error found*/
end // end AIN49P9-WR-01-REC


// WRITE SEQ FILE REC
Function AIN49P9-WR-REP-REC()
  VGVar.handleHardIOErrors = 1;
  try
    add SR-AIN49-RPT-REC ;
  end
  if (SR-AIN49-RPT-REC is ioError)
    VDBCONTROL.UPROC-NM = "AIN49P9-WR-REP-REC";
    VDBCONTROL.UPROC-OBJ = "SR-AIN49-RPT-REC";
    VDBCONTROL.UPROC-OPT = "ADD";
    VMESSAGE.UMSGINS[2] = "AIN49A";
    AIN49W1.WS-ERR-CD = sysVar.errorCode;
    VMESSAGE.UMSGINS[1] = AIN49W1.WS-ERR-LAST-FOUR;
      /*  */
      /* the following conditions are added to move the corresponding*/
      /* error message*/
    /*  */
    if (SR-AIN49-RPT-REC is fileNotAvailable)
      VDBCONTROL.UEZESQRRM = "FILE IS NOT AVAILABLE";
    else
      if (SR-AIN49-RPT-REC is fileNotFound)
        VDBCONTROL.UEZESQRRM = "FILE NOT FOUND";
      else
        if (SR-AIN49-RPT-REC is invalidFormat)
          VDBCONTROL.UEZESQRRM = "FILE FORMAT MISMATCH";
        end /* ** end check for format mismatch*/
      end /* ** end check for file not found*/
    end /* ** end check for file not available*/
    WCM00P2-TO-CEP01A();
  end /* ** end check for error found*/
end // end AIN49P9-WR-REP-REC


Function AIN49P9-WRITE-04()
  try
    add SR-Q-04F-REC ;
  end
  if (SR-Q-04F-REC is ioError)
    VDBCONTROL.UPROC-NM = "AIN49P9-WRITE-04";
    VDBCONTROL.UPROC-OBJ = "SR-Q-04F-REC";
    VDBCONTROL.UPROC-OPT = "ADD";
    VMESSAGE.UMSGINS[2] = "AIN49A";
    AIN49W1.WS-ERR-CD = sysVar.errorCode;
    VMESSAGE.UMSGINS[1] = AIN49W1.WS-ERR-LAST-FOUR;
     /*  */
     /* the following conditions are added to move the corresponding*/
     /* error message*/
   /*  */
    if (SR-Q-04F-REC is fileNotAvailable)
      VDBCONTROL.UEZESQRRM = "FILE IS NOT AVAILABLE";
    else
      if (SR-Q-04F-REC is fileNotFound)
        VDBCONTROL.UEZESQRRM = "FILE NOT FOUND";
      else
        if (SR-Q-04F-REC is invalidFormat)
          VDBCONTROL.UEZESQRRM = "FILE FORMAT MISMATCH";
        end /* ** end check for format mismatch*/
      end /* ** end check for file not found*/
    end /* ** end check for file not available*/
    WCM00P2-TO-CEP01A();
  end
end // end AIN49P9-WRITE-04


// WRITE REPORT
Function AIN49P9-WRITE-REP()
  /* WRITE CONTROL REPORT*/
  set SR-Q-03F-REC empty;

  SR-Q-03F-REC.AIN49A-03-CASE-MEMBER = SR-Q-DCF-REC.D-KEY-CASE-NUMBER;
  AIN49W.WS-NAME = SR-Q-DCF-REC.D-MEMB-LAST-NAME;
  AIN49W1.WS-MEMB-MIDDLE-NAME = SR-Q-DCF-REC.D-MEMB-MIDDLE-NAME;
  AIN49W.WS-MIDDLE-NAME = AIN49W1.WS-MEMB-MIDDLE-NAME-1;
  AIN49W1.WS-MEMB-FIRST-NAME = SR-Q-DCF-REC.D-MEMB-FIRST-NAME;
  AIN49W.WS-FIRST-NAME = AIN49W1.WS-MEMB-FIRST-NAME-1;
  SR-Q-03F-REC.AIN49A-03-NAME = AIN49W.WS-NAME;
  SR-Q-03F-REC.AIN49A-03-INTERFACE-SSN = SR-Q-DCF-REC.D-MEMB-SSN;
  SR-Q-03F-REC.AIN49A-03-NOMADS-SSN = AIN49W.WS-SSN;
  VGVar.handleHardIOErrors = 1;
  try
    add SR-Q-03F-REC ;
  end
  if (SR-Q-03F-REC is ioError)
    VDBCONTROL.UPROC-NM = "AIN49P9-WRITE-REP";
    VDBCONTROL.UPROC-OBJ = "SR-Q-03F-REC";
    VDBCONTROL.UPROC-OPT = "ADD";
    VMESSAGE.UMSGINS[2] = "AIN49A";
    AIN49W1.WS-ERR-CD = sysVar.errorCode;
    VMESSAGE.UMSGINS[1] = AIN49W1.WS-ERR-LAST-FOUR;
      /*  */
      /* the following conditions are added to move the corresponding*/
      /* error message*/
    /*  */
    if (SR-Q-03F-REC is fileNotAvailable)
      VDBCONTROL.UEZESQRRM = "FILE IS NOT AVAILABLE";
    else
      if (SR-Q-03F-REC is fileNotFound)
        VDBCONTROL.UEZESQRRM = "FILE NOT FOUND";
      else
        if (SR-Q-03F-REC is invalidFormat)
          VDBCONTROL.UEZESQRRM = "FILE FORMAT MISMATCH";
        end /* ** end check for format mismatch*/
      end /* ** end check for file not found*/
    end /* ** end check for file not available*/
    WCM00P2-TO-CEP01A();
  end /* ** end check for record found*/
end // end AIN49P9-WRITE-REP


// WRITE THE RETRO GRANT REPORT
Function AIN49P9-WRT-REGRNT()
  try
    add SR-Q-REGRNT-REC ;
  end
  if (SR-Q-REGRNT-REC is ioError)
    VDBCONTROL.UPROC-NM = "AIN49P9-WRT-REGRNT";
    VDBCONTROL.UPROC-OBJ = "SR-Q-REGRNT-REC";
    VDBCONTROL.UPROC-OPT = "ADD";
    VMESSAGE.UMSGINS[2] = "AIN49A";
    AIN49W1.WS-ERR-CD = sysVar.errorCode;
    VMESSAGE.UMSGINS[1] = AIN49W1.WS-ERR-LAST-FOUR;
     /*  */
     /* the following conditions are added to move the corresponding*/
     /* error message*/
   /*  */
    if (SR-Q-REGRNT-REC is fileNotAvailable)
      VDBCONTROL.UEZESQRRM = "FILE IS NOT AVAILABLE";
    else
      if (SR-Q-REGRNT-REC is fileNotFound)
        VDBCONTROL.UEZESQRRM = "FILE NOT FOUND";
      else
        if (SR-Q-REGRNT-REC is invalidFormat)
          VDBCONTROL.UEZESQRRM = "FILE FORMAT MISMATCH";
        end /* ** end check for format mismatch*/
      end /* ** end check for file not found*/
    end /* ** end check for file not available*/
    WCM00P2-TO-CEP01A();
  end
end // end AIN49P9-WRT-REGRNT


Record AIN49W type basicRecord
//WI 2445 added for future short date
  10 WS-DATE_FUT num(6) ; 
    15 WS-DATEFT char(6) ; 
      20 WS-YY2_FT char(4) ; 
        25 WS-YY2-NUM_FT num(4) ; 
      20 WS-MM2_FT char(2) ; 
        25 WS-MM2-NUM_FT num(2) ; 
//WI 2445 added for future long date        
  10 WS-DATE_FUTURE char(10) ; 
    15 WS-YY_FUT char(4) ; 
      20 WS-YY-CC1_FUT char(2) ; 
      20 WS-YY-CC2_FUT char(2) ; 
    15 WS-FIL1_FUT char(1) ; 
    15 WS-MM_FUT char(2) ; 
    15 WS-FIL2_FUT char(1) ; 
    15 WS-DD_FUT char(2) ;       
//end WI 2445        
  10 WS-FS-CASE char(1) ; 
  10 WS-FS-ICI num(9) ; 
  10 WS-PCH-AID-CODE char(3) ; 
  10 WS-PCH-ELIG-CODE char(1) ; 
  10 WS-SPLIT-DATE char(10) ; 
  10 WS-CREATE-ELIG-VERSIONS char(1) ; 
  10 WS-REFERAL-PROCESS char(1) ; 
  10 WS-REFERAL-DATE char(10) ; 
    15 WS-REFERAL-CCYY char(4) ; 
      20 WS-REFERAL-CC char(2) ; 
      20 WS-REFERAL-YY char(2) ; 
    15 WS-REFERAL-HYPH1 char(1) ; 
    15 WS-REFERAL-MM char(2) ; 
    15 WS-REFERAL-HYPH2 char(1) ; 
    15 WS-REFERAL-DD char(2) ; 
  10 WS-CASE-MEMB-UPI num(9) ; 
  10 WS-IVA-UPI num(9) ; 
  10 WS-ALERT-IVD-ID num(9) ; 
  10 WS-PSEUDO-IND char(1) ; 
  10 WS-CHILD-KNOWN char(1) ; 
  10 WS-UPDATE-PERSON char(1) ; 
  10 WS-UPDATE-PRGM-CASE-HSTRY char(1) ; 
  10 WS-UPDATE-CASE-MEM-HST char(1) ; 
  10 WS-REJECT-RECORD char(1) ; 
  10 WS-EXIT-FLAG char(1) ; 
  10 WS-STATE-SSN char(9) ; 
  10 WS-STATE-UPI int ; 
  10 WS-STATE-NAME char(21) ; 
  10 WS-SSN char(9) ; 
  10 WS-PSEUDO-SSN char(9) ; 
  10 WS-PSEUDO-SSN-R char(9) ; 
    15 WS-PSEUDO-SSN-1-R char(3) ; 
    15 WS-PSEUDO-SSN-2-R char(6) ; 
  10 WS-UPI int ; 
  10 WS-ICI int ; 
  10 WS-DCFS-ICI int ; 
  10 WS-APPL-CASLD-ID char(5) ; 
    15 WS-SPRVS-UNIT char(1) ; 
    15 WS-FUNC-AREA-CODE char(1) ; 
    15 WS-WRKR-TYPE char(1) ; 
    15 WS-PSN-NMB num(2) ; 
  10 WS-INDEX num(2) ; 
  10 WS-CHECK-INDEX num(2) ; 
  10 WS-C-ARRAY char(240) ; 
    15 WS-CHECK-ARRAY char(20) [12] ; 
      20 WS-D-CHECK-AMOUNT num(7,2) ; 
      20 WS-CHECK-DATE char(8) ; 
        25 WS-CHECK-DATE-MM char(2) ; 
        25 WS-CHECK-DATE-DD char(2) ; 
        25 WS-CHECK-DATE-CCYY char(4) ; 
      20 WS-D-UNIN-CODE num(4) ; 
      20 WS-D-IVE-NONIVE-IND char(1) ; 
  10 WS-IVA-ICI num(9) ; 
  10 WS-NAME char(23) ; 
    15 WS-LAST-NAME char(21) ; 
    15 WS-FIRST-NAME char(1) ; 
    15 WS-MIDDLE-NAME char(1) ; 
  10 WS-NO-OF-RECS num(7) ; 
  10 WS-RECORDS-PROCESSED num(7) ; 
  10 WS-RECORDS-SKIPPED num(7) ; 
  10 WS-INDX num(7) ; 
  10 WS-YYMM-DATE num(6) ; 
    15 WS-YYMM-YY char(4) ; 
      20 WS-YYMM-YY-NUM num(4) ; 
    15 WS-YYMM-MM char(2) ; 
      20 WS-YYMM-MM-NUM num(2) ; 
  10 WS-YYMM1-DATE char(7) ; 
    15 WS-YYMM1-CCYY char(4) ; 
      20 WS-YYMM1-CC char(2) ; 
        25 WS-YYMM1-CC-NUM num(2) ; 
      20 WS-YYMM1-YY char(2) ; 
        25 WS-YYMM1-YY-NUM num(2) ; 
    15 WS-YYMM1-FIL char(1) ; 
    15 WS-YYMM1-MM char(2) ; 
      20 WS-YYMM1-MM-NUM num(2) ; 
  10 WS-YYMM2-DATE char(7) ; 
    15 WS-YYMM2-CC char(2) ; 
      20 WS-YYMM2-CC-NUM num(2) ; 
    15 WS-YYMM2-YY char(2) ; 
      20 WS-YYMM2-YY-NUM num(2) ; 
    15 WS-YYMM2-FIL char(1) ; 
    15 WS-YYMM2-MM char(2) ; 
      20 WS-YYMM2-MM-NUM num(2) ; 
  10 WS-DATE char(10) ; 
    15 WS-YY char(4) ; 
      20 WS-YY-CC1 char(2) ; 
      20 WS-YY-CC2 char(2) ; 
    15 WS-FIL1 char(1) ; 
    15 WS-MM char(2) ; 
    15 WS-FIL2 char(1) ; 
    15 WS-DD char(2) ; 
  10 WS-DATE1 char(8) ; 
    15 WS-YY1 char(4) ; 
      20 WS-C11 char(2) ; 
      20 WS-Y11 char(2) ; 
    15 WS-MM1 char(2) ; 
    15 WS-DD1 char(2) ; 
  10 WS-CURRENT-DATE char(10) ; 
  10 WS-CENTURY char(2) ; 
    15 WS-CENTURY-NUM num(2) ; 
  10 WS-POST-TYPE char(1) ; 
  10 WS-CNT smallint ; 
  10 WS-MONTH-RUN num(6) ; 
    15 WS-MONTH-RUN-DD num(2) ; 
      20 WS-MONTH-RUN-DD-C char(2) ; 
    15 WS-MONTH-RUN-MM num(2) ; 
      20 WS-MONTH-RUN-MM-C char(2) ; 
    15 WS-MONTH-RUN-YY num(2) ; 
      20 WS-MONTH-RUN-YY-C char(2) ; 
  10 WS-PREV-DATE num(8) ; 
    15 WS-PREV-CCYY num(4) ; 
      20 WS-PREV-CC num(2) ; 
        25 WS-PREV-CC-C char(2) ; 
      20 WS-PREV-YY num(2) ; 
        25 WS-PREV-YY-C char(2) ; 
    15 WS-PREV-MM num(2) ; 
      20 WS-PREV-MM-C char(2) ; 
    15 WS-PREV-DD num(2) ; 
      20 WS-PREV-DD-C char(2) ; 
  10 WS-LAST-DATE char(10) ; 
    15 WS-LAST-DATE-CC char(2) ; 
    15 WS-LAST-DATE-YY char(2) ; 
    15 WS-LAST-DATE-F1 char(1) ; 
    15 WS-LAST-DATE-MM char(2) ; 
    15 WS-LAST-DATE-F2 char(1) ; 
    15 WS-LAST-DATE-DD char(2) ; 
  10 WS-TEMP-DATE char(10) ; 
    15 WS-TEMP-CCYY char(4) ; 
      17 WS-TEMP-CCYY-NUM num(4) ; 
        20 WS-TEMP-CC char(2) ; 
          25 WS-TEMP-CC-NUM num(2) ; 
        20 WS-TEMP-YY char(2) ; 
          25 WS-TEMP-YY-NUM num(2) ; 
    15 WS-TEMP-SEP1 char(1) ; 
    15 WS-TEMP-MM char(2) ; 
      20 WS-TEMP-MM-NUM num(2) ; 
    15 WS-TEMP-SEP2 char(1) ; 
    15 WS-TEMP-DD char(2) ; 
      20 WS-TEMP-DD-NUM num(2) ; 
  10 WS-MMDDCCYY-DATE char(8) ; 
    15 WS-MMDDCCYY-MM char(2) ; 
    15 WS-MMDDCCYY-DD char(2) ; 
    15 WS-MMDDCCYY-CCYY char(4) ; 
      20 WS-MMDDCCYY-CC char(2) ; 
      20 WS-MMDDCCYY-YY char(2) ; 
  10 WS-REM1 num(4) ; 
  10 WS-REM2 num(4) ; 
  10 WS-REM3 num(4) ; 
  10 WS-FIRST-DATE char(10) ; 
    15 WS-FIRST-CCYY char(4) ; 
    15 WS-FIRST-SEP1 char(1) ; 
    15 WS-FIRST-MM char(2) ; 
    15 WS-FIRST-SEP2 char(1) ; 
    15 WS-FIRST-DD char(2) ; 
  10 WS-PRD-BEG-DT char(10) ; 
    15 WS-PRD-BEG-DT-CC char(2) ; 
    15 WS-PRD-BEG-DT-YY char(2) ; 
    15 WS-PRD-BEG-F1 char(1) ; 
    15 WS-PRD-BEG-DT-MM char(2) ; 
    15 WS-PRD-BEG-F2 char(1) ; 
    15 WS-PRD-BEG-DT-DD char(2) ; 
  10 WS-VERSION-NUMBER num(4) ; 
  10 WS-ELIG-VERSION-NUMBER num(4) ; 
  10 WS-MONTH-RUN-DATE char(10) ; 
  10 WS-ATLEAST-ONE char(1) ; 
  10 WS-REJECT-RSN char(2) ; 
  10 WS-VALID-CODES char(1) ; 
  10 WS-APPL-PRGM-DATE char(10) ; 
  10 WS-PROCESS-DT char(10) ; 
    15 WS-PROCESS-DT-CCYY num(4) ; 
      20 WS-PROCESS-DT-CC char(2) ; 
      20 WS-PROCESS-DT-YY char(2) ; 
        25 WS-PROCESS-DT-YY-NUM num(2) ; 
    15 WS-PROCESS-DT-SEP1 char(1) ; 
    15 WS-PROCESS-DT-MM num(2) ; 
      20 WS-PROCESS-DT-MM-CHA char(2) ; 
    15 WS-PROCESS-DT-SEP2 char(1) ; 
    15 WS-PROCESS-DT-DD num(2) ; 
      20 WS-PROCESS-DT-DD-CHA char(2) ; 
  10 WS-CASE-MEMB-BEG-DATE char(10) ; 
  10 WS-CASE-MEMB-END-DATE char(10) ; 
  10 WS-PRGM-CASE-HST-BEG-DATE char(10) ; 
  10 WS-PRGM-CASE-HST-END-DATE char(10) ; 
  10 WS-FAM-CASE-HST-BEG-DATE char(10) ; 
  10 WS-FAM-CASE-HST-END-DATE char(10) ; 
  10 WS-TEMP-END-DATE char(10) ; 
  10 WS-CASE-MEMBER-DATE char(10) ; 
  10 WS-PROGRAM-CASE-DATE char(10) ; 
  10 WS-ELIG-VER-MTH num(2) ; 
  10 WS-ELIG-VER-YEAR num(4) ; 
    15 WS-ELIG-VER-CC num(2) ; 
    15 WS-ELIG-VER-YY num(2) ; 
  10 WS-TRIGGER-NEXT-MTH-REF char(1) ; 
  10 WS-TRIGGER-CURRENT-MTH-REF char(1) ; 
  10 WS-CL-ACTVY-DESC char(720) ; 
  10 WS-LOG-ENTRY-DE char(60) ; 
  10 WS-CASE-RSLT-CD char(1) ; 
  10 WS-ELIG-NUM num(2) ; 
  10 WS-BNFT-TYPE char(2) ; 
  10 WS-VER-NMB num(2) ; 
  10 WS-ISSUE-IND char(1) ; 
  10 WS-SCHD-PAY-DATE char(10) ; 
  10 WS-MEDICAID-CARD-ISSUED char(1) ; 
  10 WS-COUNT num(2) ; 
  10 WS-DUPLICATE-SSN char(1) ; 
  10 WS-BASE-DATA-EXISTS char(1) ; 
  10 WS-KEY-CASE-NUMBER-CHAR char(8) ; 
    15 WS-KEY-CASE-NUMBER-NUM num(8) ; 
  10 WS-TIME char(8) ; 
    15 WS-TIME-HH char(2) ; 
    15 WS-TIME-SEP1 char(1) ; 
    15 WS-TIME-MM char(2) ; 
    15 WS-TIME-SEP2 char(1) ; 
    15 WS-TIME-DD char(2) ; 
  10 WS-MMDDYY-DATE char(6) ; 
    15 WS-MMDDYY-MM char(2) ; 
    15 WS-MMDDYY-DD char(2) ; 
    15 WS-MMDDYY-YY char(2) ; 
  10 WS-MEDIC-BLNG-SQ-NMB decimal(11) ; // MEDIC_BLNG_SQ_NMB
  10 WS-IVE-ELIG-CD char(1) ; 
  10 WS-IVE-AID-CD decimal(2) ; 
  10 WS-HH-LEFT-DT char(10) ; 
  10 WS-OLD-NAME char(56) ; 
    15 WS-LAST char(21) ; 
    15 WS-FIRST char(16) ; 
    15 WS-MID char(16) ; 
    15 WS-MODFR char(3) ; 
  10 WS-OLD-SSN int ; 
  10 WS-NEW-SSN char(3) ; 
  10 WS-CHD-UPI num(3) ; 
  10 WS-TEXT3 char(240) ; 
  10 WS-TEXT4 char(240) ; 
  10 WS-LEGACY-EXISTS char(1) ; 
  10 WS-CASE-LOG-CHILDS-SSN char(9) ; 
  10 WS-TEMP-UPI int ; 
  10 WS-TEMP-SSN char(9) ; 
  10 WS-TEMP-FRST-NM char(16) ; 
  10 WS-TEMP-LST-NM char(21) ; 
  10 WS-TEMP-NCP-FG char(1) ; 
  10 WS-TEMP-CST-FG char(1) ; 
  10 WS-TEMP-CHD-FG char(1) ; 
  10 WS-TEMP-IVA-CASE-MBR-FG char(1) ; 
  10 WS-TEMP-IVE-MMBR-IND char(1) ; 
  10 WS-DB-LST-NM char(21) ; 
    15 WS-DB-LST-NM-1 char(1) ; 
    15 WS-DB-LST-NM-2 char(20) ; 
  10 WS-FILE-LST-NM char(21) ; 
    15 WS-FILE-LST-NM-1 char(1) ; 
    15 WS-FILE-LST-NM-2 char(20) ; 
  10 WS-DB-FRST-NM char(16) ; 
    15 WS-DB-FRST-NM-1 char(1) ; 
    15 WS-DB-FRST-NM-2 char(15) ; 
  10 WS-FILE-FRST-NM char(16) ; 
    15 WS-FILE-FRST-NM-1 char(1) ; 
    15 WS-FILE-FRST-NM-2 char(15) ; 
  10 WS-ALTP-SSN char(9) ; 
    15 WS-ALTP-SSN-1 char(3) ; 
    15 WS-ALTP-SSN-2 char(6) ; 
  10 WS-CASE-LOG-DESC char(58) ; 
    15 WS-CASE-LOG-DESC-1 char(9) ; 
    15 WS-CASE-LOG-DESC-2 char(40) ; 
    15 WS-CASE-LOG-DESC-3 char(9) ; 
  10 WS-ALERT-ICI num(9) ; 
  10 WS-DUPLICATE-HOH char(1) ; 
  10 WS-PRD-END-DT char(10) ; 
  10 WS-CRY-FWD-PRC-IND char(1) ; 
  10 WS-FAM-CASE-HSTRY-DATE char(10) ; 
  10 WS-CAL-CASE-STS char(1) ; 
  10 WS-CASE-STS char(1) ; 
  10 WS-ROW-COUNT num(3) ; 
  10 WS-D-T-ACCUM num(3) ; 
  10 WS-D-ACCUM num(3) ; 
  10 WS-T-ACCUM num(3) ; 
  10 WS-O-ACCUM num(3) ; 
  10 WS-P-ACCUM num(3) ; 
  10 WS-EFF-DT-CCYYMM-X char(6) ; 
    15 WS-EFF-DT-CCYY-X char(4) ; 
    15 WS-EFF-DT-MM-X char(2) ; 
  10 WS-PRGM-CASE-STS char(1) ; 
  10 WS-EFF-DT char(10) ; 
    15 WS-EFF-DT-CCYY char(4) ; 
      20 WS-EFF-DT-CCYY-NUM num(4) ; 
    15 WS-EFF-DT-DASH1 char(1) ; 
    15 WS-EFF-DT-MM char(2) ; 
      20 WS-EFF-DT-MM-NUM num(2) ; 
    15 WS-EFF-DT-DASH2 char(1) ; 
    15 WS-EFF-DT-DD char(2) ; 
end // end AIN49W


Record AIN49W1 type basicRecord
  10 WS-LAST-NAME char(21) ; 
    15 WS-LAST-NAME-1 char(1) ; 
    15 WS-LAST-NAME-2 char(20) ; 
  10 WS-FIRST-NAME char(16) ; 
    15 WS-FIRST-NAME-1 char(1) ; 
    15 WS-FIRST-NAME-2 char(15) ; 
  10 WS-MEMB-LAST-NAME char(21) ; 
    15 WS-MEMB-LAST-NAME-1 char(1) ; 
    15 WS-MEMB-LAST-NAME-2 char(20) ; 
  10 WS-MEMB-FIRST-NAME char(16) ; 
    15 WS-MEMB-FIRST-NAME-1 char(1) ; 
    15 WS-MEMB-FIRST-NAME-2 char(15) ; 
  10 WS-MEMB-MIDDLE-NAME char(16) ; 
    15 WS-MEMB-MIDDLE-NAME-1 char(1) ; 
    15 WS-MEMB-MIDDLE-NAME-2 char(15) ; 
  10 WS-DATE char(10) ; 
  10 WS-MONTH num(4) ; 
    15 WS-MONTH1 num(2) ; 
    15 WS-MONTH2 num(2) ; 
  10 WS-REM num(4) ; 
  10 WS-REM1 num(4) ; 
  10 WS-REM2 num(4) ; 
  10 WS-REM3 num(4) ; 
  10 WS-YR1 num(4) ; 
    15 WS-C1 num(2) ; 
    15 WS-Y1 num(2) ; 
  10 WS-TY num(2) ; 
    15 WS-TY1 char(2) ; 
  10 WS-CT num(2) ; 
    15 WS-CT1 char(2) ; 
  10 WS-TIME-STAMP char(26) ; 
    15 WS-TDATE char(10) ; 
      20 WS-TYR char(4) ; 
      20 WS-TF1 char(1) ; 
      20 WS-TMM char(2) ; 
      20 WS-TF2 char(1) ; 
      20 WS-TDD char(2) ; 
    15 WS-TF3 char(1) ; 
    15 WS-TIME char(8) ; 
      20 WS-THH char(2) ; 
      20 WS-TF5 char(1) ; 
      20 WS-TMN char(2) ; 
      20 WS-TF6 char(1) ; 
      20 WS-TSS char(2) ; 
    15 WS-TF4 char(1) ; 
    15 WS-TNS char(6) ; 
  10 WS-YY-CHR char(2) ; 
    15 WS-NUM-YR num(2) ; 
  10 WS-ERR-CD char(8) ; 
    15 WS-ERR-FIRST-FOUR char(4) ; 
    15 WS-ERR-LAST-FOUR char(4) ; 
end // end AIN49W1


Record AIN49W2 type basicRecord
  10 WS-UPI int ; // UPI
  10 WS-PRD-BEG-TS char(26) ; // PRD_BEG_TS
  10 WS-ADR-TYPE char(2) ; // ADR_TYPE
  10 WS-HOUSE-NMB char(8) ; // HOUSE_NMB
  10 WS-STR-DIR char(2) ; // STR_DIR
  10 WS-STR-NM char(25) ; // STR_NM
  10 WS-STR-TYPE char(4) ; // STR_TYPE
  10 WS-APT-NMB char(5) ; // APT_NMB
  10 WS-OTH-ADDR char(25) ; // OTH_ADDR
  10 WS-CITY char(20) ; // CITY
  10 WS-ST-CD char(3) ; // ST_CD
  10 WS-ZIP-CD char(11) ; // ZIP_CD
  10 WS-ADR-SRC char(5) ; // ADR_SRC
  10 WS-ADR-STS char(1) ; // ADR_STS
  10 WS-CNTRY-CD char(3) ; // CNTRY_CD
  10 WS-ADR-VRFD-DT char(10) ; // ADR_VRFD_DT
  10 WS-ADR-VRFD-BY char(8) ; // ADR_VRFD_BY
  10 WS-FIPS-CD char(5) ; // FIPS_CD
  10 WS-AS-OF-DT char(10) ; // AS_OF_DT
  10 WS-PRD-END-DT char(10) ; // PRD_END_DT
  10 WS-SYS-ID char(1) ; // SYS_ID
  10 WS-ADR-VRFD-CD char(1) ; // ADR_VRFD_CD
  10 WS-ADR-STS-EFF-DT char(10) ; // ADR_STS_EFF_DT
  10 WS-INST-NM char(30) ; // INST_NM
  10 WS-NOMADS-USRID char(8) ; // NOMADS_USRID
  10 WS-NOTE char(35) ; // NOTE
  10 WS-DCFS-RSDN-CNTY-CD char(2) ; // RSDN_CNTY_CD
  10 WS-OOS-SSP-VRFD-IND char(1) ; // OOS_SSP_VRFD_IND
  10 WS-NEW-NAME char(56) ; 
    15 WS-LAST char(21) ; 
    15 WS-FIRST char(16) ; 
    15 WS-MID char(16) ; 
    15 WS-MODFR char(3) ; 
  10 WS-NAME-TRK char(68) ; 
    15 WS-NAME-TEXT char(56) ; 
    15 WS-NAME-BY char(4) ; 
    15 WS-NAME-ID char(8) ; 
end // end AIN49W2


//*** RECORD=AIN49W3 ****
// THIS RECORD IS USED FOR THE REPORT PURPOSE
// ***********************
Record AIN49W3 type basicRecord
  10 RPT-REC char(100) ; 
    15 RPT-JLC char(4) ; 
    15 RPT-REC-TYPE char(1) ; 
    15 RPT-LST-NM char(21) ; 
    15 RPT-FRST-NM char(16) ; 
    15 RPT-SSN char(9) ; 
    15 RPT-SSN-VRFN-CODE char(1) ; 
    15 RPT-DOB char(10) ; 
    15 RPT-BLNG-NMB num(11) ; 
    15 RPT-TRM-CODE char(4) ; 
    15 RPT-DNL-CODE char(4) ; 
    15 RPT-AID-CD char(3) ; 
    15 RPT-ELIG-CD char(1) ; 
    15 RPT-BNFT-PERIOD char(6) ; 
      20 RPT-BNFT-YEAR num(4) ; 
      20 RPT-BNFT-MTH num(2) ; 
    15 RPT-PRIOR-MED-IND char(1) ; 
    15 RPT-FILLER char(8) ; 
end // end AIN49W3


Record AIN49W4 type basicRecord
  10 WS-ICI int ; // ICI
  10 WS-ICI1 num(9) ; 
    15 WS-ICI-CHAR char(9) ; 
  10 WS-SSN char(9) ; 
    15 WS-SSN1 num(9) ; 
  10 WS-UPI num(9) ; 
    15 WS-UPI-CHAR char(9) ; 
  10 WS-STR char(100) ; 
    15 WS-STR1 char(10) ; // WS-STR1
    15 WS-STR2 char(90) ; 
  10 WS-SSN2 char(9) ; 
  10 WS-UPI2 int ; 
  10 WS-ICI2 int ; 
  10 WS-CASE-NUMBER char(9) ; 
    15 WS-CASE-NUMBER1 num(9) ; 
  10 WS-MESSAGE char(70) ; 
    15 WS-MSGTEXT-1 char(46) ; 
    15 WS-MSGTEXT-N char(4) ; 
    15 WS-MSGTEXT-2 char(20) ; 
end // end AIN49W4


Record AIN49W5 type basicRecord
  10 WS-DATE1 num(6) ; 
    15 WS-DATE2 char(6) ; 
      20 WS-YY2 char(4) ; 
        25 WS-YY2-NUM num(4) ; 
      20 WS-MM2 char(2) ; 
        25 WS-MM2-NUM num(2) ; 
  10 WS-MEMB-MA-NBR char(11) ; 
    15 WS-MEMB-MA-NBR1 char(1) [11] ; 
  10 WS-MEMB-MA-AID-CODE char(3) ; 
    15 WS-MEMB-MA-AID-CODE-1 num(3) ; 
      20 WS-MEMB-MA-AID-CODE-2DIGITS num(2) ; 
      20 WS-MEMB-MA-AID-CODE-2-FILLER num(1) ; 
  10 WS-DATE3 char(8) ; 
    15 WS-MM3 char(2) ; 
    15 WS-DD3 char(2) ; 
    15 WS-CC3 char(2) ; 
    15 WS-YY3 char(2) ; 
  10 WS-MEMB-MA-NBR2 num(11) ; 
  10 WS-MEMB-MA-AID-CODE-2 decimal(3) ; 
  10 WS-SQCOD num(3) ; 
  10 WS-DATE4 num(6) ; 
    15 WS-YY4 num(4) ; 
    15 WS-MM4 num(2) ; 
  10 WS-DATE6 num(8) ; 
    15 WS-DATE5 char(8) ; 
      20 WS-CC5 char(2) ; 
      20 WS-YY5 char(2) ; 
      20 WS-MM5 char(2) ; 
      20 WS-DD5 char(2) ; 
  10 WS-CHECK-DATE char(6) ; 
    15 WS-CHECK-CCYY char(4) ; 
      20 WS-CHECK-CC char(2) ; 
        25 WS-CHECK-CC-NUM num(2) ; 
      20 WS-CHECK-YY char(2) ; 
        25 WS-CHECK-YY-NUM num(2) ; 
    15 WS-CHECK-MM char(2) ; 
      20 WS-CHECK-MM-NUM num(2) ; 
  10 WS-PROCESS-DATE char(6) ; 
    15 WS-PROCESS-CC char(2) ; 
    15 WS-PROCESS-YY char(2) ; 
    15 WS-PROCESS-MM char(2) ; 
  10 WS-IVA-CASE-MBR-FG char(1) ; 
  10 WS-IVE-MMBR-IND char(1) ; 
  10 WS-NCP-FG char(1) ; 
  10 WS-CST-FG char(1) ; 
  10 WS-CHD-FG char(1) ; 
  10 WS-UPI1 int ; 
  10 WS-FAM-CASE-HST-BEG-DATE char(10) ; 
    15 WS-FAM-CASE-HST-BEG-CCYY char(4) ; 
      20 WS-FAM-CASE-HST-BEG-CC char(2) ; 
      20 WS-FAM-CASE-HST-BEG-YY char(2) ; 
    15 WS-FAM-CASE-HST-BEG-HYPH1 char(1) ; 
    15 WS-FAM-CASE-HST-BEG-MM char(2) ; 
      20 WS-FAM-CASE-HST-BEG-MM-NUM num(2) ; 
    15 WS-FAM-CASE-HST-BEG-HYPH2 char(1) ; 
    15 WS-FAM-CASE-HST-BEG-DD char(2) ; 
  10 WS-FAM-CASE-HST-END-DATE char(10) ; 
    15 WS-FAM-CASE-HST-END-CCYY char(4) ; 
      20 WS-FAM-CASE-HST-END-CC char(2) ; 
      20 WS-FAM-CASE-HST-END-YY char(2) ; 
    15 WS-FAM-CASE-HST-END-HYPH1 char(1) ; 
    15 WS-FAM-CASE-HST-END-MM char(2) ; 
      20 WS-FAM-CASE-HST-END-MM-NUM num(2) ; 
    15 WS-FAM-CASE-HST-END-HYPH2 char(1) ; 
    15 WS-FAM-CASE-HST-END-DD char(2) ; 
  10 WS-IVE-AID-CD-CHA char(3) ; 
    15 WS-IVE-AID-CD-NUM num(3) ; 
  10 WS-IVE-AID-CD-PACK decimal(2) ; 
  10 WS-MEDIC-NMB-CHA char(11) ; 
    15 WS-MEDIC-NMB-NUM num(11) ; 
  10 WS-MEDIC-NMB-PACK decimal(11) ; 
  10 WS-COUNT1 decimal(3) ; 
  10 WS-COUNT2 decimal(3) ; 
end // end AIN49W5


Record AIN49W6 type basicRecord
  10 PMP-TEMP-SSN-CHA char(9) ; 
    15 PCMR-PSEUDO-SSN num(9) ; 
end // end AIN49W6


Record AIN49W7 type basicRecord
  10 PCMR-NEXT-UPI int ; 
end // end AIN49W7


Record AIN49W8 type basicRecord
  10 POP-NAME char(21) ; 
  10 POP-FLAG char(1) ; 
  10 POP-METAPH-CD char(4) ; 
  10 POP-STATUS-CD char(1) ; 
end // end AIN49W8


Record AIN49W9 type basicRecord
  5 WS-9-FILE char(216) ; 
    10 WS-9-CNTY-CD char(2) ; 
    10 WS-9-CHILD-SSN char(9) ; 
    10 WS-9-CHILD-NM char(37) ; 
      15 WS-9-LST-NM char(21) ; 
      15 WS-9-FRST-NM char(16) ; 
    10 WS-9-GRNT-INFO char(14) [12] ; 
      15 WS-9-GRNT-DT char(8) ; 
        20 WS-9-GRNT-MM char(2) ; 
        20 WS-9-GRNT-DD char(2) ; 
        20 WS-9-GRNT-CCYY char(4) ; 
      15 WS-9-GRNT-AMT num(6,2) ; 
  5 WS-INDEX-1 num(2) ; 
  5 WS-GRNT-PROCESS char(1) ; 
  5 WS-CURRENT-DT char(10) ; 
    10 WS-CURRENT-CC num(2) ; 
    10 WS-CURRENT-YY num(2) ; 
    10 WS-CURRENT-FIL1 char(1) ; 
    10 WS-CURRENT-MM num(2) ; 
    10 WS-CURRENT-FIL2 char(1) ; 
    10 WS-CURRENT-DD num(2) ; 
  5 WS-MONTH-IND char(2) ; 
  5 WS-END-TS char(26) ; 
    10 WS-END-TS-DT char(10) ; 
    10 WS-END-TS-TM char(16) ; 
  5 WS-TIME-STAMP char(26) ; 
  5 WS-ADR-TYPE char(2) ; 
end // end AIN49W9