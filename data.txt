public DcCasesCargo[] retrieveRecordsForTextMsgDZActivity(int maxRows, String parallelPartition) throws TIERSRunTimeException
	{
		String finderName = "retrieveRecordsForTextMsgDZActivity";

		PreparedStatement statement = null;
		Connection conn = null;
		ResultSet rs = null;
		ArrayList<DcCasesCargo> v = new ArrayList<DcCasesCargo>();

		try
		{
			conn = getConnection();
			String sqlQuery = SELECT_SQL;

			sqlQuery = sqlQuery + " WHERE CASE_STATUS_CD IN('AP','PE') AND PHN_TXT_TYP_CD IS NULL AND VAL_PHN_NUM_CD IS NULL " + parallelPartition + " with ur ";

			statement = conn.prepareStatement(sqlQuery);
			rs = statement.executeQuery();

			DcCasesCargo colrows[] = null;

			while (rs.next())
			{
				if ((rs.getString("OTHER_PH_NUM") != null && !rs.getString("OTHER_PH_NUM").trim().isEmpty())
						|| (rs.getString("PH_NUM") != null && !rs.getString("PH_NUM").trim().isEmpty())
						|| (rs.getString("MSG_PHN_NUM") != null && !rs.getString("MSG_PHN_NUM").trim().isEmpty()))
				{
					DcCasesCargo row = new DcCasesCargo();
					getRowFromResultSet(row, rs);
					v.add(row);
				}
			}

			colrows = new DcCasesCargo[v.size()];
			v.toArray(colrows);

			return colrows;

		}
		catch (SQLException e)
		{
			throw new TIERSRunTimeException(e.getMessage(), e);
		}

		finally
		{
			try
			{
				if (rs != null && getClose())
					rs.close();
			}
			catch (SQLException e)
			{
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try
			{
				if (statement != null)
				{
					closeStatement(finderName, statement, maxRows, v.size());

				}
			}
			catch (SQLException e)
			{
				throw new TIERSRunTimeException(e.getClass().getName() + " " + finderName + " " + e.getMessage(), e);
			}
			try
			{
				if (conn != null && getClose())
					conn.close();
			}
			catch (SQLException e)
			{
				throw new TIERSRunTimeException(e.getClass().getName() + " " + finderName + " " + e.getMessage(), e);
			}
		}

	}
	//Changes done by UmaRani for ILIES-287940 starts
	//Vulnarable Switch Logic starts
	/**
	 *Method findByCaseNum.
	 * This method is used to retreive records for a given case number
	 * @param maxRows int
	 * @param lCaseNum long
	 * @return DcCasesCargo[]
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findVulnerableIndvByCaseNum(int maxRows, long lCaseNum)
	throws TIERSRunTimeException {
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		try {
			conn = getConnection();
			statement =
				conn.prepareStatement(
						"SELECT VULNERABLE_SW FROM DC_CASES Where CASE_NUM = ? WITH UR ");
			statement.setLong(1, lCaseNum);
			rs = statement.executeQuery();
			int cnt = 0;
			while (cnt++ < maxRows && rs.next()) {
				DcCasesCargo row = new DcCasesCargo(); 
				row.setVulnerableSw(getCharacterFromResultSet(rs,"VULNERABLE_SW"));
				v.add(row);
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(
						e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}
	//ILIES-287940 ends
	
	//SOP-1866 START
	public DcCasesCargo[] findByCaseNumWithCaseStatusCd(int maxRows, ArrayList list) throws TIERSRunTimeException {
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		
		ResultSet rs = null;
		DcCasesCargo colrows[] = null;
		StringBuffer sbClause = new StringBuffer();
		try {
			Debug.println("Inside method findByCaseNumWithCaseStatusCd");
			conn = getConnection();
			String clause = "WHERE CASE_NUM IN (";
			int iCaseSize = list.size();
			for (int i = 0; i < iCaseSize; i++) {
				sbClause.append(list.get(i));
				if (!((i + 1) == list.size()))
				{
					sbClause.append(",");
				}
			}
			clause += sbClause.toString()
			+ ") AND CASE_STATUS_CD = 'AP' WITH UR ";
			statement = conn.prepareStatement(" SELECT CASE_NUM FROM DC_CASES " + " " + clause);
			
			Debug.println("the query is findByCaseNumWithCaseStatusCd" 
					+ " " + clause);
			
			rs = statement.executeQuery();
			int cnt = 0;
			while (rs.next() && cnt++ < maxRows) {
				DcCasesCargo row = new DcCasesCargo();
				row.setCaseNum(rs.getLong("CASE_NUM"));
				v.add(row);
			}
			
			colrows = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			Debug.println("Exiting method findByCaseNumWithCaseStatusCd");
		} catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (statement != null) {
					statement.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(), e);
			}
		}
		return colrows;
	}
	//SOP-1866 END
	
	/**
	 * ILIES-291522 - ROHIYADAV - TWN being called for case change
	 * Method findByCaseNumProgStatusCdEffEndDt. This method is used to retrieve records for records which are not pending and in IR mode 
	 * given case number and program code
	 * 
	 * @param maxRows
	 *            int - max rows
	 * @param caseNum
	 *            Long - caseNum
	 * @param progCode
	 *            String - progCode
	 * @return DcCaseProgramCargo[] - returns cargo
	 * @throws TIERSRunTimeException
	 */
	public DcCasesCargo[] findByCaseNumProgStatusCdEffEndDt(int maxRows,
			String caseNum) throws TIERSRunTimeException {
		Debug.println(" findByCaseNumProgStatusCdEffEndDt " + " caseNum= " + caseNum);
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		final String SELECT_SQL_LOCAL = "SELECT DC.CASE_NUM, DC.CASE_MODE_CD FROM DC_CASES";
		try {
			conn = getConnection();

			statement = conn.prepareStatement(SELECT_SQL_LOCAL 
					+ " DC LEFT JOIN BRG_OWNER.DC_CASE_PROGRAM DP ON DC.CASE_NUM = DP.CASE_NUM AND DP.EFF_END_DT IS NULL AND (DP.PROG_STATUS_CD = 'PE' OR DP.REINSTATE_COMPLIANCE_DT IS NOT NULL) WHERE DC.CASE_MODE_CD = 'IR' AND DC.CASE_NUM = "+caseNum+" AND DP.CASE_NUM IS NULL WITH UR");
			rs = statement.executeQuery();
			int cnt = 0;
			while (cnt++ < maxRows && rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				row.setCaseNum(rs.getLong("CASE_NUM"));
				row.setCaseModeCd(rs.getString("CASE_MODE_CD"));
				v.add(row);
			}
			DcCasesCargo colrows[] = new DcCasesCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		} catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(),e);
		} finally {
			try {
				if (rs != null)
					rs.close();
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(),e);
			}
			try {
				if (statement != null)
					statement.close();
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(),e);
			}
			try {
				if (conn != null && getClose())
					conn.close();
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " "
						+ e.getMessage(),e);
			}
		}
	}
	
}