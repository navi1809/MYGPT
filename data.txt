//Call AppManager.TranslateProfileResponses() to update the session
							applicationManager.translateProfileResponses(pageCollAppInPrflCargo.getRcv_fs_oth_st_resp(),
								sesAppInPrflCargo.getRcv_fs_oth_st_resp(), pageStatus, 
								IApplicationManager.RECEIVE_FS_IN_OTHER_STATE, sesAppInPrflCargo);
									
							//Add the SES_RESP to the indivResponsesArray
							indivResponseArray[4] = sesAppInPrflCargo.getRcv_fs_oth_st_resp();
						
							//Added by Uma for SSI Benefits
							sesAppInPrflCargo.setSsi_benefit_resp(fixSelectionValue(sesAppInPrflCargo.getSsi_benefit_resp()));
							if(applicationManager.determineDirtyStatus(pageCollAppInPrflCargo.getSsi_benefit_resp(),
									sesAppInPrflCargo.getSsi_benefit_resp(), dirtyIndicator, pageStatus))
								{					
									trackPeopleToPersist(persistPeople, indivSeqNumInt);
								}
														
								//Call AppManager.TranslateProfileResponses() to update the session
								applicationManager.translateProfileResponses(pageCollAppInPrflCargo.getSsi_benefit_resp(),
									sesAppInPrflCargo.getSsi_benefit_resp(), pageStatus, 
									IApplicationManager.SSI_BENEFIT_RESP, sesAppInPrflCargo);
													
								//Add the SSI_BENEFITS to the indivResponsesArray
								indivResponseArray[5] = sesAppInPrflCargo.getSsi_benefit_resp();
								//Added by Uma for Cash Benefits
								sesAppInPrflCargo.setCash_benefit_resp(fixSelectionValue(sesAppInPrflCargo.getCash_benefit_resp()));
								if(applicationManager.determineDirtyStatus(pageCollAppInPrflCargo.getCash_benefit_resp(),
										sesAppInPrflCargo.getCash_benefit_resp(), dirtyIndicator, pageStatus))
									{					
										trackPeopleToPersist(persistPeople, indivSeqNumInt);
									}
															
									//Call AppManager.TranslateProfileResponses() to update the session
									applicationManager.translateProfileResponses(pageCollAppInPrflCargo.getCash_benefit_resp(),
										sesAppInPrflCargo.getCash_benefit_resp(), pageStatus, 
										IApplicationManager.CASH_BENEFIT_RESP, sesAppInPrflCargo);
														
									//Add the SSI_BENEFITS to the indivResponsesArray
									indivResponseArray[6] = sesAppInPrflCargo.getCash_benefit_resp();
									//Added for Department of Aging Service
									sesAppInPrflCargo.setAging_sw(fixSelectionValue(sesAppInPrflCargo.getAging_sw()));
									if(applicationManager.determineDirtyStatus(pageCollAppInPrflCargo.getAging_sw(),
											sesAppInPrflCargo.getAging_sw(), dirtyIndicator, pageStatus)){								
										trackPeopleToPersist(persistPeople, indivSeqNumInt);
									}
									applicationManager.translateProfileResponses(pageCollAppInPrflCargo.getAging_sw(),
											sesAppInPrflCargo.getAging_sw(), pageStatus, 
											IApplicationManager.AGING_SERVICE_SW, sesAppInPrflCargo);
									indivResponseArray[7] = sesAppInPrflCargo.getAging_sw();
									//Added for Former Foster Care
									sesAppInPrflCargo.setFormer_foster_sw(fixSelectionValue(sesAppInPrflCargo.getFormer_foster_sw()));
									if(applicationManager.determineDirtyStatus(pageCollAppInPrflCargo.getFormer_foster_sw(),
											sesAppInPrflCargo.getFormer_foster_sw(), dirtyIndicator, pageStatus)){								
										trackPeopleToPersist(persistPeople, indivSeqNumInt);
									}							
									applicationManager.translateProfileResponses(pageCollAppInPrflCargo.getFormer_foster_sw(),
											sesAppInPrflCargo.getFormer_foster_sw(), pageStatus, 
											IApplicationManager.FOSTER_CARE_SW, sesAppInPrflCargo);
									indivResponseArray[8] = sesAppInPrflCargo.getFormer_foster_sw();
									
									// ffcs starts
									AFBHouseHoldMemberQuestionsBO afbHHMembQustBO = new AFBHouseHoldMemberQuestionsBO();
									if(afbHHMembQustBO.determineFosterStateCdStatus(pageCollAppInPrflCargo, appNumber, sesAppInPrflCargo)){
										afbHHMembQustBO.storeFormerFosterStateCd(pageCollAppInPrflCargo,appNumber,sesAppInPrflCargo);
									}
									
									//ffcs ends
									
									// Check for Disability & Blindness -- if Yes set True -- Starts
							if(sesAppInPrflCargo.getYeohc_resp().equalsIgnoreCase("R"))
								yeohCount=yeohCount+1;;
						
					
						//Add the indivResponsesArray to the indivResponsesMap
						indivResponseMap.put(indivSeqNum, indivResponseArray);
					}					
				}
				
				//Does persistPeople[IApplicationManager.ARE_PEOPLE_DIRTY] = true?
				if(persistPeople[IApplicationManager.ARE_PEOPLE_DIRTY] == true)
				{
					//For each I_S_N
					for(int i = 0; i < sesAppPrflCollSize; i++)
					{
						//Get cargo i from the collection
						sesAppInPrflCargo = (APP_IN_PRFL_Cargo) sesAppInPrflColl.get(i);	
						
						//Get I_S_N for current cargo
						indivSeqNum = sesAppInPrflCargo.getIndv_seq_num();
						indivSeqNumInt = Integer.parseInt(indivSeqNum);					
						
						//Does persistPeople[I_S_N] = true?
						if(persistPeople[indivSeqNumInt] == true)
						{				
							//yes, data is dirty, call persist()
							applicationManager.persist(appNumber, indivSeqNum, questionsArray, 
								(String[])indivResponseMap.get(indivSeqNum));;
						}
					}
				}
			//check for Disability and Blindness for each individual and set Driver R for Disability page -- starts
				String reqPages = "ABDIS";
				int pageABDISStatus = driverManager.getAFBStatus(
						FwConstants.AFB_DRIVER,	"ABDIS", driverArray);
				
				if(dablFlag)
					driverManager.makeRequired(FwConstants.AFB_DRIVER,reqPages,driverArray,appNumber);
				else{
						DisabilityBO disBO = new DisabilityBO();
						APP_IN_DABL_Collection dablColl = disBO.loadDABLDetailsAFB(appNumber);
						if(dablColl.isEmpty())
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,reqPages,driverArray,appNumber);
						if(pageABDISStatus == FwConstants.DRIVER_ADD_NEW)
							driverManager.makeComplete(FwConstants.AFB_DRIVER,reqPages,driverArray,appNumber);
					
				}
				//ILIES-133651 - ravrajendran - ABE - SSA Edits (State List) - Asset screens - Complete Application Development  -- Start
				ABSaveAndExitBO saveAndExitBO = new ABSaveAndExitBO();
				String[] liquidPages = {AppConstants.ABLAQ_PAGE_ID, AppConstants.ABLAS_PAGE_ID,AppConstants.ABOAQ_PAGE_ID,AppConstants.ABOAS_PAGE_ID};
				short[] programKey = (short[])session.get(FwConstants.AFB_PROGRAM_KEY);
				if (saveAndExitBO.isAABDMedical(appNumber).equals(AppConstants.YES) || programManager.isMSPProgramRequested(programKey)) {
					driverManager.makeRequired(FwConstants.AFB_DRIVER,liquidPages,driverArray,appNumber);
				}
				//ILIES-133651 - ravrajendran - ABE - SSA Edits (State List) - Asset screens - Complete Application Development  -- END
				
				// Added by vinoj kannan, ILIES-282289
				boolean drvComplete = true;
				if ((driverManager.getAFBStatus(FwConstants.AFB_DRIVER, AppConstants.ABLAQ_PAGE_ID,
						driverArray) > 1)
						|| (driverManager.getAFBStatus(FwConstants.AFB_DRIVER,
								AppConstants.ABLAS_PAGE_ID, driverArray) > 1)) {
					drvComplete = false;
				}
				//ILIES-279945
				String[] liquidPagess = {AppConstants.ABLAQ_PAGE_ID, AppConstants.ABLAS_PAGE_ID};
				if (programManager.isSNAPProgramRequested(programKey) && drvComplete) {
					driverManager.makeRequired(FwConstants.AFB_DRIVER,liquidPagess,driverArray,appNumber);
				}
				
				//Call Driver.MakeComplete() on this page
				driverManager.makeComplete(FwConstants.AFB_DRIVER, 
					(String) request.get(FwConstants.CURRENT_PAGE_ID), driverArray, appNumber);
				
				//Added by Nancy Jain for ILIES-282238 : Removing the values from session.
				regBo.clearSessionOfWarningMsgOnSaveAndExitFunc(session);
				//ILIES-282238 changes end here
		} 
		catch(FwException fe) 
		{
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID(AppConstants.STORE_HOUSE_HOLD_MEMBERS_QUESTIONS);
			we.setFwException(fe);
			throw we;
		}
		catch(Exception e) 
		{
			ctx.setRollbackOnly();
			throw createFwException(this.getClass().getName(), AppConstants.STORE_HOUSE_HOLD_MEMBERS_QUESTIONS, e);
		
		}
	}


	/**
	* Comment here
	*/
	public void getHouseHoldPregnancyQuestions(FwTransaction txnBean) throws javax.ejb.EJBException 
	{
	
		try 
		{
			//Declarations
			Map session = txnBean.getSession();
			Map request = txnBean.getRequest();
			Map pageCollection = txnBean.getPageCollection();
			int[] driverArray = (int[]) session.get(FwConstants.AFB_DRIVER);
			//String indivSeqNum = null;
			PeopleHandler peopleHandler =(PeopleHandler)session.get(AppConstants.INDIV_MASTER_HANDLER);
			//PCR# 32248 - 33826 - load people handle with only in-home individuals for asking pregnancy questions.	
			peopleHandler=new PeopleHandler();
			peopleHandler.loadPeopleHandler((String)session.get(AppConstants.APP_NUMBER));
			session.put(AppConstants.INDIV_MASTER_HANDLER,peopleHandler);
			
			//Read in APP_IN_PROFILE from session
			APP_IN_PRFL_Collection appInPrflColl =
			(APP_IN_PRFL_Collection) session.get(
				AppConstants.APP_IN_PRFL_MASTER);
			String appNumber =(String) session.get(AppConstants.APP_NUMBER);
			//Determine driver status
			int driverStatus =
				(int) driverManager.getAFBStatus(
					FwConstants.AFB_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);
					
			//run component manager
			//call Component manager to get list of components
			//component ids are put into the pageCollection via this method
			//if rules exist, the individual custom collection is put into the page collection
			componentManager.getComponents(
				(String) (request.get(FwConstants.CURRENT_PAGE_ID)),
				txnBean);
			//Call create and load response maps to create the maps needed to create the AFBIndividuals tags
			createAndLoadABPRGResponseMapsToPageCollection(appInPrflColl, pageCollection, peopleHandler, true, driverStatus);
			AFBHouseHoldPregnancyQuestionsBO finalBo = new AFBHouseHoldPregnancyQuestionsBO();
			APP_RQST_Collection appRqstCollection = finalBo.loadRqstApplication(appNumber);
			APP_RQST_Cargo appRqstCargo = null;
			Map beforeCollection = (Map)session.get(FwConstants.BEFORE_COLLECTION);
			APP_IN_PRFL_Cargo appInCargo = null;
			NO_ONE_Cargo noCargo = new NO_ONE_Cargo();
			NO_ONE_Collection	noOneColl = null;
			int appInCollSize = appInPrflColl.size();
			int appRqstSize = appRqstCollection.size();
			boolean indvFound = false;
			for (int i = 0; i < appRqstSize; i++) {
				appRqstCargo = (APP_RQST_Cargo) appRqstCollection.get(i);
				if (appRqstCargo != null && appRqstCargo.getHpe_app_stat_cd() != null && appRqstCargo.getHpe_app_stat_cd().equals("PE")) {
					for (int j = 0; j < appInCollSize; j++) {
						appInCargo = (APP_IN_PRFL_Cargo) appInPrflColl.get(j);
						if (appInCargo != null && appInCargo.getPreg_resp() != null	&& !(appInCargo.getPreg_resp().equals("N"))) {
							indvFound = true;
						}
					}
					if (!indvFound) {
						Map noOneCheckedMap = (Map) pageCollection.get(AppConstants.NO_ONE_CHECKED_MAP);
						noCargo.setNo_one_name("PREG");
						noCargo.setNo_one_value("FwConstants.YES");
						noOneCheckedMap.put("NO_ONE_CHECKED_344",FwConstants.YES);
					}
				}
			}
		//set page collection to before collection
			session.put(
				FwConstants.BEFORE_COLLECTION,
				txnBean.getPageCollection());
			//ILIES-282296 changes start here .Removing the values from session
			ABRegistrationBO regBo = new ABRegistrationBO();
			regBo.clearSessionOfWarningMsgOnSaveAndExitFunc(session);
			//ILIES-282296 changes end here
			
		}
		catch(FwException fe) 
		{
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("getHouseHoldPregnancyQuestions");
			we.setFwException(fe);
			throw we;
		}
		catch(Exception e) 
		{
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "getHouseHoldPregnancyQuestions", e);
			throw fe;
		}
	}
	/**
	* Comment here
	*/
	public void storeHouseHoldPregnancyQuestions(FwTransaction txnBean) throws javax.ejb.EJBException {
	
		try 
		{
			//declarations
			int numQuestions = 1;
			APP_IN_PRFL_Collection pageCollAppInPrflColl = null;
			//APP_PRFL_Collection appPrflColl = null;
			NO_ONE_Collection noOneColl = null;
			//NO_ONE_Cargo noOneCargo = null;
			FwMessageList errorMessageList = null;
			String indivSeqNum = null;
			int indivSeqNumInt = 0;
			APP_IN_PRFL_Cargo sesAppInPrflCargo = null;
			APP_IN_PRFL_Cargo pageCollAppInPrflCargo = null;
			AFBHouseHoldPregnancyQuestionsBO abprgObj = new AFBHouseHoldPregnancyQuestionsBO();		
			boolean isSaveBtnClicked  = false;
			boolean isDataChanged = false;
			//ILIES-282236 Changes start here
			APP_IN_PRFL_Cargo[] clonedPrflCollArray=null;
			APP_IN_PRFL_Collection prflColl=new  APP_IN_PRFL_Collection();
			ArrayList<ICargoCollection> collList = new ArrayList();
			//changes end here

			//define a short array for the questions
			short[] questionsArray = new short[numQuestions];
			questionsArray[0] = IApplicationManager.PREGNANCY;			//pregnancy

			
			//page scheduling indicators
			int[] dirtyIndicator = {IApplicationManager.NOT_DIRTY};
			
			//Create string array for persist
			String[] indivResponseArray = null;

			//Create INDIV_RESP_MAP for persist
			Map indivResponseMap = new HashMap();
			
			//get variables from session and page collection
			Map session = txnBean.getSession();
			Map pageCollection = txnBean.getPageCollection();
			Map request = txnBean.getRequest();
			int[] driverArray = (int[]) session.get(FwConstants.AFB_DRIVER);
			PeopleHandler peopleHandler = (PeopleHandler)session.get(AppConstants.INDIV_MASTER_HANDLER);

			
			//get current page status
			int pageStatus = (int) driverManager.getAFBStatus(
				FwConstants.AFB_DRIVER,
				(String) request.get(FwConstants.CURRENT_PAGE_ID),driverArray);
			
			//get the appNumber from session
			String appNumber = (String)session.get(AppConstants.APP_NUMBER);

			//Read in APP_IN_PROFILE from session
			APP_IN_PRFL_Collection sesAppInPrflColl =
			(APP_IN_PRFL_Collection) session.get(
				AppConstants.APP_IN_PRFL_MASTER);		

			//get size of the collection
			int sesAppPrflCollSize = sesAppInPrflColl.size();
			
			//Read in APP_IN_PROFILE from page coll.
			pageCollAppInPrflColl = (APP_IN_PRFL_Collection) pageCollection.get("APP_IN_PRFL_Collection");	

			//get the beforecollection map
			Map beforeCollection = (Map)session.get(FwConstants.BEFORE_COLLECTION);

			//get the NoOneChecked map from the beforecollection
			Map noOneCheckedMap = (Map)beforeCollection.get(AppConstants.NO_ONE_CHECKED_MAP);

			//Get the NO ONE Collection
			noOneColl = (NO_ONE_Collection)pageCollection.get("NO_ONE_Collection");

			//check for missing cargos for people that don't have any questions answered, 
			//and populate with empty cargos
			applicationManager.preparePageColl(pageCollAppInPrflColl,sesAppInPrflColl,questionsArray);

			boolean[] componentsDisplayed = new boolean[]{false};
			componentsDisplayed = abprgObj.getComponentsDisplayed(beforeCollection, componentsDisplayed);
			short[] programKeyArray = (short[])session.get(FwConstants.AFB_PROGRAM_KEY);

			//RUN VALIDATIONS
			errorMessageList =  abprgObj.validateABPRG(pageCollAppInPrflColl, noOneColl, noOneCheckedMap,true, componentsDisplayed, programKeyArray, sesAppInPrflColl);
			//ILIES-282236 changes start here. Modified by Anvesh added logic to display Warning message on click on Save And Exit button
			
			int seqNum = 0; 
			clonedPrflCollArray = pageCollAppInPrflColl.cloneResults();
			if(clonedPrflCollArray != null && clonedPrflCollArray.length > 0)
			{ 
				for(int i=1; i<= clonedPrflCollArray.length; i++)
				{ 
					for(APP_IN_PRFL_Cargo cargo : clonedPrflCollArray)
					{ 
						if(cargo.getIndv_seq_num() != null && !cargo.getIndv_seq_num().isEmpty())
							seqNum = Integer.valueOf(cargo.getIndv_seq_num()); 
						if(seqNum == i)
						{ 
							prflColl.add(cargo);
							collList.add(prflColl);
							break; } 
						} 
					} 
				}
			//ILIES-282236 changes end here.
			
			
			
			if(errorMessageList != null && abprgObj.hasMessages())
			{
			
				//Translate Profile Response After Validation
				applicationManager.translateProfileResponseAfterValidation(pageCollAppInPrflColl, 
						sesAppInPrflColl, questionsArray);

				request.put(FwConstants.MESSAGE_LIST, errorMessageList); 
				
				//load maps into page collection
				createAndLoadABPRGResponseMapsToPageCollection(pageCollAppInPrflColl, pageCollection, peopleHandler, false, 0);		
				pageCollection.put(AppConstants.NO_ONE_CHECKED_MAP, noOneCheckedMap);
				pageCollection.put("APP_IN_PRFL_Collection", pageCollAppInPrflColl);				
				
				pageCollection.put(FwConstants.PEOPLE_344, beforeCollection.get(FwConstants.PEOPLE_344));
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST, beforeCollection.get(FwConstants.PAGE_COMPONENT_LIST));

				txnBean.setRequest(request);
				txnBean.setPageCollection(pageCollection);
				//ILIES-282236 changes start here. Modified by Anvesh
				request.put(FwConstants.PAGE_COLL_0, prflColl);
				request.put(FwConstants.NUMBER_OF_COLLECTIONS_FOR_WARNING_MSG, 1);
				//ILIES-282236 changes end here.
				return;
			} 
		
			//define a boolean array (size of SES_A_I_P + 1)
			boolean[] persistPeople = new boolean[applicationManager.getMaxSeqNumer(sesAppInPrflColl)+1];
	
			int pageCollAppInPrflCollSize = pageCollAppInPrflColl.size();
			boolean  pregAddedFlag = false;
			//Loop for each Cargo in the Session APP_IN_PRFL collection
			for(int i = 0; i < sesAppPrflCollSize; i++)
			{
				//Get cargo i from the collection
				sesAppInPrflCargo = (APP_IN_PRFL_Cargo) sesAppInPrflColl.get(i);	
				
				//Get I_S_N for current cargo
				indivSeqNum = sesAppInPrflCargo.getIndv_seq_num();
				indivSeqNumInt = Integer.parseInt(indivSeqNum);
			
				//Get the matching indiv_seq_num cargo from the page collection
				for(int j = 0; j < pageCollAppInPrflCollSize; j++)
				{
					//Get cargo i from the collection
					pageCollAppInPrflCargo = (APP_IN_PRFL_Cargo) pageCollAppInPrflColl.get(j);	
					
					//does this match the SES_A_I_P cargo?
					if(Integer.parseInt(pageCollAppInPrflCargo.getIndv_seq_num()) ==
						indivSeqNumInt)
					{
						break;
					}
					else
					{
						pageCollAppInPrflCargo = null;
					}
				}
				//Did this person answer any questions? (Does the cargo contain responses?)
				if(pageCollAppInPrflCargo != null)
				{
					//Initialize indivResponseArray = new string array for current person
					indivResponseArray = new String[numQuestions];
				
					//pregnancy  = IApplicationManager.PREGNANCY
						//Does AppManager.DetermineDirtyStatus() on this response return true?
						if(applicationManager.determineDirtyStatus(pageCollAppInPrflCargo.getPreg_resp(),
							sesAppInPrflCargo.getPreg_resp(), dirtyIndicator, pageStatus))
						{					
							trackPeopleToPersist(persistPeople, indivSeqNumInt);
							//now i am checking for the driver indicator 
							if(pageStatus != FwConstants.DRIVER_REQUIRED && pageCollAppInPrflCargo.getPreg_resp() == null){
								//now we need to delete absent parent information and preg information because they unchecked the preg
								ABHouseHoldMemberBO houseHoldMemberBo = new ABHouseHoldMemberBO();
								houseHoldMemberBo.deleteAbsentParent(String.valueOf(indivSeqNumInt),appNumber);								
								houseHoldMemberBo.deletePregnancy(String.valueOf(indivSeqNumInt),appNumber);
							}
							else{
								pregAddedFlag = true;
							}
						}
						
						//Call AppManager.TranslateProfileResponses() to update the session
						applicationManager.translateProfileResponses(pageCollAppInPrflCargo.getPreg_resp(),
							sesAppInPrflCargo.getPreg_resp(), pageStatus, IApplicationManager.PREGNANCY,
							sesAppInPrflCargo);
					
						//Add the SES_RESP to the indivResponsesArray
						indivResponseArray[0] = sesAppInPrflCargo.getPreg_resp();				
				
					//Add the indivResponsesArray to the indivResponsesMap
					indivResponseMap.put(indivSeqNum, indivResponseArray);
				}					
			}
			
			//Does persistPeople[IApplicationManager.ARE_PEOPLE_DIRTY] = true?
			if(persistPeople[IApplicationManager.ARE_PEOPLE_DIRTY] == true)
			{
				//For each I_S_N
				for(int i = 0; i < sesAppPrflCollSize; i++)
				{
					//Get cargo i from the collection
					sesAppInPrflCargo = (APP_IN_PRFL_Cargo) sesAppInPrflColl.get(i);	
					
					//Get I_S_N for current cargo
					indivSeqNum = sesAppInPrflCargo.getIndv_seq_num();
					indivSeqNumInt = Integer.parseInt(indivSeqNum);					
					
					//Does persistPeople[I_S_N] = true?
					if(persistPeople[indivSeqNumInt] == true)
					{				
						//yes, data is dirty, call persist()
						applicationManager.persist(appNumber, indivSeqNum, questionsArray, 
							(String[])indivResponseMap.get(indivSeqNum));
					}
				}
			}
						
			
			//Does the page scheduling indicator != NOT_DIRTY?
				//Call RunDirtyLogic on driver (this page doesn't schedule other pages)
				
			//Call Driver.MakeComplete() on this page
			driverManager.makeComplete(FwConstants.AFB_DRIVER, 
				(String) request.get(FwConstants.CURRENT_PAGE_ID), driverArray, appNumber);

			if(dirtyIndicator[0]!=IApplicationManager.NOT_DIRTY) {
				applicationManager.runDirtyLogicOnDriver(appNumber,dirtyIndicator[0] ,"ABPRD",driverArray);
			}
			//ILIES-282236 changes start here.Modified by Anvesh 
			ABRegistrationBO regBo = new ABRegistrationBO();
			regBo.clearSessionOfWarningMsgOnSaveAndExitFunc(session);//Removing the values from session.
			//ILIES-282236 changes end here
			//start of BRGUS00286206 added by rotanak
			//commented by rotanak
/*			//schedule ABHHR page
			if(peopleHandler.getNumberOfIndividuals() == 1)
			{
				//get the ISN
				INDIVIDUAL_Custom_Collection indivColl = peopleHandler.getAllIndividuals();
				INDIVIDUAL_Custom_Cargo indivCargo = (INDIVIDUAL_Custom_Cargo)indivColl.get(0);
				
				if(indivCargo.getSex_ind().equals(AppConstants.SEX_IND_FEMALE))
				{
					//Get cargo i from the collection
					sesAppInPrflCargo = (APP_IN_PRFL_Cargo) sesAppInPrflColl.get(0);
					
					if(!sesAppInPrflCargo.getPreg_resp().equals(String.valueOf(IApplicationManager.STATUS_NOT_REQUIRED))){
						// driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABHHR", driverArray, appNumber);
						//Indrani
						driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABPRD", driverArray, appNumber);
					}
					else{
						//Indrani
					//	driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABHHR", driverArray, appNumber);
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABPRD", driverArray, appNumber);
						driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABHHR", driverArray, appNumber);
						
					}
				}									
			}
			else if(pregAddedFlag){
				driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABPRD", driverArray, appNumber);
			}

			// absent parent display logic	
			ABAbsentParentBO absentParentBo = new ABAbsentParentBO();
			short[] programKeyArray = (short[])session.get(FwConstants.AFB_PROGRAM_KEY);
			boolean requiredFlag  = absentParentBo.checkAbsentParentRequired(peopleHandler,sesAppInPrflColl,appNumber,programKeyArray);
			if(requiredFlag){
				driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABAPD", driverArray, appNumber);
			}
			else{
				driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABAPD", driverArray, appNumber);
			}*/
			
			//end of BRGUS00286206 added by rotanak
		} 
		catch(FwException fe) 
		{
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeHouseHoldPregnancyQuestions");
			we.setFwException(fe);
			throw we;
		}
		catch(Exception e) 
		{
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "storeHouseHoldPregnancyQuestions", e);
			throw fe;
		}
	}
	

	/**
	* 
	*/
	private Map createAndLoadABHHQResponseMapsToPageCollection(APP_IN_PRFL_Collection appInPrflColl, 
					Map pageCollection, PeopleHandler peopleHandler, boolean pageLoad, int driverStatus)
	{
		try 
		{
			getPeopleCollectionAndUpdateMaps(appInPrflColl, pageCollection, peopleHandler, "56", 
					IApplicationManager.DISABLED_PERSON, pageLoad, driverStatus, true);
			getPeopleCollectionAndUpdateMaps(appInPrflColl, pageCollection, peopleHandler, "58", 
					IApplicationManager.DRUG_FELON,	pageLoad, driverStatus, true);
    		// Added for ILIES-129516
			getPeopleCollectionAndUpdateMaps(appInPrflColl, pageCollection, peopleHandler, "5218", 
					IApplicationManager.DRUG_TRTMNT_PROG, pageLoad, driverStatus, true);
			getPeopleCollectionAndUpdateMaps(appInPrflColl, pageCollection, peopleHandler, "5219", 
					IApplicationManager.PAROLE_PROB_VIOL, pageLoad, driverStatus, true);
			getPeopleCollectionAndUpdateMaps(appInPrflColl, pageCollection, peopleHandler, "41", 
					IApplicationManager.RECEIVE_FS_IN_OTHER_STATE, pageLoad, driverStatus, true);
			//Added by Uma patil
			getPeopleCollectionAndUpdateMaps(appInPrflColl, pageCollection, peopleHandler, "418", 
					IApplicationManager.SSI_BENEFIT_RESP, pageLoad, driverStatus, true);
			getPeopleCollectionAndUpdateMaps(appInPrflColl, pageCollection, peopleHandler, "419", 
					IApplicationManager.CASH_BENEFIT_RESP, pageLoad, driverStatus, true);
			getPeopleCollectionAndUpdateMaps(appInPrflColl, pageCollection, peopleHandler, "421", 
					IApplicationManager.AGING_SERVICE_SW, pageLoad, driverStatus, true);

			getPeopleCollectionAndUpdateMaps(appInPrflColl, pageCollection, peopleHandler, "43", 
							 IApplicationManager.FOSTER_CARE_SW, pageLoad, driverStatus, true);
			pageCollection.put("APP_IN_PRFL_Collection", appInPrflColl);				
			return pageCollection;
			//exit
		}
		catch(FwException fe) 
		{
			throw fe;
		} 
		catch(Exception e) 
		{
			FwException fe = createFwException(this.getClass().getName(), "createAndLoadABHHQResponseMapsToPageCollection", e);
			throw fe;
		}	
	}
	
	private Map createAndLoadABHMSResponseMapsToPageCollection(APP_IN_PRFL_Collection appInPrflColl, Map pageCollection, PeopleHandler peopleHandler, boolean pageLoad){
		try {
			getPeopleCollectionAndUpdateMapsForSummary(appInPrflColl, pageCollection, peopleHandler, "56", IApplicationManager.DISABLED_PERSON, pageLoad, true);
			getPeopleCollectionAndUpdateMapsForSummary(appInPrflColl, pageCollection, peopleHandler, "58", IApplicationManager.DRUG_FELON, pageLoad, true);
    		// Added for ILIES-129516
			getPeopleCollectionAndUpdateMapsForSummary(appInPrflColl, pageCollection, peopleHandler, "5218", IApplicationManager.DRUG_TRTMNT_PROG, pageLoad, true);
			getPeopleCollectionAndUpdateMapsForSummary(appInPrflColl, pageCollection, peopleHandler, "5219", IApplicationManager.PAROLE_PROB_VIOL, pageLoad, true);
			getPeopleCollectionAndUpdateMapsForSummary(appInPrflColl, pageCollection, peopleHandler, "41", IApplicationManager.RECEIVE_FS_IN_OTHER_STATE, pageLoad, true);
			//Added by Uma for S Expansion
			getPeopleCollectionAndUpdateMapsForSummary(appInPrflColl, pageCollection, peopleHandler, "418", IApplicationManager.SSI_BENEFIT_RESP, pageLoad, true);
			getPeopleCollectionAndUpdateMapsForSummary(appInPrflColl, pageCollection, peopleHandler, "419", IApplicationManager.CASH_BENEFIT_RESP, pageLoad, true);
			return pageCollection;
		} catch(FwException fe){
			throw fe;
		} catch(Exception e){
			FwException fe = createFwException(this.getClass().getName(), "createAndLoadABHMSResponseMapsToPageCollection", e);
			throw fe;
		}	
	}
	
	/**
	* 
	*/
	private Map createAndLoadABPRGResponseMapsToPageCollection(APP_IN_PRFL_Collection appInPrflColl, 
					Map pageCollection, PeopleHandler peopleHandler, boolean pageLoad, int driverStatus)
	{
		try 
		{
			getPeopleCollectionAndUpdateMaps(appInPrflColl, pageCollection, peopleHandler, "344", 
					IApplicationManager.PREGNANCY, pageLoad, driverStatus, false);

			return pageCollection;	
		}
		catch(FwException fe) 
		{
			throw fe;
		} 
		catch(Exception e) 
		{
			FwException fe = createFwException(this.getClass().getName(), "createAndLoadABPRGResponseMapsToPageCollection", e);
			throw fe;
		}	
	}
	
	// added by avtsingh for ILIES-129330
	/**
	* 
	*/
	private Map createAndLoadABHHRResponseMapsToPageCollection(APP_IN_PRFL_Collection appInPrflColl, 
					Map pageCollection, PeopleHandler peopleHandler, boolean pageLoad, int driverStatus)
	{
		try 
		{
			getPeopleCollectionAndUpdateMaps(appInPrflColl, pageCollection, peopleHandler, "32", 
					IApplicationManager.CARETAKER_RESP, pageLoad, driverStatus, false);

			return pageCollection;	
		}
		catch(FwException fe) 
		{
			throw fe;
		} 
		catch(Exception e) 
		{
			FwException fe = createFwException(this.getClass().getName(), "createAndLoadABHHRResponseMapsToPageCollection", e);
			throw fe;
		}	
	}
	/**
	* 
	*/
	private boolean[] trackPeopleToPersist(boolean[] persistPeople, int indivSeqNumInt)
	{
		try 
		{
			//Set persistPeople[IApplicationManager.ARE_PEOPLE_DIRTY] = true;
			persistPeople[IApplicationManager.ARE_PEOPLE_DIRTY] = true;
								
			//Set persistPeople[I_S_N] = TRUE;
			persistPeople[indivSeqNumInt] = true;
			
			return persistPeople;
		}
		catch(FwException fe) 
		{
			throw fe;
		} 
		catch(Exception e) 
		{
			FwException fe = createFwException(this.getClass().getName(), "trackPeopleToPersist", e);
			throw fe;
		}	
	}
	/**
	* Method sort the relationship cargos in a sequence order of indv seq num
	*@param appHshlRltColl gov.wisconsin.access.business.entities.APP_HSHL_RLT_Collection
	*@param sortedRetionshipColl gov.wisconsin.access.business.entities.APP_HSHL_RLT_Collection
	*@author govinpr 
	*/
	private APP_HSHL_RLT_Collection sortRelationshipCargoOnIndvSeq(APP_HSHL_RLT_Collection appHshlRltColl) throws javax.ejb.EJBException {

		try {
			APP_HSHL_RLT_Collection sortedRetionshipColl = new APP_HSHL_RLT_Collection();
			APP_HSHL_RLT_Cargo tempCargo = null; 
			boolean found = false;			
			if(appHshlRltColl != null ){
				if(appHshlRltColl.size() > 1){
					int appHshlRltCollSize = appHshlRltColl.size();
					for(int i=0;i<appHshlRltCollSize;i++){
						int indSeq = Integer.parseInt(appHshlRltColl.getCargo(i).getSrc_indv_seq_num());
						for(int j=0;j<appHshlRltCollSize;j++){
							int tempSeq = Integer.parseInt(appHshlRltColl.getCargo(j).getSrc_indv_seq_num());
							if(indSeq > tempSeq){
								indSeq = tempSeq;
								tempCargo = appHshlRltColl.getCargo(j);
								found = true;
							}
						}
						if(!found){
							tempCargo = appHshlRltColl.getCargo(i);
							found = false;
						}
						if(tempCargo != null) {
							sortedRetionshipColl.addCargo(tempCargo);
							appHshlRltColl.remove(tempCargo);
							i--;
							appHshlRltCollSize--;
							tempCargo = null;
							found = false;
						}
					}
					if(appHshlRltColl.size() > 0) {
						sortedRetionshipColl.addAll(appHshlRltColl);
					}
				}else{
					sortedRetionshipColl = appHshlRltColl;
				}
			}
			return sortedRetionshipColl;
		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("sortRelationshipCargoOnIndvSeq");
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "sortRelationshipCargoOnIndvSeq", e);
			throw fe;
		}
	}
	
	/**
	* Comment here
	*/
	public void getInstitutionDetails(FwTransaction txnBean) throws javax.ejb.EJBException {

		try 
		{
			log(ILog.INFO, "HouseHoldInfoEJBBEan::getInstitutionDetails:Start");
			Map session = txnBean.getSession();
			Map request = txnBean.getRequest();
			Map pageCollection = txnBean.getPageCollection();
			String pageId = null;
			Map beforeColl = null;
			PeopleHandler peopleHandler = null;
			int[] driverArray = null;
			String appNumber = null;
			int currentPageStatus = 0;
			List instEnrolledList = null;
			String indvSeqNumber = null;
			boolean detailKeyFlag = false;
			int currentRecordIndex = 0;
			String indvSeqNum = null;
			String spouseIndvSeqNum = null;
			peopleHandler = (PeopleHandler)session.get(AppConstants.INDIV_MASTER_HANDLER);
			appNumber =(String) session.get(AppConstants.APP_NUMBER);
			driverArray = (int[]) session.get(FwConstants.AFB_DRIVER);
			pageId = (String)request.get(FwConstants.CURRENT_PAGE_ID);
			currentPageStatus = driverManager.getAFBStatus(FwConstants.AFB_DRIVER,pageId,driverArray);
			
			
				InstitutionBO instBO = new InstitutionBO();
				if(!pageId.equals((String)request.get(FwConstants.PREVIOUS_PAGE_ID))){
					//we need to remove the values from the session
					session.remove(FwConstants.BEFORE_COLLECTION);
					beforeColl = new HashMap();
					short[] programKeyArray = (short[])session.get(FwConstants.AFB_PROGRAM_KEY);				
					instEnrolledList =instBO.findInstitutionEnrolledPeople(appNumber);		
					beforeColl.put("InstEnrollList",instEnrolledList);
					session.put(FwConstants.BEFORE_COLLECTION,beforeColl);
					if(!request.get(FwConstants.PREVIOUS_PAGE_ID).equals("ABHMS")){
						pageCollection.remove(FwConstants.DETAIL_KEY_BEAN);
					}
				}
				else{
					beforeColl =(Map) session.get(FwConstants.BEFORE_COLLECTION);
					beforeColl.remove("APP_IN_INST_Collection");
					beforeColl.remove("APP_IN_SPS_IMPOV_Collection");
				}
				if(beforeColl != null){
					if(beforeColl.containsKey("InstEnrollList")){
						instEnrolledList = (List)beforeColl.get("InstEnrollList");
					}
					if(beforeColl.containsKey(FwConstants.CURRENT_RECORD_INDEX)){
						currentRecordIndex = Integer.parseInt(String.valueOf(beforeColl.get(FwConstants.CURRENT_RECORD_INDEX)));
						currentRecordIndex = currentRecordIndex+1;
					}
				}
				
				if(pageCollection.containsKey(FwConstants.DETAIL_KEY_BEAN)){
					IndivTypeSeqBean indvSeqBean =(IndivTypeSeqBean)pageCollection.get(FwConstants.DETAIL_KEY_BEAN);
					indvSeqNumber = indvSeqBean.getIndivSeqNum();
					detailKeyFlag = true;
				}
				else if(currentPageStatus == FwConstants.DRIVER_COMPLETE){
					int instEnrollListSize = 0;
					if(instEnrolledList != null)
						instEnrollListSize = instEnrolledList.size();
					IndivTypeSeqBean indvTypeSeqBean = null;
					for(int i =0 ; i < instEnrollListSize ;  i++){
						indvSeqNumber = instEnrolledList.get(i).toString();
						indvTypeSeqBean = new IndivTypeSeqBean();
						indvTypeSeqBean.setIndivSeqNum(indvSeqNumber);
						populateRecordArray(indvTypeSeqBean,session);
					}
				}
				pageCollection = new HashMap();
				if(currentPageStatus == FwConstants.DRIVER_COMPLETE || currentPageStatus == FwConstants.DRIVER_VISIT_AGAIN || currentPageStatus == FwConstants.DRIVER_REQUIRED || detailKeyFlag)
				{
					//Now i am loading the List Information 
					if(!detailKeyFlag && currentPageStatus != FwConstants.DRIVER_COMPLETE){
						if(instEnrolledList != null)
							indvSeqNumber = (String)instEnrolledList.get(currentRecordIndex);
						//Now i am storing this seq number to the record array 
						IndivTypeSeqBean indvTypeSeqBean = new IndivTypeSeqBean();
						indvTypeSeqBean.setIndivSeqNum(indvSeqNumber);
						populateRecordArray(indvTypeSeqBean,session);
					}
					pageCollection = instBO.loadInstitution(appNumber,indvSeqNumber);
					//SET DEFAULT SPOUSE ADDRESS ON LOAD OF PAGE FROM REGISTRATION TABLE
					/* COMMENTED -- ENABLE TO GET SPOUSE DEFAULT ADDRESS FROM REGISTRATION TABLE
					if(currentPageStatus == FwConstants.DRIVER_REQUIRED){//testing 
						APP_IN_SPS_IMPOV_Collection  appSPSColl = instBO.getSpouseContactInfoOnload(appNumber);
						pageCollection.put("APP_IN_SPS_IMPOV_Collection", appSPSColl);
						spouseIndvSeqNum = instBO.isWifeOrHusband(appNumber,indvSeqNumber);
						pageCollection.put("SPOUSE_SEQ_NUM", spouseIndvSeqNum);
					}
					*/
				}	

				INDIVIDUAL_Custom_Cargo indvlCargo = peopleHandler.getIndividual(indvSeqNumber);
				INDIVIDUAL_Custom_Collection indvCustColl = new INDIVIDUAL_Custom_Collection();
				indvCustColl.addCargo(indvlCargo);
				//pageCollection.put("PEOPLE_362",indvCustColl);
				
				spouseIndvSeqNum = instBO.isWifeOrHusband(appNumber,indvSeqNumber);
				pageCollection.put("SPOUSE_SEQ_NUM", spouseIndvSeqNum);
				pageCollection.put(AppConstants.INDV_SEQUENCE_NUMBERS,indvSeqNumber);
				pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM,indvSeqNumber);
				txnBean.setPageCollection(pageCollection);
				beforeColl = (Map)session.get(FwConstants.BEFORE_COLLECTION);
				//Calling Component Manager for Page components
				componentManager.getComponents((String) (request.get(FwConstants.CURRENT_PAGE_ID)), txnBean);
				//Checking for Before Collection is Null 
				if(beforeColl == null)
					beforeColl = new HashMap();
				beforeColl.putAll(pageCollection);
				session.put(FwConstants.BEFORE_COLLECTION, beforeColl);
				log(ILog.INFO, "HouseHoldInfoEJBBEan::getInstitutionDetails:End");
		}  catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("getInstitutionDetails");
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "getInstitutionDetails", e);
			throw fe;
		}
	}
	/**
	* Comment here
	*/
	public void storeInstitutionDetails(FwTransaction txnBean) throws javax.ejb.EJBException {

	try {
			log(ILog.INFO, "HouseHoldInfoEJBBEan::storeInstitutionDetails:Start");
			Map session = txnBean.getSession();
			Map request = txnBean.getRequest();
			Map pageCollection =txnBean.getPageCollection();
			int[] driverArray = null;
			String appNumber = null;
			Map beforeColl = null;	
			String indvSeqNumber = null;
			int currentPageStatus = 0;
			String pageId = null;
			List instEnrolledList = null;
			APP_IN_INST_Collection appInstBeforeColl = null;
			APP_IN_INST_Collection appInstColl = null;
			APP_IN_INST_Cargo appInstCargo = null;
			APP_IN_INST_Cargo appInstBeforeCargo = null;
			APP_IN_SPS_IMPOV_Collection appSpouseBeforeColl = null;
			APP_IN_SPS_IMPOV_Collection appSpouseColl = null;
			APP_IN_SPS_IMPOV_Cargo appSpouseBeforeCargo = null; 
			APP_IN_SPS_IMPOV_Cargo appSpouseCargo = null;
			FwMessageList validateInfo = null;
			FwMessageList validateInfoSpouse = null;
			String spouseSeqNum = "0";	
				
			
				
				//Get the status of the Driver from Session
				driverArray = (int[]) session.get(FwConstants.AFB_DRIVER);
				//Get the current Page Id from the Request
				pageId = (String)request.get(FwConstants.CURRENT_PAGE_ID);
				//Get the APP_NUM from the Session
				appNumber =(String) session.get(AppConstants.APP_NUMBER);
				//Get the before Collection from the Session
				beforeColl =(Map) session.get(FwConstants.BEFORE_COLLECTION);
				//Get the Status of the page from driver manager
				currentPageStatus = driverManager.getAFBStatus(FwConstants.AFB_DRIVER,pageId,driverArray);
				
				if(pageCollection.get("SPOUSE_SEQ_NUM") != null)
					spouseSeqNum = (String)pageCollection.get("SPOUSE_SEQ_NUM");
				else
					spouseSeqNum = (String)beforeColl.get("SPOUSE_SEQ_NUM");
				instEnrolledList = (List)beforeColl.get("InstEnrollList");
				//Get the INDV_SEQ_NUM from the Before Collection
				indvSeqNumber = (String)beforeColl.get(AppConstants.INDV_SEQUENCE_NUMBERS);
				//Get program key
				short programKey[] = (short[])session.get(FwConstants.AFB_PROGRAM_KEY);
				//First I am getting the before collection
				if(beforeColl.containsKey("APP_IN_INST_Collection")){
					appInstBeforeColl =(APP_IN_INST_Collection)beforeColl.get("APP_IN_INST_Collection");
				}
				if(pageCollection.containsKey("APP_IN_INST_Collection")){
					appInstColl =(APP_IN_INST_Collection)pageCollection.get("APP_IN_INST_Collection");
				}
				//Spouse details Before Collection
				if(beforeColl.containsKey("APP_IN_SPS_IMPOV_Collection")){
					appSpouseBeforeColl =(APP_IN_SPS_IMPOV_Collection)beforeColl.get("APP_IN_SPS_IMPOV_Collection");
				}
				if(pageCollection.containsKey("APP_IN_SPS_IMPOV_Collection")){
					appSpouseColl = (APP_IN_SPS_IMPOV_Collection)pageCollection.get("APP_IN_SPS_IMPOV_Collection");
				}
				List componentList =(ArrayList) beforeColl.get(FwConstants.PAGE_COMPONENT_LIST);
				boolean componentFlag = false;
				if(componentList.contains("369")){
					componentFlag = true;
				}
				//Calling the BO Method
				InstitutionBO instBo = new InstitutionBO();
				ABINDValidator validatorBO = new ABINDValidator();
				
				if(componentFlag){
					if(appSpouseColl != null && !appSpouseColl.isEmpty()){
						appSpouseCargo = appSpouseColl.getCargo(0);
						
						//trim all the address field values to avoid extra spaces in DB
						if(appSpouseCargo.getSps_city_adr() != null)
							appSpouseCargo.setSps_city_adr(appSpouseCargo.getSps_city_adr().trim());
						if(appSpouseCargo.getSps_l1_adr() != null)
							appSpouseCargo.setSps_l1_adr(appSpouseCargo.getSps_l1_adr().trim());
						if(appSpouseCargo.getSps_l2_adr() != null)
							appSpouseCargo.setSps_l2_adr(appSpouseCargo.getSps_l2_adr().trim());
						if(appSpouseCargo.getSps_zip_adr() != null)
							appSpouseCargo.setSps_zip_adr(appSpouseCargo.getSps_zip_adr().trim());
						if(appSpouseCargo.getSps_zip_adr() != null)
							appSpouseCargo.setSps_zip_adr(appSpouseCargo.getSps_zip_adr().trim());
					}	
				}
				
				
				if(appInstColl != null && !appInstColl.isEmpty()){
					appInstCargo = appInstColl.getCargo(0);
						//Now calling the validate method 
						validateInfo = validatorBO.validateInstitutionDetails(appInstCargo, appSpouseCargo, componentFlag);
						if(validateInfo != null && validateInfo.hasMessages()){
								request.put(FwConstants.MESSAGE_LIST, validateInfo);
								pageCollection.put("APP_IN_INST_Collection",appInstColl);
								pageCollection.put("APP_IN_SPS_IMPOV_Collection", appSpouseColl);
								pageCollection.put(FwConstants.PAGE_COMPONENT_LIST, beforeColl.get(FwConstants.PAGE_COMPONENT_LIST));
								pageCollection.put(AppConstants.INDV_SEQUENCE_NUMBERS,indvSeqNumber);
								pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM,indvSeqNumber);
								pageCollection.put("SPOUSE_SEQ_NUM",beforeColl.get("SPOUSE_SEQ_NUM"));
								pageCollection.put("SPOUSE_SEQ_NUM",spouseSeqNum);
								return;
						}
						
						//check for Spouse Address Details--starts
						if(componentFlag){
							if(appSpouseCargo != null){
								appSpouseCargo.setApp_num(appNumber);
								appSpouseCargo.setIndv_seq_num(indvSeqNumber);
							}
							if(appSpouseBeforeColl != null){
								appSpouseBeforeCargo = appSpouseBeforeColl.getCargo(0);
															
								//compare cargos
								appSpouseCargo = (APP_IN_SPS_IMPOV_Cargo)isChanged(appSpouseBeforeCargo,appSpouseCargo);
								if(appSpouseCargo.isDirty()){
									if(appSpouseCargo.getSps_sta_adr().equalsIgnoreCase("SEL"))
										appSpouseCargo.setSps_sta_adr("");
									if(currentPageStatus == FwConstants.DRIVER_REQUIRED){
										appSpouseCargo.setRowAction(FwConstants.ROWACTION_INSERT);
									}else{
										appSpouseCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
									}
									instBo.storeSpouseContactInfo(appSpouseColl);
								}
							}
							else{
								if(appSpouseCargo.getSps_sta_adr().equalsIgnoreCase("SEL"))
									appSpouseCargo.setSps_sta_adr("");
								appSpouseCargo.setRowAction(FwConstants.ROWACTION_INSERT);
								instBo.storeSpouseContactInfo(appSpouseColl);
							}
						}
						appInstCargo.setApp_num(appNumber);
						//Setting the INDV_SEQ_NUM
						appInstCargo.setIndv_seq_num(indvSeqNumber);
						//doing date formatting
						if(appInstCargo.getInst_nam() != null)
							appInstCargo.setInst_nam(appInstCargo.getInst_nam().trim());
						if(appInstCargo.getOrig_inst_dt() == null || appInstCargo.getOrig_inst_dt().trim().length() == 0){
							appInstCargo.setOrig_inst_dt(AppConstants.HIGH_TIMESTAMP);
						}else{
							appInstCargo.setOrig_inst_dt(displayFormatter.getYYYYMMDDTimestamp(appInstCargo.getOrig_inst_dt()));
						}
						if(appInstCargo.getCur_inst_dt().trim().length() == 0){
							appInstCargo.setCur_inst_dt(AppConstants.HIGH_TIMESTAMP);
						}else{
							appInstCargo.setCur_inst_dt(displayFormatter.getYYYYMMDDTimestamp(appInstCargo.getCur_inst_dt()));
						}
						if(appInstCargo.getInst_cnty_cd().equalsIgnoreCase("SEL"))
							appInstCargo.setInst_cnty_cd("0");
						
						//call completeness check and set record complete indicator							
						instBo.completenessCheckInstitutionalDetails(appInstCargo, appSpouseCargo, componentFlag);
											
						//Checking the Before Collection is Null or Not
						if(appInstBeforeColl != null){
							appInstBeforeCargo = appInstBeforeColl.getCargo(0);
							//Now I am comparing the Cargos
							appInstCargo = (APP_IN_INST_Cargo)isChanged(appInstBeforeCargo,appInstCargo);
							if(appInstCargo.isDirty()){
								
								appInstCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
								instBo.storeInstitution(appInstColl);
							}
						}
						else{
							//We need to insert new record to the data base
							appInstCargo.setRowAction(FwConstants.ROWACTION_INSERT);	
							instBo.storeInstitution(appInstColl);
						}
				}
				boolean pageComplete = false;
				if(currentPageStatus == FwConstants.DRIVER_REQUIRED || currentPageStatus == FwConstants.DRIVER_VISIT_AGAIN){
					//Now checking for any persons need to be displayed
					int currentArrayIndex = Integer.parseInt((String)beforeColl.get(FwConstants.CURRENT_RECORD_INDEX));  
					if(currentArrayIndex + 1 == instEnrolledList.size()){
						pageComplete = true;
					}
				}
				//If the driver status is add new and driver status is complete 					
				if( pageComplete || currentPageStatus == FwConstants.DRIVER_ADD_NEW || currentPageStatus == FwConstants.DRIVER_COMPLETE){
					driverManager.makeComplete(FwConstants.AFB_DRIVER,(String)request.get(FwConstants.CURRENT_PAGE_ID),driverArray,appNumber);
				}
				else{
					session.put(FwConstants.BEFORE_COLLECTION,beforeColl);
				}
				pageCollection.put("SPOUSE_SEQ_NUM",spouseSeqNum);
				log(ILog.INFO, "HouseHoldInfoEJBBEan::storeInstitutionDetails:End");
		}catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeInstitutionDetails");
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "storeInstitutionDetails", e);
			throw fe;
		}
	}
	/**
	* Comment here
	*/
	public void changeDisabilityDetails(FwTransaction txnBean) throws javax.ejb.EJBException {
	try {
		Map pageCollection = txnBean.getPageCollection();
		IndivTypeSeqBean indivTypeSeqBean = new IndivTypeSeqBean();
		APP_IN_DABL_Collection appDisabilityColl = (APP_IN_DABL_Collection)pageCollection.get("APP_IN_DABL_Collection");
		indivTypeSeqBean.setIndivSeqNum(appDisabilityColl.getCargo(0).getIndv_seq_num());
		pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivTypeSeqBean);
		
	} catch(FwException fe) {
		ctx.setRollbackOnly();
		FwWrappedException we = new FwWrappedException();
		we.setCallingClassID(this.getClass().getName());
		we.setCallingMethodID("changeDisabilityDetails");
		we.setFwException(fe);
		throw we;
	} catch(Exception e) {
		ctx.setRollbackOnly();
		FwException fe = createFwException(this.getClass().getName(), "changeDisabilityDetails", e);
		throw fe;
	}
}

	/**
	* Comment here
	*/
	public void eraseDisabilityDetails(FwTransaction txnBean) throws javax.ejb.EJBException {

		try {
		
		Map request = txnBean.getRequest();
		Map session = txnBean.getSession();
		Map pageCollection = txnBean.getPageCollection();
		
		// Getting app number from session
		String appNumber = (String)session.get(AppConstants.APP_NUMBER);

		boolean warningMsgFlag = false;
		String warningMesgs = (String)request.get(FwConstants.WARNING_MSG_DETAILS);
						
		// Getting APP_IN_PRFL_Collection from session
		APP_IN_PRFL_Collection sessionAppInPrflCollection = (APP_IN_PRFL_Collection) session.get(AppConstants.APP_IN_PRFL_MASTER);
		// Getting APP_IN_PRFL_Collection from before collection 
		Map beforeCollection = (Map) session.get(FwConstants.BEFORE_COLLECTION);
		// Getting people handler from session
		PeopleHandler peopleHandler = (PeopleHandler) session.get(AppConstants.INDIV_MASTER_HANDLER);
		// Getting APP_IN_PRFL_Collection from page collection
		APP_IN_PRFL_Collection appInPrflAfterCollection = (APP_IN_PRFL_Collection) pageCollection.get("APP_IN_PRFL_Collection");
		// Getting NO_ONE_Collection from page collection
		NO_ONE_Collection noOneCollection = (NO_ONE_Collection) pageCollection.get("NO_ONE_Collection");
		// Getting NO_ONE_CHECKED map from session
		Map noOneCheckedMap = (Map) beforeCollection.get(AppConstants.NO_ONE_CHECKED_MAP);
		//Getting blind and disability collection from before collection
		APP_IN_DABL_Collection appInDisableBeforeColl = (APP_IN_DABL_Collection) beforeCollection.get(AppConstants.BLIND_DISABLE_COLLECTION);				
		
		// Getting indiv seq number from list view component				
		APP_IN_DABL_Collection appInDisableColl = (APP_IN_DABL_Collection)pageCollection.get("APP_IN_DABL_Collection");
		String indvSeqNum = appInDisableColl.getCargo(0).getIndv_seq_num();

		// Initializing/getting the session and page app indv profile collection size 			
		int sessionAppInPrflCollectionSize =  sessionAppInPrflCollection.size();
		// Initializing array for a number of questions (assuming the number of questions is static)
		// Added DRUG_TRTMNT_PROG and PAROLE_PROB_VIOL fields for ILIES-129516
		short[] questionsFieldArray = {IApplicationManager.DISABLED_PERSON, IApplicationManager.DRUG_FELON, IApplicationManager.DRUG_TRTMNT_PROG, IApplicationManager.PAROLE_PROB_VIOL, IApplicationManager.RECEIVE_FS_IN_OTHER_STATE, IApplicationManager.SSI_BENEFIT_RESP,IApplicationManager.CASH_BENEFIT_RESP};
		
		// Calling a method populate dummy cargos into collection, when before collection doesn't match with the after collection			
		applicationManager.preparePageColl(appInPrflAfterCollection,sessionAppInPrflCollection,questionsFieldArray);

		// Calling business validations to check any other validations are there
		ABHouseholdMembersSummaryBO summaryBO = new ABHouseholdMembersSummaryBO();
		summaryBO.validateQuestions(appInPrflAfterCollection, noOneCollection, noOneCheckedMap);

		IndivTypeSeqBean indivTypeSeqBean = new IndivTypeSeqBean();
		indivTypeSeqBean.setIndivSeqNum(indvSeqNum);
		//PCR# 35063 - add type also - so the we will come to know which infor user tried to delete first time
		indivTypeSeqBean.setType("D");
		// Determine to throw warning message or continue with erase logic				
		String name=peopleHandler.getFirstName(indvSeqNum);
		warningMsgFlag = this.determineSummaryErase(beforeCollection, indivTypeSeqBean, warningMesgs, "32106", summaryBO,name);

		if(!warningMsgFlag){
			// Putting messagelist into the request
			request.put(FwConstants.MESSAGE_LIST, summaryBO.getMessageList());
			// Translate response profile after validation
			applicationManager.translateProfileResponseAfterValidation(appInPrflAfterCollection, sessionAppInPrflCollection, questionsFieldArray);
			// populate people components into page collection from before collection
			List compIds = (List)beforeCollection.get(FwConstants.PAGE_COMPONENT_LIST);
			int compIdSize = compIds.size();
			for(int i=0;i<compIdSize;i++){
				String str = new StringBuffer(AppConstants.PEOPLE).append(compIds.get(i)).toString();
				pageCollection.put(str, beforeCollection.get(str));
			}
			// Load Maps into page collection
			this.createAndLoadABHMSResponseMapsToPageCollection(appInPrflAfterCollection, pageCollection, peopleHandler, false);
			pageCollection.put(AppConstants.APP_PREG_COLLECTION, beforeCollection.get(AppConstants.APP_PREG_COLLECTION));
			pageCollection.put(AppConstants.ABSENT_PARENT_COLLECTION, beforeCollection.get(AppConstants.ABSENT_PARENT_COLLECTION));
			pageCollection.put(AppConstants.BLIND_DISABLE_COLLECTION, beforeCollection.get(AppConstants.BLIND_DISABLE_COLLECTION));
			pageCollection.put(AppConstants.NO_ONE_CHECKED_MAP, noOneCheckedMap);	
			pageCollection.put(AppConstants.APP_IN_PRFL_MASTER, appInPrflAfterCollection);
			pageCollection.put("PEOPLE_347", beforeCollection.get("PEOPLE_347"));	
			pageCollection.put("ABHouseHoldMembersListview_ListView", beforeCollection.get("ABHouseHoldMembersListview_ListView"));
			//PCR# 35063 - Child Out of Home collection was missing to set back
			pageCollection.put("ABHouseHoldOutsideHomeMembersListview_ListView", beforeCollection.get("ABHouseHoldOutsideHomeMembersListview_ListView"));
			pageCollection.put("ABHouseHoldMembersPregnancyListview_ListView", beforeCollection.get("ABHouseHoldMembersPregnancyListview_ListView"));
			pageCollection.put("ABHouseHoldMembersRelationshipsListview_ListView", beforeCollection.get("ABHouseHoldMembersRelationshipsListview_ListView"));
			pageCollection.put("ABHouseHoldOtherParentsListview_ListView", beforeCollection.get("ABHouseHoldOtherParentsListview_ListView"));
			pageCollection.put("ABHouseHoldMembersBlindDisableListview_ListView", beforeCollection.get("ABHouseHoldMembersBlindDisableListview_ListView"));
			pageCollection.put("ABHouseHoldMembersInstitutionListview_ListView", beforeCollection.get("ABHouseHoldMembersInstitutionListview_ListView"));
			pageCollection.put(FwConstants.PAGE_COMPONENT_LIST, beforeCollection.get(FwConstants.PAGE_COMPONENT_LIST));
			pageCollection.put(AppConstants.INDV_TYPE_SEQ_BEAN, indivTypeSeqBean);
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection);
			pageCollection.put(AppConstants.FIRST_NAME,	peopleHandler.getFirstName(indvSeqNum));
			//Loading and merging APP_RGST in ABHMD (ILIES-174329)
			setValuesForCard(request, session,appNumber,peopleHandler);			
			return;					
		}

		//Deleting blind and disable information
		APP_IN_DABL_Collection appInDisableAfterColl = new APP_IN_DABL_Collection();
		int appInDisableBeforeCollSize = appInDisableBeforeColl.size();
		for(int p=0;p<appInDisableBeforeCollSize;p++){
			String indSeq = appInDisableBeforeColl.getCargo(p).getIndv_seq_num();
			if(indvSeqNum.equals(indSeq)){
				appInDisableAfterColl.addCargo(appInDisableBeforeColl.getCargo(p));
				break;
			}
		}
		// Deleting blind and disabled information
		summaryBO.deleteDisabilityInfo(appInDisableAfterColl);

		int[] driverArray = (int[]) session.get(FwConstants.AFB_DRIVER);
		//short[] programKeyArray = (short[])session.get(FwConstants.AFB_PROGRAM_KEY);
		short responseId = IApplicationManager.DISABLED_PERSON;
		for(int i =0; i < sessionAppInPrflCollectionSize;i++){
			APP_IN_PRFL_Cargo sessionAppInPrflCargo = sessionAppInPrflCollection.getCargo(i);
			if(sessionAppInPrflCargo.getIndv_seq_num().equals(indvSeqNum)){
				//now i am updating the session cargo
				sessionAppInPrflCargo.setDabl_resp(FwConstants.NO);
				//added new line : to persist in database
				applicationManager.makeAbsoluteNotRequiredAndPersist(responseId,sessionAppInPrflCargo);
				//now i need to check how many people in the house hold 
				DisabilityBO disBO = new DisabilityBO();
				APP_IN_DABL_Collection dablColl = disBO.loadDisability(appNumber);
				int houseHoldSize = dablColl.size();
				if(houseHoldSize == 0){
					driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABDIS", driverArray, appNumber);
				}
			}
		}
	
		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseDisabilityDetails");
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "eraseDisabilityDetails", e);
			throw fe;
		}
	}

	/**
	* Comment here
	*/
	public void changeInstitutionDetails(FwTransaction txnBean) throws javax.ejb.EJBException {

		try {
			Map request = txnBean.getSession();
			String indvSeqNum = null;
			indvSeqNum= (String)request.get("firstName");
			Map pageCollection = txnBean.getPageCollection();
			IndivTypeSeqBean indivTypeSeqBean = new IndivTypeSeqBean();
			APP_IN_INST_Collection appInstitutionColl = (APP_IN_INST_Collection)pageCollection.get("APP_IN_INST_Collection");
			indivTypeSeqBean.setIndivSeqNum(appInstitutionColl.getCargo(0).getIndv_seq_num());
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivTypeSeqBean);

		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("changeInstitutionDetails");
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "changeInstitutionDetails", e);
			throw fe;
		}
	}

	
	/**
	* Comment here
	*/
	public void addDisabilityDetails(FwTransaction txnBean) throws javax.ejb.EJBException {

		try {
			log(ILog.INFO, "HouseHoldInfoEJBBean::addDisabilityDetails:Start");	 
			Map session = txnBean.getSession();
			Map request = txnBean.getRequest();
				  
			//Initialize Validator
			ABDISValidator disabilityValidator = new ABDISValidator();
			
			//Initialize short field names
			short responseId = 0 ;
			
			//Get driver info.
			  int[] driverArray = (int[]) session.get(FwConstants.AFB_DRIVER);

			//Get appNumber from the session
			String appNum = (String)session.get(AppConstants.APP_NUMBER);
			
			//Get the session AIP Collection 
				  APP_IN_PRFL_Collection appInPrflColl =
								  (APP_IN_PRFL_Collection) session.get(AppConstants.APP_IN_PRFL_MASTER);
			//Cargo
			APP_IN_PRFL_Cargo appInPrflCargo = new APP_IN_PRFL_Cargo(); 
			
			//Get the firstName 
//			String[] indvSeqNumArray = null;
//			indvSeqNumArray = (String[])request.get("firstName");
//			String indvSeqNum = indvSeqNumArray[0];
			
			
			String indvSeqNum = null;
			indvSeqNum= (String)request.get("firstName");
			
			
			//Run Validation
			disabilityValidator.validateAdd(indvSeqNum,"Disability");
			if(disabilityValidator.hasMessages())
			{
				request.put(FwConstants.MESSAGE_LIST,disabilityValidator.getMessageList()); 
				txnBean.setPageCollection((Map) session.get(FwConstants.BEFORE_COLLECTION));
				return;
			}
			
			//Get the responseid
			responseId = IApplicationManager.DISABLED_PERSON;
	
			appInPrflCargo = applicationManager.getAppInProfile(appInPrflColl,indvSeqNum);
			String indvSeqNumSession = appInPrflCargo.getIndv_seq_num();
			if(indvSeqNumSession.equals(indvSeqNum))
			{
				//make the type response add new and persit to db
				applicationManager.makeAddNewAndPersist(responseId,appInPrflCargo);
		
				String parentType = appInPrflCargo.getDabl_resp();
				if(parentType.charAt(0) == IApplicationManager.STATUS_NOT_REQUIRED){
					
					applicationManager.makeCompleteAndPersist(IApplicationManager.DISABLED_PERSON,appInPrflCargo);
				}
				//make detail page add new and persist to db
				driverManager.makeAddNew(FwConstants.AFB_DRIVER,"ABDIS",driverArray,appNum);
			}
			
			//make summary page as required
			driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABHMS",driverArray,appNum);
			
			//end
			log(ILog.INFO, "HouseHoldInfoEJBBean::addDisabilityDetails:End");

		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addDisabilityDetails");
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "addDisabilityDetails", e);
			throw fe;
		}
	}

// Commented by Sai Katta for Self Service Expansion
	//WR# BRGUS00287163 
	
/*	private boolean [] runHealthCareEligibilityCriteria(FwTransaction txnBean){
		try{
				Map session = txnBean.getSession();//get session from txnBean
				Map request = txnBean.getRequest();//get request from txnBean
				boolean [] updateBooleanArray = new boolean[]{false,false,false};
				boolean isFMARequired = false;//holds true is FMA is required
				boolean isHCIndiacator = false;
				boolean isEBDIndiactor = false;
				boolean isYeothIndicator=true;
				boolean groupHCIndiacator = false;
				boolean groupEBDIndiactor = false;
				boolean groupYEOTHIndiactor = true;
				boolean finalYEOTHIndiactor = false;
				List validParentList = new ArrayList();
				String currentIndSeqNum = null;
				//get program key array from session 
				short[] programKeyArray = (short[])session.get(FwConstants.AFB_PROGRAM_KEY);
				String appNum = (String)session.get(AppConstants.APP_NUMBER);
				//Read in APP_IN_PROFILE from session
				APP_IN_PRFL_Collection appInPrflColl =(APP_IN_PRFL_Collection) 
																session.get(AppConstants.APP_IN_PRFL_MASTER);
				APP_IN_PRFL_Cargo appPRFLCargo = null;
				ABHouseHoldMemberBO houseBO = new ABHouseHoldMemberBO();
				//get ProgramManager instance
				IProgramManager programManager = FwProgramManager.getInstance();
				//do check for programs required
				if(programManager.isThisProgramRequested(programKeyArray,FwConstants.FMA_INDEX))//is FMA required
					isFMARequired = true;
				
				//if FMA required than check Eligibility Criteria for each individual
				if(isFMARequired){
					PeopleHandler peopleHandler = (PeopleHandler)session.get(AppConstants.INDIV_MASTER_HANDLER);
					INDIVIDUAL_Custom_Collection indvColl = peopleHandler.getAllIndividuals();
					INDIVIDUAL_Custom_Cargo indvCargo = null;
					int collSize = indvColl.getResultsSize();//get total number of individuals
					Object [] typeArray = {"06","08","20","22"}; //these number indicates person is living in Institution
					List livingTypeList = Arrays.asList(typeArray);
					isYeothIndicator=false;
					for(int i=0; i<collSize; i++){
						indvCargo = indvColl.getResult(i);//get each invidual custom colleaction now
						//get current INd Seq Number
						currentIndSeqNum = indvCargo.getIndv_seq_num();
						//get indv profile cargo by passing Indv Seq Number
						appPRFLCargo = ApplicationManager.getInstance().getAppInProfile(appInPrflColl, currentIndSeqNum);
						isEBDIndiactor = false;
						isHCIndiacator = false;
						
						//Check for eligibility of yeoth, if person is eligible for YEOHC  we don't need to check anyother eligibility criteria
						if(appPRFLCargo.getYeohc_resp().equals("R")||appPRFLCargo.getYeohc_resp().equals("Y")){
							isYeothIndicator=true;
						}else {
							//get living Arrangement Type
							String LivingArrgType =  houseBO.getlivingArrgType(appNum, currentIndSeqNum);
							//check for age criteria for EBD and HC 
							IndividualAge indivAge = indvCargo.getIndv_age();
							
							//start check for EBD
							//if greater than 64yrs and 10months
							if(indivAge.getYears() == 64){
								if(indivAge.getMonths() > 10){
									isEBDIndiactor = true;//make eligible for EBD
								}
							}else if(indivAge.getYears() > 64){
								isEBDIndiactor = true;//make eligible for EBD
							}
	//						check for living arrangement type -- Eligible if staying in Institution
							else if(livingTypeList.contains(LivingArrgType)){
								isEBDIndiactor = true;
							}
							else if(!appPRFLCargo.getDabl_resp().equalsIgnoreCase("N")){////check for Disability or Blindness
								isEBDIndiactor = true;
							}
							
							//start check for HC	
							//check for child <19
							if(indivAge.getYears() < 19){
								isHCIndiacator = true;//make eligible for HC
								//get Ind Seq Num list who is Parent/Step Patrent of a <19yr old child 
								validParentList.add(houseBO.findParentChildRelation(appNum, currentIndSeqNum));
							}
							else if(!appPRFLCargo.getDpnd_care_resp().equalsIgnoreCase("N")){//if caretaker
								isHCIndiacator = true;	
							}
							else if(!appPRFLCargo.getPreg_resp().equals("N")){//if pregnent
								isHCIndiacator = true;
							}
							//parent or step parent having child under 19yrs 
							else if(validParentList.contains(currentIndSeqNum)){
								isHCIndiacator = true;
							}
							
											
							boolean updated = false;
							//if isEBDIndiactor = true make individual EBD Request as Yes
							if(isEBDIndiactor){
								if(appPRFLCargo.getIndv_ebd_rqst_ind().equals("0")){
									updated = true;
									appPRFLCargo.setIndv_ebd_rqst_ind("1");
									updateBooleanArray[0]=true;
								}
								
							}	
							//if isHCIndiacator = true make individual HC Request as 1
							if(isHCIndiacator){
								if(appPRFLCargo.getIndv_hc_rqst_ind().equals("0")){
									updated = true;
									appPRFLCargo.setIndv_hc_rqst_ind("1");
									updateBooleanArray[1]=true;
								}
							}	
							if(updated){
								ApplicationManager.getInstance().updateAppInPrflWithPgmRequest(appPRFLCargo);
							}
							if(isEBDIndiactor){
								groupEBDIndiactor = true;
							}
							if(isHCIndiacator){
								groupHCIndiacator = true;
							}
							//If he is non-financiallly eligible , he can't be eligible for YEOHC.
							if(groupEBDIndiactor || groupHCIndiacator)
								groupYEOTHIndiactor=false;
						}
						
						
					}//end of for-loop
					//update HC Group Indicator 
					if(groupHCIndiacator){
						programManager.addProgram(appNum,FwConstants.HC_INDEX,programKeyArray);
					}
					//update EBD Group Indicator
					if(groupEBDIndiactor){
						programManager.addProgram(appNum,FwConstants.EBD_INDEX,programKeyArray);
					}
					if(isYeothIndicator && groupYEOTHIndiactor)
					{
						finalYEOTHIndiactor=true;
						updateBooleanArray[2]=finalYEOTHIndiactor;
					}
					
				}//end of eligibility check
				
				
				
			return updateBooleanArray;
		}catch (FwException fe) {
			throw fe;
		} catch (Exception e) {
			FwException fe = createFwException(this.getClass().getName(), "runHealthCareEligibilityCriteria", e);
			throw fe;
		}	
	}//end of runHealthCareEligibilityCriteria
	// COmmented by Sai Katta WR# BRGUS00287163 for Self Service Expansion
*/
	
	/**
	 * Method to set application to EBD as default
	 * @param txnBean
	 */
	private void setDefaultEBDApplication(FwTransaction txnBean){
		try{
			Map session = txnBean.getSession();//get session from txnBean
			Map request = txnBean.getRequest();//get request from txnBean
			String currentIndSeqNum = null;
			//get program key array from session 
			short[] programKeyArray = (short[])session.get(FwConstants.AFB_PROGRAM_KEY);
			String appNum = (String)session.get(AppConstants.APP_NUMBER);
			//Read in APP_IN_PROFILE from session
			APP_IN_PRFL_Collection appInPrflColl =(APP_IN_PRFL_Collection) 
															session.get(AppConstants.APP_IN_PRFL_MASTER);
			APP_IN_PRFL_Cargo appPRFLCargo = null;
			//ABHouseHoldMemberBO houseBO = new ABHouseHoldMemberBO();
			
				PeopleHandler peopleHandler = (PeopleHandler)session.get(AppConstants.INDIV_MASTER_HANDLER);
				INDIVIDUAL_Custom_Collection indvColl = peopleHandler.getAllIndividuals();
				INDIVIDUAL_Custom_Cargo indvCargo = null;
				int collSize = indvColl.getResultsSize();//get total number of individuals
				for(int i=0; i<collSize; i++){
					indvCargo = indvColl.getResult(i);//get each invidual custom colleaction now
					//get current INd Seq Number
					currentIndSeqNum = indvCargo.getIndv_seq_num();
					//get indv profile cargo by passing Indv Seq Number
					appPRFLCargo = ApplicationManager.getInstance().getAppInProfile(appInPrflColl, currentIndSeqNum);
					appPRFLCargo.setIndv_ebd_rqst_ind("1");
				}
				//update App In Prfl
				ApplicationManager.getInstance().updateAppInPrflWithPgmRequest(appPRFLCargo);
				//update EBD Group Indicator
				programManager.addProgram(appNum,FwConstants.EBD_INDEX,programKeyArray);
		}catch (FwException fe) {
			throw fe;
		} catch (Exception e) {
			FwException fe = createFwException(this.getClass().getName(), "setDefaultEBDApplication", e);
			throw fe;
		}	
	}
	
	
	/**
	* Comment here
	*/
	
	public void getDisabilityDetails(FwTransaction txnBean) throws javax.ejb.EJBException {

		try {
			log(ILog.INFO, "HousingExpenseEJBBean::getUtilityDetail:Start");
			Map session = txnBean.getSession();
			Map request = txnBean.getRequest();
			ABRegistrationBO regBo = new ABRegistrationBO();
			Map pageCollection = txnBean.getPageCollection();
			String appNumber = "";
			appNumber =(String) session.get(AppConstants.APP_NUMBER);
			PeopleHandler peopleHandler = (PeopleHandler)session.get(AppConstants.INDIV_MASTER_HANDLER);
			//Modified by Nancy Jain for ILIES-282114 : Added Null fix.
			if(peopleHandler == null && appNumber != null){
				peopleHandler=new PeopleHandler();
				peopleHandler.loadPeopleHandler(appNumber);
				session.put(AppConstants.INDIV_MASTER_HANDLER,peopleHandler);	
			}
			//ILIES-282114 changes end
			DisabilityBO disBO = new DisabilityBO();
			String currentPageID = (String)request.get(FwConstants.CURRENT_PAGE_ID);
			//if previous pageID is not equal to the present pageID then clean the session	and Before Collection	
			if(!((String)request.get(FwConstants.PREVIOUS_PAGE_ID)).equals(currentPageID))
			{
				session.remove("APP_IN_DABL_Collection");
				session.remove(FwConstants.BEFORE_COLLECTION);
			}		
			int[] driverArray = (int[]) session.get(FwConstants.AFB_DRIVER);
			int driverStatus =	(int) driverManager.getAFBStatus(FwConstants.AFB_DRIVER, currentPageID,	driverArray);
			//when user hits the Back button or comes from the Summary Page
			if(pageCollection.get(FwConstants.DETAIL_KEY_BEAN)!= null)
			{
				//get utilitycost details from UtilityCost detials table in database
				IndivTypeSeqBean indvBean = (IndivTypeSeqBean)pageCollection.get(FwConstants.DETAIL_KEY_BEAN);				
				pageCollection = new HashMap();		
				//get Details_Collection from DataBase and set to PageCollection
				pageCollection.put("APP_IN_DABL_Collection", disBO.loadIndividualDABLDetailsAFB((String)session.get(AppConstants.APP_NUMBER), indvBean.getIndivSeqNum()));		
				pageCollection.put(AppConstants.FIRST_NAME,	(String)peopleHandler.getFirstName(indvBean.getIndivSeqNum()));
				pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM,indvBean.getIndivSeqNum());
			}
			else
			{							
				pageCollection = new HashMap();	
				//check the session and pageCollection for APP_IN_UTILC_Collection 
				//if not found read the database and populate the RecordArray.
				if(session.get("APP_IN_DABL_Collection") == null) {				
					putDisabilityCollectionInSession(txnBean, driverStatus);				
				}				
				//check if pageStatus is REQ OR ADDNEW or VISIT_AGAIN
				if(driverStatus == FwConstants.DRIVER_REQUIRED || driverStatus == FwConstants.DRIVER_ADD_NEW || driverStatus == FwConstants.DRIVER_VISIT_AGAIN)
				{
					//Modified by Nancy Jain for ILIES-282238 : Sonar Fix-Changed variable name.
					APP_IN_PRFL_Collection appInPrflCollSession = (APP_IN_PRFL_Collection)session.get(AppConstants.APP_IN_PRFL_MASTER);
					APP_IN_PRFL_Cargo appinprflCargo = null;
							
					String indvSeqNum = null;
					int cargoSize = appInPrflCollSession.size();
					String utilityType = null;
					char typeStatus;
					boolean successFlag = false;				
					//loop thru APP_IN_PRFL	Collection				
					//Check status of each UtilityCost type in alphabetical order as defined in Reference table for each Cargo					
					for(int i=0; i<cargoSize; i++)
					{
						appinprflCargo = appInPrflCollSession.getCargo(i);
						indvSeqNum = appinprflCargo.getIndv_seq_num();
											
							typeStatus  = applicationManager.getAppInPrflResponse(appinprflCargo,IApplicationManager.DISABLED_PERSON).charAt(0);
							if (typeStatus == IApplicationManager.STATUS_VISIT_AGAIN)
							{				
								setDisabilityCargoFromSession(session, pageCollection, driverStatus, indvSeqNum, utilityType);
								pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM,indvSeqNum);
								successFlag = true;
								break;
							}
							else if(typeStatus == IApplicationManager.STATUS_REQUIRED || typeStatus == IApplicationManager.STATUS_ADD_NEW)
							{											
								setDisabilityDetailsCargo(indvSeqNum, utilityType, session, pageCollection);;
								successFlag = true;
								break;
							}
					
						if(successFlag)	{
							break;
						}
					}		
				}	
				else //the driverStatus is Complete
				{		
					//Modified by Nancy Jain for ILIES-282238 : Sonar Fix-Changed variable name.
					APP_IN_DABL_Collection collSes = (APP_IN_DABL_Collection) session.get("APP_IN_DABL_Collection");				
					APP_IN_DABL_Cargo cargoSes = null;
					int size = collSes.size();
					if(size > 0){
						//get last cargo from session									
						cargoSes = collSes.getCargo(size-1);
					}			
					APP_IN_DABL_Collection newColl = new APP_IN_DABL_Collection();
					newColl.addCargo(cargoSes);									
					//set Details_Collection from session to PageCollection
					pageCollection.put("APP_IN_DABL_Collection", newColl);
					//set first Name to PageCollection	
					if(cargoSes != null){
						pageCollection.put(AppConstants.FIRST_NAME,	peopleHandler.getFirstName(cargoSes.getIndv_seq_num()));
						pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM,cargoSes.getIndv_seq_num());
					}
				}			
			}			
			txnBean.setPageCollection(pageCollection);
			//Run ComponentManager to get the components for the current page
			componentManager.getComponents(currentPageID, txnBean);	
			//Add the page collection to before collection
			if(session.get(FwConstants.BEFORE_COLLECTION) != null)
			{
				((Map)session.get(FwConstants.BEFORE_COLLECTION)).putAll(pageCollection);					
			}
			else{
				Map beforeColl = new HashMap();
				beforeColl.putAll(pageCollection);
				session.put(FwConstants.BEFORE_COLLECTION, beforeColl);
			}
			//Added by Nancy Jain for ILIES-282238 : Removing the values from session.
			regBo.clearSessionOfWarningMsgOnSaveAndExitFunc(session);
			//ILIES-282238 changes end here
			
		log(ILog.INFO, "HouseHoldInfoEJBBEan::getDisabilityDetails:End");

		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID(AppConstants.GET_DISABILITY_DETAILS);
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			throw createFwException(this.getClass().getName(), AppConstants.GET_DISABILITY_DETAILS, e);
		}
	}
	
	
	public void storeDisabilityDetails(FwTransaction txnBean) throws javax.ejb.EJBException {
		 String appNumber = null;
		 String indvSeqNumber = null;
		 FwMessageList validateInfo = null;
		try {
			log(ILog.INFO, "HouseHoldInfoEJBBEan::storeDisabilityDetails:Start");
			  Map session = txnBean.getSession();
	            Map request = txnBean.getRequest();
	            Map pageCollection = txnBean.getPageCollection();
	            ABRegistrationBO regBo = new ABRegistrationBO();


               PeopleHandler peopleHandler = (PeopleHandler)session.get(AppConstants.INDIV_MASTER_HANDLER);
	           	            String currentPageID = (String) request.get(FwConstants.CURRENT_PAGE_ID);
	           	         boolean scheduleABHMS = false;
	           	         String previousPageID = (String) request.get(FwConstants.PREVIOUS_PAGE_ID);//added by ggr
	           	         if(previousPageID.equals("ABHMS")){
	           	        	scheduleABHMS = true;
	           	         }
	           	         
	            Map beforeColl = (Map)session.get(FwConstants.BEFORE_COLLECTION);
	            appNumber =(String) session.get(AppConstants.APP_NUMBER);
	            int[] driverArray = (int[]) session.get(FwConstants.AFB_DRIVER);
	            int driverStatus =	driverManager.getAFBStatus(FwConstants.AFB_DRIVER, currentPageID, driverArray);
	            int currentPageStatus  = driverManager.getAFBStatus(FwConstants.AFB_DRIVER,currentPageID,driverArray);
	            
	            DisabilityBO disBO = new DisabilityBO();		
	            APP_IN_DABL_Collection appDABLColl = (APP_IN_DABL_Collection)pageCollection.get("APP_IN_DABL_Collection");
	            APP_IN_DABL_Cargo appDABLCargo = appDABLColl.getCargo(0);
	            APP_IN_PRFL_Collection sessionAppInPrflColl = (APP_IN_PRFL_Collection)session.get(AppConstants.APP_IN_PRFL_MASTER);
	            APP_IN_DABL_Collection appDABLBeforeColl = (APP_IN_DABL_Collection)beforeColl.get("APP_IN_DABL_Collection");
	            APP_IN_DABL_Cargo appDABLBeforeCargo = new APP_IN_DABL_Cargo();
	            if(appDABLBeforeColl != null && appDABLBeforeColl.getCargo(0) != null){
	            	appDABLBeforeCargo = appDABLBeforeColl.getCargo(0);
	            	appDABLBeforeCargo.setApp_num(appNumber);
	            	indvSeqNumber = appDABLBeforeCargo.getIndv_seq_num();
	            }
	            if(appDABLBeforeCargo.getBlnd_dt()== null)
	            	appDABLCargo.setRowAction(FwConstants.ROWACTION_INSERT);				
	            else
	            	appDABLCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
	            

                	            
//	          New functionality for Blind date adn disabled Date added by Rashmi 
	            
	           
				if(!appDABLColl.isEmpty()){
					appDABLCargo = appDABLColl.getCargo(0);
						//Now calling the validate method 
						validateInfo = disBO.validateDisablityDetail(appDABLCargo);
						if(validateInfo != null && validateInfo.hasMessages()){
								request.put(FwConstants.MESSAGE_LIST, validateInfo);
								pageCollection.put("APP_IN_DABL_Collection",appDABLColl);
								pageCollection.put(FwConstants.PAGE_COMPONENT_LIST, beforeColl.get(FwConstants.PAGE_COMPONENT_LIST));
								pageCollection.put(AppConstants.INDV_SEQUENCE_NUMBERS,indvSeqNumber);
								pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM,indvSeqNumber);
								pageCollection.put("CurrentPageStatus",String.valueOf(currentPageStatus));
								pageCollection.put(AppConstants.FIRST_NAME, peopleHandler.getFirstName(indvSeqNumber));
								//Added by Nancy Jain for ILIES-282238 : Added collection in the request.
								request.put(FwConstants.PAGE_COLL_0, appDABLColl);
								request.put(FwConstants.NUMBER_OF_COLLECTIONS_FOR_WARNING_MSG, 1);
								//ILIES-282238 changes end here.
							return;
						}
				}


	             //assign default values  
	            appDABLCargo.setIndv_seq_num(indvSeqNumber);
	            if(appDABLCargo.getIrwe_sw() == null) {
					appDABLCargo.setIrwe_sw(FwConstants.SPACE);
	            }
				if(appDABLCargo.getUabl_work_sw() == null)
					appDABLCargo.setUabl_work_sw(FwConstants.SPACE);
				//by default set dates to high date
				// Added by rashmi
				if((appDABLCargo.getDabl_dt() == null) ||(appDABLCargo.getDabl_dt().length()) == 0) {
					appDABLCargo.setDabl_dt(AppConstants.HIGH_TIMESTAMP);}
				else{
					appDABLCargo.setDabl_dt(displayFormatter.getYYYYMMDDTimestamp(appDABLCargo.getDabl_dt()));	
				}
				
				
				if((appDABLCargo.getBlnd_dt() == null)||(appDABLCargo.getBlnd_dt().trim().length()) == 0)
					appDABLCargo.setBlnd_dt(AppConstants.HIGH_TIMESTAMP);
				else{
					appDABLCargo.setBlnd_dt(displayFormatter.getYYYYMMDDTimestamp(appDABLCargo.getBlnd_dt()));	
				}
				if(appDABLCargo.getEstb_blnd_resp().equalsIgnoreCase("SEL"))
					appDABLCargo.setEstb_blnd_resp(FwConstants.SPACE);
				if(appDABLCargo.getEstb_dabl_resp().equalsIgnoreCase("SEL"))
					appDABLCargo.setEstb_dabl_resp(FwConstants.SPACE);
			
	            appDABLCargo.setApp_num((String)session.get(AppConstants.APP_NUMBER));
	           
	            List componentList =(ArrayList) beforeColl.get(FwConstants.PAGE_COMPONENT_LIST);
				boolean componentFlag = false;
				if(componentList.contains("387")){
					componentFlag = true;
				}
	            
	            disBO.checkDisabilityDetailsCompleteness(appDABLCargo, componentFlag);
	                      
	            if(appDABLBeforeColl != null && !appDABLBeforeColl.isEmpty()){
	                //here we need to check data has been change or not 
	            	appDABLBeforeCargo = appDABLBeforeColl.getCargo(0);
	            }
	            else{
	            	appDABLBeforeCargo.setDirty(true);
	            }
	            appDABLCargo = (APP_IN_DABL_Cargo)isChanged(appDABLBeforeCargo,appDABLCargo);
	            //PersistData if the cargo is dirty
	            if(appDABLCargo.isDirty()){	
	               disBO.storeDisabilityAFB(appDABLColl);
	            }
	            	
	            
	            APP_IN_PRFL_Cargo appInPrflSessCargo = null;	
				//get the matching APP_IN_PRFL_Cargo
	 			String indvSeqNum = appDABLCargo.getIndv_seq_num();
	 			
						//Remove first Cargo from DetailCollection
					    APP_IN_DABL_Collection appDABLSessColl = (APP_IN_DABL_Collection) session.get("APP_IN_DABL_Collection");
					    
					    appInPrflSessCargo = applicationManager.getAppInProfile(sessionAppInPrflColl, indvSeqNum);
					    
						if(appDABLSessColl != null) {
							appDABLSessColl.remove(appDABLBeforeColl);
						}
						if(driverStatus != FwConstants.DRIVER_COMPLETE){
							//Make "Complete" for Type and persist
					        applicationManager.makeCompleteAndPersist(IApplicationManager.DISABLED_PERSON, appInPrflSessCargo);
						}					
				
					//Define DetailsFinishedFlag as True
					boolean detailsFinishedFlag = true;				
					APP_IN_PRFL_Cargo appInPrflCargo= null;
					int cargoSize = sessionAppInPrflColl.size();
					//loop thru appInPrflColl_Session
					char typeStatus; 
					for(int i=0; i<cargoSize; i++){								
					    appInPrflCargo = sessionAppInPrflColl.getCargo(i);					
						//check if any type is required, visitAgain and AddNew
						typeStatus  = applicationManager.getAppInPrflResponse(appInPrflCargo,IApplicationManager.DISABLED_PERSON).charAt(0);
						if(typeStatus == IApplicationManager.STATUS_REQUIRED ||	typeStatus== IApplicationManager.STATUS_ADD_NEW ||typeStatus == IApplicationManager.STATUS_VISIT_AGAIN){
							detailsFinishedFlag = false;
							break;
						}
					}
					if(scheduleABHMS){
						driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABHMS",driverArray,appNumber);
						}
					
					//check the detailsFinishedFlag
					if(detailsFinishedFlag){
						//Make driver for this page "COMPLETE"
						driverManager.makeComplete(FwConstants.AFB_DRIVER, currentPageID, driverArray, (String)session.get(AppConstants.APP_NUMBER));		
					}
						
					
					//Added by Nancy Jain for ILIES-282238 : Removing the values from session.
					regBo.clearSessionOfWarningMsgOnSaveAndExitFunc(session);
					//ILIES-282238 changes end here
		log(ILog.INFO, "HouseHoldInfoEJBBEan::storeDisabilityDetails:End");
		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID(AppConstants.STORE_DISABILITY_DETAILS);
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			throw createFwException(this.getClass().getName(), AppConstants.STORE_DISABILITY_DETAILS, e);
		}
		
	}
	
	
	private void putDisabilityCollectionInSession(FwTransaction txnBean, int driverStatus)
	{		
		Map session = txnBean.getSession();	
		try
		{		
			APP_IN_DABL_Collection coll = new APP_IN_DABL_Collection();
			DisabilityBO disBO  = new DisabilityBO();		
			APP_IN_PRFL_Collection appInPrflColl_Session = (APP_IN_PRFL_Collection)session.get(AppConstants.APP_IN_PRFL_MASTER);
			APP_IN_PRFL_Cargo appinprflCargo_ses = null;
			//Read Database :: and populate the SelfEmploymentDetailCollection order by Indv_Seq, Seq_Num and Type
			APP_IN_DABL_Collection dablColl = disBO.loadDABLDetailsAFB((String)session.get(AppConstants.APP_NUMBER));
			if(dablColl != null){
				int sessAppPrflCollSize = appInPrflColl_Session.size();
				int emplCollSize = dablColl.size();
				String indvPrflSeqNum = null;
				for(int i= 0; i < sessAppPrflCollSize;i++){
					indvPrflSeqNum = appInPrflColl_Session.getCargo(i).getIndv_seq_num();
					String indvSeqNum = null;
					for(int j= 0; j < emplCollSize;j++){
						indvSeqNum = dablColl.getCargo(j).getIndv_seq_num();
						if(indvSeqNum.equals(indvPrflSeqNum)){
							coll.addCargo(dablColl.getCargo(j));
						}
					}
				}
			}
			//create IndivSeqTypeBean for each cargo and populate Record Array
			IndivTypeSeqBean indvTSBean = null;
			APP_IN_DABL_Cargo tempCargo = null;
			APP_IN_DABL_Collection appInUltcNewColl = null;
			int size = coll.size();
			for(int k=0;k<size;k++){
				tempCargo = new APP_IN_DABL_Cargo();
				tempCargo = coll.getCargo(k);
				appinprflCargo_ses = appInPrflColl_Session.getCargo(k); 
				if(driverStatus == FwConstants.DRIVER_VISIT_AGAIN){
					//populate Record array if the Self_Employment response Status is other than "Complete"
					if(applicationManager.getAppInPrflResponse(appinprflCargo_ses, IApplicationManager.DISABLED_PERSON).charAt(0) != IApplicationManager.STATUS_COMPLETE){
						if(appInUltcNewColl == null){
							appInUltcNewColl = new APP_IN_DABL_Collection();
						}
						appInUltcNewColl.add(tempCargo);
					}
				}
				indvTSBean = new IndivTypeSeqBean(tempCargo.getIndv_seq_num(),"","");						
				populateRecordArray(indvTSBean, session);
			}				
			if(driverStatus == FwConstants.DRIVER_VISIT_AGAIN)
			{
				if(appInUltcNewColl != null && appInUltcNewColl.size()>0){
					//put the SelfEmploymentDetailCollection in session
					session.put("APP_IN_DABL_Collection", appInUltcNewColl);
				}
			}
			else if(coll.size()>0){
				//put the SelfEmploymentDetailCollection in session
				session.put("APP_IN_DABL_Collection", coll);
			}			
		}catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("putSelfEmploymentCollectionInSession");
			we.setFwException(fe);
		throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "putSelfEmploymentCollectionInSession", e);
			throw fe;
		}
	}
	
	
	private void setDisabilityCargoFromSession(Map session, Map pageCollection, int driverStatus, String indvSeqNum, String costType)
	{		
		try
		{	
			String showLoopingQuestionFlag = FwConstants.YES;	
			APP_IN_PRFL_Collection appInPrflColl_Session = (APP_IN_PRFL_Collection)session.get(AppConstants.APP_IN_PRFL_MASTER);
			PeopleHandler peopleHandler = (PeopleHandler)session.get(AppConstants.INDIV_MASTER_HANDLER);
			APP_IN_PRFL_Cargo appinprflCargo_ses = null;
			APP_IN_DABL_Collection coll_ses = (APP_IN_DABL_Collection) session.get("APP_IN_DABL_Collection");				
			APP_IN_DABL_Cargo cargo_ses = null;	
			int size = coll_ses.size();
			for (int i=0; i<size; i++)	
			{
				if(coll_ses.getCargo(i).getIndv_seq_num().equals(indvSeqNum)) 
				{
					cargo_ses = coll_ses.getCargo(i);
					
					if(size > (i+1) && 
						coll_ses.getCargo(i+1).getIndv_seq_num().equals(indvSeqNum))
					{
						showLoopingQuestionFlag = FwConstants.NO;							
					}							
					break;
				}
			}				
			APP_IN_DABL_Collection newColl = new APP_IN_DABL_Collection();
			newColl.addCargo(cargo_ses);			
			if(driverStatus == FwConstants.DRIVER_VISIT_AGAIN && cargo_ses != null){
				//set the current record index for the record array
				setCurrentRecord(new IndivTypeSeqBean(cargo_ses.getIndv_seq_num(),String.valueOf(IApplicationManager.DISABLED_PERSON),""),session);
			}									
			//set Details_Collection from session to PageCollection
			pageCollection.put("APP_IN_DABL_Collection", newColl);
			//set frist Name to PageCollection	
			if(cargo_ses != null){
				pageCollection.put(AppConstants.FIRST_NAME,	peopleHandler.getFirstName(cargo_ses.getIndv_seq_num()));
				//get the matching APP_IN_PRFL_Cargo  
				appinprflCargo_ses = applicationManager.getAppInProfile(appInPrflColl_Session, cargo_ses.getIndv_seq_num());
			}
		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("setUtilityCostDetailsCargoFromSession");
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "setUtilityCostDetailsCargoFromSession", e);
			throw fe;
		}
	}
	
	private void setDisabilityDetailsCargo(String indvSeqNum, String type, Map session, Map pageCollection)
	{
		try
		{
			PeopleHandler peopleHandler = (PeopleHandler)session.get(AppConstants.INDIV_MASTER_HANDLER);			
			APP_IN_DABL_Cargo cargo = new APP_IN_DABL_Cargo();				
			//set indvSeqNum and type to new Cargo
			cargo.setIndv_seq_num(indvSeqNum);
			//cargo.setUtil_typ(type);
			//create IndivSeqTypeBean for the cargo and populate Record Array
			IndivTypeSeqBean indvTSBean = new IndivTypeSeqBean(indvSeqNum,type,cargo.getIndv_seq_num());
			populateRecordArray(indvTSBean, session);						
			//set cargo into Collection
			APP_IN_DABL_Collection appInUtilcColl = new APP_IN_DABL_Collection();
			appInUtilcColl.addCargo(cargo); 			
			//set Details_Collection to PageCollection
			pageCollection.put("APP_IN_DABL_Collection", appInUtilcColl);			
			//put FirstName in PageCollection
			pageCollection.put(AppConstants.FIRST_NAME, peopleHandler.getFirstName(indvSeqNum));	
			pageCollection.put(AppConstants.CURRENT_INDIV_SEQ_NUM,indvSeqNum);

		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("setUtilityCostDetailsCargo");
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "setUtilityCostDetailsCargo", e);
			throw fe;
		}
	}