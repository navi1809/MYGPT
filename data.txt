package gov.nv.dwss.reports.ame48a.service.dataservice;

import gov.nv.dwss.fw.batch.common.AbstractSorDataService;
import gov.nv.dwss.fw.batch.exception.BatchBusinessException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;

import java.sql.SQLException;
import java.util.Collections;
import java.util.List;

@Service
public class Ame48aDataService extends AbstractSorDataService {


    public List<Ame48aRecord> getOfficeCodes(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.GET_OFFICE_CODES);
            Object[] params = new Object[]{  };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getBudunit(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.GET_BUDGET_UNIT);
            Object[] params = new Object[]{ inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3(), inputParam.getParam4() };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getFacilityData(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.GET_FACILITY_DATA);
            Object[] params = new Object[]{ inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3() };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getCaseData(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.GET_CASE_DATA);
            Object[] params = new Object[]{ inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3() };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getCaseData2(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.GET_CASE_DATA_2);
            Object[] params = new Object[]{ inputParam.getParam1(), inputParam.getParam2() };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getExecSqlQuery(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.EXEC_SQL_QUERY);
            Object[] params = new Object[]{ inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3(), inputParam.getParam4(), inputParam.getParam5() };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getIncomeDetails(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.GET_INCOME_DETAILS);
            Object[] params = new Object[]{ inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3() };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getCaseData3(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.GET_CASE_DATA_3);
            Object[] params = new Object[]{ inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3() };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getExecSqlQuery2(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.EXEC_SQL_QUERY_2);
            Object[] params = new Object[]{ inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3(), inputParam.getParam4(), inputParam.getParam5() };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getCodeTable(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.GET_CODE_TABLE);
            Object[] params = new Object[]{  };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getCodeTable2(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.GET_CODE_TABLE_2);
            Object[] params = new Object[]{  };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getCodeTable3(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.GET_CODE_TABLE_3);
            Object[] params = new Object[]{  };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getExecSqlQuery3(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.EXEC_SQL_QUERY_3);
            Object[] params = new Object[]{ inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3() };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getActionTimestamps(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.GET_ACTION_TIMESTAMPS);
            Object[] params = new Object[]{ inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3() };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getExecSqlQuery4(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.EXEC_SQL_QUERY_4);
            Object[] params = new Object[]{ inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3() };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getMemberHistory(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.GET_MEMBER_HISTORY);
            Object[] params = new Object[]{ inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3() };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getExecSqlQuery5(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.EXEC_SQL_QUERY_5);
            Object[] params = new Object[]{ inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3() };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getActionTimestamps2(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.GET_ACTION_TIMESTAMPS_2);
            Object[] params = new Object[]{ inputParam.getParam1(), inputParam.getParam2() };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getActionTimestamps3(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.GET_ACTION_TIMESTAMPS_3);
            Object[] params = new Object[]{ inputParam.getParam1(), inputParam.getParam2() };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getExecSqlQuery6(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.EXEC_SQL_QUERY_6);
            Object[] params = new Object[]{ inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3(), inputParam.getParam4(), inputParam.getParam5() };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getRelationshipCodes(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.GET_RELATIONSHIP_CODES);
            Object[] params = new Object[]{ inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3(), inputParam.getParam4(), inputParam.getParam5() };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getExecSqlQuery7(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.EXEC_SQL_QUERY_7);
            Object[] params = new Object[]{ inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3(), inputParam.getParam4() };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
    public List<Ame48aRecord> getExecSqlQuery8(Ame48aInputParam inputParam) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(SqlQueryConstants.EXEC_SQL_QUERY_8);
            Object[] params = new Object[]{ inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3() };
            return jdbcTemplate.query(sqlQuery, new Ame48aRowMapper(), params);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                Ame48aInputParam.setSqlErrorFlag(true);
            } else {
                Ame48aInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }
    
}
