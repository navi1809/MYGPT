/**
	 * 
	 * @param indivNode
	 * @param indvSeqNum
	 * @param appNewBornCargo
	 * @return
	 * @throws SelfServiceApplicationException
	 */
	private T1012AppInNewbCargo buildT1012AppNewBorn(Element indivNode, long indvSeqNum, T1012AppInNewbCargo appNewBornCargo) throws SelfServiceApplicationException {
		T1012AppInNewbCargo appInNewbCargo = null;
		Element indvNewBorn = null;
		Attribute dataExist = null;
		String doesDataExist = "N";

		try {
			log(ILog.DEBUG, "Entered SelfServiceAppRegBO.buildT1012AppNewBorn indvSeqNum: " + indvSeqNum);

			indvNewBorn = indivNode.getChild(AppRegConstants.NEW_BORN);
			dataExist = indvNewBorn.getAttribute(AppRegConstants.DATA_EXIST);
			if (dataExist != null) {
				doesDataExist = dataExist.getValue();
			}
			if (doesDataExist != null && doesDataExist.equals("Y")) {

				appInNewbCargo = new T1012AppInNewbCargo();
				appInNewbCargo.setAppNum(appNum);
				appInNewbCargo.setIndvSeqNum(indvSeqNum);
				appInNewbCargo.setLiveWithMomResp(getCharForString(indvNewBorn.getChildText("LIVE_WITH_MOM_RESP")));
				appInNewbCargo.setAddRecInd(getCharForString(indvNewBorn.getChildText("ADD_REC_IND")));
				appInNewbCargo.setEffBegMo(-1);
			}

		} catch (Exception e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildT1012AppNewBorn indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildT1012AppNewBorn indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(),e);
		}
		log(ILog.DEBUG, "Exiting SelfServiceAppRegBO.buildT1012AppNewBorn indvSeqNum: " + indvSeqNum);
		return appInNewbCargo;
	}

	/**
	 * This method created records in T1007AppInCurd staging table
	 * 
	 * @param indivNode
	 *            - Element Object
	 * @param indvSeqNum
	 *            - Indv Seq Num
	 * @return T1007AppInCurdCargo -- Indv Seq Num
	 * @throws SelfServiceApplicationException
	 */
	private T1007AppInCurdCargo buildT1007AppInCurd(Element indivNode, long indvSeqNum) throws SelfServiceApplicationException {
		T1007AppInCurdCargo appInCurdCargo = null;

		try {
			log(ILog.DEBUG, "Entered SelfServiceAppRegBO.buildT1007AppInCurd indvSeqNum: " + indvSeqNum);
			appInCurdCargo = new T1007AppInCurdCargo();
			appInCurdCargo.setAppNum(appNum);
			appInCurdCargo.setIndvSeqNum(indvSeqNum);
			appInCurdCargo.setIntnResResp(getCharForString(indivNode.getChildText("INTN_RES_RESP")));
			appInCurdCargo.setLiveArngTyp(getString(indivNode.getChildTextTrim("LIVE_ARNG_TYP")));
			appInCurdCargo.setMigFarmWrkrSw(getCharForString(indivNode.getChildText("MIG_FARM_WRKR_SW")));
			String mrtlStatCd = getString(indivNode.getChildTextTrim("MRTL_STAT_CD"));
			if("SI".equalsIgnoreCase(mrtlStatCd)){
				mrtlStatCd = "NM";
			}
			appInCurdCargo.setMrtlStatCd(mrtlStatCd);
			appInCurdCargo.setResWiSw(getCharForString(indivNode.getChildText("RES_WI_SW")));
			appInCurdCargo.setChldOutHomeSw(getCharForString(indivNode.getChildText("CHLD_OUT_HOME_RESP")));
			String liveArngTyp = getString(indivNode.getChildText("LIVE_ARNG_TYP"));
			if (NF.equalsIgnoreCase(maShortFormCd) || NF.equalsIgnoreCase(liveArngTyp)) {
				appInCurdCargo.setHouseholdFacilitySw('Y');
			} else {
				appInCurdCargo.setHouseholdFacilitySw('N');
			}

			appInCurdCargo.setLiveArngDt(highDate);
			appInCurdCargo.setEffBegMo(-1);

		} catch (NullPointerException e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildT1007AppInCurd  indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildT1007AppInCurd  indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(),e);
		} catch (Exception e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildT1007AppInCurd  indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildT1007AppInCurd  indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(),e);
		}
		log(ILog.DEBUG, "Exiting SelfServiceAppRegBO.buildT1007AppInCurd indvSeqNum: " + indvSeqNum);
		return appInCurdCargo;
	}


	/**
	 * This method created records in T1008AppInBnftr staging table
	 * 
	 * @param indivNode
	 *            - Element Object
	 * @param indvSeqNum
	 *            - Indv Seq Num
	 * @return T1008AppInBnftrCargo - T1008AppInBnftrCargo
	 * @throws SelfServiceApplicationException
	 */
	private T1008AppInBnftrCargo buildT1008AppInBnftr(Element indivNode, long indvSeqNum) throws SelfServiceApplicationException {
		T1008AppInBnftrCargo appInBnftCargo = null;
		Element indvProfile = null;
		try {

			log(ILog.DEBUG, "Entered SelfServiceAppRegBO.buildT1008AppInBnftr indvSeqNum: " + indvSeqNum);
			indvProfile = indivNode.getChild(AppRegConstants.INDIVIDUAL_PROFILE);
			appInBnftCargo = new T1008AppInBnftrCargo();
			appInBnftCargo.setAppNum(appNum);
			appInBnftCargo.setIndvSeqNum(indvSeqNum);
			appInBnftCargo.setEffBegMo(0);
			appInBnftCargo.setOpAodaTmtRcvSw(getCharForString(indvProfile.getChildText("OP_AODA_TMT_RCV_SW")));
			appInBnftCargo.setRcvFstrCareSw(getCharForString(indvProfile.getChildText("FSTR_CARE_RESP")));
			appInBnftCargo.setRcvIndFsPgResp(getCharForString(indvProfile.getChildText("NEED_IND_RESP")));
			appInBnftCargo.setRcvFsOthStResp(getCharForString(indvProfile.getChildText("RCV_FS_OTH_ST_RESP")));
			appInBnftCargo.setRcvSsiLtrResp(getCharForString(indvProfile.getChildText("RCV_SSI_LTR_RESP")));
			appInBnftCargo.setRcvSsiSw(getCharForString(indvProfile.getChildText("RCV_SSI_SW")));
			appInBnftCargo.setSsi1619BRcvSw(getCharForString(indvProfile.getChildText("SSI_1619B_RCV_SW")));

		} catch (NullPointerException e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildT1008AppInBnftr indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildT1002AppDtl indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(),e);
		} catch (Exception e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildT1008AppInBnftr  indvSeqNum: " + indvSeqNum + " : method : " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildT1002AppDtl indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(),e);
		}
		log(ILog.DEBUG, "Entered SelfServiceAppRegBO.buildT1008AppInBnftr indvSeqNum: " + indvSeqNum);
		return appInBnftCargo;
	}

	/**
	 * This method created records in T1009AppInSchle staging table
	 * 
	 * @param indivNode
	 *            - Element Object
	 * @param indvSeqNum
	 *            - Indv Seq Num
	 * @return T1009AppInSchleCargo - T1009AppInSchleCargo
	 * @throws SelfServiceApplicationException
	 */
	private T1009AppInSchleCargo buildT1009AppInSchle(Element indivNode, long indvSeqNum) throws SelfServiceApplicationException {
		T1009AppInSchleCargo appInSchleCargo = null;
		String hsGradDt = null;
		SimpleDateFormat sdf = null;
		try {
			log(ILog.DEBUG, "Entered SelfServiceAppRegBO.buildT1009AppInSchle indvSeqNum: " + indvSeqNum);
			appInSchleCargo = new T1009AppInSchleCargo();

			appInSchleCargo.setAppNum(appNum);
			appInSchleCargo.setIndvSeqNum(indvSeqNum);

			appInSchleCargo.setEducCd(getString(indivNode.getChildTextTrim("EDUC_CD")));
			appInSchleCargo.setEffBegMo(beginMonth);
			appInSchleCargo.setEnrlStatCd(getString(indivNode.getChildTextTrim("ENRL_STAT_CD")));
			hsGradDt = indivNode.getChildTextTrim("HS_GRAD_DT");
			sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
			if (hsGradDt != null) {
				appInSchleCargo.setHsGradDt(new Timestamp(sdf.parse(hsGradDt).getTime()));
			} else {
				appInSchleCargo.setHsGradDt(highDate);
			}
			appInSchleCargo.setHsGradStatCd(getString(indivNode.getChildTextTrim("HS_GRAD_STAT_CD")));
			appInSchleCargo.setCareDpndReqResp(getCharForString(indivNode.getChildText("CARE_DEP_REQ_RSP")));
			appInSchleCargo.setStdtFsElgCd(getString(indivNode.getChildTextTrim("STDT_FS_ELG_CD")));
			if (appInSchleCargo.getCareDpndReqResp() == '\u0000') {
				appInSchleCargo.setCareDpndReqResp(' ');
			}

		} catch (NullPointerException e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildT1009AppInSchle method : " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildT1002AppDtl method : " + e.getMessage(),e);
		} catch (Exception e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildT1009AppInSchle indvSeqNum: " + indvSeqNum + " : method : " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildT1002AppDtl indvSeqNum: " + indvSeqNum + " : method : " + e.getMessage(),e);
		}
		log(ILog.DEBUG, "Exiting SelfServiceAppRegBO.buildT1009AppInSchle indvSeqNum: " + indvSeqNum);
		return appInSchleCargo;
	}

	/**
	 * This method created records in T1010AppPrfl staging table
	 * 
	 * @param indivNode
	 *            - Element Object
	 * @param indvSeqNum
	 *            - Indv Seq Num
	 * @param appPrflcargo
	 *            - appPrflcargo
	 * @return T1010AppPrflCargo - T1010AppPrflCargo
	 * @throws SelfServiceApplicationException
	 */
	private T1010AppPrflCargo buildT1010AppPrfl(Element indivNode, long indvSeqNum, T1010AppPrflCargo appPrflcargo, T1004AppIndvCargo appIndvCargo) throws SelfServiceApplicationException {
		Element indvProfile = null;
		List indvProfiles = null;
		log(ILog.DEBUG, "Entered SelfServiceAppRegBO.buildT1010AppPrfl indvSeqNum: " + indvSeqNum);
		indvProfiles = indivNode.getChildren(AppRegConstants.INDIVIDUAL_PROFILE);
		if (indvProfiles != null && indvProfiles.size() > 0) {
			indvProfile = (Element) indvProfiles.get(0);
		}
		if (appPrflcargo == null) {
			appPrflcargo = new T1010AppPrflCargo();
		}
		try {
			if (indvProfile != null) {
				appPrflcargo.setAppNum(appNum);
				appPrflcargo.setAcdtResp(getGroupValue(appPrflcargo.getAcdtResp(), getCharForString(indvProfile.getChildText("ACDT_RESP"))));
				appPrflcargo.setAsetXmasClResp(getGroupValue(appPrflcargo.getAsetXmasClResp(), getCharForString(indvProfile.getChildTextTrim("MIS_BILL_RESP"))));
				appPrflcargo.setAdptAsstResp(getGroupValue(appPrflcargo.getAdptAsstResp(), getCharForString(indvProfile.getChildText("ADPT_ASST_RESP"))));
				appPrflcargo.setAlmyRcvResp(getGroupValue(appPrflcargo.getAlmyRcvResp(), getCharForString(indvProfile.getChildText("ALMY_RCV_RESP"))));
				appPrflcargo.setBnftChrtResp(getGroupValue(appPrflcargo.getBnftChrtResp(), getCharForString(indvProfile.getChildText("BNFT_CHRT_RESP"))));
				appPrflcargo.setBnftChlSprtResp(getGroupValue(appPrflcargo.getBnftChlSprtResp(), getCharForString(indvProfile.getChildText("BNFT_CHL_SPRT_RESP"))));
				appPrflcargo.setBnftDablResp(getGroupValue(appPrflcargo.getBnftDablResp(), getCharForString(indvProfile.getChildText("BNFT_DABL_RESP"))));
				appPrflcargo.setBnftDivndResp(getGroupValue(appPrflcargo.getBnftDivndResp(), getCharForString(indvProfile.getChildText("BNFT_DIVND_RESP"))));
				appPrflcargo.setBnftEstTrstResp(getGroupValue(appPrflcargo.getBnftEstTrstResp(), getCharForString(indvProfile.getChildText("BNFT_EST_TRST_RESP"))));
				appPrflcargo.setBnftRrResp(getGroupValue(appPrflcargo.getBnftRrResp(), getCharForString(indvProfile.getChildText("BNFT_RR_RESP"))));
				appPrflcargo.setBnftSprtSecResp(getGroupValue(appPrflcargo.getBnftSprtSecResp(), getCharForString(indvProfile.getChildText("RCV_SSI_SW"))));
				appPrflcargo.setBnftSsaResp(getGroupValue(appPrflcargo.getBnftSsaResp(), getCharForString(indvProfile.getChildText("RCV_SS_RESP"))));
				appPrflcargo.setBnftUemplResp(getGroupValue(appPrflcargo.getBnftUemplResp(), getCharForString(indvProfile.getChildText("BNFT_UEMPL_RESP"))));
				appPrflcargo.setBnftVetResp(getGroupValue(appPrflcargo.getBnftVetResp(), getCharForString(indvProfile.getChildText("BNFT_VET_RESP"))));
				appPrflcargo.setDablResp(getGroupValue(appPrflcargo.getDablResp(), getCharForString(indvProfile.getChildText("DABL_RESP"))));
				appPrflcargo.setDpndCareResp(getGroupValue(appPrflcargo.getDpndCareResp(), getCharForString(indvProfile.getChildText("DPND_CARE_RESP"))));
				appPrflcargo.setDrugFelnResp(getGroupValue(appPrflcargo.getDrugFelnResp(), getCharForString(indvProfile.getChildText("DRUG_FELN_RESP"))));
				appPrflcargo.setEmplResp(getGroupValue(appPrflcargo.getEmplResp(), getCharForString(indvProfile.getChildText("EMPL_RESP"))));
				appPrflcargo.setFsRerqstResp(getGroupValue(appPrflcargo.getFsRerqstResp(), getCharForString(indvProfile.getChildText("FSET_SCTN_RESP"))));
				appPrflcargo.setGenRlfResp(getGroupValue(appPrflcargo.getGenRlfResp(), getCharForString(indvProfile.getChildText("GEN_RLF_RESP"))));
				appPrflcargo.setIncmIntResp(getGroupValue(appPrflcargo.getIncmIntResp(), getCharForString(indvProfile.getChildText("INCM_INT_RESP"))));
				appPrflcargo.setLossEmplResp(getGroupValue(appPrflcargo.getLossEmplResp(), getCharForString(indvProfile.getChildText("LOSS_EMPL_RESP"))));
				appPrflcargo.setMilAllotResp(getGroupValue(appPrflcargo.getMilAllotResp(), getCharForString(indvProfile.getChildText("MIL_ALLOT_RESP"))));
				appPrflcargo.setMonyOthrResp(getGroupValue(appPrflcargo.getMonyOthrResp(), getCharForString(indvProfile.getChildText("MONY_OTHR_RESP"))));
				appPrflcargo.setNatlRfgeResp(getGroupValue(appPrflcargo.getNatlRfgeResp(), getCharForString(indvProfile.getChildText("NATL_RFGE_RESP"))));
				appPrflcargo.setNeedIndResp(getGroupValue(appPrflcargo.getNeedIndResp(), getCharForString(indvProfile.getChildText("NEED_IND_RESP"))));
				appPrflcargo.setOthrSrcResp(getGroupValue(appPrflcargo.getOthrSrcResp(), getCharForString(indvProfile.getChildText("OTHR_SRC_RESP"))));
				appPrflcargo.setPayRmrBrdResp(getGroupValue(appPrflcargo.getPayRmrBrdResp(), getCharForString(indvProfile.getChildText("PAY_RMR_BRD_RESP"))));
				appPrflcargo.setPnsnRetrResp(getGroupValue(appPrflcargo.getPnsnRetrResp(), getCharForString(indvProfile.getChildText("PNSN_RETR_RESP"))));
				appPrflcargo.setPregResp(getGroupValue(appPrflcargo.getPregResp(), getCharForString(indvProfile.getChildText("PREG_RESP"))));
				if (miChildApp) {
					if (this.isPregnantInCase) {
						appPrflcargo.setPregResp('Y');
					} else {
						appPrflcargo.setPregResp('N');
					}
				}

				appPrflcargo.setPropSoldResp(getGroupValue(appPrflcargo.getPropSoldResp(), getCharForString(indvProfile.getChildText("PROP_SOLD_RESP"))));
				appPrflcargo.setPubAsstResp(getGroupValue(appPrflcargo.getPubAsstResp(), getCharForString(indvProfile.getChildText("SEP_FS_RQST_SW"))));
				appPrflcargo.setRcvSsiEverResp(getGroupValue(appPrflcargo.getRcvSsiEverResp(), getCharForString(indvProfile.getChildText("RCV_SSI_EVER_RESP"))));
				appPrflcargo.setRmrBrdIncResp(getGroupValue(appPrflcargo.getRmrBrdIncResp(), getCharForString(indvProfile.getChildText("RMR_BRD_INC_RESP"))));
				appPrflcargo.setSelfEmplResp(getGroupValue(appPrflcargo.getSelfEmplResp(), getCharForString(indvProfile.getChildText("SELF_EMPL_RESP"))));
				appPrflcargo.setSuAsstLieapResp(getGroupValue(appPrflcargo.getSuAsstLieapResp(), getCharForString(indvProfile.getChildText("SU_ASST_LIEAP_RESP"))));
				appPrflcargo.setSuCstAsesResp(getGroupValue(appPrflcargo.getSuCstAsesResp(), getCharForString(indvProfile.getChildText("SU_CST_ASES_RESP"))));
				appPrflcargo.setSuCstCoalResp(getGroupValue(appPrflcargo.getSuCstCoalResp(), getCharForString(indvProfile.getChildText("SU_CST_COAL_RESP"))));
				appPrflcargo.setSuCstElecResp(getGroupValue(appPrflcargo.getSuCstElecResp(), getCharForString(indvProfile.getChildText("SU_CST_ELEC_RESP"))));
				appPrflcargo.setSuCstFuelResp(getGroupValue(appPrflcargo.getSuCstFuelResp(), getCharForString(indvProfile.getChildText("SU_CST_FUEL_RESP"))));
				appPrflcargo.setSuCstGasResp(getGroupValue(appPrflcargo.getSuCstGasResp(), getCharForString(indvProfile.getChildText("SU_CST_GAS_RESP"))));
				appPrflcargo.setSuCstHomeResp(getGroupValue(appPrflcargo.getSuCstHomeResp(), getCharForString(indvProfile.getChildText("SU_CST_HOME_RESP"))));
				appPrflcargo.setSuCstIstlResp(getGroupValue(appPrflcargo.getSuCstIstlResp(), getCharForString(indvProfile.getChildText("SU_CST_ISTL_RESP"))));
				appPrflcargo.setSuCstLpgasResp(getGroupValue(appPrflcargo.getSuCstLpgasResp(), getCharForString(indvProfile.getChildText("SU_CST_LPGAS_RESP"))));
				appPrflcargo.setSuCstMblResp(getGroupValue(appPrflcargo.getSuCstMblResp(), getCharForString(indvProfile.getChildText("SU_CST_MBL_RESP"))));
				appPrflcargo.setSuCstMtgeResp(getGroupValue(appPrflcargo.getSuCstMtgeResp(), getCharForString(indvProfile.getChildText("SU_CST_MTGE_RESP"))));
				appPrflcargo.setSuCstOthrResp(getGroupValue(appPrflcargo.getSuCstOthrResp(), getCharForString(indvProfile.getChildText("SU_CST_OTHR_RESP"))));
				appPrflcargo.setSuCstPhnResp(getGroupValue(appPrflcargo.getSuCstPhnResp(), getCharForString(indvProfile.getChildText("SU_CST_PHN_RESP"))));
				appPrflcargo.setSuCstRentResp(getGroupValue(appPrflcargo.getSuCstRentResp(), getCharForString(indvProfile.getChildText("SU_CST_RENT_RESP"))));
				appPrflcargo.setSuCstSwrResp(getGroupValue(appPrflcargo.getSuCstSwrResp(), getCharForString(indvProfile.getChildText("SU_CST_SWR_RESP"))));
				appPrflcargo.setSuCstTaxResp(getGroupValue(appPrflcargo.getSuCstTaxResp(), getCharForString(indvProfile.getChildText("SU_CST_TAX_RESP"))));
				appPrflcargo.setSuCstTrshResp(getGroupValue(appPrflcargo.getSuCstTrshResp(), getCharForString(indvProfile.getChildText("SU_CST_TRSH_RESP"))));
				appPrflcargo.setSuCstWoodResp(getGroupValue(appPrflcargo.getSuCstWoodResp(), getCharForString(indvProfile.getChildText("SU_CST_WOOD_RESP"))));
				appPrflcargo.setSuCstWtrResp(getGroupValue(appPrflcargo.getSuCstWtrResp(), getCharForString(indvProfile.getChildText("SU_CST_WTR_RESP"))));
				appPrflcargo.setSuCstWwtResp(getGroupValue(appPrflcargo.getSuCstWwtResp(), getCharForString(indvProfile.getChildText("SU_CST_WWT_RESP"))));
				appPrflcargo.setWorkCompResp(getGroupValue(appPrflcargo.getWorkCompResp(), getCharForString(indvProfile.getChildText("WORK_COMP_RESP"))));
				appPrflcargo.setOthrIncmResp(getGroupValue(appPrflcargo.getOthrIncmResp(), getCharForString(indvProfile.getChildText("OTHR_INCM_RESP"))));
				appPrflcargo.setOthrIncmRentlResp(getGroupValue(appPrflcargo.getOthrIncmRentlResp(), getCharForString(indvProfile.getChildText("OTHR_INCM_RENTL_RESP"))));
				appPrflcargo.setResettlementIncmResp(getGroupValue(appPrflcargo.getResettlementIncmResp(), getCharForString(indvProfile.getChildText("RESETTLEMENT_INCM_RESP"))));
				appPrflcargo.setShltCstResp(getGroupValue(appPrflcargo.getShltCstResp(), getCharForString(indvProfile.getChildText("SHLT_CST_RESP"))));
				appPrflcargo.setUtilExpResp(getGroupValue(appPrflcargo.getUtilExpResp(), getCharForString(indvProfile.getChildText("UTIL_EXP_RESP"))));
				appPrflcargo.setPayRmrBrdResp(getGroupValue(appPrflcargo.getPayRmrBrdResp(), getCharForString(indvProfile.getChildText("PAY_RMR_BRD_RESP"))));
				appPrflcargo.setUnoccHomePaymtResp(getGroupValue(appPrflcargo.getUnoccHomePaymtResp(), getCharForString(indvProfile.getChildText("UNOCC_HOME_PAYMT_RESP"))));
				appPrflcargo.setOtherHousingBillResp(getGroupValue(appPrflcargo.getOtherHousingBillResp(), getCharForString(indvProfile.getChildText("OTHER_HOUSING_BILL_RESP"))));
				appPrflcargo.setAssociationFeeResp(getGroupValue(appPrflcargo.getAssociationFeeResp(), getCharForString(indvProfile.getChildText("ASSOCIATION_FEE_RESP"))));
				appPrflcargo.setOutPatientTreatmentResp(getGroupValue(appPrflcargo.getOutPatientTreatmentResp(), getCharForString(indvProfile.getChildText("OUT_PATIENT_TREATMENT_RESP"))));
				appPrflcargo.setAttdtHsekprSrvcAnimalResp(getGroupValue(appPrflcargo.getAttdtHsekprSrvcAnimalResp(), getCharForString(indvProfile.getChildText("ATTDT_HSEKPR_SRVC_ANIMAL_RESP"))));
				appPrflcargo.setMedDentVisionServicesResp(getGroupValue(appPrflcargo.getMedDentVisionServicesResp(), getCharForString(indvProfile.getChildText("MED_DENT_VISION_SERVICES_RESP"))));
				appPrflcargo.setChildCareProviderResp(getGroupValue(appPrflcargo.getChildCareProviderResp(), getCharForString(indvProfile.getChildText("CHILD_CARE_PROVIDER_RESP"))));
				appPrflcargo.setMedEquipSuppliesResp(getGroupValue(appPrflcargo.getMedEquipSuppliesResp(), getCharForString(indvProfile.getChildText("MED_EQUIP_SUPPLIES_RESP"))));
				appPrflcargo.setPrsnlCareProvidedResp(getGroupValue(appPrflcargo.getPrsnlCareProvidedResp(), getCharForString(indvProfile.getChildText("PRSNL_CARE_PROVIDED_RESP"))));
				appPrflcargo.setPrescDrugResp(getGroupValue(appPrflcargo.getPrescDrugResp(), getCharForString(indvProfile.getChildText("PRESC_DRUG_RESP"))));
				appPrflcargo.setDiabetesEduPrgResp(getGroupValue(appPrflcargo.getDiabetesEduPrgResp(), getCharForString(indvProfile.getChildText("DIABETS_EDU_PRG_RESP"))));
				appPrflcargo.setPostageMailPrescResp(getGroupValue(appPrflcargo.getPostageMailPrescResp(), getCharForString(indvProfile.getChildText("POSTAGE_MAIL_PRESC_RESP"))));
				appPrflcargo.setNursingCareResp(getGroupValue(appPrflcargo.getNursingCareResp(), getCharForString(indvProfile.getChildText("NURSING_CARE_RESP"))));
				appPrflcargo.setHlthHospInsuranceResp(getGroupValue(appPrflcargo.getHlthHospInsuranceResp(), getCharForString(indvProfile.getChildText("HLTH_HOSP_INSURANCE_RESP"))));
				appPrflcargo.setNewbornResp(' ');
				if (realPropertySw) {
					appPrflcargo.setAsetRPropResp('Y');
				} else {
					appPrflcargo.setAsetRPropResp('N');
				}
				String liveArngTyp = getString(indivNode.getChildText("LIVE_ARNG_TYP"));
				if (NF.equalsIgnoreCase(maShortFormCd) || NF.equalsIgnoreCase(liveArngTyp)) {
					appPrflcargo.setFstrCareResp(C_YES);
				} else {
					appPrflcargo.setFstrCareResp(C_NO);
				}
				appPrflcargo.setBnftAntyResp(getGroupValue(appPrflcargo.getBnftAntyResp(), getCharForString(indvProfile.getChildText("RCV_FS_OTH_ST_RESP"))));
				appPrflcargo.setKinshipCareResp(getGroupValue(appPrflcargo.getKinshipCareResp(), getCharForString(indvProfile.getChildTextTrim("CARETAKER_RESP"))));

				char medMedcr = C_NO;
				if (C_YES == getCharForString(indivNode.getChildTextTrim("MEDICARE_COVERAGE_SW")))
					medMedcr = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("MEDCR_ETTL_RESP")))
					medMedcr = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildTextTrim("PLAN_FIRST_MEDICARE_SW")))
					medMedcr = C_YES;
				appPrflcargo.setMedMedcrResp(getGroupValue(appPrflcargo.getMedMedcrResp(), medMedcr));

				char trbTanf = C_NO;
				if (C_YES == getCharForString(indvProfile.getChildText("TRB_TANF_RESP")))
					trbTanf = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildTextTrim("MI_REHAB_RESP")))
					trbTanf = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildTextTrim("SPECIAL_EDUCATION_CLASS_RESP")))
					trbTanf = C_YES;
				appPrflcargo.setTrbTanfResp(getGroupValue(appPrflcargo.getTrbTanfResp(), trbTanf));

				char irweResp = C_NO;
				if (C_YES == getCharForString(indvProfile.getChildTextTrim("APPLIED_FOR_DISABILITY_RESP")))
					irweResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildTextTrim("SSI_BENEFIT_RESP")))
					irweResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildTextTrim("RECEIVES_SSI_RSDI_SW")))
					irweResp = C_YES;
				appPrflcargo.setIrweResp(getGroupValue(appPrflcargo.getIrweResp(), irweResp));

				// 2. DCNFQ
				appPrflcargo.setMedInstResp(getGroupValue(appPrflcargo.getMedInstResp(), getCharForString(indvProfile.getChildTextTrim("IMMUNIZATION_RESP"))));
				appPrflcargo.setYeohcResp(getGroupValue(appPrflcargo.getYeohcResp(), getCharForString(indvProfile.getChildTextTrim("DOMESTIC_VIOLENCE_VICTIM_RESP"))));
				char medInsResp = C_NO;
				if (C_YES == getCharForString(indvProfile.getChildTextTrim("INJURY_RELATED_MED_CVRG_SW")))
					medInsResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildTextTrim("LTC_INSURANCE_COVERAGE_SW")))
					medInsResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("MED_INS_RESP")))
					medInsResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("HEALTH_INSURANCE_SW")))
					medInsResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("MEDICAL_COVERAGE_RESP")))
					medInsResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("PAST_HEALTH_INSURANCE_SW")))
					medInsResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("PLAN_FIRST_OTHER_HEALTH_SW")))
					medInsResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("STATE_HEALTH_INSURANCE_SW")))
					medInsResp = C_YES;
				appPrflcargo.setMedInsResp(getGroupValue(appPrflcargo.getMedInsResp(), medInsResp));

				// 3. DCDAQ
				char childSprtPayResp = C_NO;
				if (C_YES == getCharForString(indvProfile.getChildText("CHLD_SPRT_PAY_RESP")))
					childSprtPayResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("CHILD_SUPPORT_SW")))
					childSprtPayResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("COURT_ORDERED_GUARDIAN_SW")))
					childSprtPayResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("SPOUSAL_SPRT_PAY_RESP")))
					childSprtPayResp = C_YES;
				appPrflcargo.setChldSprtPayResp(getGroupValue(appPrflcargo.getChldSprtPayResp(), childSprtPayResp));
				
				char spousalSprtPayResp = C_NO;
				if (C_YES == getCharForString(indvProfile.getChildText("SPOUSAL_SPRT_PAY_RESP")))
					spousalSprtPayResp = C_YES;
				appPrflcargo.setSpousalSprtPayType(getGroupValue(appPrflcargo.getSpousalSprtPayType(), spousalSprtPayResp));
				

				char medExpResp = C_NO;
				if (C_YES == getCharForString(indvProfile.getChildText("MED_EXP_RESP")))
					medExpResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("HEALTH_INS_PREMIUM_PAY_SW")))
					medExpResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("UNPAID_MEDICAL_EXPENSE_SW")))
					medExpResp = C_YES;
				appPrflcargo.setMedExpResp(getGroupValue(appPrflcargo.getMedExpResp(), medExpResp));

				// 4. DCRQU
				appPrflcargo.setAsetVehResp(getGroupValue(appPrflcargo.getAsetVehResp(), getCharForString(indvProfile.getChildTextTrim("OTHR_ASET_VEH_RESP"))));
				appPrflcargo.setAsetPPropResp(getGroupValue(appPrflcargo.getAsetPPropResp(), getCharForString(indvProfile.getChildTextTrim("OTHR_ASET_R_P_RESP"))));
				appPrflcargo.setAsetBuryResp(getGroupValue(appPrflcargo.getAsetBuryResp(), getCharForString(indvProfile.getChildTextTrim("OTHR_ASET_BUR_RESP"))));
				appPrflcargo.setAsetLifeInsResp(getGroupValue(appPrflcargo.getAsetLifeInsResp(), getCharForString(indvProfile.getChildTextTrim("OTHR_ASET_L_I_RESP"))));
				
				
				//DCSUQ START
				char shltrExpResp = C_NO;
				if (C_YES == getCharForString(indvProfile.getChildText("SU_CST_RENT_RESP")))
					shltrExpResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("SU_CST_MTGE_RESP")))
					shltrExpResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("SU_CST_HOME_RESP")))
					shltrExpResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("SU_CST_TAX_RESP")))
					shltrExpResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("SU_CST_MBL_RESP")))
					shltrExpResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("SU_CST_ASES_RESP")))
					shltrExpResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("UNOCC_HOME_PAYMT_RESP")))
					shltrExpResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("ASSOCIATION_FEE_RESP")))
					shltrExpResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("OTHER_HOUSING_BILL_RESP")))
					shltrExpResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("SHLT_CST_RESP")))
					shltrExpResp = C_YES;
				appPrflcargo.setUnoccHomePaymtResp(getGroupValue(appPrflcargo.getUnoccHomePaymtResp(), shltrExpResp));
				
				char utilExpCashResp = C_NO;
				if (C_YES == getCharForString(indvProfile.getChildText("SU_CST_ISTL_RESP")))
					utilExpCashResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("SU_CST_SWR_RESP")))
					utilExpCashResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("SU_CST_WTR_RESP")))
					utilExpCashResp = C_YES;				
				appPrflcargo.setSuCstWtrResp(getGroupValue(appPrflcargo.getSuCstWtrResp(), utilExpCashResp));
				
				char utilExpSNAPResp = C_NO;
				if (C_YES == getCharForString(indvProfile.getChildText("SU_CST_WWT_RESP")))
					utilExpSNAPResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("SU_CST_LPGAS_RESP")))
					utilExpSNAPResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("SU_CST_ELEC_RESP")))
					utilExpSNAPResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("SU_CST_WOOD_RESP")))
					utilExpSNAPResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("COOL_EXP_RESP")))
					utilExpSNAPResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("SU_CST_PHN_RESP")))
					utilExpSNAPResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("SU_CST_COAL_RESP")))
					utilExpSNAPResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("SU_CST_FUEL_RESP")))
					utilExpSNAPResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("SU_CST_GAS_RESP")))
					utilExpSNAPResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("SU_CST_OTHR_RESP")))
					utilExpSNAPResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildText("SU_CST_TRSH_RESP")))
					utilExpSNAPResp = C_YES;
				appPrflcargo.setSuCstWwtResp(getGroupValue(appPrflcargo.getSuCstWwtResp(), utilExpSNAPResp));
				//DCSUQ END

				char cashResp = C_NO;
				if (C_YES == getCharForString(indvProfile.getChildTextTrim("LQD_ASET_CASH_RESP")))
					cashResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildTextTrim("LQD_ASET_C_A_RESP")))
					cashResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildTextTrim("LQD_ASET_OTHR_RESP")))
					cashResp = C_YES;
				if (C_YES == getCharForString(indvProfile.getChildTextTrim("LQD_ASET_S_A_RESP")))
					cashResp = C_YES;
				appPrflcargo.setAsetCashResp(getGroupValue(appPrflcargo.getAsetCashResp(), cashResp));
				appPrflcargo.setSpsIpovPgmResp(getGroupValue(appPrflcargo.getSpsIpovPgmResp(), getCharForString(indivNode.getChildText("EMER_MED_NON_CIT"))));
				if (appPrflcargo.getBnftAntyResp() == 0 || appPrflcargo.getBnftAntyResp() == ' ' || appPrflcargo.getBnftAntyResp() != 'Y') {
					if (appIndvCargo != null && appIndvCargo.getOtherStateCd() != null && appIndvCargo.getOtherStateCd().trim().length() > 0 && !appIndvCargo.getOtherStateCd().equals("AA")) {
						appPrflcargo.setBnftAntyResp('Y');
					}
				}
			}
			updateNullValuesToBlank(appPrflcargo, T1010AppPrflCargo.class);
		} catch (NullPointerException e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildT1010AppPrfl indvSeqNum: " + indvSeqNum + " method : " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildT1002AppDtl method : " + e.getMessage(),e);
		}
		log(ILog.DEBUG, "Exiting SelfServiceAppRegBO.buildT1010AppPrfl indvSeqNum: " + indvSeqNum);
		return appPrflcargo;
	}

	/**
	 * This method created records in T1013AppInDabl staging table
	 * 
	 * @param indivNode
	 *            - Element Object
	 * @param indvSeqNum
	 *            - Indv Seq Num
	 * @return T1013AppInDablCargo - T1013AppInDablCargo
	 * @throws SelfServiceApplicationException
	 */
	private T1013AppInDablCargo buildT1013AppInDabl(Element indivNode, long indvSeqNum) throws SelfServiceApplicationException {
		T1013AppInDablCargo appInDablCargo = null;
		Element disabilityNode = null;
		Attribute disabilityAttr = null;
		String dataExists = "N";
		try {
			log(ILog.DEBUG, "Entered SelfServiceAppRegBO.buildT1013AppInDabl indvSeqNum: " + indvSeqNum);
			SimpleDateFormat sdf = null;
			disabilityNode = indivNode.getChild(AppRegConstants.DISABILITY);
			disabilityAttr = disabilityNode.getAttribute(AppRegConstants.DATA_EXIST);
			if (disabilityAttr != null) {
				dataExists = disabilityAttr.getValue();
			}
			if (!"N".equals(dataExists)) {
				appInDablCargo = new T1013AppInDablCargo();
				appInDablCargo.setAppNum(appNum);
				appInDablCargo.setIndvSeqNum(indvSeqNum);
				String blndDt = null;
				blndDt = disabilityNode.getChildText("BLND_DT");
				if (blndDt != null) {
					sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
					appInDablCargo.setDablBegDt(new Timestamp(sdf.parse(blndDt).getTime()));
				} else {
					appInDablCargo.setDablBegDt(highDate);
				}
				appInDablCargo.setAddRecInd(getCharForString(disabilityNode.getChildText("ADD_REC_IND")));
				appInDablCargo.setEffBegMo(beginMonth);
				appInDablCargo.setEstbBlndResp(getCharForString(disabilityNode.getChildText("ESTB_BLND_RESP")));
				appInDablCargo.setEstbDablSw(getCharForString(disabilityNode.getChildText("ESTB_DABL_SW")));
				appInDablCargo.setFsDablSw(getCharForString(disabilityNode.getChildText("FS_DABL_SW")));

			}
		} catch (NullPointerException e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildT1013AppInDabl indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildT1013AppInDabl indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(),e);
		} catch (Exception e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildT1013AppInDabl  indvSeqNum: " + indvSeqNum + " : method : " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildT1013AppInDabl indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(),e);
		}
		log(ILog.DEBUG, "Exiting SelfServiceAppRegBO.buildT1013AppInDabl indvSeqNum: " + indvSeqNum);
		return appInDablCargo;
	}

	/**
	 * This method created records in T1021AppInEmpl staging table
	 * 
	 * @param indivNode
	 *            - Element Object
	 * @param indvSeqNum
	 *            - Indv Seq Num
	 * @return
	 * @throws SelfServiceApplicationException
	 */
	private Map buildT1021AppInEmpl(Element indivNode, long indvSeqNum) throws SelfServiceApplicationException {
		T1021AppInEmplCargo appInEmplCargo = null;
		T1021AppInEmplCollection appInEmplColl = null;
		Element employeesElem = null;
		Element employeeNode = null;
		Attribute employeesAttr = null;
		String dataExists = "N";
		List employemnets = null;
		Iterator empsIt = null;
		String emplDt = null;
		SimpleDateFormat sdf = null;
		Map employementDetails = null;
		T1022AppInWagedCollection appInWagedColl = null;
		try {
			log(ILog.DEBUG, "Entered SelfServiceAppRegBO.buildT1021AppInEmpl indvSeqNum: " + indvSeqNum);
			employeesElem = indivNode.getChild(AppRegConstants.EMPLOYMENTS);
			if (employeesElem != null) {
				employeesAttr = employeesElem.getAttribute(AppRegConstants.DATA_EXIST);

				if (employeesAttr != null) {
					dataExists = employeesAttr.getValue();
				}
				if (!"N".equals(dataExists)) {
					employemnets = employeesElem.getChildren(AppRegConstants.EMPLOYMENT);

					empsIt = employemnets.iterator();
					if (conn == null) {
						appInEmplColl = new T1021AppInEmplCollection();
						appInWagedColl = new T1022AppInWagedCollection();

					} else {
						appInEmplColl = new T1021AppInEmplCollection(conn);
						appInWagedColl = new T1022AppInWagedCollection(conn);

					}
					while (empsIt.hasNext()) {
						appInEmplCargo = new T1021AppInEmplCargo();

						employeeNode = (Element) empsIt.next();
						appInEmplCargo.setAppNum(appNum);
						appInEmplCargo.setIndvSeqNum(indvSeqNum);
						appInEmplCargo.setEmplSeqNum(getLongForString(employeeNode.getChildText("EMPL_SEQ_NUM")));
						appInEmplCargo.setAsscEmplSeqNum(getLongForString(employeeNode.getChildText("ASSC_EMPL_SEQ_NUM")));
						appInEmplCargo.setEffBegMo(beginMonth);
						appInEmplCargo.setAddRecInd(getCharForIntString(employeeNode.getChildText("ADD_REC_IND")));
						appInEmplCargo.setErNam(getString(employeeNode.getChildTextTrim("ER_NAM")));
						appInEmplCargo.setErAdrTxt(getString(employeeNode.getChildTextTrim("ER_L1_ADR")));
						appInEmplCargo.setErCityAdr(getString(employeeNode.getChildTextTrim("ER_CITY_ADR")));
						appInEmplCargo.setErStaAdr(getString(employeeNode.getChildTextTrim("ER_ST_ADR")));
						appInEmplCargo.setErZipAdr(getString(employeeNode.getChildTextTrim("ER_ZIP_ADR")));
						appInEmplCargo.setErPhnNum(getString(employeeNode.getChildTextTrim("ER_PHN_NUM")));
						appInEmplCargo.setErJobTitleCd(getString(employeeNode.getChildTextTrim("ER_JOB_TITLE_CD")));
						appInEmplCargo.setRecordCompleted('N');
						sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
						try {
							emplDt = employeeNode.getChildText("EMPL_BEG_DT");
							if (emplDt != null) {
								appInEmplCargo.setEmplBegDt(new Timestamp(sdf.parse(emplDt).getTime()));
							} else {
								appInEmplCargo.setEmplBegDt(highDate);
							}
							emplDt = employeeNode.getChildText("EMPL_END_DT");
							if (emplDt != null) {
								appInEmplCargo.setEmplEndDt(new Timestamp(sdf.parse(emplDt).getTime()));
							} else {
								appInEmplCargo.setEmplEndDt(highDate);
							}
							appInEmplCargo.setIncmDconResp(getCharForString(employeeNode.getChildText("INCM_DCON_RESP")));
							emplDt = employeeNode.getChildText("LAST_PAYCK_DT");
							if (emplDt != null) {
								appInEmplCargo.setLastPayckDt(new Timestamp(sdf.parse(emplDt).getTime()));
							} else {
								appInEmplCargo.setLastPayckDt(highDate);
							}
							emplDt = employeeNode.getChildText("FST_PAYCK_DT");
							if (emplDt != null) {
								appInEmplCargo.setFstPayckDt(new Timestamp(sdf.parse(emplDt).getTime()));
							} else {
								appInEmplCargo.setFstPayckDt(highDate);
							}

							appInEmplCargo.setEmplTyp(getCharForString(employeeNode.getChildText("EMPL_TYP")));
							appInEmplCargo.setPayFreqCd(getCharForString(employeeNode.getChildTextTrim("PAY_FREQ_CD")));
							char strikeSw = getCharForString(employeeNode.getChildTextTrim("ON_STRIKE_SW"));
							char lostSw = getCharForString(employeeNode.getChildTextTrim("JOB_END_RESP"));
							if (strikeSw == 'Y' || lostSw == 'Y') {
								appInEmplCargo.setOnStrikeSw('Y');
							} else {
								appInEmplCargo.setOnStrikeSw('N');
							}
							appInEmplCargo.setOnStrkSw(getCharForString(employeeNode.getChildTextTrim("ON_STRIKE_SW")));
							emplDt = employeeNode.getChildText("STRK_BEG_DT");
							if (emplDt != null) {
								appInEmplCargo.setStrkBegDt(new Timestamp(sdf.parse(emplDt).getTime()));
							} else {
								appInEmplCargo.setStrkBegDt(highDate);
							}
							emplDt = employeeNode.getChildText("STRK_END_DT");
							if (emplDt != null) {
								appInEmplCargo.setStrkEndDt(new Timestamp(sdf.parse(emplDt).getTime()));
							} else {
								appInEmplCargo.setStrkEndDt(highDate);
							}
						} catch (ParseException e) {
							log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildT1021AppInEmpl indvSeqNum" + indvSeqNum + "Error:" + e.getMessage(), e);
						}
						appInEmplCargo.setJobPosnTyp(getString(employeeNode.getChildTextTrim("POSN_TYP_IND")));
						appInEmplCargo.setTempJobCd(getString(employeeNode.getChildTextTrim("TEMP_JOB_IND")));
						appInEmplCargo.setIncmDconResp(getCharForString(employeeNode.getChildTextTrim("INCM_DCON_RESP")));
						appInEmplCargo.setJobTerminationReason(getString(employeeNode.getChildTextTrim("JOB_TERMINATION_REASON")));
						appInEmplCargo.setRefJobSw(getCharForString(employeeNode.getChildTextTrim("REF_JOB_SW")));
						appInEmplColl.add(appInEmplCargo);
						buildT1022AppInWaged(appInWagedColl, employeeNode, indvSeqNum, appInEmplCargo.getEmplSeqNum(), appInEmplCargo.getPayFreqCd());
					}
					employementDetails = new HashMap();
					employementDetails.put(AppRegConstants.APP_IN_EMPL, appInEmplColl);
					employementDetails.put(AppRegConstants.APP_IN_EMPL_WAGE, appInWagedColl);
				}

			}
		} catch (NullPointerException e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildT1021AppInEmpl indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildT1021AppInEmpl indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(),e);
		} catch (Exception e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildT1021AppInEmpl  indvSeqNum: " + indvSeqNum + " : method : " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildT1021AppInEmpl indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(),e);
		}
		log(ILog.DEBUG, "Exiting SelfServiceAppRegBO.buildT1021AppInEmpl indvSeqNum: " + indvSeqNum);
		return employementDetails;
	}

	/**
	 * Builds the staging table T1023_APP_IN_SELFE with the values from the ABE
	 * application
	 * 
	 * @param node
	 *            - The XML with all the values from ABE
	 * @throws Exception
	 */
	private T1023AppInSelfeCollection buildT1023AppInSelfe(Element indivNode, long indvSeqNum) throws Exception {
		Element selfEmployeesElem = null;
		Element selfEmployeeNode = null;
		Attribute employeesAttr = null;
		String dataExists = "N";
		List selfEmployements = null;
		Iterator empsIt = null;
		String emplDt = null;
		SimpleDateFormat sdf = null;
		Map employementDetails = null;
		T1023AppInSelfeCargo appInSelfecargo = null;
		T1023AppInSelfeCollection appinSelfcoll = null;
		try {
			log(ILog.DEBUG, "Entered SelfServiceAppRegBO.buildT1023AppInSelfe indvSeqNum: " + indvSeqNum);
			selfEmployeesElem = indivNode.getChild(AppRegConstants.SELF_EMPLOYMENTS);
			if (selfEmployeesElem != null) {
				employeesAttr = selfEmployeesElem.getAttribute(AppRegConstants.DATA_EXIST);

				if (employeesAttr != null) {
					dataExists = employeesAttr.getValue();
				}
				if (!"N".equals(dataExists)) {
					selfEmployements = selfEmployeesElem.getChildren(AppRegConstants.SELF_EMPLOYMENT);

					empsIt = selfEmployements.iterator();
					if (conn == null) {
						appinSelfcoll = new T1023AppInSelfeCollection();

					} else {
						appinSelfcoll = new T1023AppInSelfeCollection(conn);
					}
					while (empsIt.hasNext()) {
						// SEQ_NUM
						appInSelfecargo = new T1023AppInSelfeCargo();

						selfEmployeeNode = (Element) empsIt.next();
						appInSelfecargo.setAppNum(appNum);
						appInSelfecargo.setIndvSeqNum(indvSeqNum);

						appInSelfecargo.setAddRecInd('N');
						appInSelfecargo.setAsscSeqNum(0);
						appInSelfecargo.setEffBegMo(0);
						appInSelfecargo.setEffEndMo(0);
						appInSelfecargo.setRecordCompleted('N');
						appInSelfecargo.setSelfEmplTyp(getString(selfEmployeeNode.getChildTextTrim("SELF_EMPL_TYP")));
						appInSelfecargo.setIndvSeqNum(getLongForString(selfEmployeeNode.getChildTextTrim("INDV_SEQ_NUM")));
						appInSelfecargo.setBusnOwnType(getString(selfEmployeeNode.getChildTextTrim("BUSN_OWN_TYPE")));
						appInSelfecargo.setSeqNum(getLongForString(selfEmployeeNode.getChildTextTrim("SEQ_NUM")));
						// AVG_EXP_AMT
						appInSelfecargo.setAvgExpAmt(getDoubleForString(selfEmployeeNode.getChildTextTrim("EXP_AMT")));
						// AVG_EXP_AMT_IND
						appInSelfecargo.setAvgExpAmtInd(getLongForString(selfEmployeeNode.getChildTextTrim("AVG_EXP_AMT_IND")));
						// AVG_INCM_AMT
						appInSelfecargo.setAvgIncmAmt(getDoubleForString(selfEmployeeNode.getChildTextTrim("AVG_INCM_AMT")));
						// AVG_INCM_AMT_IND
						appInSelfecargo.setAvgIncmAmtInd(getLongForString(selfEmployeeNode.getChildTextTrim("AVG_INCM_AMT_IND")));
						// DPRC_AMT
						appInSelfecargo.setDprcAmt(getDoubleForString(selfEmployeeNode.getChildTextTrim("DPRC_AMT")));
						// DPRC_AMT_IND
						appInSelfecargo.setDprcAmtInd(getLongForString(selfEmployeeNode.getChildTextTrim("DPRC_AMT_IND")));
						// HR_WORK_MO_QTY
						appInSelfecargo.setHrWorkMoQty(getLongForString(selfEmployeeNode.getChildTextTrim("HR_WORK_MO_QTY")));
						// HR_WRK_MO_QTY_IND
						appInSelfecargo.setHrWrkMoQtyInd(getLongForString(selfEmployeeNode.getChildTextTrim("HR_WRK_MO_QTY_IND")));
						// SELF_MNG_SW
						appInSelfecargo.setSelfMngSw(getCharForString(selfEmployeeNode.getChildTextTrim("SELF_MNG_SW")));
						appinSelfcoll.add(appInSelfecargo);
					}
				}

			}
		} catch (Exception e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildT1023AppInSelfe: " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildT1023AppInSelfe indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(),e);
		}
		log(ILog.DEBUG, "Exiting SelfServiceAppRegBO.buildT1023AppInSelfe indvSeqNum: " + indvSeqNum);
		return appinSelfcoll;
	}


	/**
	 * This method created records in T1022AppInWaged staging table
	 * 
	 * @param appInWagedColl
	 *            - appInWagedCollection
	 * @param empNode
	 *            - Element Object
	 * @param indvSeqNum
	 *            - Indv Seq Num
	 * @param emplSeqNum
	 *            - Employee Seq Num
	 * @param aFreqCd
	 * @return T1022AppInWagedCollection - T1022AppInWagedCollection
	 * @throws SelfServiceApplicationException
	 */
	private T1022AppInWagedCollection buildT1022AppInWaged(T1022AppInWagedCollection appInWagedColl, Element empNode, long indvSeqNum, long emplSeqNum, char aFreqCd)
			throws SelfServiceApplicationException {
		T1022AppInWagedCargo appInWagedCargo = null;
		long wageSeqNum = 0;
		Element wagesEle = null;
		List wageList = null;
		Iterator wageItr = null;
		Element wageNode = null;
		String eiTyp = null;
		Attribute wagesAttr = null;
		String dataExists = "N";
		try {
			wagesEle = empNode.getChild(AppRegConstants.WAGES);
			if (wagesEle != null) {
				wagesAttr = wagesEle.getAttribute(AppRegConstants.DATA_EXIST);
				if (wagesAttr != null) {
					dataExists = wagesAttr.getValue();
				}
			}

			if (!"N".equals(dataExists)) {
				wageList = wagesEle.getChildren(AppRegConstants.WAGE);

				if (wageList != null) {

					wageItr = wageList.iterator();
					log(ILog.DEBUG, "Entered SelfServiceAppRegBO.buildT1022AppInWaged indvSeqNum: " + indvSeqNum);
					while (wageItr.hasNext()) {
						wageNode = (Element) wageItr.next();
						if (getLongForString(wageNode.getChildTextTrim("ADTL_PAY_IND")) != 4) {
							appInWagedCargo = new T1022AppInWagedCargo();
							appInWagedCargo.setAppNum(appNum);
							appInWagedCargo.setIndvSeqNum(indvSeqNum);
							appInWagedCargo.setEmplSeqNum(emplSeqNum);
							appInWagedCargo.setSeqNum(wageSeqNum++);
							eiTyp = wageNode.getChildTextTrim("ADTL_PAY_TYP");
							appInWagedCargo.setEiTyp(eiTyp);
							if (null != eiTyp && eiTyp.length() > 0 && (eiTyp.equals("TIP") || eiTyp.equals("COM") || eiTyp.equals("BON"))) {
								String freqCd = null != wageNode.getChildTextTrim("ADTL_PAY_FREQ") ? wageNode.getChildTextTrim("ADTL_PAY_FREQ") : "X";
								appInWagedCargo.setEiTotAmt(convertToMonthly(getDoubleForString(wageNode.getChildTextTrim("ADTL_PAY_AMT")), freqCd.charAt(0)));
								appInWagedCargo.setAvgWorkHrsQty(0.0);
							} else if (null != eiTyp && eiTyp.length() > 0 && (eiTyp.equals("ADD") || eiTyp.equals("HOR"))) {
								appInWagedCargo.setAvgWorkHrsQty(getDoubleForString(wageNode.getChildTextTrim("ADTL_HRS_QTY")));
								appInWagedCargo.setEiTotAmt(getDoubleForString(wageNode.getChildTextTrim("ADTL_PAY_AMT")));
							} else {
								appInWagedCargo.setEiTotAmt(getDoubleForString(wageNode.getChildTextTrim("ADTL_PAY_AMT")));
								appInWagedCargo.setAvgWorkHrsQty(0.0);
							}

							appInWagedCargo.setEiTotAmtInd(getLongForString(wageNode.getChildTextTrim("ADTL_PAY_IND")));

							appInWagedColl.add(appInWagedCargo);
						}
					}
				}
			}
		} catch (NullPointerException e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildT1022AppInWaged indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildT1022AppInWaged indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(),e);
		} catch (Exception e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildT1022AppInWaged  indvSeqNum: " + indvSeqNum + " : method : " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildT1022AppInWaged indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(),e);
		}
		log(ILog.DEBUG, "Exiting SelfServiceAppRegBO.buildT1022AppInWaged indvSeqNum: " + indvSeqNum);
		return appInWagedColl;
	}

	/**
	 * This method <LI>
	 * Inserts records in buildT1016AppInDrugf staging table according to the
	 * available data values for Drug-Felony</LI>
	 * 
	 * @param indivNode
	 *            - Element Object
	 * @param indvSeqNum
	 *            - Indv Seq Num
	 * @return T1016AppInDrugfCargo - T1016AppInDrugfCargo
	 * @throws SelfServiceApplicationException
	 */
	private T1016AppInDrugfCargo buildT1016AppInDrugf(Element indivNode, long indvSeqNum) throws SelfServiceApplicationException {
		T1016AppInDrugfCargo drugFCargo = null;
		T1016AppInDrugfCollection coll = null;
		char drugFResp;
		List dfList = null;
		Element dfEle = null;
		String dataExist = null;
		Element indvProfile = null;
		try {
			log(ILog.DEBUG, "Entering SelfServiceAppRegBO.buildT1016AppInDrugf indvSeqNum: " + indvSeqNum);
			indvProfile = indivNode.getChild(AppRegConstants.INDIVIDUAL_PROFILE);
			drugFResp = getCharForString(indvProfile.getChildText("DRUG_FELN_RESP"));
			drugFCargo = new T1016AppInDrugfCargo();
			drugFCargo.setAppNum(appNum);
			drugFCargo.setIndvSeqNum(indvSeqNum);
			drugFCargo.setAddRecInd(getCharForString(drugFResp + ""));
			drugFCargo.setEffBegMo(beginMonth);
			drugFCargo.setCvctDt(highDate);
		} catch (NullPointerException e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildT1016AppInDrugf indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildT1016AppInDrugf indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(),e);
		} catch (Exception e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildT1016AppInDrugf  indvSeqNum: " + indvSeqNum + " : method : " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildT1016AppInDrugf indvSeqNum: " + indvSeqNum + " :  method : " + e.getMessage(),e);
		}
		log(ILog.DEBUG, "Exiting SelfServiceAppRegBO.buildT1016AppInDrugf indvSeqNum: " + indvSeqNum);
		return drugFCargo;
	}

	/**
	 * This method gets filing / auth rep related information from the XML
	 * document object. and inserts datas into the staging tables.
	 * 
	 * @param root
	 *            - Element Object
	 * @throws SelfServiceApplicationException
	 * @serial Note : webservice output xml data structure for reference
	 *         <FILING_REPRESENTATIVE DATA_EXIST="Y">
	 *         <PHN_EXTN_NUM>3333</PHN_EXTN_NUM> <PHN_NUM>1111111111</PHN_NUM>
	 *         <CITY_ADR>Lansing</CITY_ADR>
	 *         <FILING_REP_FST_NAM>Filing</FILING_REP_FST_NAM>
	 *         <FILING_REP_LAST_NAM>Rep</FILING_REP_LAST_NAM> <L2_ADR />
	 *         <L1_ADR>3215 Trappers cove Trail</L1_ADR>
	 *         <ZIP_ADR>48910</ZIP_ADR> <STA_ADR>MI</STA_ADR>
	 *         <REP_CODE>FR</REP_CODE> <EMAIL_ADR>repf@michigan.gov</EMAIL_ADR>
	 *         <APP_NUM>9000110599</APP_NUM>
	 *         <MA_FS_AUTH_REP_NAM>filingrep</MA_FS_AUTH_REP_NAM>
	 *         </FILING_REPRESENTATIVE>
	 **/
	private void buildT2040AppAuthRep(Element root) throws SelfServiceApplicationException {
		T2040AppAuthRepCargo appAuthRepCargo = null;
		T2040AppAuthRepCollection appAuthRepCollection = null;
		appAuthRepCargo = new T2040AppAuthRepCargo();
		Element flRepEle = root.getChild(AppRegConstants.FILING_REPRESENTATIVE_NM);
		Attribute flRepEleAttr = flRepEle.getAttribute(AppRegConstants.DATA_EXIST);
		String dataExists = "Y";
		if (flRepEleAttr != null) {
			dataExists = flRepEleAttr.getValue();
		}
		if (!"N".equals(dataExists)) {
			appAuthRepCargo.setPhnExtnNum(getString(flRepEle.getChildText("PHN_EXTN_NUM")));
			appAuthRepCargo.setPhnNum(getString(flRepEle.getChildText("PHN_NUM")));
			appAuthRepCargo.setCityAdr(getString(flRepEle.getChildText("CITY_ADR")));
			appAuthRepCargo.setFilingRepFirstName(getString(flRepEle.getChildText("FILING_REP_FST_NAM")));
			appAuthRepCargo.setFilingRepMidName(getString(flRepEle.getChildText("FILING_REP_MID_NAM")));
			appAuthRepCargo.setFilingRepLastName(getString(flRepEle.getChildText("FILING_REP_LAST_NAM")));
			appAuthRepCargo.setL2Adr(getString(flRepEle.getChildText("L2_ADR")));
			appAuthRepCargo.setL1Adr(getString(flRepEle.getChildText("L1_ADR")));
			appAuthRepCargo.setZipAdr(getString(flRepEle.getChildText("ZIP_ADR")));
			appAuthRepCargo.setStaAdr(getString(flRepEle.getChildText("STA_ADR")));
			appAuthRepCargo.setAuthRepCd(getString(flRepEle.getChildText("REP_CODE")));
			appAuthRepCargo.setEmailAdr(getString(flRepEle.getChildText("EMAIL_ADR")));
			appAuthRepCargo.setMaFsAuthRepName(getString(flRepEle.getChildText("MA_FS_AUTH_REP_NAM")));
			appAuthRepCargo.setRelationshipTypeCd(getString(flRepEle.getChildText("RELATIONSHIP_TYPE_CD")));
			appAuthRepCargo.setAppNum(appNum);
			appAuthRepCollection = (conn == null) ? new T2040AppAuthRepCollection() : new T2040AppAuthRepCollection(conn);
			appAuthRepCollection.setCargo(appAuthRepCargo);
			try {
				appAuthRepCollection.insert();
			} catch (ApplicationException e) {
				log(ILog.ERROR, "exception in  SelfServiceAppRegBO.buildT2040AppAuthRep method, error: " + e.getMessage(), e);
				throw new SelfServiceApplicationException("exception in  SelfServiceAppRegBO.buildT2040AppAuthRep method, error: " + e.getMessage(),e);
			} catch (FrameworkException e) {
				log(ILog.ERROR, "exception in  SelfServiceAppRegBO.buildT2040AppAuthRep method, error: " + e.getMessage(), e);
				throw new SelfServiceApplicationException("exception in  SelfServiceAppRegBO.buildT2040AppAuthRep method, error: " + e.getMessage(),e);
			} catch (Exception e) {
				log(ILog.ERROR, "exception in  SelfServiceAppRegBO.buildT2040AppAuthRep method, error: " + e.getMessage(), e);
				throw new SelfServiceApplicationException("exception in  SelfServiceAppRegBO.buildT2040AppAuthRep method, error: " + e.getMessage(),e);
			}
		}
		log(ILog.DEBUG, "exiting from SelfServiceAppRegBO.buildT2040AppAuthRep method");
	}

	/**
	 * The <code>getSerCargoByService</code> returns the T3001AppSerRqstCargo
	 * given a serviceCode.
	 * 
	 * @param coll
	 *            - T3001AppSerRqstCollection
	 * @param serviceCode
	 *            - Service Code
	 * @return T3001AppSerRqstCargo - T3001AppSerRqstCargo
	 */
	public T3001AppSerRqstCargo getSerCargoByService(T3001AppSerRqstCollection coll, String serviceCode) {
		if (coll != null && coll.size() > 0) {
			int size = coll.size();
			for (int i = 0; i < size; i++) {
				T3001AppSerRqstCargo currentCargo = coll.getResults(i);
				if (currentCargo.getAssistanceTypeCd().equalsIgnoreCase(serviceCode)) {
					return currentCargo;
				}
			}
		}
		return null;
	}

	/**
	 * The <code>buildSerAppRequest</code> builds the Ser App Request.
	 * 
	 * @param root
	 *            - Element Object
	 * @throws Exception
	 * 
	 */
	private T3001AppSerRqstCollection buildSerAppRequest(Element root) throws Exception {
		T3001AppSerRqstCollection appRequestCollection;

		if (this.conn == null) {
			appRequestCollection = new T3001AppSerRqstCollection();
		} else {
			appRequestCollection = new T3001AppSerRqstCollection(this.conn);
		}
		Element appRequests = root.getChild("APP_SER_RQSTS");
		try {
			if (appRequests != null) {
				List appRequestList = appRequests.getChildren("APP_SER_RQST");
				if (appRequestList != null && appRequestList.size() > 0) {
					Iterator ite = appRequestList.iterator();
					while (ite.hasNext()) {
						char othThanHhSw = 'N';
						Element serAppRqst = (Element) ite.next();
						T3001AppSerRqstCargo cargo = new T3001AppSerRqstCargo();
						cargo.setAppNum(appNum);
						String ssServiceCode = serAppRqst.getChildText("ASSISTANCE_TYPE_CD");
						String ssFuelTypeCd = serAppRqst.getChildText("HEAT_SRC_CD");
						String bridgesServiceCd = StSerServiceMapping.getBridgesServiceCode(ssFuelTypeCd, ssServiceCode);
						if (bridgesServiceCd == null) {
							throw new SelfServiceApplicationException("Invalid service type requested for App Num:" + appNum);
						}
						cargo.setAssistanceTypeCd(ssServiceCode);
						cargo.setServiceCd(bridgesServiceCd);
						try {
							String bridgesServiceTypeCd = ReferenceTableManager.getValueByColumn(true, "EDSERSRVCODE", bridgesServiceCd, "SERVICETYPECODE");
							String bridgesServiceGroupCd = ReferenceTableManager.getValueByColumn(true, "EDSERSRVCODE", bridgesServiceCd, "SERVICEGROUPCODE");
							cargo.setServiceGrpCd(bridgesServiceGroupCd);
							cargo.setServiceTypeCd(bridgesServiceTypeCd);
						} catch (Exception e) {
							log(ILog.ERROR, "exception in  SelfServiceAppRegBO.buildSerAppRequest method, error: " + e.getMessage(), e);
							throw new SelfServiceApplicationException(e.getMessage(),e);
						}
						othThanHhSw = getCharForString(serAppRqst.getChildText("OTH_THAN_HH_SW"));
						if (othThanHhSw == 'Y')
							cargo.setOthThanHhSw('N');
						else
							cargo.setOthThanHhSw('Y');
						appRequestCollection.add(cargo);
					}
				}
				if (appRequestList != null && appRequestList.size() > 0) {
					Element serFurnaceDetails = root.getChild("SER_FURNACE_DETAILS");
					List serFurnaceDetailsList = serFurnaceDetails.getChildren("SER_FURNACE_DETAIL");
					Iterator ite = serFurnaceDetailsList.iterator();
					while (ite.hasNext()) {
						Element serFurnace = (Element) ite.next();
						String ssServiceCode = serFurnace.getChildText("ASSISTANCE_TYPE_CD");
						T3001AppSerRqstCargo cargo = getSerCargoByService(appRequestCollection, ssServiceCode);
						cargo.setDebtRepayArrangeSw(getCharForString(serFurnace.getChildText("DEBT_REPAY_ARRANGE_SW")));
						cargo.setEstimatedRepairAmt(getDoubleForString(serFurnace.getChildText("ESTIMATED_REPAIR_AMT")));
						cargo.setRequestedAmt(cargo.getEstimatedRepairAmt());
						cargo.setServiceRequestVrfCd("CE");
						cargo.setHelpOthDhsAmt(getDoubleForString(serFurnace.getChildText("HELP_OTH_DHS_AMT")));
						cargo.setHelpOthDhsName(serFurnace.getChildText("HELP_OTH_DHS_NAME"));
						cargo.setHelpOthDhsSw(getCharForString(serFurnace.getChildText("HELP_OTH_DHS_SW")));
						cargo.setHouseListedForSaleSw(getCharForString(serFurnace.getChildText("HOUSE_LISTED_FOR_SALE_SW")));
						cargo.setLifeEstateSw(getCharForString(serFurnace.getChildText("LIFE_ESTATE_SW")));
						cargo.setLiveHouseSw(getCharForString(serFurnace.getChildText("LIVE_HOUSE_SW")));
						cargo.setOweBackTaxesMortgageSw(getCharForString(serFurnace.getChildText("OWE_BACK_TAXES_MORTGAGE_SW")));
						cargo.setOwnHouseSw(getCharForString(serFurnace.getChildText("OWN_HOUSE_SW")));
						if (cargo.getOwnHouseSw() == 'Y') {
							this.realPropertySw = true;
						}
						cargo.setPermanentResidenceSw(getCharForString(serFurnace.getChildText("PERMANENT_RESIDENCE_SW")));
					}
					Element serEnergyDetails = root.getChild("SER_ENERGY_DETAILS");
					List serEnergyList = serEnergyDetails.getChildren("SER_ENERGY_DETAIL");
					Iterator iter = serEnergyList.iterator();
					while (iter.hasNext()) {
						boolean isDeliveryType = false;
						Element serEnergy = (Element) iter.next();
						String ssServiceCode = serEnergy.getChildText("ASSISTANCE_TYPE_CD");
						T3001AppSerRqstCargo cargo = getSerCargoByService(appRequestCollection, ssServiceCode);
						if ("63A".equalsIgnoreCase(cargo.getServiceCd()) || ("63".equalsIgnoreCase(cargo.getServiceCd()) && deliverableFuel)) {
							isDeliveryType = true;
						}
						cargo.setBankruptAccntSw(getCharForString(serEnergy.getChildText("BANKRUPT_ACCNT_SW")));
						cargo.setAirConditionOnlySw(getCharForString(serEnergy.getChildText("AIR_CONDITION_ONLY_SW")));
						cargo.setCookingGasOnlySw(getCharForString(serEnergy.getChildText("COOKING_GAS_ONLY_SW")));
						char billFromOldAddress = getCharForString(serEnergy.getChildText("BILL_FROM_OLD_ADDRESS_SW"));
						if (billFromOldAddress == 'Y') {
							cargo.setBillFromOldAddressSw('N');
						} else {
							cargo.setBillFromOldAddressSw('Y');
						}
						char billOnlyForResidential = getCharForString(serEnergy.getChildText("BILL_RESIDENTIAL_ACCNT_SW"));
						if (billOnlyForResidential == 'Y') {
							cargo.setBillResidentialAccntSw('N');
						} else {
							cargo.setBillResidentialAccntSw('Y');
						}
						cargo.setCommonMeterSw(getCharForString(serEnergy.getChildText("COMMON_METER_SW")));
						cargo.setIsDlvryAddrLiveAddrSw(getCharForString(serEnergy.getChildText("IS_DLVRY_ADDR_LIVE_ADDR_SW")));
						cargo.setRemainingFuelPercentage(getIntForString(serEnergy.getChildText("REMAINING_FUEL_PERCENTAGE")));
						cargo.setIllegalUsageAmt(getDoubleForString(serEnergy.getChildText("ILLEGAL_USAGE_AMT")));
						cargo.setIllegalUsageSw(getCharForString(serEnergy.getChildText("ILLEGAL_USAGE_SW")));
						cargo.setOutstandingAmt(getDoubleForString(serEnergy.getChildText("ILLEGAL_USAGE_AMT")));
						cargo.setOutstandingBillSw(getCharForString(serEnergy.getChildText("OUTSTANDING_BILL_SW")));
						cargo.setRequestedPropaneTestAmt(getDoubleForString(serEnergy.getChildText("REQUESTED_PROPANE_TEST_AMT")));
						double leakTestAmt = cargo.getRequestedPropaneTestAmt();
						double requestedAmt;
						if (!isDeliveryType) {
							cargo.setIsSrvcAddrLiveAddrSw(getCharForString(serEnergy.getChildText("IS_SRVC_ADDR_LIVE_ADDR_SW")));
						} else {
							cargo.setIsSrvcAddrLiveAddrSw(getCharForString(serEnergy.getChildText("IS_DLVRY_ADDR_LIVE_ADDR_SW")));
						}
						requestedAmt = getDoubleForString(serEnergy.getChildText("REQUESTED_AMT"));
						/**
						 * BRGUS00236317- Added By Kumar Karuppanan for Self
						 * Service SER, When the account is Cooking only or the
						 * Aircondition only account then we should not show the
						 * Requested amount - Start
						 **/
						if (cargo.getCookingGasOnlySw() == 'Y' || cargo.getAirConditionOnlySw() == 'Y')
							cargo.setRequestedAmt(0);
						else
							cargo.setRequestedAmt(requestedAmt + leakTestAmt);
						/**
						 * BRGUS00236317- Added By Kumar Karuppanan for Self
						 * Service SER, When the account is Cooking only or the
						 * Aircondition only account then we should not show the
						 * Requested amount - End
						 **/
						cargo.setServiceRequestVrfCd(serEnergy.getChildText("REQUESTED_AMT_VRF_CD"));
						if ("CS".equals(cargo.getServiceRequestVrfCd())) {
							cargo.setServiceRequestVrfCd("CE");
						}
					}
					Element nonEnergDetails = root.getChild("SER_NON_ENERGY_DETAILS");
					List nonEnergList = (nonEnergDetails != null ? nonEnergDetails.getChildren("SER_NON_ENERGY_DETAIL") : null);
					if (nonEnergList != null && nonEnergList.size() > 0) {
						String dataExist = null;
						Iterator nonEnergItr = nonEnergList.iterator();
						while (nonEnergItr.hasNext()) {
							dataExist = DATA_NO;
							Element nonEnergDetail = (Element) nonEnergItr.next();
							Attribute nonEnergAttr = (nonEnergDetail != null ? nonEnergDetail.getAttribute(AppRegConstants.DATA_EXIST) : null);
							if (nonEnergAttr != null)
								dataExist = nonEnergAttr.getValue();
							if (DATA_YES.equalsIgnoreCase(dataExist)) {
								String ssServiceCode = nonEnergDetail.getChildTextTrim("SERVICE_TYPE_CD");
								T3001AppSerRqstCargo nonEnergCargo = getSerCargoByService(appRequestCollection, ssServiceCode);
								if (nonEnergCargo != null) {
									double outstandingAmt = getDoubleForString(nonEnergDetail.getChildTextTrim("OUTSTANDING_AMT"));
									nonEnergCargo.setOutstandingAmt(outstandingAmt);
									nonEnergCargo.setRequestedAmt(outstandingAmt);
									nonEnergCargo.setIsSrvcAddrLiveAddrSw(getCharForString(nonEnergDetail.getChildTextTrim("IS_SRVC_ADDR_LIVE_ADDR_SW")));
									nonEnergCargo.setBillFromOldAddressSw(getCharForString(nonEnergDetail.getChildTextTrim("BILL_FROM_OLD_ADDRESS_SW")));
									nonEnergCargo.setBillResidentialAccntSw(getCharForString(nonEnergDetail.getChildTextTrim("BILL_RESIDENTIAL_ACCOUNT_SW")));
									nonEnergCargo.setHelpOthDhsName(getString(nonEnergDetail.getChildTextTrim("HELP_OTHER_DHS_NAME")));
									nonEnergCargo.setHelpOthDhsAmt(getDoubleForString(nonEnergDetail.getChildTextTrim("HELP_OTHER_DHS_AMT")));
									nonEnergCargo.setCommonMeterSw(getCharForString(nonEnergDetail.getChildTextTrim("COMMON_METER_SW")));
									nonEnergCargo.setBillForMultipleAddrSw(getCharForString(nonEnergDetail.getChildTextTrim("BILL_FOR_MULTIPLE_ADDR_SW")));
									nonEnergCargo.setIllegalUsageSw(getCharForString(nonEnergDetail.getChildTextTrim("ILLEGAL_USAGE_SW")));
									nonEnergCargo.setIllegalUsageAmt(getDoubleForString(nonEnergDetail.getChildTextTrim("ILLEGAL_USAGE_AMT")));
									nonEnergCargo.setBankruptAccntSw(getCharForString(nonEnergDetail.getChildTextTrim("BANKRUPT_ACCOUNT_SW")));
									nonEnergCargo.setCookingGasOnlySw(getCharForString(nonEnergDetail.getChildTextTrim("COOKING_GAS_ONLY_SW")));
								}
							}
						}
					}
					Element homeOwnerDetails = root.getChild("SER_HOME_OWNERSHIP_DETAILS");
					List homeOwnerList = (homeOwnerDetails != null ? homeOwnerDetails.getChildren("SER_HOME_OWNERSHIP_DETAIL") : null);
					if (homeOwnerList != null && homeOwnerList.size() > 0) {
						String dataExist = null;
						Iterator homeOwnerItr = homeOwnerList.iterator();
						while (homeOwnerItr.hasNext()) {
							dataExist = DATA_NO;
							Element homeOwnerDetail = (Element) homeOwnerItr.next();
							Attribute homeOwnerAttr = (homeOwnerDetail != null ? homeOwnerDetail.getAttribute(AppRegConstants.DATA_EXIST) : null);
							if (homeOwnerAttr != null)
								dataExist = homeOwnerAttr.getValue();
							if (DATA_YES.equalsIgnoreCase(dataExist)) {
								String ssServiceCode = homeOwnerDetail.getChildTextTrim("SERVICE_TYPE_CD");
								T3001AppSerRqstCargo homeOwnerCargo = getSerCargoByService(appRequestCollection, ssServiceCode);
								if (homeOwnerCargo != null) {
									double estimatedCostAmt = getDoubleForString(homeOwnerDetail.getChildTextTrim("ESTIMATED_COST_AMT"));
									homeOwnerCargo.setEstimatedRepairAmt(estimatedCostAmt);
									homeOwnerCargo.setRequestedAmt(estimatedCostAmt);

									homeOwnerCargo.setOwnHouseSw(getCharForString(homeOwnerDetail.getChildTextTrim("OWN_HOUSE_SW")));
									homeOwnerCargo.setLiveHouseSw(getCharForString(homeOwnerDetail.getChildTextTrim("LIVE_HOUSE_SW")));
									homeOwnerCargo.setPermanentResidenceSw(getCharForString(homeOwnerDetail.getChildTextTrim("PERMANENT_RESIDENCE_SW")));
									homeOwnerCargo.setLifeEstateSw(getCharForString(homeOwnerDetail.getChildTextTrim("LIFE_ESTATE_SW")));
									homeOwnerCargo.setOweBackTaxesMortgageSw(getCharForString(homeOwnerDetail.getChildTextTrim("OWE_BACK_TAXES_MORTGAGE_SW")));
									homeOwnerCargo.setDebtRepayArrangeSw(getCharForString(homeOwnerDetail.getChildTextTrim("EBT_REPAY_ARRANGE_SW")));
									homeOwnerCargo.setHouseListedForSaleSw(getCharForString(homeOwnerDetail.getChildTextTrim("HOUSE_LISTED_FOR_SALE_SW")));
									homeOwnerCargo.setHelpOthDhsName(getString(homeOwnerDetail.getChildTextTrim("HELP_OTHER_DHS_NAME")));
									homeOwnerCargo.setHelpOthDhsAmt(getDoubleForString(homeOwnerDetail.getChildTextTrim("HELP_OTHER_DHS_AMT")));
								}
							}
						}
					}// End Of Home Owner Info map

					Element reLocationDetails = root.getChild("SER_RELOC_DETAILS");
					List reLocationList = (reLocationDetails != null ? reLocationDetails.getChildren("SER_RELOC_DETAIL") : null);
					if (reLocationList != null && reLocationList.size() > 0) {
						String dataExist = null;
						Iterator reLocationItr = reLocationList.iterator();
						while (reLocationItr.hasNext()) {
							dataExist = DATA_NO;
							Element reLocationDetail = (Element) reLocationItr.next();
							Attribute reLocationAttr = (reLocationDetail != null ? reLocationDetail.getAttribute(AppRegConstants.DATA_EXIST) : null);
							if (reLocationAttr != null)
								dataExist = reLocationAttr.getValue();
							if (DATA_YES.equalsIgnoreCase(dataExist)) {
								String ssServiceCode = reLocationDetail.getChildTextTrim("SERVICE_TYPE_CD");
								T3001AppSerRqstCargo reLocationCargo = getSerCargoByService(appRequestCollection, ssServiceCode);
								if (reLocationCargo != null) {
									double appSerAmt = getDoubleForString(reLocationDetail.getChildTextTrim("RELOCATION_AMT"));
									reLocationCargo.setRelocationAmt(appSerAmt);

									if (appSerAmt > 0)
										reLocationCargo.setRequestedAmt(appSerAmt);
									else if ((appSerAmt = getDoubleForString(reLocationDetail.getChildTextTrim("SECURITY_DEPOSIT_AMT"))) > 0)
										reLocationCargo.setRequestedAmt(appSerAmt);
									else if ((appSerAmt = getDoubleForString(reLocationDetail.getChildTextTrim("MONTHLY_RENT_AMT"))) > 0)
										reLocationCargo.setRequestedAmt(appSerAmt);

									reLocationCargo.setIncludesHeatSw(getCharForString(reLocationDetail.getChildTextTrim("INCLUDES_HEAT_SW")));
									reLocationCargo.setIncludesWaterSw(getCharForString(reLocationDetail.getChildTextTrim("INCLUDES_WATER_SW")));
									reLocationCargo.setIncludesElectricitySw(getCharForString(reLocationDetail.getChildTextTrim("INCLUDES_ELECTRICITY_SW")));
									reLocationCargo.setIncludesCookingGasSw(getCharForString(reLocationDetail.getChildTextTrim("INCLUDES_COOKING_GAS_SW")));
									reLocationCargo.setSecurityDepositAmt(getDoubleForString(reLocationDetail.getChildTextTrim("SECURITY_DEPOSIT_AMT")));
									reLocationCargo.setCourtSummonSw(getCharForString(reLocationDetail.getChildTextTrim("COURT_SUMMON_SW")));
									reLocationCargo.setMovingCompanyName(getString(reLocationDetail.getChildTextTrim("MOVING_COMPANY_NAME")));
									reLocationCargo.setMoveReasonTxt(getString(reLocationDetail.getChildTextTrim("MOVE_REASON_TEXT")));
								}
							}
						}
					}
				}
			}
		}
		catch (NullPointerException e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildSerAppRequest :  method : " + e.getMessage(), e);
			throw new Exception("Exception in SelfServiceAppRegBO.buildSerAppRequest  method : " + e.getMessage(),e);
		} catch (Exception e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildSerAppRequest :  method : " + e.getMessage(), e);
			throw new Exception("Exception in SelfServiceAppRegBO.buildSerAppRequest  method : " + e.getMessage(),e);
		}

		return appRequestCollection;
	}

	/**
	 * The <code>buildSerProviders</code> builds the Ser Provider info.
	 * 
	 * @param root
	 *            - Element Object
	 * @throws SelfServiceApplicationException
	 * @throws Exception
	 */
	private void buildSerProviders(Element root) throws SelfServiceApplicationException {
		Element serProviders = root.getChild("APP_SER_PROVIDERS");
		List serProviderList = serProviders.getChildren("APP_SER_PROVIDER");
		T3002AppSerProviderCollection serProvidersColl;
		Map fuelMap = new HashMap();
		if (this.conn == null) {
			serProvidersColl = new T3002AppSerProviderCollection();
		} else {
			serProvidersColl = new T3002AppSerProviderCollection(this.conn);
		}
		try {
			Iterator iter = serProviderList.iterator();
			String ssServiceCode = "";
			String ssFuelTypeCd = "";
			String bridgesServiceCd = "";
			Element appRequests = root.getChild("APP_SER_RQSTS");
			if (appRequests != null) {
				List appRequestList = appRequests.getChildren("APP_SER_RQST");
				if (appRequestList != null && appRequestList.size() > 0) {
					Iterator ite = appRequestList.iterator();
					while (ite.hasNext()) {
						Element serAppRqst = (Element) ite.next();
						ssServiceCode = serAppRqst.getChildText("ASSISTANCE_TYPE_CD");
						ssFuelTypeCd = serAppRqst.getChildText("HEAT_SRC_CD");
						bridgesServiceCd = StSerServiceMapping.getBridgesServiceCode(ssFuelTypeCd, ssServiceCode);
						fuelMap.put(ssServiceCode, bridgesServiceCd);
						if (bridgesServiceCd == null) {
							throw new SelfServiceApplicationException("Invalid service type requested for App Num:" + appNum);
						}
					}
				}
				while (iter.hasNext()) {
					T3002AppSerProviderCargo cargo = new T3002AppSerProviderCargo();
					Element serProvider = (Element) iter.next();
					cargo.setAppNum(appNum);
					String assTypeCd = serProvider.getChildText("ASSISTANCE_TYPE_CD");
					String bServiceCd = (String) fuelMap.get(assTypeCd);
					cargo.setOthProviderName(serProvider.getChildText("OTH_PROVIDER_NAME"));
					cargo.setProviderAddrZip(getLongForString(serProvider.getChildText("PROVIDER_ADDR_ZIP")));
					cargo.setProviderId(getLongForString(serProvider.getChildText("PROVIDER_CD")));
					cargo.setAccountNumOnBill(serProvider.getChildText("ACCOUNT_NUM_ON_BILL"));
					cargo.setServiceCd(bServiceCd);
					serProvidersColl.add(cargo);
				}
				if (serProvidersColl.size() > 0) {
					serProvidersColl.insert();
				}
			}
		} catch (NullPointerException e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildSerAppRequest :  method : " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildSerProviders  method : " + e.getMessage(),e);
		} catch (Exception e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildSerAppRequest   method : " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildSerProviders method : " + e.getMessage(),e);
		}
	}

	/**
	 * The <code>buildSerPayments</code> builds the Ser Payments info.
	 * 
	 * @param root
	 *            - Element Object
	 * @throws SelfServiceApplicationException
	 * @throws Exception
	 */
	private void buildSerPayments(Element root) throws SelfServiceApplicationException {
		Element serPayments = root.getChild("SER_PAYMENTS");
		List serPaymentList = serPayments.getChildren("SER_PAYMENT");
		T3003AppSerPymtHistCollection serPaymentsCollection = null;
		if (conn == null) {
			serPaymentsCollection = new T3003AppSerPymtHistCollection();
		} else {
			serPaymentsCollection = new T3003AppSerPymtHistCollection(conn);
		}
		try {
			Iterator ite = serPaymentList.iterator();
			String payDt = "";
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			while (ite.hasNext()) {
				Element serPayment = (Element) ite.next();
				T3003AppSerPymtHistCargo cargo = new T3003AppSerPymtHistCargo();
				cargo.setAppNum(appNum);
				cargo.setCompleteSw('N');
				cargo.setElectricPaidAmt(getDoubleForString(serPayment.getChildText("ELECTRIC_PAID_AMT")));
				cargo.setHeatPaidAmt(getDoubleForString(serPayment.getChildText("HEAT_AMT")));
				cargo.setHhIncomeAmt(getDoubleForString(serPayment.getChildText("HH_INCOME_AMT")));
				cargo.setHhSize(getIntForString(serPayment.getChildText("HH_SIZE")));
				payDt = serPayment.getChildTextTrim("PAYMENT_DT");
				cargo.setHeatVrfCd(serPayment.getChildText("HEAT_VRF_CD"));
				cargo.setElectricVrfCd(serPayment.getChildText("ELECTRIC_VRF_CD"));
				cargo.setPaymentDt(new Timestamp(sdf.parse(payDt).getTime()));
				cargo.setHeatObligationSw('Y');
				cargo.setElectricObligationSw('Y');
				cargo.setShelterPaidAmt(getDoubleForString(serPayment.getChildText("SHELTER_PAID_AMT")));
				cargo.setUtilityPaidAmt(getDoubleForString(serPayment.getChildText("UTILITY_PAID_AMT")));
				serPaymentsCollection.add(cargo);
			}
			if (serPaymentsCollection.size() > 0)
				serPaymentsCollection.insert();
		} catch (ParseException e) {
			log(ILog.ERROR, "Exception occured in buildSerPayments :: " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception occured in buildSerPayments :: " + e.getMessage(),e);
		} catch (NullPointerException e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildSerPayments :  method : " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildSerPayments  method : " + e.getMessage(),e);
		} catch (Exception e) {
			log(ILog.ERROR, "Exception in SelfServiceAppRegBO.buildSerPayments   method : " + e.getMessage(), e);
			throw new SelfServiceApplicationException("Exception in SelfServiceAppRegBO.buildSerPayments method : " + e.getMessage(),e);
		}
	}

	/**
	 * The <code>convertToWeekly</code> converts the given amnt based on the
	 * frequency code.
	 * 
	 * @param value
	 *            - Amnt to be converted
	 * @param aFreqCd
	 *            - frequency code.
	 * @return double - converted value.
	 */
	private double convertToMonthly(double value, char aFreqCd) {
		BigDecimal amountDecimal = null;
		try {
			double amount = 0;
			switch (aFreqCd) {
			case 'B':
				amountDecimal = new BigDecimal(value);
				amountDecimal = amountDecimal.setScale(2, BigDecimal.ROUND_HALF_UP);
				amountDecimal.multiply(new BigDecimal(2.15));
				break;
			case 'M':
				amountDecimal = new BigDecimal(value);
				amountDecimal = amountDecimal.setScale(2, BigDecimal.ROUND_HALF_UP);
				break;
			case 'S':
				amountDecimal = new BigDecimal(value);
				amountDecimal = amountDecimal.setScale(2, BigDecimal.ROUND_HALF_UP);
				amountDecimal.multiply(new BigDecimal(2));
				break;
			case 'A':
				amountDecimal = new BigDecimal(value);
				amountDecimal.divide(new BigDecimal(12), 2, BigDecimal.ROUND_HALF_UP);
				break;
			case 'D':
				amountDecimal = new BigDecimal(value);
				amountDecimal = amountDecimal.setScale(2, BigDecimal.ROUND_HALF_UP);
				amountDecimal.multiply(new BigDecimal(21.5));
				break;
			case 'Q':
				amountDecimal = new BigDecimal(value);
				amountDecimal.divide(new BigDecimal(3), 2, BigDecimal.ROUND_HALF_UP);
				break;
			case 'W':
				amountDecimal = new BigDecimal(value);
				amountDecimal = amountDecimal.setScale(2, BigDecimal.ROUND_HALF_UP);
				amountDecimal.multiply(new BigDecimal(4.3));
				break;
			default:
				amountDecimal = new BigDecimal(value);
				amountDecimal = amountDecimal.setScale(2, BigDecimal.ROUND_HALF_UP);

			}

		} catch (Exception fe) {
			log(ILog.ERROR, "exception in  SelfServiceAppRegBO.convertToMonthly method, error: " + fe.getMessage(), fe);
		}
		if (amountDecimal != null)
			return amountDecimal.doubleValue();
		else
			return 0.0;
	}

	/**
	 * The <code>getGroupValue</code> returns the group value given a currentVal
	 * and aNodeVal.
	 * 
	 * @param currentVal
	 *            - Current Value.
	 * @param aNodeVal
	 *            - Node Value
	 * @return char - group Value.
	 */
	private char getGroupValue(char currentVal, char aNodeVal) {
		char retVal = 'N';
		if (currentVal == 'Y' || aNodeVal == 'Y') {
			retVal = 'Y';
		}

		return retVal;
	}

	/**
	 * This method is used to calculate the converse relations
	 * 
	 * @param rltCollection
	 * @param refIndSex
	 * @param appType
	 * @return
	 * @throws SelfServiceApplicationException
	 */
	private T1005AppHshlRltCollection setConverseRelationships(T1005AppHshlRltCollection rltCollection, HashMap genderMap, char appType) throws SelfServiceApplicationException {
		T1005AppHshlRltCargo t1005ExistingCargo = null;
		T1005AppHshlRltCargo t1005NewCargo = null;

		String refIndSex = null;
		char resp = '\u0000';
		long refIndvSeqNum;
		int collSize = rltCollection.size();
		for (int y = 0; y < collSize; y++) {
			t1005NewCargo = new T1005AppHshlRltCargo();
			t1005ExistingCargo = rltCollection.getResults(y);
			resp = t1005ExistingCargo.getCareResp();
			refIndvSeqNum = t1005ExistingCargo.getRefIndvSeqNum();
			refIndSex = (String) genderMap.get(new Long(refIndvSeqNum));

			t1005NewCargo.setAppNum(t1005ExistingCargo.getAppNum());

			t1005NewCargo.setCareResp('N');

			t1005NewCargo.setEffBegMo(t1005ExistingCargo.getEffBegMo());
			t1005NewCargo.setPnpTghrSw(t1005ExistingCargo.getPnpTghrSw());
			t1005NewCargo.setRefIndvSeqNum(t1005ExistingCargo.getSrcIndvSeqNum());
			t1005NewCargo.setRltCd(getConverseRelationshipCode(t1005ExistingCargo.getRltCd(), refIndSex));
			t1005NewCargo.setSrcIndvSeqNum(refIndvSeqNum);
			t1005NewCargo.setPhyBoeSepSw(t1005ExistingCargo.getPhyBoeSepSw());
			if (t1005ExistingCargo.getTaxDepSw() == 'I') {
				t1005NewCargo.setTaxDepSw('Y');
			} else {
				t1005NewCargo.setTaxDepSw('N');
			}
			t1005NewCargo.setTaxJointSw(t1005ExistingCargo.getTaxJointSw());

			rltCollection.add(t1005NewCargo);
		}
		return rltCollection;
	}

	/**
	 * The <code>getString</code> returns EMPTY_STRING if the given String is
	 * null else returns the String.
	 * 
	 * @param input
	 *            - Input String
	 * @return String - Result String
	 */
	private String getString(String input) {
		String retVal = null;
		if (input == null || input.length() == 0) {
			retVal = " ";
		} else {
			retVal = input;
		}

		return retVal;
	}

	/**
	 * The <code>getCharForIntString</code> converts String to char.
	 * 
	 * @param val
	 *            - String to be converted.
	 * @return char - Char value.
	 */
	private char getCharForIntString(String val) {
		char retChar = 'N';

		if (val != null && val.length() > 0) {
			if (Long.parseLong(val.trim()) == 1) {
				retChar = 'Y';
			}
		}

		return retChar;
	}

	/**
	 * The <code>getFpwFileDt</code> returns the fpwDate.
	 * 
	 * @param fpwRqstSw
	 *            - fpw request sw.
	 * @return Timestamp - Timestamp
	 * @throws Exception
	 */
	private Timestamp getFpwFileDt(char fpwRqstSw) throws Exception {
		Timestamp retVal = highDate;
		Timestamp currentDate = getCurrentTime();
		if (fpwRqstSw == 'Y' && appTms != null) {
			currentDate.setHours(5);
			currentDate.setMinutes(0);
			currentDate.setSeconds(0);
			currentDate.setNanos(0);

			if (appTms.after(currentDate)) {
				retVal = new Timestamp(ALSOPUtil.addWorkingDays(currentDate, 1).getTime());
			} else {
				retVal = new Timestamp(currentDate.getTime());
			}
		}

		return retVal;
	}

	/**
	 * The <code>getCurrentTime</code> returns the current time.
	 * 
	 * @return Timestamp - current time in Timestamp
	 */
	private Timestamp getCurrentTime() {
		FwCalendar cal = null;
		Timestamp curDateTime = null;
		try {
			cal = FwCalendar.getInstance();
			curDateTime = cal.getDate().getTimestamp();
		} catch (Exception e) {
			log(ILog.ERROR, "Error in SelfServiceAppRegBO.getCurrentTime method : " + e.getMessage(), e);
			curDateTime = new Timestamp((new java.util.Date()).getTime());
		}

		return curDateTime;
	}

	/**
	 * The <code>getCharForString</code> returns char given a String.
	 * 
	 * @param str
	 *            - String
	 * @return char.
	 */
	private char getCharForString(String str) {
		char retVal = 'N';

		if (str != null && str.length() > 0) {
			retVal = str.charAt(0);
		}

		return retVal;
	}

	private char getCharForStringForRaceEthnicity(String str) {
		char retVal = '0';

		if (str != null && str.length() > 0) {
			retVal = str.charAt(0);
		}

		return retVal;
	}

	/**
	 * The <code>getIntForString</code> returns int given a String.
	 * 
	 * @param str
	 *            - String
	 * @return int
	 */
	private int getIntForString(String str) {
		int retVal = 0;
		try {
			if (str != null && str.length() > 0) {
				retVal = Integer.parseInt(str);
			}
		} catch (Exception e) {
			log(ILog.ERROR, "Error in SelfServiceAppRegBO.getIntForString method : " + e.getMessage(), e);
			retVal = 0;
		}
		return retVal;
	}