import java.io.*;
import java.util.*;
import java.util.regex.*;

public class JspParserEnhanced {
    private static final Pattern ELEMENT_PATTERN = Pattern.compile(
            "<(input|select|textarea|button|label|span|div).*?(name|id|for)?=\\\"(.*?)\\\".*?>",
            Pattern.DOTALL | Pattern.CASE_INSENSITIVE);

    public static void main(String[] args) throws IOException {
        File sourceFolder = new File("C:/path/to/jsp/folder");  // ✅ Update this with the actual path
        File outputFile = new File("C:/path/to/output/jsp_metadata.csv");  // ✅ Update output path

        List<JspData> jspDataList = new ArrayList<>();
        processJspFiles(sourceFolder, jspDataList);
        writeDataToCSV(jspDataList, outputFile);

        System.out.println("✅ JSP metadata extraction complete. CSV saved at: " + outputFile.getAbsolutePath());
    }

    private static void processJspFiles(File folder, List<JspData> jspDataList) throws IOException {
        for (File file : Objects.requireNonNull(folder.listFiles())) {
            if (file.isDirectory()) {
                processJspFiles(file, jspDataList); // ✅ Recursive call for subdirectories
            } else if (file.getName().endsWith(".jsp")) {
                jspDataList.add(parseJsp(file));
            }
        }
    }

    private static JspData parseJsp(File jspFile) throws IOException {
        String content = new String(java.nio.file.Files.readAllBytes(jspFile.toPath()));
        List<String> elements = new ArrayList<>();
        Matcher matcher = ELEMENT_PATTERN.matcher(content);

        while (matcher.find()) {
            elements.add(matcher.group(1) + " - " + matcher.group(3)); // ✅ Extract element type & name/id
        }

        return new JspData(jspFile.getName(), jspFile.getAbsolutePath(), elements);
    }

    private static void writeDataToCSV(List<JspData> jspDataList, File outputFile) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))) {
            // ✅ CSV Header
            writer.write("Filename,Path,Element Details\n");

            for (JspData data : jspDataList) {
                // ✅ Formatting for CSV (handling commas and special characters)
                String filename = escapeCSV(data.filename);
                String path = escapeCSV(data.path);
                String elements = escapeCSV(String.join("; ", data.elements));

                writer.write(filename + "," + path + "," + elements + "\n");
            }
        }
    }

    private static String escapeCSV(String value) {
        if (value.contains(",") || value.contains("\"") || value.contains("\n")) {
            return "\"" + value.replace("\"", "\"\"") + "\"";  // ✅ Handle commas and quotes
        }
        return value;
    }

    static class JspData {
        String filename;
        String path;
        List<String> elements;

        JspData(String filename, String path, List<String> elements) {
            this.filename = filename;
            this.path = path;
            this.elements = elements;
        }
    }
}
