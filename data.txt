[
    {
        "question": "What will the following query return?\n\nSELECT employee_id, department_id, RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rank FROM employees;",
        "answer": `
            This query ranks employees within each department based on their salary in descending order. The RANK() function provides a rank with gaps for tied salaries.
            <pre><code>
            Example:
            employees table:
            +-------------+--------------+--------+
            | employee_id | department_id| salary |
            +-------------+--------------+--------+
            | 1           | 1            | 50000  |
            | 2           | 1            | 60000  |
            | 3           | 2            | 70000  |
            | 4           | 2            | 70000  |
            +-------------+--------------+--------+

            Query result:
            +-------------+--------------+------+
            | employee_id | department_id| rank |
            +-------------+--------------+------+
            | 2           | 1            | 1    |
            | 1           | 1            | 2    |
            | 3           | 2            | 1    |
            | 4           | 2            | 1    |
            +-------------+--------------+------+
            </code></pre>
        `
    },
    {
        "question": "What will this query return?\n\nSELECT category, SUM(price) AS total_sales FROM products GROUP BY category WITH ROLLUP;",
        "answer": `
            This query calculates the total sales (sum of price) for each category. The WITH ROLLUP adds an extra row for the grand total.
            <pre><code>
            Example:
            products table:
            +----+-----------+--------+
            | id | category  | price  |
            +----+-----------+--------+
            | 1  | Electronics| 1000  |
            | 2  | Electronics| 2000  |
            | 3  | Furniture  | 1500  |
            +----+-----------+--------+

            Query result:
            +-----------+------------+
            | category  | total_sales|
            +-----------+------------+
            | Electronics| 3000      |
            | Furniture  | 1500      |
            | NULL       | 4500      | -- Grand total
            +-----------+------------+
            </code></pre>
        `
    },
    {
        "question": "What does the following query do?\n\nWITH RECURSIVE hierarchy AS (\n    SELECT id, name, manager_id FROM employees WHERE manager_id IS NULL\n    UNION ALL\n    SELECT e.id, e.name, e.manager_id\n    FROM employees e\n    INNER JOIN hierarchy h ON e.manager_id = h.id\n)\nSELECT * FROM hierarchy;",
        "answer": `
            This query generates a hierarchy of employees using a recursive Common Table Expression (CTE), starting with top-level managers (manager_id IS NULL) and recursively joining their subordinates.
            <pre><code>
            Example:
            employees table:
            +----+------+------------+
            | id | name | manager_id |
            +----+------+------------+
            | 1  | John | NULL       |
            | 2  | Alice| 1          |
            | 3  | Bob  | 1          |
            | 4  | Dave | 2          |
            +----+------+------------+

            Query result:
            +----+------+------------+
            | id | name | manager_id |
            +----+------+------------+
            | 1  | John | NULL       |
            | 2  | Alice| 1          |
            | 3  | Bob  | 1          |
            | 4  | Dave | 2          |
            +----+------+------------+
            </code></pre>
        `
    },
    {
        "question": "What will happen when this query is run?\n\nDELETE FROM orders WHERE order_id NOT IN (SELECT order_id FROM order_details);",
        "answer": `
            This query deletes all rows from the 'orders' table where the 'order_id' does not exist in the 'order_details' table.
            <pre><code>
            Example:
            orders table:
            +----------+----------+
            | order_id | customer |
            +----------+----------+
            | 1        | John     |
            | 2        | Alice    |
            | 3        | Bob      |
            +----------+----------+

            order_details table:
            +----------+----------+
            | order_id | product  |
            +----------+----------+
            | 1        | Laptop   |
            | 3        | Phone    |
            +----------+----------+

            After query execution:
            orders table:
            +----------+----------+
            | order_id | customer |
            +----------+----------+
            | 1        | John     |
            | 3        | Bob      |
            +----------+----------+
            </code></pre>
        `
    },
    {
        "question": "What is the output of this query?\n\nSELECT student_id, name, ROW_NUMBER() OVER (ORDER BY marks DESC) AS rank FROM students WHERE marks > 50;",
        "answer": `
            This query assigns a unique rank to students with marks greater than 50, ordered by their marks in descending order.
            <pre><code>
            Example:
            students table:
            +------------+-------+-------+
            | student_id | name  | marks |
            +------------+-------+-------+
            | 1          | Alice | 80    |
            | 2          | Bob   | 60    |
            | 3          | Charlie| 90   |
            | 4          | Dave  | 40    |
            +------------+-------+-------+

            Query result:
            +------------+-------+------+
            | student_id | name  | rank |
            +------------+-------+------+
            | 3          | Charlie| 1   |
            | 1          | Alice | 2    |
            | 2          | Bob   | 3    |
            +------------+-------+------+
            </code></pre>
        `
    },
    {
        "question": "What will the following query return?\n\nSELECT p.product_name, SUM(s.quantity) AS total_quantity\nFROM products p\nLEFT JOIN sales s ON p.product_id = s.product_id\nGROUP BY p.product_name;",
        "answer": `
            This query calculates the total quantity of products sold by joining the 'products' and 'sales' tables. If a product has no sales, its total quantity will be NULL.
            <pre><code>
            Example:
            products table:
            +------------+-------------+
            | product_id | product_name|
            +------------+-------------+
            | 1          | Laptop      |
            | 2          | Phone       |
            +------------+-------------+

            sales table:
            +------------+----------+
            | product_id | quantity |
            +------------+----------+
            | 1          | 10       |
            | 1          | 5        |
            +------------+----------+

            Query result:
            +-------------+---------------+
            | product_name| total_quantity|
            +-------------+---------------+
            | Laptop      | 15            |
            | Phone       | NULL          |
            +-------------+---------------+
            </code></pre>
        `
    }
]
