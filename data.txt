import java.io.*;
import java.math.BigDecimal;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;

public class MainframeReader {

    public static void main(String[] args) throws IOException {
        List<Record> records = new ArrayList<>();

        try (InputStream is = new FileInputStream("INPUT.DAT")) {
            byte[] buffer = new byte[1000];

            while (is.read(buffer) == 1000) {
                Record rec = new Record();

                // Decode ASCII or EBCDIC strings
                Charset charset = Charset.forName("Cp037"); // Use ASCII if applicable

                rec.cosSn = new String(buffer, 0, 9, charset).trim();
                rec.beneHicn = new String(buffer, 9, 11, charset).trim();
                rec.firstName = new String(buffer, 20, 15, charset).trim();
                rec.midName = new String(buffer, 35, 15, charset).trim();
                rec.lastName = new String(buffer, 50, 22, charset).trim();

                // Decode RSRC packed decimals (starts after offset 509 in layout)
                int rsrcOffset = 509;
                for (int i = 0; i < 4; i++) {
                    byte[] comp3 = new byte[5];
                    System.arraycopy(buffer, rsrcOffset + (i * 5), comp3, 0, 5);
                    rec.rsrc[i] = decodeComp3(comp3, 2); // 2 digits after decimal
                }

                records.add(rec);
            }
        }

        // Print or use the records
        for (Record rec : records) {
            System.out.println("SSN: " + rec.cosSn);
            System.out.println("HICN: " + rec.beneHicn);
            System.out.println("Name: " + rec.firstName + " " + rec.midName + " " + rec.lastName);
            for (int i = 0; i < rec.rsrc.length; i++) {
                System.out.println("RSRC[" + i + "]: " + rec.rsrc[i]);
            }
            System.out.println("-----------");
        }
    }

    public static BigDecimal decodeComp3(byte[] data, int scale) {
        StringBuilder digits = new StringBuilder();

        for (int i = 0; i < data.length; i++) {
            int b = data[i] & 0xFF;
            if (i < data.length - 1) {
                digits.append((b >> 4) & 0x0F);
                digits.append(b & 0x0F);
            } else {
                digits.append((b >> 4) & 0x0F);
                int sign = b & 0x0F;
                if (sign == 0x0D) digits.insert(0, "-");
                else if (sign != 0x0C && sign != 0x0F) throw new IllegalArgumentException("Invalid COMP-3 sign");
            }
        }

        return new BigDecimal(digits.toString()).movePointLeft(scale);
    }
}
