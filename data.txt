// ---- BEGIN: alpha-then-numeric ordering helpers ----
private static String nz(String s) { return s == null ? "" : s; }
private static String up(String s) { return nz(s).toUpperCase(); }
private static String trimUp(String s) { return up(s).trim(); }

private static boolean startsWithLetter(String s) {
    String v = trimUp(s);
    return !v.isEmpty() && Character.isLetter(v.charAt(0));
}
private static boolean startsWithDigit(String s) {
    String v = trimUp(s);
    return !v.isEmpty() && Character.isDigit(v.charAt(0));
}

/** Compare caseload ids with "alpha-first, then numeric" grouping. */
private static int compareCaseloadAlphaThenNumeric(String a, String b) {
    String A = trimUp(a);
    String B = trimUp(b);

    boolean aAlpha = startsWithLetter(A);
    boolean bAlpha = startsWithLetter(B);
    if (aAlpha != bAlpha) return aAlpha ? -1 : 1; // alpha group first

    boolean aNum = startsWithDigit(A);
    boolean bNum = startsWithDigit(B);

    // both alpha-start -> simple lexicographic
    if (aAlpha && bAlpha) return A.compareTo(B);

    // both numeric-start -> compare numeric prefix length, then value, then full string
    if (aNum && bNum) {
        String aDigits = A.replaceFirst("^\\D*(\\d+).*$", "$1").replaceFirst("^0+(\\d)", "$1");
        String bDigits = B.replaceFirst("^\\D*(\\d+).*$", "$1").replaceFirst("^0+(\\d)", "$1");
        if (!aDigits.isEmpty() && !bDigits.isEmpty()) {
            int lenCmp = Integer.compare(aDigits.length(), bDigits.length());
            if (lenCmp != 0) return lenCmp;      // longer number = bigger
            int numCmp = aDigits.compareTo(bDigits);
            if (numCmp != 0) return numCmp;
        }
        return A.compareTo(B);
    }

    // mixed or odd -> fallback lexicographic
    return A.compareTo(B);
}

/** Key compare: OFC, CASLOAD (alpha-first numeric), AID (lexicographic). */
private static int compareKeys(String ofc1, String cas1, String aid1,
                               String ofc2, String cas2, String aid2) {
    int c = up(ofc1).compareTo(up(ofc2));
    if (c != 0) return c;
    c = compareCaseloadAlphaThenNumeric(cas1, cas2);
    if (c != 0) return c;
    return up(aid1).compareTo(up(aid2));
}

/** Compare the PCE triplet vs FAM triplet in working storage using alpha-first ordering. */
private static int compareWorkingStoragePceVsFam(FamCaseStatsWorkingStorage ws) {
    return compareKeys(ws.getPceOfcCd(), ws.getPceCasldId(), ws.getPceAidCd(),
                       ws.getFamCaseOfcCd(), ws.getFamCaseCasldId(), ws.getFamCaseAidCd());
}
// ---- END: alpha-then-numeric ordering helpers ----



famCaseStatsOfcRecord = monthlyCaseHistoryDao.getAllOfcCasldIdAndAidCds();

// NEW: sort to match AMA46A: OFC, CASLOAD (alpha first, then numeric), AID
famCaseStatsOfcRecord.sort((a, b) -> compareKeys(
        a.getOfcCd(), a.getCasldId(), a.getAidCd(),
        b.getOfcCd(), b.getCasldId(), b.getAidCd()
));


pceRecords = fetchPceRecordsFromDb();
// NEW: same alpha-first ordering for PCE
pceRecords.sort((a, b) -> compareKeys(
        a.getOfficeCode(), a.getCaseLoadId(), a.getAidCode(),
        b.getOfficeCode(), b.getCaseLoadId(), b.getAidCode()
));


if (compareWorkingStoragePceVsFam(workingStorage) > 0) {


if (compareWorkingStoragePceVsFam(workingStorage) == 0) {


if (compareWorkingStoragePceVsFam(workingStorage) > 0) {

if (compareWorkingStoragePceVsFam(workingStorage) == 0) {
