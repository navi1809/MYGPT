AIN90W3.WS-CH-POL-NUMBER[WS-CHILD-INDEX] = H2-2-MIP-PCO.INSU-PLICY-NMB;
  AIN90W3.WS-CH-INS-CO-NAME[WS-CHILD-INDEX] = H2-INSURANCE-CO-CD.INSRNC-NM;
  AIN90W3.WS-CH-INS-CO-ADD1[WS-CHILD-INDEX] = H2-INSURANCE-CO-CD.INSRNC-ADDR-L1;
  AIN90W3.WS-CH-INS-CO-ADD2[WS-CHILD-INDEX] = H2-INSURANCE-CO-CD.INSRNC-ADDR-L2;
  AIN90W3.WS-CH-INS-CO-CITY[WS-CHILD-INDEX] = H2-INSURANCE-CO-CD.CITY;
  AIN90W3.WS-CH-INS-CO-STATE[WS-CHILD-INDEX] = H2-INSURANCE-CO-CD.STATE;
  AIN90W3.WS-CH-INS-CO-ZIP[WS-CHILD-INDEX] = H2-INSURANCE-CO-CD.ZIP;
end // end AIN90P9-MOVE-CHINS


// INQURY Message Text Data
Function AIN90P9-MRR-Q1()
  /* Perform standard database application initialization*/
  WDB00PI();
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";
  /*  */
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-MEMBER-REL";
  VDBCONTROL.UPROC-OBJ = "H2-MEMBER-REL";
  VDBCONTROL.UPROC-NM = "AIN90P9-MRR-Q1";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  /*  */
  try
    get H2-MEMBER-REL
      with #sql{
        select FROM_UPI
        from TWNMEMBER_REL T1
        WHERE  T1.ICI                = :ICI
        AND    T1.PRD_BEG_DT        <= :PRD-BEG-DT
        AND    T1.PRD_END_DT        >= :PRD-END-DT
        AND    T1.RELSH_CD           = '01'
        AND    T1.MAINT_CD          <> 'D'
        for fetch only
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into FROM-UPI ;
  end
  /*  */
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-MRR-Q1


// INQUIRY Message Text Data
Function AIN90P9-MRR-Q2()
  /* Perform standard database application initialization*/
  WDB00PI();
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";
  /*  */
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H3-MEMBER-REL";
  VDBCONTROL.UPROC-OBJ = "H3-MEMBER-REL";
  VDBCONTROL.UPROC-NM = "AIN90P9-MRR-Q2";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  /*  */
  try
    get H3-MEMBER-REL
      with #sql{
        select TO_UPI, RELSH_CD
        from TWNMEMBER_REL T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE  T1.ICI                = :ICI
        AND    T1.FROM_UPI           = :FROM-UPI
        AND    T1.TO_UPI             = :TO-UPI
        AND    T1.PRD_BEG_DT        <= :PRD-BEG-DT
        AND    T1.PRD_END_DT        >= :PRD-END-DT
        AND    T1.MAINT_CD          <> 'D'
        FOR FETCH ONLY
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into TO-UPI, RELSH-CD ;
  end
  /*  */
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-MRR-Q2


Function AIN90P9-OE-INC-TYP()
  /* This process is to convert other earned income types for NCU*/

  if (01 in H2-OTH-ERND-INC-DT.OTHR-ERND-INC-TYPE) /* Picket Duty*/
    AIN90W.WS-INC-TYPE-CD = 70;
  else
    if (02 in H2-OTH-ERND-INC-DT.OTHR-ERND-INC-TYPE) /* Jury Duty*/
      AIN90W.WS-INC-TYPE-CD = 71;
    else
      if (03 in H2-OTH-ERND-INC-DT.OTHR-ERND-INC-TYPE) /* Blood Donation*/
        AIN90W.WS-INC-TYPE-CD = 72;
      else
        if (04 in H2-OTH-ERND-INC-DT.OTHR-ERND-INC-TYPE) /* Earned Job Corp*/
          AIN90W.WS-INC-TYPE-CD = 73;
        else
          if (05 in H2-OTH-ERND-INC-DT.OTHR-ERND-INC-TYPE) /* Americorps*/
            AIN90W.WS-INC-TYPE-CD = 74;
          else
            if (06 in H2-OTH-ERND-INC-DT.OTHR-ERND-INC-TYPE)
                                   /* Diability/Worker's Comp*/
              AIN90W.WS-INC-TYPE-CD = 75;
            else
              if (07 in H2-OTH-ERND-INC-DT.OTHR-ERND-INC-TYPE) /* Others*/
                AIN90W.WS-INC-TYPE-CD = 99;
              else
              end
            end
          end
        end
      end
    end
  end
end // end AIN90P9-OE-INC-TYP


// INQURY Message Text Data
Function AIN90P9-OEI-Q1()
  /* Perform standard database application initialization*/
  WDB00PI();
  /*  */
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";

  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-OTH-ERND-INC-DT";
  VDBCONTROL.UPROC-OBJ = "H2-OTH-ERND-INC-DT";
  VDBCONTROL.UPROC-NM = "AIN90P9-OEI-Q1";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  /*  */
  try
    open AIN90P9-OEI-Q1_RSI01
      with #sql{
        select OTHR_ERND_INC_AMT,
           OTHR_ERND_INC_FREQ,
           OTHR_ERND_INC_TYPE
        from TWNOTH_ERND_INC_DT T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE
            UPI             = :UPI
        AND PRD_BEG_DT     <= :PRD-BEG-DT
        AND PRD_END_DT     >= :PRD-END-DT
        AND MAINT_CD       <> 'D'
        AND OE_INC_VERF_CD IN ('Y', 'C')
        AND AFDC_CNTBL_IND  = 'Y'
        FOR FETCH ONLY
         --** INSERT ORDER BY CLAUSE HERE **
      }      
      into OTHR-ERND-INC-AMT,
           OTHR-ERND-INC-FREQ,
           OTHR-ERND-INC-TYPE
      for H2-OTH-ERND-INC-DT ;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-OEI-Q1


// SCAN Retrieved Rows
Function AIN90P9-OEI-QS1()
  /* This process SCANs the retrieved rows from the previous SETINQ.*/
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-OTH-ERND-INC-DT";
  VDBCONTROL.UPROC-OBJ = "H2-OTH-ERND-INC-DT";
  VDBCONTROL.UPROC-NM = "AIN90P9-OEI-QS1";
  VDBCONTROL.UPROC-OPT = "SCAN";
  /*  */
  try
    get next H2-OTH-ERND-INC-DT ;
  end
  /*  */
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";

  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end


  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
end // end AIN90P9-OEI-QS1


// Control Retrieve of Data
Function AIN90P9-OTH-ERNINC()
  set H2-OTH-ERND-INC-DT empty;
  /* Move retrieve key value to SQL row record*/
  H2-OTH-ERND-INC-DT.UPI = AIN90W1.WS-UPI[WS-MBR-INDEX];
  H2-OTH-ERND-INC-DT.PRD-BEG-DT = AIN90W.WS-PREV-BEG-DT;
  H2-OTH-ERND-INC-DT.PRD-END-DT = AIN90W.WS-PREV-END-DT;
  /*  */
  /* Perform process to retrieve data*/
  AIN90P9-OEI-Q1();
  /*  */
  while (sysVar.sqlData.sqlcode == 0)

    AIN90P9-OEI-QS1();

    if (sysVar.sqlData.sqlcode == 0)

      AIN90W.WS-FREQ = H2-OTH-ERND-INC-DT.OTHR-ERND-INC-FREQ;
      AIN90P9-GET-FACTOR();

      AIN90W.WS-INC-AMOUNT = H2-OTH-ERND-INC-DT.OTHR-ERND-INC-AMT * AIN90W.WS-FACTOR;

      AIN90W.WS-TOTAL-CASE-INCOME = AIN90W.WS-TOTAL-CASE-INCOME +   AIN90W.WS-INC-AMOUNT;

      AIN90P9-GET-FREQ(); /* Formate NCU pay frequency*/
      AIN90P9-OE-INC-TYP();
      AIN90P9-FRMT-OINC(); /* Build other income file*/

    end
  end
end // end AIN90P9-OTH-ERNINC


// Process Income for ea. month
Function AIN90P9-OTHER-INC()
  /* *** Beg comment ****/
  /* Determine unearned income from the data entered*/
  /* on 'unin' screens for the member.*/
  /* *** End comment ****/

  AIN90P9-UNERND-INC();

  /* Get any TANF Grants for the member*/

  AIN90P9-TANF-INCM();

  /* *** Beg comment ****/
  /* Determine other earned income from the data*/
  /* entered on 'OINC' screens for the member.*/
  /* *** End comment ****/

  AIN90P9-OTH-ERNINC();

  /* *** Beg comment ****/
  /* Determine earned lumpsum income from the data*/
  /* entered on 'lsum' screens for the member.*/
  /* Depending on the income type, accumulate the amount*/
  /* in either earned lsum bucket or unearned lsum bucket.*/
  /* *** End comment ****/

  AIN90P9-LSUM-INC();

  /* *** Beg comment ****/
  /* Determine rental income from the data entered*/
  /* on 'rinc' screens for the member.*/
  /* *** End comment ****/

  AIN90P9-RNTL-INC();

  /* *** Beg comment ****/
  /* Determine room/boarder income from the data*/
  /* entered on 'rbin' screens for the member.*/
  /* *** End comment ****/

  AIN90P9-RM-BRDINC();

  /* *** Beg comment ****/
  /* Determine unearned STUDENT GRANT income for the member.*/
  /* *** End comment ****/

  AIN90P9-STGRNT-INC();

  /* Determine THE GENERAL ASSISTANCE income for the member.*/

  AIN90P9-GENASS-INC();

  /* *** Beg comment ****/
  /* Determine dependent care/Self income from the*/
  /* data entered on 'SELF' screens for the member.*/
  /* *** End comment ****/

  AIN90P9-SELF-INC();
end // end AIN90P9-OTHER-INC


Function AIN90P9-OTHR-ADULT()
  /* Process other Adults.*/

  WS-OTHER-ADULT-INDEX = WS-OTHER-ADULT-INDEX + 1;

  if (AIN90W1.WS-HH-LEFT-DT[WS-MBR-INDEX] == "9999-12-31" || 
  AIN90W1.WS-HH-LEFT-DT[WS-MBR-INDEX] < 
  AIN90W1.WS-JOIN-HH-DT[WS-MBR-INDEX])

    AIN90W2.WS-IS-NON-RESIDENT[WS-OTHER-ADULT-INDEX] = "N";

  else

    AIN90W2.WS-IS-NON-RESIDENT[WS-OTHER-ADULT-INDEX] = "Y";

  end

  AIN90P9-FRMT-ADULT(); /* Format Other Adult File*/
  AIN90P9-EMPLOYMENT(); /* Process employment info*/
  AIN90P9-OTHER-INC(); /* Process other income info*/
end // end AIN90P9-OTHR-ADULT


Function AIN90P9-OTHR-MBRS()
  /* -----------------------------------------------------------------------*/
  /* This process determines who in the AIN90W1 Array is a child and who*/
  /* is a other adult and processes according.*/
  /* -----------------------------------------------------------------------*/
  /*  */

  AIN90W.WS-MBR-INDEX = 1;

  while (AIN90W.WS-MBR-INDEX <= 25
   && AIN90W1.WS-UPI[WS-MBR-INDEX] > 0)

    /* If member is under age 19 s(he) must be a child.*/

    if (AIN90W1.WS-AGE-OF-MEMBER[WS-MBR-INDEX] < 190000)

      if (AIN90W1.WS-RELSH-CD[WS-MBR-INDEX] != "13" &&  /* not unborn*/
      AIN90W1.WS-RELSH-CD[WS-MBR-INDEX] != "26" &&      /* not unborn*/
      AIN90W1.WS-RELSH-CD[WS-MBR-INDEX] != "  " &&      /* not unknown*/
      AIN90W1.WS-MEMBER-TYPE[WS-MBR-INDEX] != "G")      /* not guardian*/
        AIN90W1.WS-MEMBER-TYPE[WS-MBR-INDEX] = "C"; /* 'c' is child*/
        AIN90P9-CHILD(); /* Process child*/
      end

    else

      /* If member is not a child and is not guardian s(he) must be other*/
      /* adult*/

      if (AIN90W1.WS-MEMBER-TYPE[WS-MBR-INDEX] != "G")
        AIN90W1.WS-MEMBER-TYPE[WS-MBR-INDEX] = "O"; /* 'o' other adult*/
        AIN90P9-OTHR-ADULT(); /* Process other adult*/
      end /* End other adult*/

    end /* End child*/

    AIN90W.WS-MBR-INDEX = AIN90W.WS-MBR-INDEX + 1;

  end /* End while*/
end // end AIN90P9-OTHR-MBRS


// INQURY Message Text Data
Function AIN90P9-PAH-Q1()
  /* Perform standard database application initialization*/
  WDB00PI();
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";
  /*  */
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-PERSON-ADRS-HST";
  VDBCONTROL.UPROC-OBJ = "H2-PERSON-ADRS-HST";
  VDBCONTROL.UPROC-NM = "AIN90P9-CM-ADDR-Q1";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  /*  */
  try
    get H2-PERSON-ADRS-HST
      with #sql{
        select UPI,
        ADR_TYPE,
        HOUSE_NMB,
        STR_DIR,
        STR_NM,
        STR_TYPE,
        APT_NMB,
        OTH_ADDR,
        CITY,
        ST_CD,
        ZIP_CD,
        INST_NM,
        CNTRY_CD
        from TWNPERSON_ADRS_HST T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
           WHERE
           UPI = :UPI
           AND ADR_TYPE = 'CM'
        ORDER BY AS_OF_DT DESC
           FOR FETCH ONLY
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into UPI,
           ADR-TYPE,
           HOUSE-NMB,
           STR-DIR,
           STR-NM,
           STR-TYPE,
           APT-NMB,
           OTH-ADDR,
           CITY,
           ST-CD,
           ZIP-CD,
           INST-NM,
           CNTRY-CD ;
  end
  /*  */
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-PAH-Q1


// INQURY Message Text Data
Function AIN90P9-PAH-Q2()
  /* Perform standard database application initialization*/
  WDB00PI();
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";
  /*  */
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H3-PERSON-ADRS-HST";
  VDBCONTROL.UPROC-OBJ = "H3-PERSON-ADRS-HST";
  VDBCONTROL.UPROC-NM = "AIN90P9-CR-ADDR-Q1";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  /*  */
  try
    get H3-PERSON-ADRS-HST
      with #sql{
        select UPI,
        ADR_TYPE,
        HOUSE_NMB,
        STR_DIR,
        STR_NM,
        STR_TYPE,
        APT_NMB,
        OTH_ADDR,
        CITY,
        ST_CD,
        ZIP_CD,
        INST_NM,
        CNTRY_CD
        from TWNPERSON_ADRS_HST T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
           WHERE
           UPI = :UPI
           AND ADR_TYPE = 'CR'
        ORDER BY AS_OF_DT DESC
           FOR FETCH ONLY
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into UPI,
           ADR-TYPE,
           HOUSE-NMB,
           STR-DIR,
           STR-NM,
           STR-TYPE,
           APT-NMB,
           OTH-ADDR,
           CITY,
           ST-CD,
           ZIP-CD,
           INST-NM,
           CNTRY-CD ;
  end
  /*  */
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-PAH-Q2


// INQURY Message Text Data
Function AIN90P9-PEH-Q1()
  /* Perform standard database application initialization*/
  WDB00PI();
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";
  /*  */
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-PERSON-HSTRY";
  VDBCONTROL.UPROC-OBJ = "H2-PERSON-HSTRY";
  VDBCONTROL.UPROC-NM = "AIN90P9-PEH-Q1";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  /*  */
  try
    get H2-PERSON-HSTRY
      with #sql{
        select US_CTZN_IND
        from TWNPERSON_HSTRY T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE  T1.UPI                = :UPI
        AND    T1.PRD_BEG_DT        <= :PRD-BEG-DT
        AND    T1.PRD_END_DT        >= :PRD-END-DT
        FOR FETCH ONLY
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into US-CTZN-IND ;
  end
  /*  */
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-PEH-Q1


// INQURY Message Text Data
Function AIN90P9-PER-Q1()
  /* Perform standard database application initialization*/
  WDB00PI();
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";
  /*  */
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-PERSON";
  VDBCONTROL.UPROC-OBJ = "H2-PERSON";
  VDBCONTROL.UPROC-NM = "AIN90P9-PER-Q1";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  /*  */
  try
    get H2-PERSON singleRow
      with #sql{
        select T1.LST_NM, T1.FRST_NM, T1.SSN
        from TWNPERSON T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
             WHERE T1.UPI = :UPI
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into LST-NM, FRST-NM, SSN ;
  end
  /*  */
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-PER-Q1


// INQURY Message Text Data
Function AIN90P9-PGD-Q1()
  /* Perform standard database application initialization*/
  WDB00PI();
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";
  /*  */
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-PRGNCY-DTLS";
  VDBCONTROL.UPROC-OBJ = "H2-PRGNCY-DTLS";
  VDBCONTROL.UPROC-NM = "AIN90P9-PGD-Q1";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  /*  */
  try
    get H2-PRGNCY-DTLS
      with #sql{
        select T1.DUE_DT
        from TWNPRGNCY_DTLS T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
          WHERE
          UPI = :UPI
          AND   T1.PREG_TRMTN_DT = '9999-12-31'
          AND   T1.PRD_BEG_DT <= :PRD-BEG-DT
          AND   T1.PRD_END_DT >= :PRD-END-DT
          FOR FETCH ONLY
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into DUE-DT ;
  end
  /*  */
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-PGD-Q1


// Control Retrieve of Data
Function AIN90P9-PYD-INC()
  set H2-PAY-DTLS empty;
  /* Move retrieve key value to SQL row record*/
  H2-PAY-DTLS.UPI = AIN90W1.WS-UPI[WS-MBR-INDEX];
  H2-PAY-DTLS.INCM-SQ-NMB = H2-JOB-INCM-DTLS.INCM-SQ-NMB;
  H2-PAY-DTLS.PRD-BEG-DT = H2-JOB-INCM-DTLS.PRD-BEG-DT;
  AIN90W.WS-CHECK-NMB = 0;
  AIN90W.WS-GRS-WGS-AMT = 0;
  AIN90W.WS-TIPS-COMSN-AMT = 0;

  /* Perform process to retrieve data*/
  AIN90P9-PYD-Q1();

  /* If data retrieved successfully, continue*/
  while (sysVar.sqlData.sqlcode == 0)

    AIN90P9-PYD-QS1();

    if (sysVar.sqlData.sqlcode == 0)

  /* Move retrieved data to passed record*/

  /* *** Beg Comment ****/
  /* Increment number of checks received in the month*/
  /* Add up gross wages amount and tips and commission amt for all the*/
  /* weeks for the month.  Sum up tips/commissions amount for the month*/

      AIN90W.WS-CHECK-NMB = AIN90W.WS-CHECK-NMB + 1;

      AIN90W.WS-GRS-WGS-AMT = AIN90W.WS-GRS-WGS-AMT + H2-PAY-DTLS.GRS-WGS-AMT;

      AIN90W.WS-TIPS-COMSN-AMT = AIN90W.WS-TIPS-COMSN-AMT + H2-PAY-DTLS.TIPS-COMSN-AMT;

    end

  end /* Data retrieved successfully*/
end // end AIN90P9-PYD-INC


// INQURY Message Text Data
Function AIN90P9-PYD-Q1()
  /* CBSI START*/
  /*  */
  /* Perform standard database application initialization*/
  WDB00PI();
  /*  */
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";
  /*  */
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-PAY-DTLS";
  VDBCONTROL.UPROC-OBJ = "H2-PAY-DTLS";
  VDBCONTROL.UPROC-NM = "AIN90P9-PYD-Q1";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  /*  */
  try
    open AIN90P9-PYD-Q1_RSI01
      with #sql{
        select GRS_WGS_AMT,
            TIPS_COMSN_AMT
        from TWNPAY_DTLS T1
        WHERE
             UPI = :UPI
        AND  INCM_SQ_NMB = :INCM-SQ-NMB
        AND  PRD_BEG_DT  = :PRD-BEG-DT
        FOR FETCH ONLY
         --** INSERT ORDER BY CLAUSE HERE **
      }      
      into GRS-WGS-AMT,
           TIPS-COMSN-AMT
      for H2-PAY-DTLS ;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-PYD-Q1


// SCAN Retrieved Rows
Function AIN90P9-PYD-QS1()
  /* This process SCANs the retrieved rows from the previous SETINQ.*/
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-PAY-DTLS";
  VDBCONTROL.UPROC-OBJ = "H2-PAY-DTLS";
  VDBCONTROL.UPROC-NM = "AIN90P9-PYD-QS1";
  VDBCONTROL.UPROC-OPT = "SCAN";
  /*  */
  try
    get next H2-PAY-DTLS ;
  end
  /*  */
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";

  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end


  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
end // end AIN90P9-PYD-QS1


// PROCESS TO READ INPUT FILE
Function AIN90P9-READIP()
  /* cbsi start*/
  VDBCONTROL.UPROC-NM = "AIN90P9-READIP";
  VDBCONTROL.UPROC-OPT = "SCAN";
  VDBCONTROL.UPROC-OBJ = "SR-AIN90-REC-IN";
  try
    get next SR-AIN90-REC-IN ;
  end
end // end AIN90P9-READIP


// initial value setting
Function AIN90P9-RESET-CASE()
  WS-OINCOME-INDEX = 0;
  WS-EMPLOYMENT-INDEX = 0;
  WS-OTHER-ADULT-INDEX = 0;
  WS-CHILD-INDEX = 0;
  WS-TOTAL-CASE-INCOME = 0;
  set AIN90W2 empty; /* Other adult Working Storage Empty for*/
                                   /* new Case*/
  set AIN90W3 empty; /* Child Working Storage Empty for new*/
                                   /* Case*/
  set AIN90W4 empty; /* Employment Working Storage Empty for*/
                                   /* new Case*/
  set AIN90W5 empty; /* Guardian Wording Storage Empty for*/
                                   /* new Case*/
  set AIN90W6 empty; /* Other Income Working Storage Empty*/
                                   /* for new Case*/
end // end AIN90P9-RESET-CASE


// INQURY Message Text Data
Function AIN90P9-RID-Q1()
  /*  */
  /* Perform standard database application initialization*/
  WDB00PI();
  /*  */
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";
  /*  */
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-RM-BRDR-INC-DTL";
  VDBCONTROL.UPROC-OBJ = "H2-RM-BRDR-INC-DTL";
  VDBCONTROL.UPROC-NM = "AIN90P9-RID-Q1";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  /*  */
  try
    open AIN90P9-RID-Q1_RSI01
      with #sql{
        select ACTUL_EXP_AMT,
            ROOM_BOARD_AMT,
            INCM_FREQ
        from TWNRM_BRDR_INC_DTL T1
        WHERE
            UPI = :UPI
        AND PRD_BEG_DT <= :PRD-BEG-DT
        AND PRD_END_DT >= :PRD-END-DT
        AND MAINT_CD <> 'D'
        AND RBI_INC_VERF_CD IN ('Y', 'C')
        AND AFDC_CNTBL_IND = 'Y'
        FOR FETCH ONLY
         --** INSERT ORDER BY CLAUSE HERE **
      }      
      into ACTUL-EXP-AMT,
           ROOM-BOARD-AMT,
           INCM-FREQ
      for H2-RM-BRDR-INC-DTL ;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-RID-Q1


// SCAN Retrieved Rows
Function AIN90P9-RID-QS1()
  /* This process SCANs the retrieved rows from the previous SETINQ.*/
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-RM-BRDR-INC-DTL";
  VDBCONTROL.UPROC-OBJ = "H2-RM-BRDR-INC-DTL";
  VDBCONTROL.UPROC-NM = "AIN90P9-RBI-QS1";
  VDBCONTROL.UPROC-OPT = "SCAN";
  /*  */
  try
    get next H2-RM-BRDR-INC-DTL ;
  end
  /*  */
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";

  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end


  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
end // end AIN90P9-RID-QS1


// INQURY Message Text Data
Function AIN90P9-RIL-Q1()
  /* Perform standard database application initialization*/
  WDB00PI();
  /*  */
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";
  /*  */
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-RNTL-INCM-DTL";
  VDBCONTROL.UPROC-OBJ = "H2-RNTL-INCM-DTL";
  VDBCONTROL.UPROC-NM = "AIN90P9-RIL-Q1";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  /*  */
  try
    open AIN90P9-RIL-Q1_RSI01
      with #sql{
        select RNTL_INCM_AMT, RNTL_INCM_FREQ,
            PRD_END_DT,
            INCM_SQ_NMB,
            PRD_BEG_DT
        from TWNRNTL_INCM_DTL T1
        WHERE
            UPI = :UPI
        AND PRD_BEG_DT <= :PRD-BEG-DT
        AND PRD_END_DT >= :PRD-END-DT
        AND MAINT_CD <> 'D'
        AND RT_INC_VERF_CD IN ('Y', 'C')
        AND AFDC_CNTBL_IND = 'Y'
        FOR FETCH ONLY
         --** INSERT ORDER BY CLAUSE HERE **
      }      
      into RNTL-INCM-AMT,  RNTL-INCM-FREQ,
           PRD-END-DT,
           INCM-SQ-NMB,
           PRD-BEG-DT
      for H2-RNTL-INCM-DTL ;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-RIL-Q1


// SCAN Retrieved Rows
Function AIN90P9-RIL-QS1()
  /* This process SCANs the retrieved rows from the previous SETINQ.*/
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-RNTL-INCM-DTL";
  VDBCONTROL.UPROC-OBJ = "H2-RNTL-INCM-DTL";
  VDBCONTROL.UPROC-NM = "AIN90P9-RIL-QS1";
  VDBCONTROL.UPROC-OPT = "SCAN";
  /*  */
  try
    get next H2-RNTL-INCM-DTL ;
  end
  /*  */
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";

  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end


  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
end // end AIN90P9-RIL-QS1


// Control Retrieve of Data
Function AIN90P9-RM-BRDINC()
  set H2-RM-BRDR-INC-DTL empty;
  H2-RM-BRDR-INC-DTL.UPI = AIN90W1.WS-UPI[WS-MBR-INDEX];
  H2-RM-BRDR-INC-DTL.PRD-BEG-DT = AIN90W.WS-PREV-BEG-DT;
  H2-RM-BRDR-INC-DTL.PRD-END-DT = AIN90W.WS-PREV-END-DT;

  /* Perform process to retrieve data*/
  AIN90P9-RID-Q1();
  /*  */
  while (sysVar.sqlData.sqlcode == 0)

    AIN90P9-RID-QS1();

    if (sysVar.sqlData.sqlcode == 0)

      AIN90W.WS-FREQ = H2-RM-BRDR-INC-DTL.INCM-FREQ;
      AIN90P9-GET-FACTOR();

      AIN90W.WS-INC-AMOUNT = (H2-RM-BRDR-INC-DTL.ROOM-BOARD-AMT * AIN90W.WS-FACTOR) -       H2-RM-BRDR-INC-DTL.ACTUL-EXP-AMT;

      if (AIN90W.WS-INC-AMOUNT < 0)
        AIN90W.WS-INC-AMOUNT = 0;
      end

      AIN90W.WS-TOTAL-CASE-INCOME = AIN90W.WS-TOTAL-CASE-INCOME +       AIN90W.WS-INC-AMOUNT;

      AIN90P9-GET-FREQ(); /* Formate NCU pay frequency*/
      AIN90W.WS-INC-TYPE-CD = 93;
      AIN90P9-FRMT-OINC(); /* Build other income file*/

    end
  end /* End of While loop*/
end // end AIN90P9-RM-BRDINC


// Control Retrieve of Data
Function AIN90P9-RME-EXP()
  set H2-RNTL-MAINT-EXP empty;
  AIN90W.WS-RNTL-MAINT-EXP-AMT = 0;
  /* Move retrieve key value to SQL row record*/
  /*  */
  H2-RNTL-MAINT-EXP.UPI = AIN90W1.WS-UPI[WS-MBR-INDEX];
  H2-RNTL-MAINT-EXP.INCM-SQ-NMB = H2-RNTL-INCM-DTL.INCM-SQ-NMB;
  H2-RNTL-MAINT-EXP.PRD-BEG-DT = AIN90W.WS-PREV-BEG-DT;

  /*  */
  /* Perform process to retrieve data*/
  AIN90P9-RME-Q1();
  /*  */
  /* If data retrieved successfully, continue*/
  while (sysVar.sqlData.sqlcode == 0)

    AIN90P9-RME-QS1();

    if (sysVar.sqlData.sqlcode == 0)
    /*  */
    /* Move retrieved data to passed record*/

    /* ** Beg Comment ****/
    /* If the expense type is 'RN01' (Mortgage*/
    /* principal), do not consider the expense.*/
    /* ** END COMMENT ****/

      if (H2-RNTL-MAINT-EXP.RNTL-MAINT-EXP-TYP != "RN01")

    /* ** Beg Comment ****/
    /* If rental expense frequency is monthly, then deduct the expense*/
    /* from the income.  If frequency of rental maintenance expense is*/
    /* more than monthly, then obtain the month in which the expense*/
    /* was incurred.  If the expense incurred in the  benefit month,*/
    /* then deduct the expense from the rental income.*/
    /* ** End Comment ****/

        if (H2-RNTL-MAINT-EXP.RNTL-MAINT-EXP-FRQ == "M") /* (MONTHLY)*/
          AIN90W.WS-RNTL-MAINT-EXP-AMT = AIN90W.WS-RNTL-MAINT-EXP-AMT           + H2-RNTL-MAINT-EXP.RNTL-MAINT-EXP-AMT;
        end

        if ((H2-RNTL-MAINT-EXP.RNTL-MAINT-EXP-FRQ != "M" && 
        H2-RNTL-MAINT-EXP.RNTL-MAINT-EXP-FRQ != "B" && 
        H2-RNTL-MAINT-EXP.RNTL-MAINT-EXP-FRQ != "W"))

          if ((H2-RNTL-MAINT-EXP.EXP-INCRD-JAN-IND == "X" && 
          AIN90W.WS-PREV-BEG-MM == 01))
            AIN90W.WS-RNTL-MAINT-EXP-AMT = AIN90W.WS-RNTL-MAINT-EXP-AMT             + H2-RNTL-MAINT-EXP.RNTL-MAINT-EXP-AMT;
          end

          if ((H2-RNTL-MAINT-EXP.EXP-INCRD-FEB-IND == "X" && 
          AIN90W.WS-PREV-BEG-MM == 02))
            AIN90W.WS-RNTL-MAINT-EXP-AMT = AIN90W.WS-RNTL-MAINT-EXP-AMT             + H2-RNTL-MAINT-EXP.RNTL-MAINT-EXP-AMT;
          end

          if ((H2-RNTL-MAINT-EXP.EXP-INCRD-MAR-IND == "X" && 
          AIN90W.WS-PREV-BEG-MM == 03))
            AIN90W.WS-RNTL-MAINT-EXP-AMT = AIN90W.WS-RNTL-MAINT-EXP-AMT             + H2-RNTL-MAINT-EXP.RNTL-MAINT-EXP-AMT;
          end

          if ((H2-RNTL-MAINT-EXP.EXP-INCRD-APR-IND == "X" && 
          AIN90W.WS-PREV-BEG-MM == 04))
            AIN90W.WS-RNTL-MAINT-EXP-AMT = AIN90W.WS-RNTL-MAINT-EXP-AMT             + H2-RNTL-MAINT-EXP.RNTL-MAINT-EXP-AMT;
          end

          if ((H2-RNTL-MAINT-EXP.EXP-INCRD-MAY-IND == "X" && 
          AIN90W.WS-PREV-BEG-MM == 05))
            AIN90W.WS-RNTL-MAINT-EXP-AMT = AIN90W.WS-RNTL-MAINT-EXP-AMT             + H2-RNTL-MAINT-EXP.RNTL-MAINT-EXP-AMT;
          end

          if ((H2-RNTL-MAINT-EXP.EXP-INCRD-JUN-IND == "X" && 
          AIN90W.WS-PREV-BEG-MM == 06))
            AIN90W.WS-RNTL-MAINT-EXP-AMT = AIN90W.WS-RNTL-MAINT-EXP-AMT             + H2-RNTL-MAINT-EXP.RNTL-MAINT-EXP-AMT;
          end

          if ((H2-RNTL-MAINT-EXP.EXP-INCRD-JUL-IND == "X" && 
          AIN90W.WS-PREV-BEG-MM == 07))
            AIN90W.WS-RNTL-MAINT-EXP-AMT = AIN90W.WS-RNTL-MAINT-EXP-AMT             + H2-RNTL-MAINT-EXP.RNTL-MAINT-EXP-AMT;
          end

          if ((H2-RNTL-MAINT-EXP.EXP-INCRD-AUG-IND == "X" && 
          AIN90W.WS-PREV-BEG-MM == 08))
            AIN90W.WS-RNTL-MAINT-EXP-AMT = AIN90W.WS-RNTL-MAINT-EXP-AMT             + H2-RNTL-MAINT-EXP.RNTL-MAINT-EXP-AMT;
          end

          if ((H2-RNTL-MAINT-EXP.EXP-INCRD-SEP-IND == "X" && 
          AIN90W.WS-PREV-BEG-MM == 09))
            AIN90W.WS-RNTL-MAINT-EXP-AMT = AIN90W.WS-RNTL-MAINT-EXP-AMT             + H2-RNTL-MAINT-EXP.RNTL-MAINT-EXP-AMT;
          end

          if ((H2-RNTL-MAINT-EXP.EXP-INCRD-OCT-IND == "X" && 
          AIN90W.WS-PREV-BEG-MM == 10))
            AIN90W.WS-RNTL-MAINT-EXP-AMT = AIN90W.WS-RNTL-MAINT-EXP-AMT             + H2-RNTL-MAINT-EXP.RNTL-MAINT-EXP-AMT;
          end

          if ((H2-RNTL-MAINT-EXP.EXP-INCRD-NOV-IND == "X" && 
          AIN90W.WS-PREV-BEG-MM == 11))
            AIN90W.WS-RNTL-MAINT-EXP-AMT = AIN90W.WS-RNTL-MAINT-EXP-AMT             + H2-RNTL-MAINT-EXP.RNTL-MAINT-EXP-AMT;
          end

          if ((H2-RNTL-MAINT-EXP.EXP-INCRD-DEC-IND == "X" && 
          AIN90W.WS-PREV-BEG-MM == 12))
            AIN90W.WS-RNTL-MAINT-EXP-AMT = AIN90W.WS-RNTL-MAINT-EXP-AMT             + H2-RNTL-MAINT-EXP.RNTL-MAINT-EXP-AMT;
          end
        end
      end
    end
  end
end // end AIN90P9-RME-EXP


// INQURY Message Text Data
Function AIN90P9-RME-Q1()
  /* Perform standard database application initialization*/
  WDB00PI();
  /*  */
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  /* Move name of SQL row record used to common record*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";
  VDBCOMMON.USQLREC = "H2-RNTL-MAINT-EXP";
  VDBCONTROL.UPROC-OBJ = "H2-RNTL-MAINT-EXP";
  VDBCONTROL.UPROC-NM = "AIN90P9-RME-Q1";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  /*  */
  try
    open AIN90P9-RME-Q1_RSI01
      with #sql{
        select RNTL_MAINT_EXP_AMT,
            RNTL_MAINT_EXP_FRQ,
            EXP_INCRD_JAN_IND,
            EXP_INCRD_FEB_IND,
            EXP_INCRD_MAR_IND,
            EXP_INCRD_APR_IND,
            EXP_INCRD_MAY_IND,
            EXP_INCRD_JUN_IND,
            EXP_INCRD_JUL_IND,
            EXP_INCRD_AUG_IND,
            EXP_INCRD_SEP_IND,
            EXP_INCRD_OCT_IND,
            EXP_INCRD_NOV_IND,
            EXP_INCRD_DEC_IND,
            RNTL_MAINT_EXP_TYP
        from TWNRNTL_MAINT_EXP T1
        WHERE
            UPI = :UPI
        AND INCM_SQ_NMB = :INCM-SQ-NMB
        AND PRD_BEG_DT  = :PRD-BEG-DT
        AND RNTL_MAINT_EXP_AMT > 0
        FOR FETCH ONLY
         --** INSERT ORDER BY CLAUSE HERE **
      }      
      into RNTL-MAINT-EXP-AMT,
           RNTL-MAINT-EXP-FRQ,
           EXP-INCRD-JAN-IND,
           EXP-INCRD-FEB-IND,
           EXP-INCRD-MAR-IND,
           EXP-INCRD-APR-IND,
           EXP-INCRD-MAY-IND,
           EXP-INCRD-JUN-IND,
           EXP-INCRD-JUL-IND,
           EXP-INCRD-AUG-IND,
           EXP-INCRD-SEP-IND,
           EXP-INCRD-OCT-IND,
           EXP-INCRD-NOV-IND,
           EXP-INCRD-DEC-IND,
           RNTL-MAINT-EXP-TYP
      for H2-RNTL-MAINT-EXP ;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-RME-Q1


// SCAN Retrieved Rows
Function AIN90P9-RME-QS1()
  /* This process SCANs the retrieved rows from the previous SETINQ.*/
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-RNTL-MAINT-EXP";
  VDBCONTROL.UPROC-OBJ = "H2-RNTL-MAINT-EXP";
  VDBCONTROL.UPROC-NM = "AIN90P9-RME-QS1";
  VDBCONTROL.UPROC-OPT = "SCAN";
  /*  */
  try
    get next H2-RNTL-MAINT-EXP ;
  end
  /*  */
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";

  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end


  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
end // end AIN90P9-RME-QS1


// Control Retrieve of Data
Function AIN90P9-RNTL-INC()
  set H2-RNTL-INCM-DTL empty;
  /* Move retrieve key value to SQL row record*/
  H2-RNTL-INCM-DTL.UPI = AIN90W1.WS-UPI[WS-MBR-INDEX];
  H2-RNTL-INCM-DTL.PRD-BEG-DT = AIN90W.WS-PREV-BEG-DT;
  H2-RNTL-INCM-DTL.PRD-END-DT = AIN90W.WS-PREV-END-DT;
  /*  */
  /* Perform process to retrieve data*/
  AIN90P9-RIL-Q1();

  AIN90W.WS-VDBCONTROL-URC = sysVar.sqlData.sqlcode;

  /* If data retrieved successfully, continue*/
  while (AIN90W.WS-VDBCONTROL-URC == 0)
    AIN90P9-RIL-QS1();

    AIN90W.WS-VDBCONTROL-URC = sysVar.sqlData.sqlcode;

    if (AIN90W.WS-VDBCONTROL-URC == 0)

  /* *** Beg Comment ****/
  /* Calculate the total income depending on income frequency.*/
  /* Read TWNRNTL_MAINT_EXP for rental expenses.  Initialize rental*/
  /* expense accumulator.*/
  /* *** End Comment ****/

  /* ***********inner query starts***************************************/
      AIN90P9-RME-EXP();
      if (VDBCONTROL.URC > 104)
        exit program;
      end
  /* ***********inner query ends****************************************/

      AIN90W.WS-FREQ = H2-RNTL-INCM-DTL.RNTL-INCM-FREQ;
      AIN90P9-GET-FACTOR();

      AIN90W.WS-INC-AMOUNT = (H2-RNTL-INCM-DTL.RNTL-INCM-AMT * AIN90W.WS-FACTOR) -       AIN90W.WS-RNTL-MAINT-EXP-AMT;


      AIN90W.WS-TOTAL-CASE-INCOME = AIN90W.WS-TOTAL-CASE-INCOME +       AIN90W.WS-INC-AMOUNT;

      AIN90P9-GET-FREQ(); /* Formate NCU pay frequency*/
      AIN90W.WS-INC-TYPE-CD = 92;
      AIN90P9-FRMT-OINC(); /* Build other income file*/

    end
  end /* Data retrieved successfully*/
end // end AIN90P9-RNTL-INC


// Control Retrieve of Data
Function AIN90P9-SELF-INC()
  set H2-BUS-INCM-DTLS empty;
  /* Move retrieve key value to SQL row record*/
  H2-BUS-INCM-DTLS.UPI = AIN90W1.WS-UPI[WS-MBR-INDEX];
  H2-BUS-INCM-DTLS.PRD-BEG-DT = AIN90W.WS-PREV-BEG-DT;
  H2-BUS-INCM-DTLS.PRD-END-DT = AIN90W.WS-PREV-END-DT;

  /* Perform process to retrieve data*/
  AIN90P9-BID-Q1();

  while (sysVar.sqlData.sqlcode == 0)

    AIN90P9-BID-QS1();

  /* If data retrieved successfully, continue*/

    if (sysVar.sqlData.sqlcode == 0)

      AIN90W.WS-INC-AMOUNT = H2-BUS-INCM-DTLS.MTHLY-GRS-INC-AMT +       H2-BUS-INCM-DTLS.MTHLY-TIPS-AMT - H2-BUS-INCM-DTLS.BUS-EXP-AMT;

      AIN90W.WS-TOTAL-CASE-INCOME = AIN90W.WS-TOTAL-CASE-INCOME +       AIN90W.WS-INC-AMOUNT;

      AIN90W.WS-NCU-FREQ = 12;
      AIN90W.WS-INC-TYPE-CD = 96;
      AIN90P9-FRMT-OINC(); /* Build other income file*/

    end
  end /* End of While loop*/
end // end AIN90P9-SELF-INC


// initial value setting
Function AIN90P9-SET-EMPTY()
  set H2-JOB-INCM-DTLS empty;
  set H2-PAY-DTLS empty;
  set H2-BUS-INCM-DTLS empty;
  set H2-LSUM-RSRCE-DTLS empty;
  set H2-RM-BRDR-INC-DTL empty;
  set H2-RNTL-INCM-DTL empty;
  set H2-UERND-INCM-DTL empty;
  set H2-STDNT-GR-INC-DT empty;
  set H2-GEN-ASST-INC-DT empty;
  set H2-OTH-ERND-INC-DT empty;
  set H2-2-EVM-EVR empty;
  set H2-MEMBER-REL empty;
  set H2-2-CMH-PER empty;
  set H3-MEMBER-REL empty;
  set H2-2-FCH-PSY empty;
  set H2-PERSON-ADRS-HST empty;
  set H3-PERSON-ADRS-HST empty;
  set H2-PRGNCY-DTLS empty;
  set H2-CASE-MEMBER-HST empty;

  /* Initialize constants*/
  AIN90W.WS-CASE-DONE = "F";
end // end AIN90P9-SET-EMPTY


// INQUIRE STDNT GRANT INC DETAIL
Function AIN90P9-SGI-Q1()
  /* Perform standard database application initialization*/
  WDB00PI();
  /*  */
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";

  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-STDNT-GR-INC-DT";
  VDBCONTROL.UPROC-OBJ = "H2-STDNT-GR-INC-DT";
  VDBCONTROL.UPROC-NM = "AIN90P9-SGI-Q1";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  /*  */
  try
    open AIN90P9-SGI-Q1_RSI01
      with #sql{
        select MTHLY_AMT,
                PRD_BEG_DT,
                PRD_END_DT,
                INCM_SQ_NMB,
                MTHLY_EXP_AMT,
                START_DT,
                END_DT
        from TWNSTDNT_GR_INC_DT T1
        WHERE
            UPI = :UPI
        AND PRD_BEG_DT <= :PRD-BEG-DT
        AND PRD_END_DT >= :PRD-END-DT
        AND MAINT_CD <> 'D'
        AND SG_INC_VERF_CD IN ('Y', 'C')
        AND AFDC_CNTBL_IND = 'Y'
        FOR FETCH ONLY
         --** INSERT ORDER BY CLAUSE HERE **
      }      
      into MTHLY-AMT,
           PRD-BEG-DT,
           PRD-END-DT,
           INCM-SQ-NMB,
           MTHLY-EXP-AMT,
           START-DT,
           END-DT
      for H2-STDNT-GR-INC-DT ;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-SGI-Q1


// SCAN Retrieved Rows
Function AIN90P9-SGI-QS1()
  /* This process SCANs the retrieved rows from the previous SETINQ.*/
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-STDNT-GR-INC-DT";
  VDBCONTROL.UPROC-OBJ = "H2-STDNT-GR-INC-DT";
  VDBCONTROL.UPROC-NM = "AIN90P9-SGI-QS1";
  VDBCONTROL.UPROC-OPT = "SCAN";
  /*  */
  try
    get next H2-STDNT-GR-INC-DT ;
  end
  /*  */
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";

  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end


  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
end // end AIN90P9-SGI-QS1


// Control Retrieve of Data
Function AIN90P9-STGRNT-INC()
  set H2-STDNT-GR-INC-DT empty;
  /* Move retrieve key value to SQL row record*/
  H2-STDNT-GR-INC-DT.UPI = AIN90W1.WS-UPI[WS-MBR-INDEX];
  H2-STDNT-GR-INC-DT.PRD-BEG-DT = AIN90W.WS-PREV-BEG-DT;
  H2-STDNT-GR-INC-DT.PRD-END-DT = AIN90W.WS-PREV-END-DT;

  /* Perform process to retrieve data*/
  AIN90P9-SGI-Q1();

  /* If data retrieved successfully, continue*/
  AIN90W.WS-VDBCONTROL-URC = sysVar.sqlData.sqlcode;

  while (AIN90W.WS-VDBCONTROL-URC == 0)

    AIN90P9-SGI-QS1();

    AIN90W.WS-VDBCONTROL-URC = sysVar.sqlData.sqlcode;

    if (AIN90W.WS-VDBCONTROL-URC == 0)

      AIN90W.WS-GRNT-START-YEAR-MTH = H2-STDNT-GR-INC-DT.START-DT;
      AIN90W.WS-GRNT-END-YEAR-MTH = H2-STDNT-GR-INC-DT.END-DT;

      AIN90W.WS-PRD-END-YEAR-MTH = AIN90W.WS-PREV-END-DT;

      if (AIN90W.WS-GRNT-START-YEAR-MTH <= AIN90W.WS-PRD-END-YEAR-MTH
       && AIN90W.WS-GRNT-END-YEAR-MTH >= AIN90W.WS-PRD-END-YEAR-MTH)


        AIN90W.WS-INC-AMOUNT = (H2-STDNT-GR-INC-DT.MTHLY-AMT -         H2-STDNT-GR-INC-DT.MTHLY-EXP-AMT);

        if (AIN90W.WS-INC-AMOUNT < 0)
          AIN90W.WS-INC-AMOUNT = 0;
        end

        AIN90W.WS-TOTAL-CASE-INCOME = AIN90W.WS-TOTAL-CASE-INCOME +         AIN90W.WS-INC-AMOUNT;

        AIN90W.WS-NCU-FREQ = 12;
        AIN90W.WS-INC-TYPE-CD = 94;
        AIN90P9-FRMT-OINC(); /* Build other income file*/

      end
    end
  end
end // end AIN90P9-STGRNT-INC


// Control Retrieve of Data
Function AIN90P9-TANF-INCM()
  H2-CASE-MEMBER-HST.UPI = AIN90W1.WS-UPI[WS-MBR-INDEX];
  H2-CASE-MEMBER-HST.PRD-BEG-DT = AIN90W.WS-PREV-BEG-DT;
  H2-CASE-MEMBER-HST.PRD-END-DT = AIN90W.WS-PREV-END-DT;

  /* Perform process to retrieve data*/
  AIN90P9-CMH-Q2(); /* Get all ICI's For member*/
  /*  */
  /* If data retrieved successfully, continue*/
  while (sysVar.sqlData.sqlcode == 0)

    AIN90P9-CMH-QS2();

    if (sysVar.sqlData.sqlcode == 0)

      set H2-AFDC-WRNT empty;
  /* Move retrieve key value to SQL row record*/
      H2-AFDC-WRNT.ICI = H2-CASE-MEMBER-HST.ICI;
      H2-AFDC-WRNT.SSN = AIN90W1.WS-SSN[WS-MBR-INDEX];
      H2-AFDC-WRNT.BNFT-YR = AIN90W.WS-PREV-BEG-CCYY;
      H2-AFDC-WRNT.BNFT-MTH = AIN90W.WS-PREV-BEG-MM;
  /*  */
  /* Perform process to retrieve data*/
      AIN90P9-ADW-Q1();
  /*  */
      while (sysVar.sqlData.sqlcode == 0)

        AIN90P9-ADW-QS1();

        if (sysVar.sqlData.sqlcode == 0)
          AIN90W.WS-INC-AMOUNT = AIN90W.WS-ADWINC-AMT +           H2-AFDC-WRNT.WRNT-AMT;

          AIN90W.WS-TOTAL-CASE-INCOME = AIN90W.WS-TOTAL-CASE-INCOME +           AIN90W.WS-INC-AMOUNT;

          AIN90W.WS-INC-TYPE-CD = 55;
          AIN90W.WS-NCU-FREQ = 12;
          AIN90P9-FRMT-OINC(); /* Build other income file*/

        end
      end
    end /* End if EZESQCOD = 0*/
  end /* End while EZESQCOD = 0*/
end // end AIN90P9-TANF-INCM


// INQURY Message Text Data
Function AIN90P9-UID-Q1()
  /* Perform standard database application initialization*/
  WDB00PI();
  /*  */
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";

  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-UERND-INCM-DTL";
  VDBCONTROL.UPROC-OBJ = "H2-UERND-INCM-DTL";
  VDBCONTROL.UPROC-NM = "AIN90P9-UID-Q1";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  /*  */
  try
    open AIN90P9-UID-Q1_RSI01
      with #sql{
        select UERND_INC_AMT,
            INVO_MND_DEDN_AMT,
            UERND_INC_FREQ,
            PRD_END_DT,
            UERND_INC_TYPE_CD
        from TWNUERND_INCM_DTL T1
        WHERE
             UPI = :UPI
        AND  PRD_BEG_DT <= :PRD-BEG-DT
        AND  PRD_END_DT >= :PRD-END-DT
        AND  MAINT_CD <> 'D'
        AND  UNE_INC_VERF_CD IN ('Y', 'C')
        AND  AFDC_CNTBL_IND = 'Y'
        FOR FETCH ONLY
         --** INSERT ORDER BY CLAUSE HERE **
      }      
      into UERND-INC-AMT,
           INVO-MND-DEDN-AMT,
           UERND-INC-FREQ,
           PRD-END-DT,
           UERND-INC-TYPE-CD
      for H2-UERND-INCM-DTL ;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-UID-Q1


// SCAN Retrieved Rows
Function AIN90P9-UID-QS1()
  /* This process SCANs the retrieved rows from the previous SETINQ.*/
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-UERND-INCM-DTL";
  VDBCONTROL.UPROC-OBJ = "H2-UERND-INCM-DTL";
  VDBCONTROL.UPROC-NM = "AIN90P9-UID-QS1";
  VDBCONTROL.UPROC-OPT = "SCAN";
  /*  */
  try
    get next H2-UERND-INCM-DTL ;
  end
  /*  */
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";

  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end


  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
end // end AIN90P9-UID-QS1


// Control Retrieve of Data
Function AIN90P9-UNERND-INC()
  set H2-UERND-INCM-DTL empty;
  /* Move retrieve key value to SQL row record*/
  H2-UERND-INCM-DTL.UPI = AIN90W1.WS-UPI[WS-MBR-INDEX];
  H2-UERND-INCM-DTL.PRD-BEG-DT = AIN90W.WS-PREV-BEG-DT;
  H2-UERND-INCM-DTL.PRD-END-DT = AIN90W.WS-PREV-END-DT;
  /*  */
  /* Perform process to retrieve data*/
  AIN90P9-UID-Q1();
  /*  */
  /* If data retrieved successfully, continue*/
  while (sysVar.sqlData.sqlcode == 0)

    AIN90P9-UID-QS1();

    if (sysVar.sqlData.sqlcode == 0)

      AIN90W.WS-FREQ = H2-UERND-INCM-DTL.UERND-INC-FREQ;
      AIN90P9-GET-FACTOR();

      AIN90W.WS-INC-AMOUNT = H2-UERND-INCM-DTL.UERND-INC-AMT * AIN90W.WS-FACTOR;

      AIN90W.WS-TOTAL-CASE-INCOME = AIN90W.WS-TOTAL-CASE-INCOME +       AIN90W.WS-INC-AMOUNT;

      AIN90P9-GET-FREQ(); /* Formate NCU pay frequency*/
      AIN90W.WS-INC-TYPE-CD = H2-UERND-INCM-DTL.UERND-INC-TYPE-CD;
      AIN90P9-FRMT-OINC(); /* Build other income file*/

    end
  end
end // end AIN90P9-UNERND-INC


// validate incomming parms
Function AIN90P9-VALIDATE()
  /* check if any i/o error has occured*/
  if (SR-AIN90-REC-IN is ioError && SR-AIN90-REC-IN not endOfFile)
    /* return error code to indicate abnormal ending*/
    VDBCONTROL.UMSQLCODE = 0;
    AIN90W.WS-ERR-CD = sysVar.errorCode;
    VMESSAGE.UMSGINS[1] = AIN90W.WS-ERR-LAST-FOUR;
    VMESSAGE.UMSGINS[2] = "AIN90A";
    AIN90W.WS-PARM-ERROR = "INPUT/OUTPUT ERROR";
    WCM00P2-TO-CEP01A();

  else

    if (SR-AIN90-REC-IN is endOfFile)
      VMESSAGE.UMSGINS[2] = "AIN90A";
      AIN90W.WS-ERR-CD = sysVar.errorCode;
      VMESSAGE.UMSGINS[1] = AIN90W.WS-ERR-LAST-FOUR;
      WCM00P2-TO-CEP01A();

    else

      if (SR-AIN90-REC-IN.PREV-MTH-END-DT not numeric)
        VDBCONTROL.UPROC-NM = "AIN90P9-VALIDATE";
        VDBCONTROL.UPROC-OPT = "INP VALDN";
        VDBCONTROL.UPROC-OBJ = "SR-AIN90-REC-IN";
        VMESSAGE.UMSGCODE = "GEN0542E";
  /* *** 'INPUT PARAMETER IS NON-NUMERIC' ********/
        VDBCONTROL.UMSQLCODE = 0;
        VMESSAGE.UMSGINS[2] = "AIN90A";
        WCM00P2-TO-CEP01A();

      else


  /* check from month & year validation*/
        if ((SR-AIN90-REC-IN.PREV-MTH-END-MM <= 0 || 
        SR-AIN90-REC-IN.PREV-MTH-END-MM > 12) || 
        (SR-AIN90-REC-IN.PREV-MTH-END-CCYY < 1900))
          VDBCONTROL.UPROC-NM = "AIN90P9-VALIDATE";
          VDBCONTROL.UPROC-OPT = "INP VALDN";
          VDBCONTROL.UPROC-OBJ = "SR-AIN90-REC-IN";
          VMESSAGE.UMSGCODE = "GEN0543E";
  /* *** 'INPUT PARAMETER IS INVALID' ********/
          VDBCONTROL.UMSQLCODE = 0;
          VMESSAGE.UMSGINS[2] = "AIN90A";
          WCM00P2-TO-CEP01A();

        end
      end /* End Not Numeric*/
    end /* End EOF*/
  end /* End ERR*/
end // end AIN90P9-VALIDATE


// ADD A RECORD FOR OTHER ADULT
Function AIN90P9-WRITE-ADLT()
  /* **********************************************************************/
  /* This process is to add a record into the output file for           **/
  /* Nevada Check Up - Other Adult File                                 **/
  /* **********************************************************************/
  try
    add SR-AIN90-ADULT-OUT ;
  end
  /*  */
  /* If error occured on writing*/
  /*  */
  if (SR-AIN90-ADULT-OUT is ioError)
    VDBCONTROL.UPROC-NM = "AIN90P9-WRITE-ADLT";
    VDBCONTROL.UPROC-OBJ = "SR-AIN90-ADULT-OUT";
    VDBCONTROL.UPROC-OPT = "ADD";
    AIN90W.WS-ERR-CD = sysVar.errorCode;
    VMESSAGE.UMSGINS[1] = AIN90W.WS-ERR-LAST-FOUR;
    VMESSAGE.UMSGINS[2] = "AIN90A";
  /*  */
    if (SR-AIN90-ADULT-OUT is fileNotAvailable)
      VDBCONTROL.UEZESQRRM = "FILE IS NOT AVAILABLE";
    else
      if (SR-AIN90-ADULT-OUT is fileNotFound)
        VDBCONTROL.UEZESQRRM = "FILE NOT FOUND";
      else
        if (SR-AIN90-ADULT-OUT is invalidFormat)
          VDBCONTROL.UEZESQRRM = "FILE FORMAT MISMATCH";
        end /* ** end check for format mismatch*/
      end /* ** end check for file not found*/
    end /* ** end check for file not available*/

    WCM00P2-TO-CEP01A();
  end /* end check for errors found*/
end // end AIN90P9-WRITE-ADLT


// ADD A RECORD FOR CHILD
Function AIN90P9-WRITE-CHD()
  /* **********************************************************************/
  /* This process is to add a record into the output file for           **/
  /* Nevada Check Up - Child File                                       **/
  /* **********************************************************************/
  try
    add SR-AIN90-CHILD-OUT ;
  end
  /*  */
  /* If error occured on writing*/
  /*  */
  if (SR-AIN90-CHILD-OUT is ioError)
    VDBCONTROL.UPROC-NM = "AIN90P9-WRITE-CHD";
    VDBCONTROL.UPROC-OBJ = "SR-AIN90-CHILD-OUT";
    VDBCONTROL.UPROC-OPT = "ADD";
    AIN90W.WS-ERR-CD = sysVar.errorCode;
    VMESSAGE.UMSGINS[1] = AIN90W.WS-ERR-LAST-FOUR;
    VMESSAGE.UMSGINS[2] = "AIN90A";
  /*  */
    if (SR-AIN90-CHILD-OUT is fileNotAvailable)
      VDBCONTROL.UEZESQRRM = "FILE IS NOT AVAILABLE";
    else
      if (SR-AIN90-CHILD-OUT is fileNotFound)
        VDBCONTROL.UEZESQRRM = "FILE NOT FOUND";
      else
        if (SR-AIN90-CHILD-OUT is invalidFormat)
          VDBCONTROL.UEZESQRRM = "FILE FORMAT MISMATCH";
        end /* ** end check for format mismatch*/
      end /* ** end check for file not found*/
    end /* ** end check for file not available*/

    WCM00P2-TO-CEP01A();
  end /* end check for errors found*/
end // end AIN90P9-WRITE-CHD


// ADD A RECORD FOR EMPLOYER
Function AIN90P9-WRITE-EMP()
  /* **********************************************************************/
  /* This process is to add a record into the output file for           **/
  /* Nevada Check Up - Employer File                                    **/
  /* **********************************************************************/
  try
    add SR-AIN90-EMPLR-OUT ;
  end
  /*  */
  /* If error occured on writing*/
  /*  */
  if (SR-AIN90-EMPLR-OUT is ioError)
    VDBCONTROL.UPROC-NM = "AIN90P9-WRITE-EMP";
    VDBCONTROL.UPROC-OBJ = "SR-AIN90-EMPLR-OUT";
    VDBCONTROL.UPROC-OPT = "ADD";
    AIN90W.WS-ERR-CD = sysVar.errorCode;
    VMESSAGE.UMSGINS[1] = AIN90W.WS-ERR-LAST-FOUR;
    VMESSAGE.UMSGINS[2] = "AIN90A";
  /*  */
    if (SR-AIN90-EMPLR-OUT is fileNotAvailable)
      VDBCONTROL.UEZESQRRM = "FILE IS NOT AVAILABLE";
    else
      if (SR-AIN90-EMPLR-OUT is fileNotFound)
        VDBCONTROL.UEZESQRRM = "FILE NOT FOUND";
      else
        if (SR-AIN90-EMPLR-OUT is invalidFormat)
          VDBCONTROL.UEZESQRRM = "FILE FORMAT MISMATCH";
        end /* ** end check for format mismatch*/
      end /* ** end check for file not found*/
    end /* ** end check for file not available*/

    WCM00P2-TO-CEP01A();
  end /* end check for errors found*/
end // end AIN90P9-WRITE-EMP


// ADD A RECORD FOR GUARDIAN
Function AIN90P9-WRITE-GRD()
  /* **********************************************************************/
  /* This process is to add a record into the output file for           **/
  /* Nevada Check Up - Guardian File                                    **/
  /* **********************************************************************/
  try
    add SR-AIN90-GUARD-OUT ;
  end
  /*  */
  /* If error occured on writing*/
  /*  */
  if (SR-AIN90-GUARD-OUT is ioError)
    VDBCONTROL.UPROC-NM = "AIN90P9-WRITE-GRD";
    VDBCONTROL.UPROC-OBJ = "SR-AIN90-GUARD-OUT";
    VDBCONTROL.UPROC-OPT = "ADD";
    AIN90W.WS-ERR-CD = sysVar.errorCode;
    VMESSAGE.UMSGINS[1] = AIN90W.WS-ERR-LAST-FOUR;
    VMESSAGE.UMSGINS[2] = "AIN90A";
  /*  */
    if (SR-AIN90-GUARD-OUT is fileNotAvailable)
      VDBCONTROL.UEZESQRRM = "FILE IS NOT AVAILABLE";
    else
      if (SR-AIN90-GUARD-OUT is fileNotFound)
        VDBCONTROL.UEZESQRRM = "FILE NOT FOUND";
      else
        if (SR-AIN90-GUARD-OUT is invalidFormat)
          VDBCONTROL.UEZESQRRM = "FILE FORMAT MISMATCH";
        end /* ** end check for format mismatch*/
      end /* ** end check for file not found*/
    end /* ** end check for file not available*/

    WCM00P2-TO-CEP01A();
  end /* end check for errors found*/
end // end AIN90P9-WRITE-GRD


// ADD A RECORD FOR OTHER INCOME
Function AIN90P9-WRITE-OINC()
  /* **********************************************************************/
  /* This process is to add a record into the output file for           **/
  /* Nevada Check Up - Other Income File                                **/
  /* **********************************************************************/
  try
    add SR-AIN90-OINCM-OUT ;
  end
  /*  */
  /* If error occured on writing*/
  /*  */
  if (SR-AIN90-OINCM-OUT is ioError)
    VDBCONTROL.UPROC-NM = "AIN90P9-WRITE-OINC";
    VDBCONTROL.UPROC-OBJ = "SR-AIN90-OINCM-OUT";
    VDBCONTROL.UPROC-OPT = "ADD";
    AIN90W.WS-ERR-CD = sysVar.errorCode;
    VMESSAGE.UMSGINS[1] = AIN90W.WS-ERR-LAST-FOUR;
    VMESSAGE.UMSGINS[2] = "AIN90A";
  /*  */
    if (SR-AIN90-OINCM-OUT is fileNotAvailable)
      VDBCONTROL.UEZESQRRM = "FILE IS NOT AVAILABLE";
    else
      if (SR-AIN90-OINCM-OUT is fileNotFound)
        VDBCONTROL.UEZESQRRM = "FILE NOT FOUND";
      else
        if (SR-AIN90-OINCM-OUT is invalidFormat)
          VDBCONTROL.UEZESQRRM = "FILE FORMAT MISMATCH";
        end /* ** end check for format mismatch*/
      end /* ** end check for file not found*/
    end /* ** end check for file not available*/

    WCM00P2-TO-CEP01A();
  end /* end check for errors found*/
end // end AIN90P9-WRITE-OINC


Record AIN90W type basicRecord
  10 WS-PREV-BEG-DT char(10) ; 
    15 WS-PREV-BEG-CCYY num(4) ; 
    15 * char(1) ; 
    15 WS-PREV-BEG-MM num(2) ; 
    15 * char(1) ; 
    15 WS-PREV-BEG-DD num(2) ; 
  10 WS-PREV-END-DT char(10) ; 
    15 WS-PREV-END-CCYY num(4) ; 
    15 * char(1) ; 
    15 WS-PREV-END-MM num(2) ; 
    15 * char(1) ; 
    15 WS-PREV-END-DD num(2) ; 
  10 WS-PREV-END-DT-NUM num(8) ; 
    15 WS-PREV-END-CCYY-NUM num(4) ; 
    15 WS-PREV-END-MM-NUM num(2) ; 
    15 WS-PREV-END-DD-NUM num(2) ; 
  10 WS-VDBCONTROL-URC num(3) ; 
  10 WS-GRS-UNEARNED-INC num(7,2) ; 
  10 WS-GRS-WGS-AMT num(7,2) ; 
  10 WS-JINC-AMT num(7,2) ; 
  10 WS-FREQ char(1) ; 
  10 WS-PAY-FREQ char(1) ; 
  10 WS-NCU-FREQ num(2) ; 
  10 WS-SELF-AMT num(7,2) ; 
  10 WS-TEMP-SELF-AMT num(7,2) ; 
  10 WS-RBIN-AMT num(7,2) ; 
  10 WS-TEMP-RBIN-AMT num(7,2) ; 
  10 WS-RINC-AMT num(7,2) ; 
  10 WS-TEMP-RINC-AMT num(7,2) ; 
  10 WS-RNTL-MAINT-EXP-AMT num(7,2) ; 
  10 WS-LSUM-AMT num(7,2) ; 
  10 WS-OEINC-AMT num(7,2) ; 
  10 WS-TEMP-OINC-AMT num(7,2) ; 
  10 WS-UERND-AMT num(7,2) ; 
  10 WS-TEMP-UERND-AMT num(7,2) ; 
  10 WS-GAGA-AMT num(7,2) ; 
  10 WS-EDIN-AMT num(7,2) ; 
  10 WS-STUDENT-IND char(1) ; 
  10 WS-TIPS-COMSN-AMT num(7,2) ; 
  10 WS-AVG-GRS-WGS-AMT num(7,2) ; 
  10 WS-AVG-TIPS-COMSN-AMT num(7,2) ; 
  10 WS-GAGA-TEMP-AMT num(7,2) ; 
  10 WS-ADWINC-AMT num(7,2) ; 
  10 WS-RSDI-AMT num(7,2) ; 
  10 WS-MONTHS-DONE char(3) ; 
  10 WS-CASE-DONE char(1) ; 
  10 WS-VALID-PARAMETER char(1) ; 
  10 WS-ERR-CD char(8) ; 
  10 WS-ERR-LAST-FOUR char(4) ; 
  10 WS-PARM-ERROR char(30) ; 
  10 WS-TEMP num(4) ; 
  10 WS-LEAP-YEAR-FLAG char(1) ; 
  10 WS-GRNT-START-YEAR-MTH char(7) ; 
  10 WS-GRNT-END-YEAR-MTH char(7) ; 
  10 WS-PRD-END-YEAR-MTH char(7) ; 
  10 WS-AGE-OF-MEMBER int ; 
  10 WS-WEEKLY-FACTOR num(8,3) ; 
  10 WS-BIWEEKLY-FACTOR num(8,3) ; 
  10 WS-FACTOR num(8,6) ; 
  10 WS-WGS-FACTOR num(8,6) ; 
  10 WS-TIPS-FACTOR num(8,6) ; 
  10 WS-CHECK-NMB num(1) ; 
  10 WS-BNFT-MTH smallint ; 
  10 WS-BNFT-YR smallint ; 
  10 WS-MBR-INDEX num(2) ; 
  10 WS-GUARDIAN-INDEX num(2) ; 
  10 WS-OINCOME-INDEX num(3) ; 
  10 WS-EMPLOYMENT-INDEX num(2) ; 
  10 WS-OTHER-ADULT-INDEX num(2) ; 
  10 WS-CHILD-INDEX num(2) ; 
  10 WS-MBR-COUNT smallint ; 
  10 WS-CURRENT-DT char(10) ; 
    15 WS-CURRENT-CCYY char(4) ; 
    15 * char(1) ; 
    15 WS-CURRENT-MM char(2) ; 
    15 * char(1) ; 
    15 WS-CURRENT-DD char(2) ; 
  10 WS-ADDRESS1 char(50) ; 
  10 WS-ADDRESS2 char(50) ; 
  10 WS-HH-SSN char(9) ; 
  10 WS-INC-AMOUNT num(7,2) ; 
  10 WS-INC-TYPE-CD num(2) ; 
  10 WS-PREG-DT char(10) ; 
    15 WS-PREG-CCYY char(4) ; 
    15 * char(1) ; 
    15 WS-PREG-MM char(2) ; 
    15 * char(1) ; 
    15 WS-PREG-DD char(2) ; 
  10 WS-APPL-DT char(10) ; 
    15 WS-APPL-CCYY char(4) ; 
    15 * char(1) ; 
    15 WS-APPL-MM char(2) ; 
    15 * char(1) ; 
    15 WS-APPL-DD char(2) ; 
  10 WS-DOB char(10) ; 
  10 WS-CALC-DT char(10) ; 
  10 WS-TOTAL-CASE-INCOME num(8,2) ; 
  10 WS-100-PERCENT-POVERTY-LEVEL num(8,2) ; 
  10 WS-200-PERCENT-POVERTY-LEVEL num(8,2) ; 
end // end AIN90W


Record AIN90W1 type basicRecord
  10 WS-MBR-LVL-DATA char(131) [25] ; 
    15 WS-UPI int ; 
    15 WS-SSN char(9) ; 
    15 WS-FRST-NM char(16) ; 
    15 WS-LST-NM char(21) ; 
    15 WS-MID-NM char(16) ; 
    15 WS-DOB char(10) ; 
      20 WS-DOB-CCYY char(4) ; 
      20 * char(1) ; 
      20 WS-DOB-MM char(2) ; 
      20 * char(1) ; 
      20 WS-DOB-DD char(2) ; 
    15 WS-SEX-CD char(1) ; 
    15 WS-ETHNC-CD char(1) ; 
    15 WS-AGE-OF-MEMBER int ; 
    15 WS-RELSH-CD char(2) ; 
    15 WS-TANF-CRTKR-IND char(1) ; 
    15 WS-HH-LEFT-DT char(10) ; 
    15 WS-JOIN-HH-DT char(10) ; 
    15 WS-MEMBER-TYPE char(1) ; 
    15 WS-HM-PHN-NMB char(10) ; 
    15 WS-PCN-CD char(4) ; 
    15 WS-MEDIC-BLNG-SQ-NMB num(11,2) ; 
end // end AIN90W1


Record AIN90W2 type basicRecord
  5 WS-OTHER-ADULT char(73) [25] ; 
    10 WS-HH-SSN char(9) ; 
    10 WS-OTH-ADLT-LST-NM char(25) ; 
    10 WS-OTH-ADLT-FST-NM char(20) ; 
    10 WS-OTH-ADLT-MID-IN char(1) ; 
    10 WS-OTH-ADLT-SSN char(9) ; 
    10 WS-OTH-ADLT-DOB char(8) ; 
      15 WS-OTH-ADLT-CCYY num(4) ; 
      15 WS-OTH-ADLT-MM num(2) ; 
      15 WS-OTH-ADLT-DD num(2) ; 
    10 WS-IS-NON-RESIDENT char(1) ; 
end // end AIN90W2


Record AIN90W3 type basicRecord
  5 WS-CHILD char(387) [25] ; 
    10 WS-HH-SSN char(9) ; 
    10 WS-CH-LST-NM char(25) ; 
    10 WS-CH-FRST-NM char(20) ; 
    10 WS-CH-MID-INIT char(1) ; 
    10 WS-CH-SSN char(9) ; 
    10 WS-CH-DOB char(8) ; 
      15 WS-CH-DOB-CCYY num(4) ; 
      15 WS-CH-DOB-MM num(2) ; 
      15 WS-CH-DOB-DD num(2) ; 
    10 WS-CH-GENDER char(1) ; 
    10 WS-CH-ETHNICITY char(1) ; 
    10 WS-CH-INS char(1) ; 
    10 WS-CH-POL-LST-NM char(25) ; 
    10 WS-CH-POL-FST-NM char(20) ; 
    10 WS-CH-POL-SSN char(9) ; 
    10 WS-CH-POL-NUMBER char(20) ; 
    10 WS-CH-INS-CO-NAME char(50) ; 
    10 WS-CH-INS-CO-ADD1 char(40) ; 
    10 WS-CH-INS-CO-ADD2 char(40) ; 
    10 WS-CH-INS-CO-CITY char(20) ; 
    10 WS-CH-INS-CO-STATE char(2) ; 
    10 WS-CH-INS-CO-ZIP char(9) ; 
    10 WS-CH-US-CITIZEN char(1) ; 
    10 WS-CH-ENROLLED char(1) ; 
    10 WS-CH-INACTIVE char(1) ; 
    10 WS-CH-SPC-NEED-SVC char(50) ; 
    10 WS-CH-PREG-DUE-DT char(8) ; 
      15 WS-CH-PREG-CCYY num(4) ; 
      15 WS-CH-PREG-MM num(2) ; 
      15 WS-CH-PREG-DD num(2) ; 
    10 WS-PROVIDER-NUMBER char(4) ; 
    10 WS-MORE-INSURANCE char(1) ; 
    10 WS-MEDIC-BLNG-SQ-NMB num(11,2) ; 
end // end AIN90W3


Record AIN90W4 type basicRecord
  5 WS-EMPLOYMENT char(182) [50] ; 
    10 WS-HH-SSN char(9) ; 
    10 WS-EMPL-LST-NM char(25) ; 
    10 WS-EMPL-FRST-NM char(20) ; 
    10 WS-EMPL-SSN char(9) ; 
    10 WS-EMPL-EMPLR-NAME char(55) ; 
    10 WS-EMPL-EMPLR-CITY char(20) ; 
    10 WS-EMPL-EMPLR-ST char(2) ; 
    10 WS-EMPL-EMPLR-ZIP char(9) ; 
    10 WS-EMPL-EMPLR-PHON char(10) ; 
    10 WS-WORK-EXT char(5) ; 
    10 WS-ANNUAL-PAY-PRD num(2) ; 
    10 WS-EMPL-PAY-GROSS num(8,2) ; 
    10 WS-EMPL-ANNUAL-INC num(8,2) ; 
end // end AIN90W4


Record AIN90W5 type basicRecord
  5 WS-GUARDIAN char(263) ; 
    10 WS-APPL-DATE char(8) ; 
      15 WS-APPL-CCYY char(4) ; 
      15 WS-APPL-MM char(2) ; 
      15 WS-APPL-DD char(2) ; 
    10 WS-RECEIPT-DATE char(8) ; 
      15 WS-RECEIPT-CCYY char(4) ; 
      15 WS-RECEIPT-MM char(2) ; 
      15 WS-RECEIPT-DD char(2) ; 
    10 WS-HH-LST-NM char(25) ; 
    10 WS-HH-FRST-NM char(20) ; 
    10 WS-HH-MID-INIT char(1) ; 
    10 WS-HH-SSN char(9) ; 
    10 WS-HH-DOB char(8) ; 
      15 WS-HH-DOB-CCYY char(4) ; 
      15 WS-HH-DOB-MM char(2) ; 
      15 WS-HH-DOB-DD char(2) ; 
    10 WS-HH-RES-ADDR char(50) ; 
    10 WS-HH-RES-CITY char(20) ; 
    10 WS-HH-RES-ST char(2) ; 
    10 WS-HH-RES-ZIP char(9) ; 
    10 WS-HH-RES-PHONE char(10) ; 
    10 WS-HH-MAIL-ADDR char(50) ; 
    10 WS-HH-MAIL-CITY char(20) ; 
    10 WS-HH-MAIL-ST char(2) ; 
    10 WS-HH-MAIL-ZIP char(9) ; 
    10 WS-OCCUPANT-COUNT num(2) ; 
    10 WS-HOW-HEAR-CODE num(2) ; 
    10 WS-HH-PREG-DUE-DT char(8) ; 
      15 WS-PREG-CCYY char(4) ; 
      15 WS-PREG-MM char(2) ; 
      15 WS-PREG-DD char(2) ; 
end // end AIN90W5


Record AIN90W6 type basicRecord
  5 WS-OTHER-INCOME char(94) [225] ; 
    10 WS-HH-SSN char(9) ; 
    10 WS-OINC-CD num(2) ; 
    10 WS-OINC-RCT-LST-NM char(30) ; 
    10 WS-OINC-RCT-FST-NM char(20) ; 
    10 WS-OINC-ACCOUNT char(15) ; 
    10 WS-ANNUAL-PAY-PRD num(2) ; 
    10 WS-OINC-AMOUNT num(8,2) ; 
    10 WS-OINC-ANNUAL num(8,2) ; 
end // end AIN90W6