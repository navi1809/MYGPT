/** Compare AID codes with "blank first, alpha next, numeric last". */
private static int compareAidAlphaThenNumeric(String a, String b) {
    String A = trimUp(a);
    String B = trimUp(b);

    // blanks first
    if (A.isEmpty() && !B.isEmpty()) return -1;
    if (!A.isEmpty() && B.isEmpty()) return 1;
    if (A.isEmpty() && B.isEmpty()) return 0;

    boolean aAlpha = startsWithLetter(A);
    boolean bAlpha = startsWithLetter(B);
    if (aAlpha != bAlpha) return aAlpha ? -1 : 1; // alpha group first

    boolean aNum = startsWithDigit(A);
    boolean bNum = startsWithDigit(B);

    // both alpha
    if (aAlpha && bAlpha) return A.compareTo(B);

    // both numeric
    if (aNum && bNum) {
        String aDigits = A.replaceFirst("^\\D*(\\d+).*$", "$1").replaceFirst("^0+(\\d)", "$1");
        String bDigits = B.replaceFirst("^\\D*(\\d+).*$", "$1").replaceFirst("^0+(\\d)", "$1");
        if (!aDigits.isEmpty() && !bDigits.isEmpty()) {
            int lenCmp = Integer.compare(aDigits.length(), bDigits.length());
            if (lenCmp != 0) return lenCmp;
            int numCmp = aDigits.compareTo(bDigits);
            if (numCmp != 0) return numCmp;
        }
        return A.compareTo(B);
    }

    // fallback lexicographic for mixed or others
    return A.compareTo(B);
}




/** Key compare: OFC, CASLOAD (alpha-first numeric), AID (blank→alpha→numeric). */
private static int compareKeys(String ofc1, String cas1, String aid1,
                               String ofc2, String cas2, String aid2) {
    int c = up(ofc1).compareTo(up(ofc2));
    if (c != 0) return c;
    c = compareCaseloadAlphaThenNumeric(cas1, cas2);
    if (c != 0) return c;
    return compareAidAlphaThenNumeric(aid1, aid2);
}
