
package gov.illinois.ies.business.batch.mu;

import gov.illinois.fw.batch.AbstractBatch;
import gov.illinois.fw.batch.Controller.TIERSBatchController;
import gov.illinois.framework.management.logging.ILog;
import gov.illinois.framework.factories.FwServiceFactory;
import gov.illinois.fw.batch.HelperClasses.BatchConstants;
import gov.illinois.fw.business.exceptions.TIERSBatchException;
import gov.illinois.fw.business.exceptions.TIERSException;
import gov.illinois.ies.business.rules.al.ALSOPUtil;
import gov.illinois.ies.business.util.co.COCorrespondence;
import gov.illinois.ies.business.util.co.COCorrespondenceCollection;
import gov.illinois.ies.business.rules.co.CORequestHelper;
import gov.illinois.ies.business.constants.EdBatchConstants;
import gov.illinois.ies.business.entities.dc.DcCasesCargo;
import gov.illinois.ies.business.entities.dc.DcCasesCollection;
import gov.illinois.ies.business.util.batch.MAABDCutoffUtil;

import java.sql.Connection;
import java.sql.Timestamp;
import java.util.HashSet;
import java.util.Set;

public class SendMAABDClosureNoticeBatch extends AbstractBatch {

    private static SendMAABDClosureNoticeBatch batchInstance = null;
    private static TIERSBatchController tbc = null;
    private static ILog logger = (ILog) FwServiceFactory.getInstance().create(ILog.class);

    private Connection conn = null;
    private Timestamp beginDate = null;
    private Timestamp cutoffDate = null;
    private int totalRecordsProcessed = 0;
    private int totalExceptions = 0;
    private DcCasesCollection dcCasesColl = null;
    private DcCasesCargo[] dcCasesRslts = null;
    private Object[] obj = null;
    private static String jobId = null;

    private static final String DOC_ID = EdBatchConstants.CO_DOC_ID_MAABD_CLOSURE;

    public static void main(String[] args) {
        try {
            batchInstance = new SendMAABDClosureNoticeBatch();
            batchInstance.init(args);
        } catch (Exception e) {
            batchInstance.writeExceptionRecord("Fatal Error at main", e.getMessage(), BatchConstants.REPORT_BODY, true);
            System.exit(BatchConstants.EXIT_FAILURE);
        }
    }

    private void init(String[] args) throws TIERSBatchException {
        try {
            if (args != null && args.length != 0) {
                jobId = args[0];
            } else {
                throw new TIERSException("No job id found for this batch: " + this.getClass().getName());
            }

            tbc = getTIERSBatchController();
            tbc.setJobId(jobId);
            tbc.setProgramName(this.getClass().getSimpleName());
            tbc.setOverWriteFlag(false);

            beginDate = ALSOPUtil.getTSfromString(tbc.getParameters().getAsOfDate());
            cutoffDate = MAABDCutoffUtil.getCutoffDate(beginDate);

            conn = tbc.getConnection();
            start();

        } catch (Exception e) {
            throw new TIERSBatchException("Exception during init: " + e.getMessage(), e);
        }
    }

    protected void preProcess() throws TIERSBatchException {}

    protected void process() throws TIERSBatchException {
        sendClosureNotices();
    }

    protected void postProcess() throws TIERSBatchException {
        try {
            tbc.insertSummaryRecord(totalRecordsProcessed, totalRecordsProcessed - totalExceptions, totalExceptions);
        } catch (Exception e) {
            throw new TIERSBatchException("Exception during postProcess: " + e.getMessage(), e);
        }
    }

    protected void stop() throws TIERSBatchException {}

    private void sendClosureNotices() throws TIERSBatchException {
        dcCasesColl = new DcCasesCollection(conn);
        obj = new Object[2];
        obj[0] = "SP004";
        obj[1] = cutoffDate;

        try {
            dcCasesRslts = (DcCasesCargo[]) dcCasesColl.select("findMAABDMedicalCasesByCutOffDt", obj);
        } catch (Exception e) {
            writeExceptionRecord("Case selection failed", e.getMessage(), BatchConstants.REPORT_BODY, true);
            throw new TIERSBatchException(e.getMessage());
        }

        while (dcCasesRslts != null) {
            for (DcCasesCargo cargo : dcCasesRslts) {
                try {
                    tbc.savepoint(conn, "savepointMAABDNotice");
                    Set<String> caseNumSet = new HashSet<>();
                    caseNumSet.add(String.valueOf(cargo.getCaseNum()));
                    CORequestHelper.generateNoticeByCaseNumSet(caseNumSet, null, DOC_ID, conn);
                    logicalCommit(conn);
                    totalRecordsProcessed++;
                } catch (Exception ex) {
                    tbc.rollback(conn, "savepointMAABDNotice");
                    writeExceptionRecord("Failed to send notice for case: " + cargo.getCaseNum(), ex.getMessage(), BatchConstants.REPORT_BODY, true);
                    totalExceptions++;
                }
            }
            try {
                dcCasesRslts = (DcCasesCargo[]) dcCasesColl.next("findMAABDMedicalCasesByCutOffDt");
            } catch (Exception e1) {
                writeExceptionRecord("Prefetch logic failed", e1.getMessage(), BatchConstants.REPORT_BODY, true);
                throw new TIERSBatchException(e1.getMessage());
            }
        }
    }
}
