package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.service;

import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.QueryConstants.*;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.DateUtil.firstDay;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.DateUtil.lastDay;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.DateUtil.month;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.DateUtil.reportBegDtTs;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.DateUtil.reportEndDtTs;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.DateUtil.year;
import static gov.nv.dwss.fw.batch.util.ObjectUtils.*;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.*;

import gov.nv.dwss.fw.batch.context.SystemInfoParam;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;

import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.mapper.*;
import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.*;
import gov.nv.dwss.domain.record.sor.*;
import gov.nv.dwss.fw.batch.common.AbstractSorDataService;
import gov.nv.dwss.fw.batch.constants.FWConstants;

@Service
public class SnapCharacteristicDataService extends AbstractSorDataService {

	private static final Logger log = LogManager.getLogger(SnapCharacteristicDataService.class);

	public Map<String, String> getOfficeCodes() {
		String sql = getQueryWithSchemaName(GET_OFFICE_CODES);
		return jdbcTemplate.query(sql, rs -> {
			Map<String, String> map = new HashMap<>();
			while (rs.next()) map.put(rs.getString(1), rs.getString(2));
			return map;
		});
	}

	public Map<String, String> getOfcDataByOfcCodes(String ofcCds) {
		String sql = getQueryWithSchemaName(GET_OFFICES_BY_CODES.replace("##OFC-CD##", ofcCds));
		return jdbcTemplate.query(sql, rs -> {
			Map<String, String> map = new HashMap<>();
			while (rs.next()) map.put(rs.getString(1), rs.getString(2));
			return map;
		});
	}

	public int countProgramCaseHistory(String officeCode) {
		String sql = String.format(getQueryWithSchemaName(COUNT_PROGRAM_HISTORIES), officeCode, firstDay(), lastDay());
		Integer count = jdbcTemplate.queryForObject(sql, Integer.class);
		return count != null ? count : 0;
	}

	public List<BenefitsCaseProgramHistorySorRecord> getProgramCaseHistoryWithPagination(String officeCode, int start, int max) {
		String sql = String.format(getQueryWithSchemaName(PROGRAM_HISTORIES_BY_OFC_CD), officeCode, firstDay(), lastDay(), start, max);
		return jdbcTemplate.query(sql, new ProgramCaseHistryRowMapper());
	}

	public List<EligBudgetUnitSorRecord> getBudgetUnit(Integer ici, Integer version) {
		String sql = getQueryWithSchemaName(GET_BUDGET_UNIT);
		return jdbcTemplate.query(sql, new BudgetUnitRowMapper(), ici, version, year(), month());
	}

	public Integer getFacilityData(Integer ici) {
		String sql = getQueryWithSchemaName(GET_FACILITY_DATA);
		Object[] params = {ici, lastDay(), firstDay()};
		Integer facility = jdbcTemplate.queryForObject(sql, Integer.class, params);
		//log.info("ICI: {} - FacilityDataCount: {}", ici, facilityData);
		return facility != null ? facility : 0;
	}

	public Map<String,Integer> getZipCodeData(String officeCode) {
		String sql = getQueryWithSchemaName(GET_ZIP_CODE_DATA);
		Object[] params = {firstDay(), lastDay(), officeCode};
		Map<String,Integer> zipMap = new HashMap<>();
		jdbcTemplate.query(sql, rs -> {
			while (rs.next()) zipMap.put(rs.getString(2), rs.getInt(1));
			return null;
		}, params);
		return zipMap;
	}

	public Map<String,Integer> getSateWideZipData() {
		String sql = getQueryWithSchemaName(GET_STAEWIDE_ZIP_DATA);
		Object[] params = {firstDay(), lastDay()};
		Map<String,Integer> zipMap = new HashMap<>();
		jdbcTemplate.query(sql, rs -> {
			while (rs.next()) zipMap.put(rs.getString(2), rs.getInt(1));
			return null;
		}, params);
		return zipMap;
	}

	public List<EligMemberTestResultSorRecord> getEligMemberTestResults(Integer ici, Integer upi, Integer version) {
		String sql = getQueryWithSchemaName(GET_ELIG_MBR_TSRSLT);
		Object[] params = {ici, upi, version, year(), month()};
		return jdbcTemplate.query(sql, new EligMemberTestResultMapper(), params);
	}

	public List<UnearnedIncomeSorRecord> getUnearnedIncomeDetails(Integer upi) {
		String sql = getQueryWithSchemaName(GET_UNIN_DETAILS);
		Object[] params = {upi, firstDay(), lastDay()};
		return jdbcTemplate.query(sql, new UnearnedIncomeRowMapper(), params);
	}

	public List<EligVersionCaseHistoryRecord> getEligVersionAndCaseHstry(Integer ici) {
		String sql = getQueryWithSchemaName(GET_ELIG_VERSION_AND_CASE_HSTRY);
		Object[] params = {ici, firstDay(), lastDay(), year(), month()};
		return jdbcTemplate.query(sql, new EligVersionCaseHistoryRowMapper(), params);
	}

	public List<EligVersionCaseHistoryRecord> getEligVersionAndCaseHstryAllCases(String iciList) {
		String sql = getQueryWithSchemaName(GET_ELIG_VERSION_AND_CASE_HSTRY_ALL_CASES.replace("##ICI##", iciList));
		Object[] params = {firstDay(), lastDay(), year(), month()};
		return jdbcTemplate.query(sql, new EligVersionCaseHistoryRowMapper(), params);
	}

	public List<CodeTableSorRecord> getIPVDISCodetable() {
		String sql = getQueryWithSchemaName(GET_IPVDISQL);
		return jdbcTemplate.query(sql, new CodeTableMapper());
	}

	public List<CodeTableSorRecord> getEthnicityCodetable() {
		String sql = getQueryWithSchemaName(GET_ETHNICITY);
		return jdbcTemplate.query(sql, new CodeTableMapper());
	}

	public List<CodeTableSorRecord> getUNINCodetable() {
		String sql = getQueryWithSchemaName(GET_UNEARNIN);
		return jdbcTemplate.query(sql, new CodeTableMapper());
	}

	public String getIncapDiablityIndicator(Integer upi) {
		try {
			String sql = getQueryWithSchemaName(GET_INCAP_DSBLTY_IND);
			Object[] params = {upi, firstDay(), lastDay()};
			return jdbcTemplate.query(sql, rs -> {
						if (rs.next() && FWConstants.CHAR_Y.equalsIgnoreCase(rs.getString(1))) return FWConstants.CHAR_Y;
						return FWConstants.CHAR_N;
					}, params
			);
		} catch (EmptyResultDataAccessException e) {
			return FWConstants.CHAR_N;
		}
	}

	public List<CaseActionSorRecord> getDnActionTimeStamp(String officeCode) {
		String sql = getQueryWithSchemaName(GET_DN_ACTION_TIMESTAMP);
		Object[] params = {officeCode, reportBegDtTs(firstDay()), reportEndDtTs(lastDay())};
		return jdbcTemplate.query(sql, new CaseActionRecordRowMapper(), params);
	}

	public List<GeneralAssistanceIncomeSorRecord> getGagaDetails(Integer upi) {
		String sql = getQueryWithSchemaName(GET_GAGA_DTLS);
		Object[] params = {upi, firstDay(), lastDay()};
		return jdbcTemplate.query(sql, new GeneralAssistanceIncomeRowMapper(), params);
	}

	public List<MemberRecord> getMemberHistory(Integer ici) {
		String sql = getQueryWithSchemaName(GET_MEMBER_HISTORY);
		Object[] params = {ici, firstDay(), lastDay()};
		return jdbcTemplate.query(sql, new MemberReordRowMapper(), params);
	}

	public List<MemberRecord> getMemberHistories(String iciList) {
		String sql = getQueryWithSchemaName(GET_MEMBER_HISTORIES.replace("##ICI##", iciList));
		Object[] params = {firstDay(), lastDay()};
		return jdbcTemplate.query(sql, new MemberReordRowMapper(), params);
	}

	public List<MemberRecord> fetchAllCaseMemberHistory(String iciList) {
		String sql = getQueryWithSchemaName(CASE_MEMBER_HISTORY.replace("##ICI##", iciList));
		sql = String.format(sql, firstDay(), lastDay());
		//Object[] params = {lastDay(), firstDay(), firstDay(), lastDay(), firstDay(), lastDay()};
		return jdbcTemplate.query(sql, new MemberReordRowMapper());
	}

	public List<BigDecimal> getStudentGrantInfo(Integer upi) {
		String sql = getQueryWithSchemaName(GET_STDNT_GRANT_INFO);
		Object[] params = {upi, firstDay(), lastDay()};
		return jdbcTemplate.queryForList(sql, BigDecimal.class, params);
	}

	public Timestamp getApActionTimeStamp(Integer ici, Date appDate) {
		String sql = getQueryWithSchemaName(GET_AP_ACTION_TIMESTAMP);
		Object[] params = {ici, reportBegDtTs(getFormattedSQLDate(appDate))};
        //log.info("ICI: {} - appDate: {} - ApActionTimeStamp: {}", ici,reportBegDtTs(getFormattedSQLDate(appDate)), apActnTs);
		return jdbcTemplate.query(sql, rs -> rs.next() ? rs.getTimestamp(1) : null, params);
	}

	public Timestamp getDnMaxActionTimeStamp(Integer ici, Timestamp appDate) {
		String sql = getQueryWithSchemaName(GET_DN_MAX_TIMESTAMP);
		Object[] params = {ici, appDate};
        //log.info("ICI: {} - appDate: {} - DnMaxActionTimeStamp: {}",ici, appDate, dnMaxActnTs);
		return jdbcTemplate.query(sql, rs -> rs.next() ? rs.getTimestamp(1) : null, params);
	}

	public BigDecimal getMedicalExpenseTotalAmount(Integer upi) {
		String sql = getQueryWithSchemaName(GET_MDCL_EXP_DTLS);
		Object[] params = {firstDay(), lastDay(), upi, firstDay(), lastDay()};
        //log.info("UPI: {} - MedicalExpenseTotalAmount: {}", upi, medExpTotAmt);
		return jdbcTemplate.query(sql, rs -> rs.next() ? rs.getBigDecimal("TOTAL_AMT") : null, params);
	}

	public String getRelationshipCodes(Integer ici, Integer fromUpi, Integer toUpi) {
		String sql = getQueryWithSchemaName(GET_RELATIONSHIP_CODES);
		Object[] params = {ici, firstDay(), lastDay(), fromUpi, toUpi};
        //log.info("ICI: {} - fromUpi - {} - toUpi - {} - RelationshipCodes: {}", ici, fromUpi, toUpi,  code);
		return jdbcTemplate.query(sql, rs -> rs.next() ? rs.getString("RELSH_CD") : null, params);
	}

	public String getPersonDisqlRsnCd(Integer ici, Integer upi) {
		String sql = getQueryWithSchemaName(GET_PERSON_DISQL_RSN_CD);
		Object[] params = {ici, upi, lastDay(), firstDay()};
        //log.info("UPI: {} - PersonDisqlRsnCd: {}", upi, personDisqlRsnCd);
		return jdbcTemplate.query(sql, rs -> rs.next() ? rs.getString("DISQL_RSN_CD") : null, params);
	}

	public List<UtilityExpenseSorRecord> getUtilityDetails(Integer upi) {
		String sql = getQueryWithSchemaName(GET_UTILITIES);
		Object[] params = {upi, firstDay(), lastDay()};
		return jdbcTemplate.query(sql, new UtilitiesRowMapper(), params);
	}

	public void deleteAllFoodStatsReportData() {
		String sql = getQueryWithNswdSchemaName(String.format(DELETE_FS_STATS_DATA, SystemInfoParam.getAsOfDate()));
		nswdJdbcTemplate.batchUpdate(sql);
	}
}
