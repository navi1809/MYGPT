package gov.nv.dwss.md.service;

import static gov.nv.dwss.fw.batch.constants.FWConstants.SQL_DB_SCHEMA_PATTERN;
import static gov.nv.dwss.md.constants.CarryForwardConstants.Carry_FW_BATCH;

import java.sql.Date;
import java.sql.Timestamp;
import java.text.ParseException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Objects;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.core.JsonProcessingException;

import gov.nv.dwss.domain.dao.sor.BenefitsCaseProgramHistorySorDao;
import gov.nv.dwss.domain.dao.sor.BenefitsCaseSorDao;
import gov.nv.dwss.domain.dao.sor.CaseLogSorDao;
import gov.nv.dwss.domain.dao.sor.EligBudgetUnitSorDao;
import gov.nv.dwss.domain.dao.sor.EligMemberTestResultSorDao;
import gov.nv.dwss.domain.dao.sor.EligVersionMemberSorDao;
import gov.nv.dwss.domain.dao.sor.EligVersionSorDao;
import gov.nv.dwss.domain.dao.sor.ExParteCaseDetailSorDao;
import gov.nv.dwss.domain.dao.sor.ExParteNetIncomeSorDao;
import gov.nv.dwss.domain.dao.sor.ExParteStepDetailSorDao;
import gov.nv.dwss.domain.dao.sor.MmisTriggerSorDao;
import gov.nv.dwss.domain.dao.sor.RedeterminationDetailSorDao;
import gov.nv.dwss.domain.record.SorRecord;
import gov.nv.dwss.domain.record.key.sor.BackgroundTransactionSorKey;
import gov.nv.dwss.domain.record.key.sor.BenefitsCaseSorKey;
import gov.nv.dwss.domain.record.key.sor.CaseLogSorKey;
import gov.nv.dwss.domain.record.key.sor.ExParteStepDetailSorKey;
import gov.nv.dwss.domain.record.key.sor.MmisTriggerSorKey;
import gov.nv.dwss.domain.record.key.sor.RedeterminationDetailSorKey;
import gov.nv.dwss.domain.record.sor.BackgroundTransactionSorRecord;
import gov.nv.dwss.domain.record.sor.BenefitsCaseSorRecord;
import gov.nv.dwss.domain.record.sor.CaseLogSorRecord;
import gov.nv.dwss.domain.record.sor.EligBudgetMemberSorRecord;
import gov.nv.dwss.domain.record.sor.EligBudgetUnitSorRecord;
import gov.nv.dwss.domain.record.sor.EligMemberTestResultSorRecord;
import gov.nv.dwss.domain.record.sor.EligVersionMemberSorRecord;
import gov.nv.dwss.domain.record.sor.EligVersionSorRecord;
import gov.nv.dwss.domain.record.sor.ExParteCaseDetailSorRecord;
import gov.nv.dwss.domain.record.sor.ExParteNetIncomeSorRecord;
import gov.nv.dwss.domain.record.sor.ExParteStepDetailSorRecord;
import gov.nv.dwss.domain.record.sor.MmisTriggerSorRecord;
import gov.nv.dwss.domain.record.sor.RedeterminationDetailSorRecord;
import gov.nv.dwss.fw.batch.constants.FWConstants;
import gov.nv.dwss.fw.batch.context.SystemInfoParam;
import gov.nv.dwss.fw.batch.enums.BatchExceptionType;
import gov.nv.dwss.fw.batch.exception.BatchBusinessException;
import gov.nv.dwss.fw.batch.exception.BatchException;
import gov.nv.dwss.fw.batch.exception.BatchSkipRecordException;
import gov.nv.dwss.fw.batch.service.BatchDataService;
import gov.nv.dwss.fw.batch.util.ExceptionUtil;
import gov.nv.dwss.fw.batch.util.ObjectUtils;
import gov.nv.dwss.md.constants.CarryForwardConstants;
import gov.nv.dwss.md.constants.QueryConstants;
import gov.nv.dwss.md.dto.EligVersionDto;
import gov.nv.dwss.md.model.AdocParameters;
import gov.nv.dwss.md.model.CarryForwardCaseRecord;
import gov.nv.dwss.md.model.NoticeParameters;
import gov.nv.dwss.md.sor.extended.dao.CarryForwardExtendedDao;
import gov.nv.dwss.md.util.DateUtil;

@Service
public class EPRcarryForwardDataService extends BatchDataService {

	private static final Logger LOG = LoggerFactory.getLogger(EPRcarryForwardDataService.class);

	@Autowired
	BenefitsCaseProgramHistorySorDao benefitsCaseProgramHistorySorDao;

	@Autowired
	BenefitsCaseSorDao benefitsCaseSorDao;

	@Autowired
	CarryForwardDataService carryForwardDataService;

	@Autowired
	CarryForwardExtendedDao carryForwardExtendedDao;

	@Autowired
	CaseLogSorDao caseLogSorDao;

	@Autowired
	EligBudgetUnitSorDao eligBudgetUnitSorDao;
	@Autowired
	EligMemberTestResultSorDao eligMemberTestResultSorDao;

	@Autowired
	EligVersionMemberSorDao eligVersionMemberSorDao;

	@Autowired
	EligVersionSorDao eligVersionSorDao;

	@Autowired
	ExParteCaseDetailSorDao exParteCaseDetailSorDao;

	@Autowired
	ExParteNetIncomeSorDao exParteNetIncomeSorDao;

	@Autowired
	ExParteStepDetailSorDao exParteStepDetailSordao;

	@Autowired
	MmisTriggerSorDao mmisTriggerSordao;

	@Autowired
	RedeterminationDetailSorDao redeterminationDetailSorDao;

	@Autowired
	private Environment env;

	public void checkCasestatus(final CarryForwardCaseRecord carryForwardCaseRecord, final EligVersionDto evDto) throws ParseException {
		final java.time.LocalDate nxtRRDDt = DateUtil.lastDayFromLocalDate(CarryForwardCaseRecord.getNxtRRDDt());
		final String newRRD = nxtRRDDt.plusMonths(CarryForwardConstants.ONE).toString();
		final Object[] args = new Object[] { newRRD, newRRD, carryForwardCaseRecord.getIci(), carryForwardCaseRecord.getProgram() };
		final List<SorRecord> sor = this.carryForwardExtendedDao.getPrgmCaseHstrySts(args, this.benefitsCaseProgramHistorySorDao.getSorMapper());
		if ((sor != null) && (sor.size() > 0)) {
			evDto.setExparteCaseTerminated(true);
			evDto.setSkipRecord(true);
		}
	}

	public void checkRedtComplTd(final CarryForwardCaseRecord carryForwardCaseRecord, final EligVersionDto evDto)
			throws ParseException, BatchSkipRecordException {
		final RedeterminationDetailSorKey key = new RedeterminationDetailSorKey();
		key.setIci(carryForwardCaseRecord.getIci());
		key.setProgramTypeCode(carryForwardCaseRecord.getProgram());
		key.setNextRedeterminationDate(Date.valueOf(CarryForwardCaseRecord.getNxtRRDDt()));

		final RedeterminationDetailSorRecord rec = (RedeterminationDetailSorRecord) this.redeterminationDetailSorDao.find(key);

		if ((rec != null) && !rec.getRedeterminationCompleteDate().equals(CarryForwardConstants.HIGH_DATE)) {
			evDto.setRrdCompleted(true);
			evDto.setSkipRecord(true);

		}
	}

	public CaseLogSorRecord createSuccessClog(final CarryForwardCaseRecord carryForwardCaseRecord) throws ParseException {
		final CaseLogSorRecord rec = this.populateClog(carryForwardCaseRecord);
		rec.setLogEntryDescription(CarryForwardConstants.LOG_ENTRY_DESC);
		final StringBuffer sf = new StringBuffer(CarryForwardConstants.ACTVY_DESC1);
		rec.setCaseLogDescription(
				sf.append(carryForwardCaseRecord.getProgram()).append(CarryForwardConstants.ACTVY_DESC2).append(CarryForwardCaseRecord.getNxtRRDDt())
						.append(CarryForwardConstants.ACTVY_DESC3).append(carryForwardCaseRecord.getNewNxrRRDDt()).toString());
		return rec;
	}

	public List<SorRecord> createTargetEligVersionMbrRec(final List<EligVersionMemberSorRecord> evmbr) {

		final List<SorRecord> recs = new ArrayList<>();
		evmbr.forEach(e -> {
			e.setBenefitMonth(CarryForwardCaseRecord.getTargetMonth());
			e.setBenefitYear(CarryForwardCaseRecord.getTargetYear());
			e.setVersionNumber(CarryForwardConstants.ONE);
		});
		recs.addAll(evmbr);

		return recs;
	}

	public List<SorRecord> getEPReligBudgtUnit(final CarryForwardCaseRecord caseRecord, final EligVersionSorRecord postedEligVersionSorRecord)
			throws BatchException {

		try {

			final List<SorRecord> records = this.getCurrEligBdgtUnit(caseRecord, postedEligVersionSorRecord);

			final List<EligBudgetUnitSorRecord> eligBudgetUnitSorRecords = new ArrayList<>();

			records.forEach(rec -> {
				if (rec instanceof EligBudgetUnitSorRecord) {
					final EligBudgetUnitSorRecord eligBudgetUnitSorRecord = (EligBudgetUnitSorRecord) rec;
					eligBudgetUnitSorRecord.getKey().setBenefitMonth(CarryForwardCaseRecord.getTargetMonth());
					eligBudgetUnitSorRecord.getKey().setBenefitYear(CarryForwardCaseRecord.getTargetYear());
					eligBudgetUnitSorRecord.getKey().setVersionNumber(CarryForwardConstants.ONE);
					eligBudgetUnitSorRecords.add((eligBudgetUnitSorRecord));
					/* EP */
					if ((caseRecord.autoRenewalStatusCode != null)
							&& caseRecord.autoRenewalStatusCode.equalsIgnoreCase(CarryForwardConstants.AUTO_RN_STS_EP)) {

						this.populateBudgetUnitForPartiaEpr(caseRecord, eligBudgetUnitSorRecord);
					}
				}
			});
			return this.carryForwardDataService.createTargetEligBudgtRec(eligBudgetUnitSorRecords);

		} catch (final EmptyResultDataAccessException | NoSuchElementException ex) {
			LOG.debug("NO Record in TanfErpDtls");
			return null;
		} catch (final Exception ex) {

			final String applicationMessage = "no record found in ELigBudgetUnit for ICI->  " + caseRecord.getIci();
			final String errorMessage = applicationMessage + " Exception: " + ex.getMessage();
			LOG.error(errorMessage);
			throw ex;
		}

	}

	public List<SorRecord> getEPReligBudgtUnitMbr(final CarryForwardCaseRecord caseRecord, final EligVersionSorRecord newEligVersionSorRecord) {

		try {
			final List<SorRecord> records = this.carryForwardDataService.getcurrEligBudgtUnitMbr(caseRecord, newEligVersionSorRecord);

			final List<EligBudgetMemberSorRecord> eligBudgetMemberSorRecords = new ArrayList<>();

			records.forEach(rec -> {
				boolean insertBudgetUnitMbr = true;
				if (rec instanceof EligBudgetMemberSorRecord) {
					/* EP */
					final EligBudgetMemberSorRecord neweligBudgetMemberSorRecord = (EligBudgetMemberSorRecord) rec;

					if ((caseRecord.autoRenewalStatusCode != null)
							&& caseRecord.autoRenewalStatusCode.equalsIgnoreCase(CarryForwardConstants.AUTO_RN_STS_EP)) {
						final SorRecord netIncmrecords = this.getNetIncomeDtls(caseRecord, neweligBudgetMemberSorRecord.getUpi());
						if (netIncmrecords != null) {
							insertBudgetUnitMbr = false;
						}

					}
					if (insertBudgetUnitMbr) {
						eligBudgetMemberSorRecords.add(neweligBudgetMemberSorRecord);
					}
				}
			});
			return this.carryForwardDataService.createTargetEligBudgtMbrRec(eligBudgetMemberSorRecords);
		} catch (final EmptyResultDataAccessException | NoSuchElementException ex) {
			LOG.debug("NO Record in EligBudgtMbr");
			return null;
		} catch (final Exception ex) {
			final String applicationMessage = "error while fetching found in EligBudgtMbr  for ICI->  " + caseRecord.getIci();
			LOG.error(applicationMessage);
			throw ex;

		}

	}

	public List<SorRecord> getEPReligMbrTestRst(final CarryForwardCaseRecord caseRecord, final EligVersionSorRecord newEligVersionSorRecord)
			throws BatchSkipRecordException {
		try {
			final Object[] args = new Object[] { caseRecord.getIci(), caseRecord.getProgram(), CarryForwardCaseRecord.getSourceMonth(),
					CarryForwardCaseRecord.getSourceYear(), newEligVersionSorRecord.getVersionNumber() };
			final List<SorRecord> records = this.carryForwardExtendedDao.getEligMbrTestRst(args, this.eligMemberTestResultSorDao.getSorMapper());
			final List<EligMemberTestResultSorRecord> eligMemberTestResultSorRecord = new ArrayList<>();

			records.forEach(rec -> {
				if (rec instanceof EligMemberTestResultSorRecord) {
					final EligMemberTestResultSorRecord embrTestRslt = (EligMemberTestResultSorRecord) rec;
					boolean insertmbertsrFlag = true;
					/* check for EP */
					if ((caseRecord.getAutoRenewalStatusCode() != null)
							&& caseRecord.getAutoRenewalStatusCode().equalsIgnoreCase(CarryForwardConstants.AUTO_RN_STS_EP)) {
						insertmbertsrFlag = this.populateMemberTestRstForPartialEPR(caseRecord, embrTestRslt);
					}
					if (insertmbertsrFlag) {
						embrTestRslt.getKey().setVersionNumber(CarryForwardConstants.ONE);
						eligMemberTestResultSorRecord.add(embrTestRslt);
					}
				}
			});
			return this.carryForwardDataService.createEligMemberTestResultRec(eligMemberTestResultSorRecord);
		} catch (final EmptyResultDataAccessException | NoSuchElementException ex) {
			LOG.debug("NO Record in EligMemberTestResult");
			return null;
		} catch (final Exception ex) {
			final String applicationMessage = "Error while fetching EligMbrTestRst for ICI->  " + caseRecord.getIci();
			final String errorMessage = applicationMessage + " Exception: " + ex.getMessage();
			LOG.error(errorMessage);
			throw ex;
		}

	}

	public List<SorRecord> getEPReligVrsnMbrCf(final CarryForwardCaseRecord carryForwardCaseRecord,
			final EligVersionSorRecord postedEligVersionSrcRecord, final EligVersionDto evDto) throws BatchSkipRecordException {
		 List<SorRecord> records=new ArrayList<>();;
		try {

			final Object[] args = new Object[] { carryForwardCaseRecord.getIci(), carryForwardCaseRecord.getProgram(),
					CarryForwardCaseRecord.getSourceMonth(), CarryForwardCaseRecord.getSourceYear(), postedEligVersionSrcRecord.getVersionNumber() };
			 records = this.carryForwardExtendedDao.getEligVrsnMbrCf(args, this.eligVersionMemberSorDao.getSorMapper());
			final List<EligVersionMemberSorRecord> eligVersionMemberSorRecords = new ArrayList<>();
			final List<SorRecord> demoMmisTriggerSorRecords = new ArrayList<>();
			records.forEach(rec -> {
				if (rec instanceof EligVersionMemberSorRecord) {
					final EligVersionMemberSorRecord newEligVersionMemberSorRecord = (EligVersionMemberSorRecord) rec;
					/* check for EP */
					if (carryForwardCaseRecord.getAutoRenewalStatusCode() != null) {
						if (!carryForwardCaseRecord.getAutoRenewalStatusCode().trim().isEmpty()) {
							if (carryForwardCaseRecord.getAutoRenewalStatusCode().equalsIgnoreCase(CarryForwardConstants.AUTO_RN_STS_EP)) {
								this.populateEligMemberForPartialExparte(carryForwardCaseRecord, newEligVersionMemberSorRecord, evDto);
							}
						}
					}
					if (newEligVersionMemberSorRecord.getEligCode() != FWConstants.NUM_NINE) {
						/* handle aidcode changes */
						this.aidCodeTransition(carryForwardCaseRecord, newEligVersionMemberSorRecord);
						eligVersionMemberSorRecords.add(newEligVersionMemberSorRecord);
						
					}
					demoMmisTriggerSorRecords.add(this.populateMMISDemo(carryForwardCaseRecord,newEligVersionMemberSorRecord.getUpi()));
				}
			});
			evDto.setDemoMmisTriggerSorRecords(demoMmisTriggerSorRecords);
			return this.createTargetEligVersionMbrRec(eligVersionMemberSorRecords);
		} catch (final EmptyResultDataAccessException | NoSuchElementException ex) {
			final String applicationMessage = "no record found in EligVrsnMbr for ICI->  " + carryForwardCaseRecord.getIci();
			LOG.debug(applicationMessage);
			throw ex;
		} catch (final Exception ex) {
			final String applicationMessage = "error while fetching EligVrsnMbr for ICI->  " + carryForwardCaseRecord.getIci();
			LOG.error(applicationMessage);
			throw ex;
		}

	}

	public List<Map<String, Object>> getIciRange(final int iciBegin, final int iciEnd) throws BatchBusinessException {
		String query = QueryConstants.EPR_CASE_DATA;
		query = query.replaceAll(SQL_DB_SCHEMA_PATTERN, this.schemaName);
		final StringBuilder str = new StringBuilder(query);

		try {
			return this.jdbcTemplate.queryForList(str.toString(), iciBegin, iciEnd, CarryForwardCaseRecord.getSourceMonthLastDay(),
					CarryForwardCaseRecord.getTargetMonth(), CarryForwardCaseRecord.getTargetYear());
		} catch (final Exception ex) {
			LOG.error("No record found getIciRange" + ex.getMessage());
			throw ex;
		}
	}

	public List<Map<String, Object>> getIciRangeForList(final String iciList) throws BatchBusinessException {
		String query = QueryConstants.EPR_CASE_DATA_ICI_LIST;
		query = StringUtils.replaceEach(query, new String[] { SQL_DB_SCHEMA_PATTERN, CarryForwardConstants.ICI_LIST },
				new String[] { this.schemaName, iciList });
		final StringBuilder str = new StringBuilder(query);

		try {
			return this.jdbcTemplate.queryForList(str.toString(), CarryForwardCaseRecord.getSourceMonthLastDay(),
					CarryForwardCaseRecord.getTargetMonth(), CarryForwardCaseRecord.getTargetYear());
		} catch (final Exception ex) {
			final String applicationMessage = "NO record found getIciRangeForList";
			LOG.error(applicationMessage);
			throw ex;
		}
	}

	public SorRecord getNetIncomeDtls(final CarryForwardCaseRecord carryForwardCaseRecord, final int upi) {
		final Object[] arg =
				new Object[] { carryForwardCaseRecord.getIci(), upi, CarryForwardCaseRecord.getNxtRRDDt(), carryForwardCaseRecord.getProgram() };
		SorRecord rec = null;
		try {
			rec = this.carryForwardExtendedDao.getNetIncomeDtls(arg, this.exParteNetIncomeSorDao.getSorMapper());
		} catch (EmptyResultDataAccessException ex) {
		}
		return rec;
	}
	public void insertADOC(final CarryForwardCaseRecord carryForwardCaseRecord, final int versionNmb) throws Exception {
		try {
			final AdocParameters json = this.populateNoticeDetails(carryForwardCaseRecord, versionNmb);
			final RestTemplate restTemplate = new RestTemplate();
			final HttpHeaders headers = new HttpHeaders();
			headers.add("Content-Type", "application/json");
			final HttpEntity<AdocParameters> requestEntity = new HttpEntity<>(json, headers);
			final ResponseEntity<String> resp =
					restTemplate.exchange(this.env.getProperty("notice.url"), HttpMethod.POST, requestEntity, String.class);
			LOG.debug(resp.getBody());
			LOG.debug(resp.getStatusCode().toString());
		} catch (final Exception e) {
			final String message = "Error While calling ADOC Module ,Cause: " + e.getMessage();
			LOG.error("Error While calling ADOC Module for ICI : {}, cause: {}", carryForwardCaseRecord.getIci(), e.getMessage());
			throw new Exception(message);
		}

	}

	public void populateEligMemberForPartialExparte(final CarryForwardCaseRecord carryForwardCaseRecord,
			final EligVersionMemberSorRecord newEligVersionMemberSorRecord, final EligVersionDto evDto) {

		final SorRecord netIncmrecords = this.getNetIncomeDtls(carryForwardCaseRecord, newEligVersionMemberSorRecord.getUpi());
		if (netIncmrecords != null) {
			final ExParteNetIncomeSorRecord eprNetIncme = (ExParteNetIncomeSorRecord) netIncmrecords;
			evDto.setExParteNetIncomeSorRecord(eprNetIncme);
			newEligVersionMemberSorRecord.setEligCode(FWConstants.NUM_NINE);
			carryForwardCaseRecord.setMemBrInEligCount(carryForwardCaseRecord.getMemBrInEligCount() + FWConstants.ONE);

		}
	}

	public EligVersionSorRecord populateEPREligVersionRecord(final EligVersionSorRecord newEligVersionSorRecord) throws ParseException {
		LOG.debug(" populating EPREligVersionRecord" + CarryForwardCaseRecord.getTargetMonth());
		newEligVersionSorRecord.setBenefitMonth(CarryForwardCaseRecord.getTargetMonth());
		newEligVersionSorRecord.setBenefitYear(CarryForwardCaseRecord.getTargetYear());
		newEligVersionSorRecord.setPostedBy(CarryForwardConstants.EPR_Carry_FW_BATCH);
		newEligVersionSorRecord.setCarryForwardVersionNumber(newEligVersionSorRecord.getVersionNumber());
		newEligVersionSorRecord.setVersionNumber(CarryForwardConstants.ONE);
		final Date eprCFDt = Date.valueOf(CarryForwardCaseRecord.getPrdBgnDt());
		newEligVersionSorRecord.setPostedDate(eprCFDt);
		newEligVersionSorRecord.setEligibilityVersionComputedDate(eprCFDt);
		newEligVersionSorRecord.setScheduledPayDate(DateUtil.getDateFromString(CarryForwardCaseRecord.getTargetMonthFirstDay()));
		newEligVersionSorRecord.setCarryForwardBenefitMonth(CarryForwardCaseRecord.getSourceMonth());
		newEligVersionSorRecord.setCarryForwardBenefitYear(CarryForwardCaseRecord.getSourceYear());
		return newEligVersionSorRecord;
	}

	public MmisTriggerSorRecord populateMMISCase(final CarryForwardCaseRecord carryForwardCaseRecord) {
		final String date = SystemInfoParam.getAsOfDate();
		final Timestamp CURRENT_TM = ObjectUtils.toTimeStamp(date, carryForwardCaseRecord.getIci());
		final MmisTriggerSorRecord rec = new MmisTriggerSorRecord();
		final MmisTriggerSorKey key = new MmisTriggerSorKey();
		key.setActionTimestamp(CURRENT_TM);
		rec.setKey(key);
		rec.setIci(carryForwardCaseRecord.getIci());
		rec.setProgramCaseType(carryForwardCaseRecord.getProgram());
		rec.setBenefitMonth(CarryForwardCaseRecord.getTargetMonth());
		rec.setBenefitYear(CarryForwardCaseRecord.getTargetYear());
		rec.setCaseFlag(CarryForwardConstants.CHAR_Y);
		return rec;
	}
	
	public MmisTriggerSorRecord populateMMISDemo(final CarryForwardCaseRecord carryForwardCaseRecord, int upi ) {
		final String date = SystemInfoParam.getAsOfDate();
		final Timestamp CURRENT_TM = ObjectUtils.toTimeStamp(date, upi);
		final MmisTriggerSorRecord rec = new MmisTriggerSorRecord();
		final MmisTriggerSorKey key = new MmisTriggerSorKey();
		key.setActionTimestamp(CURRENT_TM);
		rec.setKey(key);
		rec.setIci(carryForwardCaseRecord.getIci());
		rec.setUpi(upi);
		rec.setDemoFlag(CarryForwardConstants.CHAR_Y);
		return rec;
	}

	public RedeterminationDetailSorRecord populateRrdDtls(final CarryForwardCaseRecord carryForwardCaseRecord) {
		final RedeterminationDetailSorRecord redeterminationDetailSorRecord = new RedeterminationDetailSorRecord();
		redeterminationDetailSorRecord.setIci(carryForwardCaseRecord.getIci());
		redeterminationDetailSorRecord.setProgramTypeCode(carryForwardCaseRecord.getProgram());
		redeterminationDetailSorRecord.setRedeterminationStartDate(CarryForwardConstants.HIGH_DATE);
		redeterminationDetailSorRecord.setRedeterminationCompleteDate(CarryForwardConstants.HIGH_DATE);
		redeterminationDetailSorRecord.setRedeterminationReceiptDate(CarryForwardConstants.HIGH_DATE);
		redeterminationDetailSorRecord.setTimelyRecertificationDate(CarryForwardConstants.HIGH_DATE);
		redeterminationDetailSorRecord.setRedeterminationType(CarryForwardConstants.CHAR_E);
		redeterminationDetailSorRecord.setRedeterminationCompleteFrequency(CarryForwardConstants.TWELVE);
		redeterminationDetailSorRecord.setShortenCertificationMonth(CarryForwardConstants.ZERO);
		redeterminationDetailSorRecord.setShortenCertificationMonth(CarryForwardConstants.ZERO);
		final LocalDate newNxtRRD = LocalDate.parse(CarryForwardCaseRecord.getNxtRRDDt()).plusYears(CarryForwardConstants.ONE);
		redeterminationDetailSorRecord.setNextRedeterminationDate(DateUtil.covertDateFromLocalDt(newNxtRRD));
		return redeterminationDetailSorRecord;
	}

	public List<ExParteCaseDetailSorRecord> readEprCaseDetails(final Map<String, Object> map) throws ParseException, BatchBusinessException {

		try {
			final Object[] args = new Object[] { CarryForwardCaseRecord.getSourceMonthLastDay(), map.get("minValue"), map.get("maxValue"),
					CarryForwardCaseRecord.getTargetMonth(), CarryForwardCaseRecord.getTargetYear() };

			final List<SorRecord> sor = this.carryForwardExtendedDao.getEprCaseData(args, this.exParteCaseDetailSorDao.getSorMapper());
			return this.getEPRCaseRecords(sor);
		} catch (final Exception ex) {
			final String applicationMessage = "Error when reading EPR records";
			final String errorMessage = applicationMessage + " Exception: " + ex.getMessage();
			throw ExceptionUtil.batchBusinessException(BatchExceptionType.SQL_EXCEPTION, errorMessage, null, null, Carry_FW_BATCH, ex);

		}
	}

	public void updateEprCaseDtl(int ici,String prgm,EligVersionDto ev) throws ParseException, BatchException {

		String status = FWConstants.EMPTY;
		String statusDesc= FWConstants.EMPTY;
		
		if (ev.isRrdCompleted()) {
			status = CarryForwardConstants.AUTO_RN_STS_I4;
			statusDesc = CarryForwardConstants.STEP_DESC_RRD_EXTND;
		} else {
			status = CarryForwardConstants.AUTO_RN_STS_I5;
			statusDesc = CarryForwardConstants.STEP_DESC_T_OR_D;
		}
		final Object[] args = new Object[] { status, CarryForwardConstants.Carry_FW_BATCH, SystemInfoParam.getAsOfDate(),
				ici,prgm, CarryForwardCaseRecord.getNxtRRDDt() };
		final int updateVal = this.carryForwardExtendedDao.updateEprCaseDtl(args);
		if (updateVal == CarryForwardConstants.ONE) {
			// T12C59P-ESD-U-P1
			this.updateEprStepDtls(ici,prgm, status, statusDesc);
			LOG.error(statusDesc);

		}
	}

	public void updateNextRRDEPR(final CarryForwardCaseRecord carryForwardCaseRecord) throws Exception {
		String status = FWConstants.BLANK;
		Object[] args = {};
		final String statusDesc = CarryForwardConstants.STEP_DESC_AR;

		if (carryForwardCaseRecord.getAutoRenewalStatusCode().equalsIgnoreCase(CarryForwardConstants.AUTO_RN_STS_E4)) {
			status = CarryForwardConstants.AUTO_RN_STS_AR;
			args = new Object[] { carryForwardCaseRecord.getNewNxrRRDDt(), status, CarryForwardConstants.Carry_FW_BATCH, this.loadSystemDate(),
					carryForwardCaseRecord.getIci(), carryForwardCaseRecord.getProgram(), CarryForwardCaseRecord.getNxtRRDDt() };
		} else {
			status = CarryForwardConstants.AUTO_RN_STS_AP;
			args = new Object[] { status, CarryForwardConstants.Carry_FW_BATCH, this.loadSystemDate(), carryForwardCaseRecord.getIci(),
					carryForwardCaseRecord.getProgram(), CarryForwardCaseRecord.getNxtRRDDt() };
		}

		final int updateVal = this.carryForwardExtendedDao.updateEprCaseDtl(args);
		if (updateVal == CarryForwardConstants.ONE) {
			// T12C59P-ESD-U-P1
			try {
				if (carryForwardCaseRecord.getAutoRenewalStatusCode().equalsIgnoreCase(CarryForwardConstants.AUTO_RN_STS_E4)) {
					this.updateEprStepDtls(carryForwardCaseRecord.getIci(),carryForwardCaseRecord.getProgram(), status, statusDesc);

				}
			} catch (final Exception ex) {

				LOG.error("Exception "+ex.getMessage());
				throw new Exception(ex.getMessage()) ;
			}
		}

	}

	public void updateRrdDtls(final CarryForwardCaseRecord rec) throws ParseException {

		final Date rrdCmplteDt = Date.valueOf(CarryForwardCaseRecord.getNxtRRDDt());
		final Object[] args = { rrdCmplteDt, rrdCmplteDt, rec.getIci(), rec.getProgram(), CarryForwardCaseRecord.getNxtRRDDt() };

		final int rrdSts = this.carryForwardExtendedDao.updateRRD(args);
		if (rrdSts == CarryForwardConstants.ONE) {
			CarryForwardCaseRecord.setRrdUpdated(true);
		}
	}

	private void aidCodeTransition(final CarryForwardCaseRecord carryForwardCaseRecord,
			final EligVersionMemberSorRecord newEligVersionMemberSorRecord) {
		try {
			final SorRecord netIncmrecords = this.getRevisedIncomeDtls(carryForwardCaseRecord, newEligVersionMemberSorRecord.getUpi());

			if (netIncmrecords != null) {
				final ExParteNetIncomeSorRecord eprNetIncme = (ExParteNetIncomeSorRecord) netIncmrecords;
				final String revAidCd = eprNetIncme.getRevAidCd();
				if (!revAidCd.isEmpty()) {
					if (revAidCd.trim().length() > 0) {
						newEligVersionMemberSorRecord.setAidCode(revAidCd);
					}
					this.aidCodeTrickle(newEligVersionMemberSorRecord, carryForwardCaseRecord);
				}

			}
		} catch (final EmptyResultDataAccessException | NoSuchElementException ex) {

		}
	}

	private void aidCodeTrickle(final EligVersionMemberSorRecord newEligVersionMemberSorRecord, final CarryForwardCaseRecord rec) {

		switch (newEligVersionMemberSorRecord.getEligCode()) {
		case FWConstants.CHAR_B:
		case FWConstants.NUM_ONE:
			rec.setAidCodeLevelTemp(1);
			break;
		case FWConstants.CHAR_A:
		case "5":
			final String aidCd = newEligVersionMemberSorRecord.getAidCode();
			if (aidCd.substring(aidCd.length() - 1).equals("5")) {
				rec.setAidCodeLevelTemp(8);
			} else {
				this.checkEligCode(newEligVersionMemberSorRecord.getAidCode(), rec);
			}
			break;
		case FWConstants.CHAR_P:
			rec.setAidCodeLevelTemp(7);
			break;

		}
		if(Double.compare(rec.getAidCodeLevelTemp(), 99.9)==0)
		{
			if (newEligVersionMemberSorRecord.getEligCode().equals(FWConstants.CHAR_E))
			{
				rec.setAidCodeLevelTemp(9);
			}
			
			if (newEligVersionMemberSorRecord.getAidCode().equals("NC"))
			{
				rec.setAidCodeLevelTemp(9);
			}
			
			if (newEligVersionMemberSorRecord.getAidCode().length()>2 && (newEligVersionMemberSorRecord.getAidCode().charAt(2)=='5'))
			{
				rec.setAidCodeLevelTemp(8);
			}
		}
		if (rec.getAidCodeLevelTemp() < rec.getAidCodeLevel()) {
			rec.setAidCodeLevel(rec.getAidCodeLevelTemp());
			rec.setCaseLvlAidCd(newEligVersionMemberSorRecord.getAidCode());
			rec.setCaseLvlEligCd(newEligVersionMemberSorRecord.getEligCode());
		}
	}
	
	private void checkEligCode(final String aidCode, final CarryForwardCaseRecord rec) {
		switch (aidCode.trim()) {
		case "TR":
			rec.setAidCodeLevelTemp(2);
			break;
		case "AM":
		case "AM1":
			rec.setAidCodeLevelTemp(3);
			break;
		case "PM":
			rec.setAidCodeLevelTemp(4);
			break;
		case "CH":
			rec.setAidCodeLevelTemp(5);
			break;
		case "CH1":
			rec.setAidCodeLevelTemp(5.5);
			break;
		case "SN":
			rec.setAidCodeLevelTemp(6);
			break;
		case "CA":
			rec.setAidCodeLevelTemp(6.5);
			break;
		
		}

	}

	private List<SorRecord> getCurrEligBdgtUnit(final CarryForwardCaseRecord caseRecord, final EligVersionSorRecord postedEligVersionSorRecord) {
		final Object[] args = new Object[] { caseRecord.getIci(), caseRecord.getProgram(), CarryForwardCaseRecord.getSourceMonth(),
				CarryForwardCaseRecord.getSourceYear(), postedEligVersionSorRecord.getVersionNumber() };

		final List<SorRecord> records = this.carryForwardExtendedDao.getEglBdgtUnitSorRecords(args, this.eligBudgetUnitSorDao.getSorMapper());
		return records;
	}

	private List<ExParteCaseDetailSorRecord> getEPRCaseRecords(final List<SorRecord> sor) {

		final List<ExParteCaseDetailSorRecord> exParteCaseDetailSorRecords = new ArrayList<>();
		sor.stream().filter(Objects::nonNull).forEach(rec -> {
			exParteCaseDetailSorRecords.add((ExParteCaseDetailSorRecord) rec);
		});
		return exParteCaseDetailSorRecords;

	}

	private SorRecord getRevisedIncomeDtls(final CarryForwardCaseRecord caseRecord, final int upi) {

		final Object[] arg = new Object[] { caseRecord.getIci(), upi, CarryForwardCaseRecord.getNxtRRDDt(), caseRecord.getProgram() };

		final SorRecord netIncmrecords = this.carryForwardExtendedDao.getRevisedIncomeDtls(arg, this.exParteNetIncomeSorDao.getSorMapper());

		return netIncmrecords;
	}

	private void populateBudgetUnitForPartiaEpr(final CarryForwardCaseRecord caseRecord, final EligBudgetUnitSorRecord eligBudgetUnitSorRecord) {
		final SorRecord netIncmrecords = this.getRevisedIncomeDtls(caseRecord, eligBudgetUnitSorRecord.getBudgetUpi());
		if (netIncmrecords != null) {

			final ExParteNetIncomeSorRecord eprNetIncme = (ExParteNetIncomeSorRecord) netIncmrecords;

			if (eligBudgetUnitSorRecord.getBudgetUnitAidCode() != CarryForwardConstants.CA) {
				final String revCd = eprNetIncme.getRevAidCd();
				if (revCd != null) {
					if (!revCd.trim().isEmpty()) {
						eligBudgetUnitSorRecord.setNetIncomeLimitAmount(eprNetIncme.getRevNetIncome());
						eligBudgetUnitSorRecord.setBudgetUnitAidCode(eprNetIncme.getRevAidCd());
					}
				}
			}
		}
	}

	private CaseLogSorRecord populateClog(final CarryForwardCaseRecord carryForwardCaseRecord) throws ParseException {
		final CaseLogSorKey key = new CaseLogSorKey();
		key.setIci(carryForwardCaseRecord.getIci());
		key.setActivityDate(DateUtil.getDateFromString(SystemInfoParam.getAsOfDate()));
		key.setLogCreatedTime(Timestamp.from(Instant.now()));
		final CaseLogSorRecord rec = new CaseLogSorRecord();
		rec.setKey(key);
		rec.setProgramCaseType(carryForwardCaseRecord.getProgram());
		rec.setWorkerId(CarryForwardConstants.Carry_FW_BATCH);
		rec.setLogEntryType(CarryForwardConstants.CHAR_S);
		return rec;
	}

	private boolean populateMemberTestRstForPartialEPR(final CarryForwardCaseRecord caseRecord, final EligMemberTestResultSorRecord embrTestRslt) {
		final SorRecord netIncmrecords = this.getNetIncomeDtls(caseRecord, embrTestRslt.getUpi());
		if (netIncmrecords != null) {

			embrTestRslt.setMonth24TestResultCode(FWConstants.CHAR_F);
			embrTestRslt.setMemberResultCode(FWConstants.CHAR_F);
			if (embrTestRslt.getChildAgeTestResultCode().equalsIgnoreCase(FWConstants.CHAR_P)) {
				caseRecord.setChildInEligCount(caseRecord.getChildInEligCount() + FWConstants.ONE);

			}
			return false;
		}
		return true;
	}

	private AdocParameters populateNoticeDetails(final CarryForwardCaseRecord carryForwardCaseRecord, final int versionNmb)
			throws JsonProcessingException {
		final AdocParameters adocParameters = new AdocParameters();
		final List<NoticeParameters> noticeParametersList = new ArrayList<>();
		final NoticeParameters noticeParameters = new NoticeParameters();
		final BenefitsCaseSorKey key = new BenefitsCaseSorKey();
		key.setIci(carryForwardCaseRecord.getIci());
		final BenefitsCaseSorRecord rec = (BenefitsCaseSorRecord) this.benefitsCaseSorDao.find(key);
		noticeParameters.setUpi(rec.getHohUpi());
		if (carryForwardCaseRecord.getProgram().equalsIgnoreCase(CarryForwardConstants.FMC)) {
			noticeParameters.setPoVariableCount(FWConstants.ZERO);
			noticeParameters.setCommentId(CarryForwardConstants.FMC_NOTICE);
			noticeParameters.setCommentType(CarryForwardConstants.END);
			noticeParametersList.add(noticeParameters);
		} else {
			noticeParameters.setPoVariableCount(FWConstants.ZERO);
			noticeParameters.setCommentId(CarryForwardConstants.MAABD_NOTICE);
			noticeParameters.setCommentType(CarryForwardConstants.END);
			noticeParametersList.add(noticeParameters);
		}
		adocParameters.setNoticeParameters(noticeParametersList);
		adocParameters.setProgramCaseType(carryForwardCaseRecord.getProgram());
		adocParameters.setIci(carryForwardCaseRecord.getIci());
		adocParameters.setBenefitMonth(CarryForwardCaseRecord.getTargetMonth());
		adocParameters.setBenefitYear(CarryForwardCaseRecord.getTargetYear());
		adocParameters.setVersionNumber(versionNmb);
		return adocParameters;
	}

	private void updateEprStepDtls(final int ici,final String program, final String status, final String statusDesc)
			throws ParseException, BatchException {
		final ExParteStepDetailSorKey key = new ExParteStepDetailSorKey();
		key.setIci(ici);
		key.setProgramCaseType(program);
		key.setStepSequenceNumber(CarryForwardConstants.FOURTEEN);
		key.setNextRedeterminationDate(Date.valueOf(CarryForwardCaseRecord.getNxtRRDDt()));
		final ExParteStepDetailSorRecord sor = (ExParteStepDetailSorRecord) this.exParteStepDetailSordao.find(key);
		sor.setKey(key);
		sor.setUpdateUser(CarryForwardConstants.Carry_FW_BATCH);
		final String date = SystemInfoParam.getAsOfDate();
		final Timestamp systemDate = Timestamp.valueOf(LocalDate.parse(date).atTime(LocalTime.now()));
		sor.setUpdateDate(systemDate);
		sor.setStepNumberCode(CarryForwardConstants.N);
		sor.setStepStatusCode(status);
		sor.setStepStatusDescription(statusDesc);
		this.exParteStepDetailSordao.update(sor);
	}

	public CaseLogSorRecord populateFailedClog(CarryForwardCaseRecord carryForwardCaseRecord,String desc) throws ParseException {
		final CaseLogSorRecord rec = this.populateClog(carryForwardCaseRecord);
		rec.setLogEntryDescription(CarryForwardConstants.F_LOG_ENTRY_DESC);
		final StringBuffer sf = new StringBuffer(CarryForwardConstants.F_CL_ACTVY_DESC1);
		rec.setCaseLogDescription(
				sf.append(desc).append(CarryForwardConstants.F_CL_ACTVY_DESC2).toString());
		return rec;
	}

}