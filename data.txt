package gov.nv.dwss.casemanagement;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.core.JobParameters;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import gov.nv.dwss.fw.batch.exception.BatchException;
import gov.nv.dwss.fw.batch.model.BatchFwJob;
import gov.nv.dwss.fw.batch.service.BatchDataService;
import gov.nv.dwss.fw.batch.service.JobParamsService;
import gov.nv.dwss.fw.batch.util.BatchDataTransformerUtil;

@Component
public class JobDetailsAndParams {

	static Logger Logger = LoggerFactory.getLogger(TestConfig.class);

	
//    @MockBean
    
//	@Autowired
	BatchDataService mockBatchService; // you can use mock/read if needed do this in here on testclass
    
    @Autowired
    JobParamsService jobParamsService; // just as helper...no db dependecny
    
    // autowired jsonBean for 
    
    /**
    @Autowired
    @Qualifier("cmJobDetails")
    Map<String, Object> cmJobDetails;
    
    @Autowired
    @Qualifier("globalJobDetails")
    Map<String,Object> globalJobDetails;
    
    @Autowired
    @Qualifier("cmJobParam")
    List<Map<String,Object>> cmJobParam;
    
    public void initMock() {
    	
    }
    @Test
    public void mockParams() throws BatchException {
    	when( mockBatchService.getJobDetail("FW-GLOBL-DLY")).thenReturn(globalJobDetails);
		when( mockBatchService.getJobDetail("NM-AGCHK-MLY")).thenReturn(cmJobDetails);
		when( mockBatchService.getJobParams(824l,141l)).thenReturn(cmJobParam);//"RW_ID":824 for JOB_CD":"NM-AGCHK-MLY" & "RW_ID":141 for JOB_CD":"FW-GLOBL-DLY"
		
		// OR YOU CAN DIRECLTY MOCK BatchFwJob
    }
    **/
    public BatchFwJob getJobDetail(String jobCode) throws BatchException {
        Map<String, Object> jobDetail = mockBatchService.getJobDetail(jobCode);// THIS WILL NOT RETURN DATA FROM DB BUT FROM MOCKED-POJO[AS BEAN]
     
        return jobDetail.isEmpty() ? null : BatchDataTransformerUtil.transformToBatchFW(jobDetail);
    }
    
    public JobParameters getJobParams(BatchFwJob globalJob, BatchFwJob job, List<String> cmdLineParams) throws BatchException {
        try {
            Map<String, Object> cmdLineParamsMap = cmdLineParams.stream()
                    .filter(arg -> !arg.contains("--jobName"))
                    .map(arg -> arg.split("="))
                    .collect(Collectors.toMap(param -> param[0], param -> param[1]));
            List<Map<String, Object>> jobParamsFromDb = mockBatchService.getJobParams(job.getRowid(), globalJob.getRowid()); //THIS WILL NOT RETURN DATA FROM DB BUT FROM MOCKED-POJO[AS BEAN]
            return jobParamsService.generateJobParamsFromDBAndArgs(job, jobParamsFromDb, cmdLineParamsMap);
        } catch (Exception ex) {
        	Logger.error("Exception occurred when getting job parameters");
            throw ex;
        }
    }
}
