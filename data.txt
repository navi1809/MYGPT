public class MockServiceUtil {

    // Generic mock method for when().thenAnswer() usage
    public static <T> void mockServiceCall(T service, String method, Object returnValue) throws Exception {
        when(service.getClass().getMethod(method, any()).invoke(service, any()))
            .thenReturn(returnValue);
    }

    // Generic mock method for data processing
    public static <T> void mockServiceProcessing(T service, String method, Answer<?> answer) throws Exception {
        when(service.getClass().getMethod(method, any()).invoke(service, any()))
            .thenAnswer(answer);
    }
}


@BeforeEach
public void mockWriterServices() throws Exception {
    setupBackgroundTransactionMocks();
    setupAlertServiceMocks();
    setupCaseManagementMocks();
}

private void setupBackgroundTransactionMocks() throws Exception {
    MockServiceUtil.mockServiceProcessing(backgroundTransactionSorDao, "insert", invocation -> {
        BackgroundTransactionSorRecord record = invocation.getArgument(0);
        String key = record.getIci() + "_" + record.getProgramTypeCode();

        // Update actual results
        Map<String, Object> caseData = actual.getOrDefault(key, defaultExpectedStructure());
        caseData.put("bgtran", record);
        actual.put(key, caseData);

        return 0; // Mocked return value
    });
}

private void setupAlertServiceMocks() throws Exception {
    MockServiceUtil.mockServiceProcessing(alertService, "createAlert", invocation -> {
        String program = invocation.getArgument(0);
        Set<Alert> alerts = invocation.getArgument(1);
        Alert alert = alerts.iterator().next();  // Assuming single alert for simplicity

        String key = alert.getIci() + "_" + program;

        // Update actual results
        Map<String, Object> caseData = actual.getOrDefault(key, defaultExpectedStructure());
        caseData.put("alert", alerts);
        actual.put(key, caseData);

        return 0; // Mocked return value
    });
}

private void setupCaseManagementMocks() throws Exception {
    MockServiceUtil.mockServiceCall(caseManagementACService, "updateTwnClndr", 0);
}


private Map<String, Object> defaultExpectedStructure() {
    return new HashMap<>(Map.of(
        "bgtran", null,
        "alert", new LinkedHashSet<>(),
        "clog", null,
        "memberSPlit", null
    ));
}
