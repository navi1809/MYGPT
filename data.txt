import java.nio.*;
import java.nio.charset.Charset;

public class EbcdicToShort {
    // Encode a 2-char string in EBCDIC (CP037) and reinterpret as signed 16-bit big-endian
    public static short ebcdicAsShort(String twoChars) {
        if (twoChars.length() != 2) {
            // match DB2 behavior you're seeing: "1" was likely padded to "1 "
            twoChars = (twoChars + "  ").substring(0, 2);
        }
        byte[] ebcdic = twoChars.getBytes(Charset.forName("Cp037")); // EBCDIC US/Canada
        return ByteBuffer.wrap(ebcdic).order(ByteOrder.BIG_ENDIAN).getShort();
    }

    // reverse: take that short and recover the 2 EBCDIC chars (useful for debugging)
    public static String shortAsEbcdicChars(short value) {
        ByteBuffer bb = ByteBuffer.allocate(2).order(ByteOrder.BIG_ENDIAN);
        bb.putShort(value);
        byte[] ebcdic = bb.array();
        return new String(ebcdic, Charset.forName("Cp037"));
    }

    public static void main(String[] args) {
        short v = ebcdicAsShort("1 ");       // yields -3776
        System.out.println(v);

        // Example: persist `v` as SMALLINT in DB using JDBC:
        // try (PreparedStatement ps = conn.prepareStatement("INSERT INTO t(col) VALUES (?)")) {
        //     ps.setShort(1, v);
        //     ps.executeUpdate();
        // }

        // sanity check round-trip:
        System.out.println(shortAsEbcdicChars(v)); // prints "1 "
    }
}
