package IVA_Batch;
import egl.core.*;
import CommonMigratedParts.*;
import DataTables.*;
//*** PROGRAM=AIN37A ****
// COMPONENT NAME: AIN37A
// ===============
// 
// DESCRIPTION:
// ============
// This module generates the monthly (first Friday of month)
// request data sent to ESD.  (An earlier description indicated
// that this was a quarterly program, but it isn't.)  Daily
// requests are sent by program AIN36A for both FAME and IV-D.
// This program identifies those SSNs for which requests are to
// be sent to ESD to get wage, UIB, employer, payor details.
// The information returned by ESD is used to verify the
// details provided by the case members, if there is any
// discrepancy then the member's data is updated using the
// information provided by the ESD.
// ---------------------------------------------------------
// Change log
// Date        Work Item  Description
// ----------  ---------  ----------------------------------
// 08/21/1998  WI14086    JBALDWIN- ESD GUIDE interface with
//                        NOMADS.
// 03/22/2004  WI15406    D.Bugli- Modify program to send
//                        alternate SSNs, along with the
//                        primary SSN for NCPs.
// 
// ***********************
Program AIN37A type basicProgram //VAGen Info - main batch program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes
  }

  // Data Declarations
  AIN37W AIN37W; // record
  BDATEREC BDATEREC; // record
  CEP01W CEP01W; // record
  GDW GDW; // record
  H2-2-CMH-PER H2-2-CMH-PER; // record
  H2-2-DCC-SPT H2-2-DCC-SPT; // record
  H2-2-IDC-PER H2-2-IDC-PER; // record
  H2-2-PER-RPD H2-2-PER-RPD; // record
  H2-ALTERNATE-SSN H2-ALTERNATE-SSN; // record
  H2-CASE-MEMBER-HST H2-CASE-MEMBER-HST; // record
  H2-IVD-CONTACTS H2-IVD-CONTACTS; // record
  H2-LCTE-ACTVY H2-LCTE-ACTVY; // record
  H2-PERSON H2-PERSON; // record
  P-DATE-REC1 P-DATE-REC1; // record
  SR-QAIN37A-JOB-FLE SR-QAIN37A-JOB-FLE; // record
  SR-QAIN37A-OPT-REC SR-QAIN37A-OPT-REC; // record
  VCOMMON VCOMMON; // record
  VCONTROL VCONTROL; // record
  VDBCOMMON VDBCOMMON; // record
  VDBCONTROL VDBCONTROL; // record
  VDTSREC VDTSREC; // record
  VMESSAGE VMESSAGE; // record
  VSTRREC7 VSTRREC7; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use VDB00T1 {deleteAfterUse = yes}; // table

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    AIN37P9-MAIN-PROC: AIN37P9-MAIN-PROC();
  end // end main
end // end AIN37A


// DISPLAY JOB LOG
Function AIN37P9-ADD-JFILE()
  /* ----------------------------------------------------------*/
  /* Process to display the number of records processed*/
  /* ----------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1;
  VDBCONTROL.UPROC-NM = "AIN37P9-ADD-JFILE";
  VDBCONTROL.UPROC-OBJ = "SR-QAIN37A-JOB-FLE";
  VDBCONTROL.UPROC-OPT = "ADD";
  try
    add SR-QAIN37A-JOB-FLE ;
  end

  if (SR-QAIN37A-JOB-FLE is ioError)

    AIN37W.WS-ERR-CD = sysVar.errorCode;
    VMESSAGE.UMSGINS[1] = AIN37W.WS-ERR-LAST-FOUR;
    VMESSAGE.UMSGINS[2] = "AIN37A";

    /* The following conditions are added to move the corresponding*/
    /* error message*/

    if (SR-QAIN37A-JOB-FLE is fileNotAvailable)
      VDBCONTROL.UEZESQRRM = "FILE IS NOT AVAILABLE";
    else
      if (SR-QAIN37A-JOB-FLE is fileNotFound)
        VDBCONTROL.UEZESQRRM = "FILE NOT FOUND";
      else
        if (SR-QAIN37A-JOB-FLE is invalidFormat)
          VDBCONTROL.UEZESQRRM = "FILE FORMAT MISMATCH";
        end
      end
    end

    WCM00P2-TO-CEP01A();
  end
end // end AIN37P9-ADD-JFILE


// INSERT INTO TWNIVD-CONTACTS
Function AIN37P9-ADD-PRC()
  /* --------------------------------------------------------*/
  /* Process to insert a record into TWNIVD_CONTACTS*/
  /* --------------------------------------------------------*/

  VDBCOMMON.USQLREC = "H2-IVD-CONTACTS";
  VDBCONTROL.UPROC-NM = "AIN37P9-ADD-PROC";
  VDBCONTROL.UPROC-OBJ = "H2-IVD-CONTACTS";
  VDBCONTROL.UPROC-OPT = "ADD";
  call "DATEAPP" (GDW, VDBCONTROL, VMESSAGE) {isNoRefresh = yes};

  AIN37W.WS-PROCESS-TS = GDW.TS;
  AIN37W.WS-PROCESS-TS-DT = AIN37W.WS-PROCESS-DATE;
  H2-IVD-CONTACTS.CRTD-TS = AIN37W.WS-PROCESS-TS;
  try
    add H2-IVD-CONTACTS
      with #sql{
        insert into TWNIVD_CONTACTS
        (UPI,
            CASE_SUFX,
            CRTD_TS,
            CASE_FUNC_AREA,
            CNTCT_TYPE,
            CNTCT_SRC,
            CASE_SPCFC_IND,
            WRKR_ID,
            CNTCT_TXT)
        values (:UPI,
             :CASE-SUFX,
             :CRTD-TS,
             :CASE-FUNC-AREA,
             :CNTCT-TYPE,
             :CNTCT-SRC,
             :CASE-SPCFC-IND,
             :WRKR-ID,
             :CNTCT-TXT)
      } ;
  end

  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end
end // end AIN37P9-ADD-PRC


// ADD A RECORD TO OUTPUT FILE
Function AIN37P9-ADD-PROC()
  /* Process to add a record into the output file*/

  VGVar.handleHardIOErrors = 1;
  VDBCONTROL.UPROC-NM = "AIN37P9-ADD-PROC";
  VDBCONTROL.UPROC-OBJ = "SR-QAIN37A-OPT-REC";
  VDBCONTROL.UPROC-OPT = "ADD";
  try
    add SR-QAIN37A-OPT-REC ;
  end

  if (SR-QAIN37A-OPT-REC is ioError)

    AIN37W.WS-ERR-CD = sysVar.errorCode;
    VMESSAGE.UMSGINS[1] = AIN37W.WS-ERR-LAST-FOUR;
    VMESSAGE.UMSGINS[2] = "AIN37A";

    /* The following conditions are added to move the corresponding*/
    /* error message*/

    if (SR-QAIN37A-OPT-REC is fileNotAvailable)
      VDBCONTROL.UEZESQRRM = "FILE IS NOT AVAILABLE";
    else
      if (SR-QAIN37A-OPT-REC is fileNotFound)
        VDBCONTROL.UEZESQRRM = "FILE NOT FOUND";
      else
        if (SR-QAIN37A-OPT-REC is invalidFormat)
          VDBCONTROL.UEZESQRRM = "FILE FORMAT MISMATCH";
        end
      end
    end

    WCM00P2-TO-CEP01A();

  end
  /*  */
end // end AIN37P9-ADD-PROC


// BUILD DATA FOR TWNIVD_CONTACTS
Function AIN37P9-CT-IVD-CTS()
  /* ---------------------------------------------------------------*/
  /* This process is to build an entry in TWNIVD_CONTACTS, one for*/
  /* each NCP SSN sent, either primary or alternate.*/
  /* ---------------------------------------------------------------*/
  /* Change log*/
  /* Date        Work Item  Description*/
  /* ----------  ---------  ----------------------------------------*/
  /* 04/08/2004  WI15406    D.Bugli- Add alternate/primary SSN text*/
  /* to the contact entry, and use compression*/
  /* logic (WST60A).*/
  /* ---------------------------------------------------------------*/
  /*  */
  set H2-IVD-CONTACTS empty;

  /* Build the row for insertion:*/
  H2-IVD-CONTACTS.UPI = H2-2-IDC-PER.UPI;
  H2-IVD-CONTACTS.CNTCT-TYPE = "I";
  H2-IVD-CONTACTS.CASE-SPCFC-IND = "N";
  H2-IVD-CONTACTS.CNTCT-SRC = "ESD";
  H2-IVD-CONTACTS.CASE-SUFX = "A";
  H2-IVD-CONTACTS.CASE-FUNC-AREA = " ";
  AIN37W.WS-CONCAT = " ";
  AIN37W.WS-STRING = "THIS NCP HAS BEEN REPORTED TO ESD FOR MONTHLY VERIFICATION AS:";
  AIN37W.WS-C-SSN = AIN37W.WS-SSN;

  /* WI15406 - Indicate primary or alternate SSN ** start ***/
  if (AIN37W.WS-PRIALT-SW == "P")
    AIN37W.WS-C-SSN = AIN37W.WS-PRI-SSN;
    AIN37W.WS-C-SSN-TYPE = " (PRIMARY SSN)";
  else
    AIN37W.WS-C-SSN = AIN37W.WS-ALT-SSN;
    AIN37W.WS-C-SSN-TYPE = " (ALTERNATE SSN)";
  end
  /* WI15406 - Indicate primary or alternate SSN ** end ***/
  /*  */
  /* WI15406 - Compress out extra spaces ** start ***/
  VSTRREC7.UINSTRG = AIN37W.WS-CONCAT;
  VSTRREC7.USTRLENGTH = 100;
  call "WST60A" (VSTRREC7);
  H2-IVD-CONTACTS.CNTCT-TXT = VSTRREC7.UOUTSTRG;
  /* WI15406 - Compress out extra spaces ** end ***/

  call "DATEAPP" (GDW, VDBCONTROL, VMESSAGE) {isNoRefresh = yes};

  AIN37W.WS-PROCESS-TS = GDW.TS;
  AIN37W.WS-PROCESS-TS-DT = AIN37W.WS-PROCESS-DATE;
  H2-IVD-CONTACTS.CRTD-TS = AIN37W.WS-PROCESS-TS;
  /*  */
  /* Retrieving worker ID*/
  H2-2-DCC-SPT.UPI = H2-2-IDC-PER.UPI;
  AIN37P9-S05-PROC();
  if (VDBCONTROL.URC >= 104)
    WCM00P2-TO-CEP01A();
  end
  H2-IVD-CONTACTS.WRKR-ID = H2-2-DCC-SPT.NOMADS-USRID;
  /*  */
  /* Insert record into TWNIVD_CONTACTS*/
  WDB00PI();
  /* Set the values for access type and application name*/
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN37A";
  AIN37P9-ADD-PRC(); /* AIN37A_I01 ;*/
  /* Set the NRF and DUP flags*/
  VDBCOMMON.UNRF = "N";
  VDBCOMMON.UDUP = "Y";
  /* Perform DB error processing*/
  WDB00PE-SQLERR();
  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN37P9-CT-IVD-CTS


// INSERT INTO TWNLCTE_ACTVY
Function AIN37P9-CT-TB-PRC()
  /* Insert TWNLCTE_ACTVY record*/

  WDB00PI();

  /* Set the values for access type and application name*/

  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.UAPPLNAM = "AIN37A";

  VDBCOMMON.USQLREC = "H2-LCTE-ACTVY";
  VDBCONTROL.UPROC-NM = "AIN37P9-CT-TB-PRC";
  VDBCONTROL.UPROC-OBJ = "H2-LCTE-ACTVY";
  VDBCONTROL.UPROC-OPT = "ADD";
  try
    add H2-LCTE-ACTVY
      with #sql{
        insert into TWNLCTE_ACTVY
        (UPI,
             CASE_SUFX,
             LOC_SRC_CD,
             RQST_SQ_NMB,
             INFO_RQSTD_TS,
             FIPS_CD,
             FUTRE_ACT_DT,
             RPT_RQSTD_FROM,
             INFO_RCVD_DT,
             CSENET_ACTN_CD,
             RQSTD_RPT_TYPE,
             RQSTD_FROM_ST2,
             ACTN_RSN_CD,
             RQSTD_FROM_ST3,
             FNL_TYPE,
             RSPNS_DUE_DT,
             RQSTD_FROM_ST4,
             INFO_TYPE_SENT,
             MAIL_UNDLV_RSN_CD,
             INFO_TXT,
             SPLS_INTRF_TYPE,
             RQST_SENT_DT,
             CSENET_ACTN_RSN_CD,
             CSENET_FUNC_TYPE,
             RQST_TYPE,
             RQSTD_FROM_ST1,
             LCTE_DTL_TYPE,
             NPLS_FG,
             FRM_ID,
             NTCE_ID,
             EFF_DT,
             MANUAL_IND)
        values (:UPI,
             :CASE-SUFX,
             :LOC-SRC-CD,
             :RQST-SQ-NMB,
             :INFO-RQSTD-TS,
             :FIPS-CD,
             :FUTRE-ACT-DT,
             :RPT-RQSTD-FROM,
             :INFO-RCVD-DT,
             :CSENET-ACTN-CD,
             :RQSTD-RPT-TYPE,
             :RQSTD-FROM-ST2,
             :ACTN-RSN-CD,
             :RQSTD-FROM-ST3,
             :FNL-TYPE,
             :RSPNS-DUE-DT,
             :RQSTD-FROM-ST4,
             :INFO-TYPE-SENT,
             :MAIL-UNDLV-RSN-CD,
             :INFO-TXT,
             :SPLS-INTRF-TYPE,
             :RQST-SENT-DT,
             :CSENET-ACTN-RSN-CD,
             :CSENET-FUNC-TYPE,
             :RQST-TYPE,
             :RQSTD-FROM-ST1,
             :LCTE-DTL-TYPE,
             :NPLS-FG,
             :FRM-ID,
             :NTCE-ID,
             :EFF-DT,
             :MANUAL-IND)
      } ;
  end

  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end

  VDBCOMMON.UNRF = "N";
  VDBCOMMON.UDUP = "N";

  WDB00PE-SQLERR();

  /*  */
end // end AIN37P9-CT-TB-PRC


// FETCH FROM TWNPERSON
Function AIN37P9-FETH1-PROC()
  /* Fetch records from TWNPERSON & TWNRESP-PRSN-DBTR*/

  VDBCOMMON.USQLREC = "H2-2-PER-RPD      ";
  VDBCONTROL.UPROC-NM = "AIN37P9-FETH1-PROC";
  VDBCONTROL.UPROC-OBJ = "H2-2-PER-RPD      ";
  VDBCONTROL.UPROC-OPT = "SCAN";
  try
    get next H2-2-PER-RPD ;
  end

  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  /*  */
end // end AIN37P9-FETH1-PROC


// FETCH FROM NON_CUST_PARENT
Function AIN37P9-FETH3-PROC()
  /* ************************************************************/
  /* Fetch records from TWNNON_CUST_PARENT                    **/
  /* ************************************************************/
  /*  */
  VDBCOMMON.USQLREC = "H2-2-IDC-PER";
  VDBCONTROL.UPROC-NM = "AIN37P9-FETH3-PROC";
  VDBCONTROL.UPROC-OBJ = "H2-2-IDC-PER";
  VDBCONTROL.UPROC-OPT = "SCAN";
  try
    get next H2-2-IDC-PER ;
  end
  if (sysVar.sqlData.sqlcode == 0)
  /*  */
  /* Increment the counter for number of records written*/
  /*  */
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
end // end AIN37P9-FETH3-PROC


// Process for initialisation
Function AIN37P9-INIT-PROC()
  /* ********************************************************************/
  /* This process Initialises all the records used in the application **/
  /* and fetches the value of current date + 75 days into the         **/
  /* working storage variable ws-due-dt                               **/
  /* *******************************************************************/

  /* Set records empty*/

  set AIN37W empty;
  set SR-QAIN37A-OPT-REC empty;
  set SR-QAIN37A-JOB-FLE empty;
  set H2-LCTE-ACTVY empty;
  set H2-PERSON empty;

  /* WI15406 - Uncomment the following "empty" statement:*/
  set H2-ALTERNATE-SSN empty;

  set H2-2-IDC-PER empty;
  set H2-2-PER-RPD empty;

  VDBCOMMON.UAPPLNAM = "AIN37A";
  AIN37W.WS-DATE = " ";
  AIN37W.WS-PRGM-TYPE = "A";

  /* CALL DATEAPP GDW,VDBCONTROL,VMESSAGE (NOMAPS;*/
  /* MOVE GDW.DTL TO AIN37W.WS-DATE1;*/

  /* Read input parameter file containing date in 'mm-dd-ccyy' format.*/
  WCM00P3-FETCHBDTS(); /* PTR 11166*/

  /* The input date is entered use it.*/
  AIN37W.WS-PROCESS-DT = BDATEREC.BDATE-PROCESS-DATE;
  VDTSREC.UDATYY = AIN37W.WS-PROCESS-DT-CCYY;
  VDTSREC.UDATMM = AIN37W.WS-PROCESS-DT-MM;
  VDTSREC.UDATDD = AIN37W.WS-PROCESS-DT-DD;
  call "WDT10A" (VCONTROL, VDTSREC) {isNoRefresh = yes};
  if (VCONTROL.URC == 0)
    AIN37W.WS-PROCESS-CCYY = VDTSREC.UDATYY;
    AIN37W.WS-PROCESS-MM = VDTSREC.UDATMM;
    AIN37W.WS-PROCESS-DD = VDTSREC.UDATDD;
    AIN37W.WS-PROCESS-DASH1 = "-";
    AIN37W.WS-PROCESS-DASH2 = "-";
  else
    SR-QAIN37A-OPT-REC.AIN37A-OUTPUT-REC = "    INPUT DATE ENTERED IS INVALID, CORRECT INPUT AND RERUN ";
    AIN37P9-ADD-PROC();
    exit program;
  end
  /* Calculate a date less six months.  This date is used to determine if a*/
  /* person has been off case for less than six months, and if so then that*/
  /* person's SSN should be sent to ESD to gather ESD's more accurate data*/
  /* since there is a six month lag for employers to report actual wages.*/
  move WS-PROCESS-DT to WS-PROCESS-DT-TEST-N withV60Compat;
  WS-DASH-1 = "-";
  WS-DASH-2 = "-";
  if (WS-PROCESS-DT-MM-N > 6)
    WS-LESS-6M-DT-MM = WS-PROCESS-DT-MM-N - 6;
    move WS-PROCESS-DT-CCYY-N to WS-LESS-6M-DT-CCYY withV60Compat;
    WS-LESS-6M-DT-DD = "01";
  else
    WS-LESS-6M-DT-MM = WS-PROCESS-DT-MM-N + 6;
    WS-LESS-6M-DT-CCYY = WS-PROCESS-DT-CCYY-N - 1;
    WS-LESS-6M-DT-DD = "01";
  end
  /* Calculate a date less (7) months.  This date is used to determine*/
  /* if a person that has been off a case for less than six months, was*/
  /* active sometime during that time frame(+ 1 mo) if yes send SSN to ESD*/
  /* otherwise skip this SSN.*/
  move WS-PROCESS-DT to WS-PROCESS-DT-TEST-N withV60Compat;
  WS-DASH1 = "-";
  WS-DASH2 = "-";
  if (WS-PROCESS-DT-MM-N > 7)
    WS-LESS-7M-DT-MM = WS-PROCESS-DT-MM-N - 7;
    move WS-PROCESS-DT-CCYY-N to WS-LESS-7M-DT-CCYY withV60Compat;
    WS-LESS-7M-DT-DD = "01";
  else
    WS-LESS-7M-DT-MM = WS-PROCESS-DT-MM-N + 5;
    WS-LESS-7M-DT-CCYY = WS-PROCESS-DT-CCYY-N - 1;
    WS-LESS-7M-DT-DD = "01";
  end
  
  //WI 4259 - DAN J.  Calculate date - 16 years.
  move WS-PROCESS-DT to WS-PROCESS-DT-TEST-N withV60Compat;
  WS-16DASH1 = "-";
  WS-16DASH2 = "-";
  move WS-PROCESS-DT-MM-N to WS-LESS-16Y-DT-MM withV60Compat;
  move WS-PROCESS-DT-DD-N to WS-LESS-16Y-DT-DD withV60Compat;  
  WS-LESS-16Y-DT-CCYY = WS-PROCESS-DT-CCYY-N - 16;
  
  
  /* This program is run monthly or quarterly, not concerned about day.*/
end // end AIN37P9-INIT-PROC


// PROCESS TO GET IVD SSNS
Function AIN37P9-IV-D-RQST()
  /* *****************************************************************/
  /* Identify list of IVD SSNs for which request is to be sent to ESD*/
  /* *****************************************************************/

  /* Select all the new cases and worker initiated requests requiring*/
  /* to be sent out on this interface*/
  VDBCOMMON.UAPPLNAM = "AIN37A";

  /* Declare cursor on TWNIVD_CASE AND TWNPERSON*/
  AIN37P9-READ3-PROC(); /* (AIN37A-S03)Open the cursor*/

  if (VDBCONTROL.URC == 0)
    AIN37P9-FETH3-PROC(); /* Read a row of the cursor*/
    AIN37W.WS-IVDURC1 = sysVar.sqlData.sqlcode;
    if (AIN37W.WS-IVDURC1 == 0)
      /* Set "first time" switches:*/
      AIN37W.WS-PREV-UPI1 = 0;
      AIN37W.WS-PREV-UPI2 = H2-2-IDC-PER.UPI;
      AIN37W.WS-USE-PRI = "N";
      AIN37W.WS-USE-ALT = "N";
      while (AIN37W.WS-IVDURC1 == 0)
        if (H2-2-IDC-PER.UPI != AIN37W.WS-PREV-UPI2)
          AIN37P9-UPD-LCTE();
        end
        AIN37W.WS-PER-SSN = H2-2-IDC-PER.SSN;
        AIN37W.WS-PRI-SSN = H2-2-IDC-PER.SSN;
        AIN37W.WS-NCP-UPI = H2-2-IDC-PER.UPI;
        if (H2-2-IDC-PER.ESD-SENT-DT != AIN37W.WS-PROCESS-DATE
         && AIN37W.WS-NCP-UPI != AIN37W.WS-PREV-UPI1)
          /* Check for Primary SSN to send:*/
          AIN37W.WS-PRIALT-SW = "P";
          /* Pseudo ssns and merged SSNs should not be sent out to ESD*/
          /* Do not send records on cases with more than one suffix*/
          if ((WS-SSN-PART1 != "999" && 
          WS-SSN-PART1 != "   " && 
          WS-SSN-PART1 != "000"))
            AIN37W.WS-USE-PRI = "Y";
            /* Move the person details to the output record*/
            SR-QAIN37A-OPT-REC.AIN37A-SSN = H2-2-IDC-PER.SSN;
            /* Add Primary SSN to the output dataset*/
            AIN37P9-ADD-PROC();
            /* Put an entry in IVD-contacts*/
            AIN37P9-CT-IVD-CTS();
            AIN37W.WS-NO-OF-IVD-RECS = AIN37W.WS-NO-OF-IVD-RECS + 1;
          end

          /* Check for Alternate SSN(s) to send:*/
          AIN37P9-SEND-X-SSN();
        end /* End ck for ESD-SENT-DT, prev UPI*/
        /* Set hold and do next read:*/
        AIN37W.WS-PREV-UPI1 = H2-2-IDC-PER.UPI; /* (set hold)*/
        AIN37W.WS-PREV-UPI2 = H2-2-IDC-PER.UPI; /* (set hold)*/
        AIN37P9-FETH3-PROC(); /* Read "next" row*/
        AIN37W.WS-IVDURC1 = sysVar.sqlData.sqlcode;
      end /* End of While loop*/
      /* Check if locate update needed for last NCP processed:*/
      AIN37P9-UPD-LCTE();
    end
  else
    if (VDBCONTROL.URC == 100) /* (no records to send for IV-D)*/
      /* Display "no IV-D" message*/
      SR-QAIN37A-JOB-FLE.VAGen_STRING = "NO IV-D RECORDS WERE PROCESSED.";
      AIN37P9-ADD-JFILE();
    else
      if (VDBCONTROL.URC > 104)
        WCM00P2-TO-CEP01A();
      end
    end
  end
  /*  */
end // end AIN37P9-IV-D-RQST


// MAIN-PROCESS
Function AIN37P9-MAIN-PROC()
  /* ---------------------------------------------------------------*/
  /* This Process Serves as the main process for the application*/
  /* ---------------------------------------------------------------*/
  /* Change log*/
  /* Date        Work Item  Description*/
  /* ----------  ---------  ----------------------------------------*/
  /* 05/14/2004  WI15406    D.Bugli- Perform the IV-D process before*/
  /* the FAME processes.  This will allow*/
  /* alternate SSNs to be sent if the NCP is*/
  /* also a FAME case member, etc.*/
  /* ---------------------------------------------------------------*/
  /*  */
  /* Perform Process for Initialisation*/
  AIN37P9-INIT-PROC();

  /* WI15406 - Move IV-D processing ahead of FAME ** (start) ***/
  /* Perform the Process to Identify the list of IVD SSN's which are*/
  /* currently open to be sent to ESD.*/
  AIN37P9-IV-D-RQST();
  /* WI15406 - Move IV-D processing ahead of FAME ** (end) ***/

  /* Perform the Process to Identify the IVA SSNs which are currently*/
  /* open to be sent to ESD to get the wage,employer and payor details*/
  AIN37P9-SEND-P-SSN();

  /* Perform the Process to Identify the IVA SSNs which are currently*/
  /* closed less than six months to detect overpayments.*/
  
  //WI 4259 - Dan J.  Combined query with AINP9-SEND-P-SSN above.
  //AIN37P9-SEND-C-SSN();

  /* Perform the Process to Identify the I&R SSNs which are currently*/
  /* open to be sent to ESD to get the wage, employer and payor details.*/
  AIN37P9-SEND-A-SSN();
  /*  */
  /*  */
  /* ---------------------------------------------------------------*/
  /* F I N A L    D I S P L A Y*/
  /* The number of records sent is displayed in the job file*/
  /* ---------------------------------------------------------------*/
  SR-QAIN37A-JOB-FLE.VAGen_STRING = "NUMBER OF IVA-RECORDS-PROCESSED..";
  SR-QAIN37A-JOB-FLE.NO-OF-RECS = AIN37W.WS-NO-OF-IVA-RECS;
  AIN37P9-ADD-JFILE(); /* IVA active persons*/
  /*  */
  SR-QAIN37A-JOB-FLE.VAGen_STRING = "NUMBER OF I&R-RECORDS-PROCESSED..";
  SR-QAIN37A-JOB-FLE.NO-OF-RECS = AIN37W.WS-NO-OF-I-R-RECS;
  AIN37P9-ADD-JFILE(); /* I&R Designated debtors*/
  /*  */
  /* WI15406 - Revise display of IVD counts ** start ***/
  SR-QAIN37A-JOB-FLE.VAGen_STRING = "NUMBER OF IVD PRIMARY SSNS SENT  ";
  SR-QAIN37A-JOB-FLE.NO-OF-RECS = AIN37W.WS-NO-OF-IVD-RECS;
  AIN37P9-ADD-JFILE(); /* IVD active persons (primary SSN)*/
  /*  */
  SR-QAIN37A-JOB-FLE.VAGen_STRING = "NUMBER OF IVD ALTERNATE SSNS SENT";
  SR-QAIN37A-JOB-FLE.NO-OF-RECS = AIN37W.WS-NO-OF-ALT-RECS;
  AIN37P9-ADD-JFILE(); /* IVD active persons (alternate SSN)*/
  /*  */
  SR-QAIN37A-JOB-FLE.VAGen_STRING = "ALT. SSN SAME A PRIMARY, NOT SENT";
  SR-QAIN37A-JOB-FLE.NO-OF-RECS = AIN37W.WS-NO-OF-SAME-RECS;
  AIN37P9-ADD-JFILE(); /* Where primary & alt SSN are same*/
  /* /* for the UPI (duplicate not sent)*/
  /* WI15406 - Revise display of IVD counts ** end ***/
  /*  */
  //WI 4259 - Dan J.  Eliminated.
  //SR-QAIN37A-JOB-FLE.VAGen_STRING = "NUMBER OF IVA-CLOSED RECORDS.....";
  //SR-QAIN37A-JOB-FLE.NO-OF-RECS = AIN37W.WS-NO-OF-IVA-REC;
  //AIN37P9-ADD-JFILE(); /* IVA persons off case less than 6*/
  /* /* months*/
  /*  */
end // end AIN37P9-MAIN-PROC


// DECLARE CURSOR ON TWNPERSON
Function AIN37P9-READ1-PROC()
  /* *************************************************************/
  /* Declare a cursor for TWNCASE_MEMBER_HST & TWNPERSON table;*/
  /* *************************************************************/
  
  /*  WI 4259 Dan J.  Modified query to include only currently eligible members for Med and TANF, 
      and only members eligible in the last 6 months for SNAP.  Also, excluded any children under 
      16 years of age.  */
      
  WDB00PI();

  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.USQLREC = "H2-2-CMH-PER";
  VDBCONTROL.UPROC-NM = "AIN37P9-READ1-PROC";
  VDBCONTROL.UPROC-OBJ = "H2-2-CMH-PER";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  try
    open AIN37P9-READ1-PROC_RSI01
      with #sql{
        select DISTINCT T2.SSN, T2.UPI
        from TWNCASE_MEMBER_HST T1,
             TWNPERSON T2
        WHERE T1.UPI = T2.UPI
          AND T2.SSN BETWEEN '001000000' AND '998999999'
          AND T1.PRD_END_DT >= :AIN37W.WS-LESS-6M-DT  
          AND T2.DOB < :AIN37W.WS-LESS-16Y-DT          
          AND T1.FS_ASST_IND = 'Y'   
          AND T1.FS_ELIG_CD NOT IN('3', '9' , ' ' )          
        UNION
        select DISTINCT T2.SSN, T2.UPI
        from TWNCASE_MEMBER_HST T1,
             TWNPERSON T2
        WHERE T1.UPI = T2.UPI
          AND T2.SSN BETWEEN '001000000' AND '998999999'
          AND T1.PRD_END_DT >= :AIN37W.WS-PROCESS-DATE  
          AND T2.DOB < :AIN37W.WS-LESS-16Y-DT          
          AND ((T1.AFDC_ASST_IND = 'Y' AND T1.AFDC_ELIG_CD NOT IN('3', '9' , ' ' ))
          OR   (T1.TN_ASST_IND = 'Y'   AND T1.TN_ELIG_CD NOT IN('3', '9' , ' ' ))
          OR   (T1.TP_ASST_IND = 'Y'   AND T1.TP_ELIG_CD NOT IN('3', '9' , ' ' ))
          OR   (T1.TL_ASST_IND = 'Y'   AND T1.TL_ELIG_CD NOT IN('3', '9' , ' ' ))
          OR   (T1.TC_ASST_IND = 'Y'   AND T1.TC_ELIG_CD NOT IN('3', '9' , ' ' ))
          OR   (T1.SG_ASST_IND = 'Y'   AND T1.SG_ELIG_CD NOT IN('3', '9' , ' ' ))
          OR   (T1.MA_ASST_IND = 'Y'   AND T1.MA_ELIG_CD NOT IN('3', '9' , ' ' )))
        FOR FETCH ONLY
         --
         --** INSERT ORDER BY CLAUSE HERE **
      }      
      into SSN,
           UPI
      for H2-2-CMH-PER ;
  end

  VDBCOMMON.UNRF = "N";
  VDBCOMMON.UDUP = "N";

  WDB00PE-SQLERR();
  /*  */
end // end AIN37P9-READ1-PROC


// CURSOR FOR TWNCASE_MEMBER_HST
Function AIN37P9-READ2-PROC()
  /* **************************************************************/
  /* Process to declare cursor on TWNCASE_MEMBER_HST & TWNPERSON*/
  /* **************************************************************/
  WDB00PI();

  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.USQLREC = "H2-2-CMH-PER      ";
  VDBCONTROL.UPROC-NM = "AIN37P9-READ2-PROC";
  VDBCONTROL.UPROC-OBJ = "H2-2-CHM-PER      ";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  try
    open AIN37P9-READ2-PROC_RSI01
      with #sql{
        select DISTINCT T2.SSN, T1.UPI
        from TWNCASE_MEMBER_HST T1,
             TWNPERSON T2
        WHERE T1.UPI = T2.UPI
          AND (T1.FS_ASST_IND = 'Y' AND T1.FS_ELIG_CD IN('3','9')  OR
               T1.MA_ASST_IND = 'Y' AND T1.MA_ELIG_CD IN('3','9')  OR
               T1.AFDC_ASST_IND = 'Y' AND T1.AFDC_ELIG_CD IN('3','9'))
          AND T1.PRD_BEG_DT >= :WS-LESS-6M-DT
          AND T1.PRD_END_DT  = '9999-12-31'
         --** INSERT ORDER BY CLAUSE HERE **
      }      
      into SSN, UPI
      for H2-2-CMH-PER ;
  end

  /* Set the NRF and DUP flags*/
  VDBCOMMON.UNRF = "N";
  VDBCOMMON.UDUP = "N";

  /* Perform DB error processing*/
  WDB00PE-SQLERR();
  /*  */
end // end AIN37P9-READ2-PROC


// DECLAR CUR ON IVD CASE & PERSN
Function AIN37P9-READ3-PROC()
  /* ***************************************************************/
  /* Declare cursor on TWNIVD_CASE, TWNNON_CUST_PARENT, TWNPERSON*/
  /* ***************************************************************/
  WDB00PI();

  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.USQLREC = "H2-2-IDC-PER";
  VDBCONTROL.UPROC-NM = "AIN37P9-READ3-PROC";
  VDBCONTROL.UPROC-OBJ = "H2-2-IDC-PER";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  try
    open AIN37P9-READ3-PROC_RSI01
      with #sql{
        select T2.UPI,
            T2.SSN,
            T2.LST_NM,
            T2.FRST_NM,
            T2.MID_NM,
            T2.MODFR,
            T2.ESD_SENT_DT,
            T1.FUNC_AREA_CD
        from TWNIVD_CASE T1,
             TWNPERSON T2
        WHERE T1.CASE_STS  <> 'C' AND
              T1.CASE_TYPE <> 'D' AND
              T1.NCP_UPI    = T2.UPI
        ORDER BY T2.UPI
      }      
      into UPI,
           SSN,
           LST-NM,
           FRST-NM,
           MID-NM,
           MODFR,
           ESD-SENT-DT,
           FUNC-AREA-CD
      for H2-2-IDC-PER ;
  end

  VDBCOMMON.UNRF = "N";
  VDBCOMMON.UDUP = "Y";

  /* Perform DB error processing*/
  WDB00PE-SQLERR();
  /*  */
end // end AIN37P9-READ3-PROC


// Cursor TWNRESP_PRSN_DBTR
Function AIN37P9-READ4-PROC()
  /* ************************************************************/
  /* Declare a cursor for tables TWNPERSON & TWNRESP_PRSN_DBTR*/
  /* ************************************************************/

  WDB00PI();

  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.USQLREC = "H2-2-PER-RPD     ";
  VDBCONTROL.UPROC-NM = "AIN37P9-READ4-PROC";
  VDBCONTROL.UPROC-OBJ = "H2-2-PER-RPD     ";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  try
    open AIN37P9-READ4-PROC_RSI01
      with #sql{
        select T1.SSN,
            T2.UPI,
            T2.DSGNT_DBTR_IND,
            T1.ESD_SENT_DT
        from TWNPERSON T1,
             TWNRESP_PRSN_DBTR T2
        WHERE T2.UPI = T1.UPI
          AND T2.UPI > 0
          AND T2.DSGNT_DBTR_IND = 'Y'
         --
         --** INSERT ORDER BY CLAUSE HERE **
      }      
      into SSN,
           UPI,
           DSGNT-DBTR-IND,
           ESD-SENT-DT
      for H2-2-PER-RPD ;
  end

  VDBCOMMON.UNRF = "N";
  VDBCOMMON.UDUP = "N";

  WDB00PE-SQLERR();
  /*  */
end // end AIN37P9-READ4-PROC


// Read table DCC & SPT
Function AIN37P9-S05-PROC()
  /*  */
  VDBCOMMON.USQLREC = "H2-2-DCC-SPT";
  VDBCONTROL.UPROC-OBJ = "H2-2-DCC-SPT";
  VDBCONTROL.UPROC-NM = "AIN37P9-S05-PROC";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  /*  */
  try
    get H2-2-DCC-SPT
      with #sql{
        select T2.NOMADS_USRID
        from twnivd_caseld_case T1,
             twnsup_unt_pos_hst T2
        WHERE T1.UPI = :UPI AND
              T1.CASE_SUFX = 'A' AND
              T1.OFC_CD = T2.OFC_CD AND
              T1.PRGM_OFC_TYPE = T2.PRGM_OFC_TYPE AND
              T1.SPRVS_UNIT = T2.SPRVS_UNIT AND
              T1.PSN_NMB = T2.PSN_NMB AND
              T1.CASELD_IND = 'N' AND
              T2.ASMNT_BEG_DT BETWEEN
                     '0001-01-01' AND :AIN37W.WS-PROCESS-DATE AND
              T2.ASMNT_END_DT BETWEEN
                     :AIN37W.WS-PROCESS-DATE AND '9999-12-31'
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into NOMADS-USRID ;
  end
  /*  */
  /* Set error control flags*/

  VDBCOMMON.UNRF = "N";
  VDBCOMMON.UDUP = "Y";

  /* Perform DBM error processing*/

  WDB00PE-SQLERR();
end // end AIN37P9-S05-PROC


// FETCH RECORDS FROM TWNPERSON
Function AIN37P9-SCAN1-PROC()
  /* ************************************************************/
  /* Process to fetch a from TWNCASE_MEMBER_HST & TWNPERSON*/
  /* ************************************************************/
  /*  */
  VDBCOMMON.USQLREC = "H2-2-CMH-PER";
  VDBCONTROL.UPROC-NM = "AIN37P9-SCAN1-PROC";
  VDBCONTROL.UPROC-OBJ = "H2-2-CMH-PER";
  VDBCONTROL.UPROC-OPT = "SCAN";
  try
    get next H2-2-CMH-PER ;
  end
  if (sysVar.sqlData.sqlcode == 0)
  /*  */
  /* Increment the counter for number of records written*/
  /*  */
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
end // end AIN37P9-SCAN1-PROC


// READ TWNCASE_MEMBER_HST
Function AIN37P9-SCAN2-PROC()
  /* **************************************************************/
  /* This Process is to READ rows from TWNCASE_MEMBER_HST      **/
  /* **************************************************************/
  VDBCOMMON.USQLREC = "H2-CASE_MEMBER_HST";
  VDBCONTROL.UPROC-NM = "AIN37P9-SCAN2-PROC";
  VDBCONTROL.UPROC-OBJ = "H2-CASE-MEMBER-HST";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  try
    get H2-CASE-MEMBER-HST
      with #sql{
        select COUNT (*)
        from TWNCASE_MEMBER_HST T1
        WHERE (T1.FS_ELIG_CD NOT IN ('3', '9')
         OR    T1.MA_ELIG_CD NOT IN ('3', '9')
         OR    T1.AFDC_ELIG_CD NOT IN ('3', '9'))
         AND  (T1.PRD_BEG_DT BETWEEN :WS-LESS-7M-DT AND :WS-PROCESS-DATE)
         AND   T1.UPI = :AIN37W.WS-UPI-B
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into UINDEX1 ;
  end
  if (sysVar.sqlData.sqlcode == 0)
  /* If records found*/
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  /*  */
end // end AIN37P9-SCAN2-PROC


// Fetch alternate SSNs for rqst
Function AIN37P9-SCAN3-PRO()
  /* ---------------------------------------------------------------*/
  /* Process to fetch rows from the table TWNALTERNATE_SSN*/
  /* ---------------------------------------------------------------*/
  /* Change log*/
  /* Date        Work Item  Description*/
  /* ----------  ---------  ----------------------------------------*/
  /* 03/29/2004  WI15406    D.Bugli- Execution of this process has*/
  /* been commented out for several years.*/
  /* However, it is now a requirement to send*/
  /* alternate SSNs along with primary SSNs*/
  /* (for IV-D only).*/
  /* ---------------------------------------------------------------*/
  /*  */
  VDBCOMMON.USQLREC = "H2-ALTERNATE-SSN";
  VDBCONTROL.UPROC-NM = "AIN37P9-SCAN3-PRO";
  VDBCONTROL.UPROC-OBJ = "H2-ALTERNATE-SSN";
  VDBCONTROL.UPROC-OPT = "SCAN";
  try
    get next H2-ALTERNATE-SSN ;
  end
  /*  */
  if (H2-ALTERNATE-SSN not ioError)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end

  VDBCOMMON.UNRF = "1";
  VDBCOMMON.UDUP = "N";

  WDB00PE-SQLERR();
  /*  */
end // end AIN37P9-SCAN3-PRO


// List open I&R Cases on NOMADS
Function AIN37P9-SEND-A-SSN()
  /* This Process Identifies the list of ssns to be sent to ESD*/
  /* to get the wage,employer and UIB details.*/
  /* ==============================================================*/
  /* Perform the process to read TWNPERSON & TWNRESP_PRSN_DBTR*/

  set H2-2-PER-RPD empty;

  AIN37P9-READ4-PROC(); /* Open a cursor*/

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end

  while (H2-2-PER-RPD not ioError)

    AIN37P9-FETH1-PROC(); /* Scan the rows or cursor*/

    if (H2-2-PER-RPD not ioError)
      AIN37W.WS-PER-SSN = H2-2-PER-RPD.SSN;
    end

    /* Pseudo ssns and merged SSNs should not be sent out to ESD*/
    if (H2-2-PER-RPD not ioError && 
    (WS-SSN-PART1 != "999" && 
    WS-SSN-PART1 != "   " && 
    WS-SSN-PART1 != "000") && 
    H2-2-PER-RPD.ESD-SENT-DT != AIN37W.WS-PROCESS-DATE)

        /* Move the person details to output record*/
      SR-QAIN37A-OPT-REC.AIN37A-SSN = H2-2-PER-RPD.SSN;
    end

      /* If SSN is valid, add record to the output file*/
    if (SR-QAIN37A-OPT-REC.AIN37A-SSN != " ")

      AIN37P9-ADD-PROC();
      AIN37W.WS-NO-OF-I-R-RECS = AIN37W.WS-NO-OF-I-R-RECS + 1;

        /* Update ESD_SENT_DT in TWNPERSON*/
      VDBCONTROL.UACCTYP = "W";
      VDBCOMMON.UAPPLNAM = "AIN37A";
      H2-PERSON.UPI = H2-2-PER-RPD.UPI;

        /* Update record in TWNPERSON*/
      AIN37P9-UDT1-PROC();

      if (VDBCONTROL.URC > 104)
        WCM00P2-TO-CEP01A();
      end
    end
    set SR-QAIN37A-OPT-REC empty;
  end /* end check for records found*/
  /*  */
end // end AIN37P9-SEND-A-SSN


// List closed IVA Cases
Function AIN37P9-SEND-C-SSN()
  /* This Process Identifies the list of ssns from iva Person off a case*/
  /* less than six months to assist in detecting overpayments.*/
  /* ==============================================================*/
  /* Perform the process to read TWNPERSON and TWNCASE_MEMBER_HST*/

  set H2-2-CMH-PER empty;

  AIN37P9-READ2-PROC(); /* ( AIN37A-S01) Open the cursor*/

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end

  while (H2-2-CMH-PER not ioError)

    AIN37P9-SCAN1-PROC(); /* Read rows of the cursor*/

    if (H2-2-CMH-PER not ioError)
      AIN37W.WS-PER-SSN = H2-2-CMH-PER.SSN;
      AIN37W.WS-UPI-B = H2-2-CMH-PER.UPI;
    end
      /* Pseudo ssns and merged SSNs should not be sent out to ESD*/
    if (H2-2-CMH-PER not ioError && 
    (WS-SSN-PART1 != "999" && 
    WS-SSN-PART1 != "   " && 
    WS-SSN-PART1 != "000"))
      ;
      AIN37P9-SCAN2-PROC();
      ;
      if (VDBCOMMON.UINDEX1 > 0)
        SR-QAIN37A-OPT-REC.AIN37A-SSN = H2-2-CMH-PER.SSN;
      end
    end

      /* If SSN is valid, add record to the output file*/
    if (SR-QAIN37A-OPT-REC.AIN37A-SSN != " ")

      AIN37P9-ADD-PROC();
      AIN37W.WS-NO-OF-IVA-REC = AIN37W.WS-NO-OF-IVA-REC + 1;

        /* Update ESD_SENT_DT in TWNPERSON*/
      VDBCONTROL.UACCTYP = "W";
      VDBCOMMON.UAPPLNAM = "AIN37A";
      H2-PERSON.UPI = AIN37W.WS-UPI-N;

        /* Update record in TWNPERSON*/
      AIN37P9-UDT1-PROC();

      if (VDBCONTROL.URC > 104)
        WCM00P2-TO-CEP01A();
      end
      ;
      set SR-QAIN37A-OPT-REC empty;
    end
  end /* end check for records found*/
  /*  */
end // end AIN37P9-SEND-C-SSN


// List open IVA Cases
Function AIN37P9-SEND-P-SSN()
  /* This Process Identifies the list of ssns to be sent to ESD*/
  /* to get the wage,employer and UIB details.*/
  /* ==============================================================*/
  /* Perform the process to read TWNPERSON and TWNCASE_MEMBER_HST*/

  set H2-2-CMH-PER empty;

  AIN37P9-READ1-PROC(); /* ( AIN37A-S01) Open the cursor*/

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end

  while (H2-2-CMH-PER not ioError)

    AIN37P9-SCAN1-PROC(); /* Read rows of the cursor*/

    if (H2-2-CMH-PER not ioError)
      AIN37W.WS-PER-SSN = H2-2-CMH-PER.SSN;
    end
      /* Pseudo ssns and merged SSNs should not be sent out to ESD*/
    if (H2-2-CMH-PER not ioError && 
    (WS-SSN-PART1 != "999" && 
    WS-SSN-PART1 != "   " && 
    WS-SSN-PART1 != "000"))

      SR-QAIN37A-OPT-REC.AIN37A-SSN = H2-2-CMH-PER.SSN;

    end

      /* If SSN is valid, add record to the output file*/
    if (SR-QAIN37A-OPT-REC.AIN37A-SSN != " ")

      AIN37P9-ADD-PROC();
      AIN37W.WS-NO-OF-IVA-RECS = AIN37W.WS-NO-OF-IVA-RECS + 1;

        /* Update ESD_SENT_DT in TWNPERSON*/
      VDBCONTROL.UACCTYP = "W";
      VDBCOMMON.UAPPLNAM = "AIN37A";
      H2-PERSON.UPI = H2-2-CMH-PER.UPI;

        /* Update record in TWNPERSON*/
      AIN37P9-UDT1-PROC();

      if (VDBCONTROL.URC > 104)
        WCM00P2-TO-CEP01A();
      end

      set SR-QAIN37A-OPT-REC empty;
    end
  end /* end check for records found*/
  /*  */
end // end AIN37P9-SEND-P-SSN


// Fetch alternate ssn for requst
Function AIN37P9-SEND-X-SSN()
  /* ---------------------------------------------------------------*/
  /* This process reads the table TWNALTERNATE_SSN to check if there*/
  /* are alternate SSNs for the UPIs fetched from TWNPERSON*/
  /* for which request is to be sent to ESD.*/
  /* ---------------------------------------------------------------*/
  /* Change log*/
  /* Date        Work Item  Description*/
  /* ----------  ---------  ----------------------------------------*/
  /* 03/29/2004  WI15406    D.Bugli- Execution of this process has*/
  /* been commented out for several years.*/
  /* However, it is now a requirement to send*/
  /* alternate SSNs along with primary SSNs*/
  /* (for NCPs only, not FAME members, unless*/
  /* they are NCPs).*/
  /* ---------------------------------------------------------------*/
  /*  */
  /* Check for Alternate SSN(s) to send:*/
  AIN37W.WS-PRIALT-SW = "A";
  /*  */
  set H2-ALTERNATE-SSN empty;
  H2-ALTERNATE-SSN.UPI = H2-2-IDC-PER.UPI;
  AIN37P9-SETINQ3(); /* Get cursor of alternate SSNs*/
  if (VDBCONTROL.URC == 0)
    /* Fetch row from TWNALTERNATE_SSN table*/
    AIN37P9-SCAN3-PRO();
    AIN37W.WS-IVDURC2 = sysVar.sqlData.sqlcode;
    while (AIN37W.WS-IVDURC2 == 0)
      AIN37W.WS-PER-SSN = H2-ALTERNATE-SSN.ALT-SSN;
      AIN37W.WS-ALT-SSN = H2-ALTERNATE-SSN.ALT-SSN;
      /* Don't send pseudo-SSNs or merged SSNs:*/
      if ((AIN37W.WS-SSN-PART1 != "999" && 
      AIN37W.WS-SSN-PART1 != "   " && 
      AIN37W.WS-SSN-PART1 != "000"))
        if (AIN37W.WS-ALT-SSN == AIN37W.WS-PRI-SSN)
          /* Don't send alt SSN if same as primary SSN:*/
          AIN37W.WS-NO-OF-SAME-RECS = AIN37W.WS-NO-OF-SAME-RECS + 1;
        else
          AIN37W.WS-USE-ALT = "Y";
          /* Add an Alternate SSN record to the output file*/
          SR-QAIN37A-OPT-REC.AIN37A-SSN = H2-ALTERNATE-SSN.ALT-SSN;
          AIN37P9-ADD-PROC();
          /* Put a record in IV-D contacts:*/
          AIN37P9-CT-IVD-CTS();
          AIN37W.WS-NO-OF-ALT-RECS = AIN37W.WS-NO-OF-ALT-RECS + 1;
        end
      end
      /* Read the next alternate SSN row:*/
      AIN37P9-SCAN3-PRO();
      AIN37W.WS-IVDURC2 = sysVar.sqlData.sqlcode;
    end /* end of while loop*/
  else
    if (VDBCONTROL.URC > 104)
      WCM00P2-TO-CEP01A();
    end
  end
  /*  */
end // end AIN37P9-SEND-X-SSN


// Build alternate SSNs for rqst
Function AIN37P9-SETINQ3()
  /* ---------------------------------------------------------------*/
  /* This process is to declare cursor on the table TWNALTERNATE_SSN*/
  /* ---------------------------------------------------------------*/
  /* Change log*/
  /* Date        Work Item  Description*/
  /* ----------  ---------  ----------------------------------------*/
  /* 03/23/2004  WI15406    D.Bugli- Execution of this process has*/
  /* been commented out for several years.*/
  /* However, it is now a requirement to send*/
  /* alternate SSNs along with primary SSNs.*/
  /* ---------------------------------------------------------------*/
  /*  */
  WDB00PI();

  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN37A";

  VDBCOMMON.USQLREC = "H2-ALTERNATE-SSN";
  VDBCONTROL.UPROC-NM = "AIN37P9-SETINQ3";
  VDBCONTROL.UPROC-OBJ = "H2-ALTERNATE-SSN";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  try
    open AIN37P9-SETINQ3_RSI01
      with #sql{
        select ALT_SSN
        from twnalternate_ssn T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
         --** INSERT ORDER BY CLAUSE HERE **
        WHERE UPI = :UPI
      }      
      into ALT-SSN
      for H2-ALTERNATE-SSN ;
  end

  /* Set error control flags*/

  VDBCOMMON.UNRF = "N";
  VDBCOMMON.UDUP = "Y";

  /* Perform DBM error processing*/
  WDB00PE-SQLERR();
  /*  */
end // end AIN37P9-SETINQ3


// UPDATE  TABLE TWNPERSON
Function AIN37P9-UDT1-PROC()

  /* Process to update the ESD_SENT_DT in TWNPERSON*/

  WDB00PI();

  VDBCOMMON.USQLREC = "H2-PERSON";
  VDBCONTROL.UPROC-NM = "AIN37P9-UDT1-PROC";
  VDBCONTROL.UPROC-OBJ = "H2-PERSON";
  VDBCONTROL.UPROC-OPT = "SQLEXEC";

  H2-PERSON.ESD-SENT-DT = AIN37W.WS-PROCESS-DATE;
  try
    execute update 
      #sql{
        UPDATE TWNPERSON T1
        SET ESD_SENT_DT = :ESD-SENT-DT
        WHERE UPI = :UPI
      }
      for H2-PERSON ; // model = update
  end

  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWW = VDBCONTROL.UROWW + 1;
  end

  VDBCOMMON.UNRF = "N";
  VDBCOMMON.UDUP = "Y";

  WDB00PE-SQLERR();

  /*  */
end // end AIN37P9-UDT1-PROC


// Update locate activity table
Function AIN37P9-UPD-LCTE()
  /* ---------------------------------------------------------------*/
  /* This process updates TWNLCTE_ACTVY with the current date as*/
  /* the sent date.*/
  /* ---------------------------------------------------------------*/
  /* Change log*/
  /* Date        Work Item  Description*/
  /* ----------  ---------  ----------------------------------------*/
  /* 03/29/2004  WI15406    D.Bugli- Created new process that can*/
  /* be performed  when it has been*/
  /* determined that at least one primary or*/
  /* alternate SSN has been sent for an NCP.*/
  /* ---------------------------------------------------------------*/
  /*  */
  if (AIN37W.WS-USE-PRI == "Y"
   || AIN37W.WS-USE-ALT == "Y")
    H2-2-DCC-SPT.UPI = AIN37W.WS-PREV-UPI2;

    AIN37P9-S05-PROC(); /* Retrieving worker id*/

    if (VDBCONTROL.URC >= 104)
      WCM00P2-TO-CEP01A();
    end
    /* Update TWNLCTE_ACTVY with process dt for request sent date*/
    set H2-LCTE-ACTVY empty;
    /* Key values:*/
    /*  */
    /* moving worker id to TWNLCTE_ACTVY.INFO_TXT*/
    H2-LCTE-ACTVY.INFO-TXT = H2-2-DCC-SPT.NOMADS-USRID;
    H2-LCTE-ACTVY.FNL-TYPE = H2-2-IDC-PER.FUNC-AREA-CD;

    WS-PRGM-TYPE = "D";
    H2-LCTE-ACTVY.UPI = AIN37W.WS-PREV-UPI2; /**/
    H2-LCTE-ACTVY.LOC-SRC-CD = "ESD";
    H2-LCTE-ACTVY.RQST-SENT-DT = AIN37W.WS-PROCESS-DATE;

    AIN37W.WS-PROCESS-TS = GDW.TS;
    AIN37W.WS-PROCESS-TS-DT = AIN37W.WS-PROCESS-DATE;
    H2-LCTE-ACTVY.INFO-RQSTD-TS = AIN37W.WS-PROCESS-TS;

    H2-LCTE-ACTVY.RSPNS-DUE-DT = "0001-01-01";
    H2-LCTE-ACTVY.FUTRE-ACT-DT = "0001-01-01";
    H2-LCTE-ACTVY.INFO-RCVD-DT = "0001-01-01";
    H2-LCTE-ACTVY.EFF-DT = "0001-01-01";

  /* The ESD LOCATE INTERFACE uses the following constant values*/
  /* because this type of intetrface is person level*/
    H2-LCTE-ACTVY.CASE-SUFX = "A";
    H2-LCTE-ACTVY.RQST-SQ-NMB = 1;
    H2-LCTE-ACTVY.MANUAL-IND = "N";

  /* Create locate activity*/
    VDBCONTROL.UACCTYP = "W";
    VDBCOMMON.UAPPLNAM = "AIN37A";

  /* Insert record into TWNLCTE_ACTVY*/
    AIN37P9-CT-TB-PRC(); /* AIN37A-I02;*/
    if (VDBCONTROL.URC > 104)
      WCM00P2-TO-CEP01A();
    end
    /*  */
    /* Update  ESD_SENT_DT in TWNPERSON*/
    set H2-PERSON empty;
    H2-PERSON.UPI = AIN37W.WS-PREV-UPI2;
    H2-PERSON.ESD-SENT-DT = AIN37W.WS-PROCESS-DATE;
    AIN37P9-UDT1-PROC();
    if (VDBCONTROL.URC > 104)
      WCM00P2-TO-CEP01A();
    end
    /*  */
  end
  AIN37W.WS-USE-PRI = "N";
  AIN37W.WS-USE-ALT = "N";
  /*  */
end // end AIN37P9-UPD-LCTE


Record AIN37W type basicRecord
  10 WS-NO-OF-IVA-RECS int ; // TOTAL NUMBER OF RECORDS READ
  10 WS-NO-OF-I-R-RECS int ; // TOTAL NUMBER OF RECORDS READ
  10 WS-NO-OF-IVD-RECS int ; // TOTAL NUMBER OF RECORDS READ
  10 WS-NO-OF-IVA-REC int ; // TOTAL NUMBER OF RECORDS READ
  10 WS-NO-OF-ALT-RECS int ; // TOTAL NUMBER OF RECORDS READ
  10 WS-NO-OF-SAME-RECS int ; // TOTAL NUMBER OF RECORDS READ
  10 WS-IVDURC1 num(3) ; 
  10 WS-IVDURC2 num(3) ; 
  10 WS-DATE char(8) ; // DATE
  10 WS-DUE-DT char(8) ; // DUE DATE
  10 WS-PRGM-TYPE char(1) ; // PROGRAM TYPE
  10 WS-SSN char(9) ; // SSN
  10 WS-UPI-B int ; 
  10 WS-UPI-N num(9) ; 
  10 WS-NCP-UPI int ; 
  10 WS-CONCAT char(96) ; 
    15 WS-STRING char(70) ; 
    15 WS-C-SSN char(10) ; 
    15 WS-C-SSN-TYPE char(16) ; 
  10 WS-DATE1 char(8) ; 
    15 WS-YY1 char(4) ; 
    15 WS-MM1 char(2) ; 
    15 WS-DD1 char(2) ; 
  10 WS-DATE2 char(10) ; 
    15 WS-YY2 char(4) ; 
    15 WS-FIL1 char(1) ; 
    15 WS-MM2 char(2) ; 
    15 WS-FIL2 char(1) ; 
    15 WS-DD2 char(2) ; 
  10 WS-ERR-CD char(8) ; 
    15 WS-ERR-FIRST-FOUR char(4) ; 
    15 WS-ERR-LAST-FOUR char(4) ; 
  10 WS-CURR-DATE char(10) ; 
  10 WS-PROCESS-DATE char(10) ; 
    15 WS-PROCESS-CCYY char(4) ; 
    15 WS-PROCESS-DASH1 char(1) ; 
    15 WS-PROCESS-MM char(2) ; 
    15 WS-PROCESS-DASH2 char(1) ; 
    15 WS-PROCESS-DD char(2) ; 
  10 WS-PROCESS-TS char(26) ; 
    15 WS-PROCESS-TS-DT char(10) ; 
    15 WS-PROCESS-TS-TM char(16) ; 
  10 WS-PROCESS-DT char(8) ; 
    15 WS-PROCESS-DT-CCYY char(4) ; 
      20 WS-PROCESS-DT-CC char(2) ; 
      20 WS-PROCESS-DT-YY char(2) ; 
    15 WS-PROCESS-DT-MM char(2) ; 
    15 WS-PROCESS-DT-DD char(2) ; 
  10 WS-PROCESS-DT-TEST-N num(8) ; 
    15 WS-PROCESS-DT-CCYY-N num(4) ; 
    15 WS-PROCESS-DT-MM-N num(2) ; 
    15 WS-PROCESS-DT-DD-N num(2) ; 
  10 WS-LESS-6M-DT char(10) ; 
    15 WS-LESS-6M-DT-CCYY num(4) ; 
    15 WS-DASH-1 char(1) ; 
    15 WS-LESS-6M-DT-MM num(2) ; 
    15 WS-DASH-2 char(1) ; 
    15 WS-LESS-6M-DT-DD char(2) ; 
  10 WS-LESS-7M-DT char(10) ; 
    15 WS-LESS-7M-DT-CCYY num(4) ; 
    15 WS-DASH1 char(1) ; 
    15 WS-LESS-7M-DT-MM num(2) ; 
    15 WS-DASH2 char(1) ; 
    15 WS-LESS-7M-DT-DD char(2) ; 
 10 WS-LESS-16Y-DT char(10) ; 
    15 WS-LESS-16Y-DT-CCYY num(4) ; 
    15 WS-16DASH1 char(1) ; 
    15 WS-LESS-16Y-DT-MM num(2) ; 
    15 WS-16DASH2 char(1) ; 
    15 WS-LESS-16Y-DT-DD char(2) ;
  10 WS-PRIALT-SW char(1) ; 
  10 WS-USE-PRI char(1) ; 
  10 WS-USE-ALT char(1) ; 
  10 WS-PRI-SSN char(9) ; 
  10 WS-ALT-SSN char(9) ; 
  10 WS-PER-SSN char(9) ; 
    15 WS-SSN-PART1 char(3) ; 
    15 WS-SSN-PART2 char(2) ; 
    15 WS-SSN-PART3 char(4) ; 
  10 WS-PREV-UPI1 int ; 
  10 WS-PREV-UPI2 int ; 
  10 WS-PREVIOUS-UPI int ; 
  10 WS-FIRST-TIME-IN-LOOP char(1) ; 
  10 WS-HOLD-INFO-RQSTD-TS char(26) ; 
end // end AIN37W


