package gov.illinois.ies.business.batch.mu;

import gov.illinois.framework.management.logging.ILog;
import gov.illinois.fw.batch.HelperClasses.BatchConstants;
import gov.illinois.fw.business.exceptions.TIERSBatchException;
import gov.illinois.fw.management.referencetables.ReferenceTableManager;
import gov.illinois.ies.business.batch.ed.util.EdBatchConstants;
import gov.illinois.ies.business.rules.al.ALSOPUtil;
import gov.illinois.ies.business.rules.bi.BiUtils;

import java.sql.Timestamp;

import org.apache.commons.lang.StringUtils;

public class SnapDelayedAppBatchUtil {

	/**
	 * Method returns no. of holidays from As of date
	 * holidayDtRange - contains the date range including the begin date till 
	 * next working day. The next working day is excluded. When the next working day is not 
	 * a holiday holidayDtRange array will have only the begin date . So the actual number of
	 * holidays will be 1 less the array size.
	 * 
	 * 
	 * @return Timestamp
	 */
	public static int getNumberOfHolidaysFromAsofDate(Timestamp beginDate)throws Exception{
		Timestamp [] holidayDtRange = null;
		int noOfHolidays=0;
		holidayDtRange= ALSOPUtil.getDateRange(beginDate); 
		if(null!=holidayDtRange && holidayDtRange.length >0) {
			noOfHolidays=holidayDtRange.length-1; 
		}
		return noOfHolidays;
	}
	
	/**
	 * This method is used get the cut off / ER implementation date for fetching the SNAP application.
	 * This date is used in the driving query to limit fetching the SNAP 
	 * appliations/cases with application date created prior to the cut off Date.
	 * 
	 * The value of this date is decided by functional team.
	 * 
	 * @throws TIERSBatchException  Object
	 */
	public static java.sql.Timestamp retImplementationDate() throws TIERSBatchException{

		java.sql.Timestamp cutoffdate = ALSOPUtil.getTSfromString(EdBatchConstants.SNAP_DELAYED_CUTOFF_DATE_HIGH_DATE);
		String refData = null;
		try {
			refData = ReferenceTableManager.getValueByColumn(true, "EDSNAPDELAYEDCUTOFF", "CUTOFFDATE", "DESCRIPTION");
			if(refData != null && !StringUtils.isBlank(refData)){
				cutoffdate = BiUtils.strDateToTimestamp(refData, "yyyy-mm-dd");
			}

/*			if(null==cutoffdate) {
				cutoffdate = ALSOPUtil.getTSfromString((FwProperty.getInstance().getProperty(FwConstants.APPLICATION_PROPERTY_FILE, FwConstants.SNAP_DELAYED_CUTOFF_DATE)));
			 }*/
		} catch (Exception e) {
			throw new TIERSBatchException(BatchConstants.EDBC_LOGGER_FILE, ILog.FATAL, "Exception at retImplementationDate() - cutOffDate : " +cutoffdate + " " +e.getMessage(), e);
		}
		
		
		return cutoffdate;
	}
}
