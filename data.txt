package gov.nv.dwss.fsc.service;

import org.springframework.stereotype.Service;

import gov.nv.dwss.fsc.constants.QueryConstants;
import gov.nv.dwss.fsc.mapper.SnapCharacteristicRowMapper;
import gov.nv.dwss.fsc.model.SnapCharacteristicInputParam;
import gov.nv.dwss.fsc.model.SnapCharacteristicRecord;
import gov.nv.dwss.fw.batch.common.AbstractSorDataService;

import gov.nv.dwss.fw.batch.exception.BatchBusinessException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;

import java.sql.SQLException;
import java.util.Collections;
import java.util.List;

@Service
public class SnapCharacteristicDataService extends AbstractSorDataService {

	public List<SnapCharacteristicRecord> getOfficeCodes()
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.GET_OFFICE_CODES);
			Object[] params = new Object[] {};
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getBudunit(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.GET_BUDGET_UNIT);
			Object[] params = new Object[] { inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3(),
					inputParam.getParam4() };
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getFacilityData(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.GET_FACILITY_DATA);
			Object[] params = new Object[] { inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3() };
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getCaseData(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.GET_CASE_DATA);
			Object[] params = new Object[] { inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3() };
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getCaseData2(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.GET_CASE_DATA_2);
			Object[] params = new Object[] { inputParam.getParam1(), inputParam.getParam2() };
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getExecSqlQuery(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.EXEC_SQL_QUERY);
			Object[] params = new Object[] { inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3(),
					inputParam.getParam4(), inputParam.getParam5() };
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getIncomeDetails(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.GET_INCOME_DETAILS);
			Object[] params = new Object[] { inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3() };
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getCaseData3(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.GET_CASE_DATA_3);
			Object[] params = new Object[] { inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3() };
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getExecSqlQuery2(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.EXEC_SQL_QUERY_2);
			Object[] params = new Object[] { inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3(),
					inputParam.getParam4(), inputParam.getParam5() };
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getCodeTable(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.GET_CODE_TABLE);
			Object[] params = new Object[] {};
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getCodeTable2(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.GET_CODE_TABLE_2);
			Object[] params = new Object[] {};
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getCodeTable3(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.GET_CODE_TABLE_3);
			Object[] params = new Object[] {};
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getExecSqlQuery3(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.EXEC_SQL_QUERY_3);
			Object[] params = new Object[] { inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3() };
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getActionTimestamps(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.GET_ACTION_TIMESTAMPS);
			Object[] params = new Object[] { inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3() };
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getExecSqlQuery4(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.EXEC_SQL_QUERY_4);
			Object[] params = new Object[] { inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3() };
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getMemberHistory(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.GET_MEMBER_HISTORY);
			Object[] params = new Object[] { inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3() };
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getExecSqlQuery5(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.EXEC_SQL_QUERY_5);
			Object[] params = new Object[] { inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3() };
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getActionTimestamps2(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.GET_ACTION_TIMESTAMPS_2);
			Object[] params = new Object[] { inputParam.getParam1(), inputParam.getParam2() };
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getActionTimestamps3(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.GET_ACTION_TIMESTAMPS_3);
			Object[] params = new Object[] { inputParam.getParam1(), inputParam.getParam2() };
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getExecSqlQuery6(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.EXEC_SQL_QUERY_6);
			Object[] params = new Object[] { inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3(),
					inputParam.getParam4(), inputParam.getParam5() };
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getRelationshipCodes(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.GET_RELATIONSHIP_CODES);
			Object[] params = new Object[] { inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3(),
					inputParam.getParam4(), inputParam.getParam5() };
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getExecSqlQuery7(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.EXEC_SQL_QUERY_7);
			Object[] params = new Object[] { inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3(),
					inputParam.getParam4() };
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

	public List<SnapCharacteristicRecord> getExecSqlQuery8(SnapCharacteristicInputParam inputParam)
			throws BatchBusinessException {
		try {
			String sqlQuery = getQueryWithSchemaName(QueryConstants.EXEC_SQL_QUERY_8);
			Object[] params = new Object[] { inputParam.getParam1(), inputParam.getParam2(), inputParam.getParam3() };
			return jdbcTemplate.query(sqlQuery, new SnapCharacteristicRowMapper(), params);
		} catch (EmptyResultDataAccessException e) {
			return Collections.emptyList();
		} catch (Exception e) {
			if (e.getCause() instanceof SQLException) {
				SQLException sqlException = (SQLException) e.getCause();
				int sqlErrorCode = sqlException.getErrorCode();
				SnapCharacteristicInputParam.setSqlErrorFlag(true);
			} else {
				SnapCharacteristicInputParam.setSqlErrorFlag(false);
			}
		}
		return null;
	}

}