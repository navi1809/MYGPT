/**
* gov.illinois.ies.data.oracle.DcCasesGenDAO generated Mon Dec 27 12:44:59 EST 2021 Generator Version null
*/


package gov.illinois.ies.data.oracle.cases;


import gov.illinois.ies.business.entities.cases.DcCasesPrimaryKey;
import gov.illinois.ies.business.entities.cases.DcCasesCargo;
import java.util.ArrayList;
import java.util.Collection;
import gov.illinois.fw.persistence.data.IPrimaryKey;
import gov.illinois.fw.business.exceptions.TIERSRunTimeException;
import gov.illinois.fw.business.entities.IValueObject;
import gov.illinois.framework.management.logging.ILog;
import gov.illinois.fw.persistence.helperclasses.SelectHelper;
import gov.illinois.fw.persistence.data.ICargo;
import gov.illinois.fw.persistence.data.AbstractType1DAO;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;


public class DcCasesGenDAO extends AbstractType1DAO{
	
	
	public DcCasesGenDAO() {
	}
	public DcCasesGenDAO(Connection conn) {
		super(conn);
	}
	private static final String TYPE = "gov.illinois.ies.data.oracle.cases.DcCases";
	public String getTYPE() {
		return TYPE;
	}
	public static String getTypeName() {
		return TYPE;
	}
	private static final String TRANSID = "DC_CASES_0SQ";
	protected static final String SELECT_SQL= "SELECT AUTHREP_WORK_NUM ,WORK_PH_NUM_EXT ,AUTHORIZED_EMAIL_SW ,REGISTER_TO_VOTE ,SUMMARY_INDICATOR ,CHOICE_OFFICE_NUM ,CDB_SNAP_DENIED_SW ,APP_RECVD_DT ,RELATIONSHIP_INDV_CD ,FUEL_TYPE_CD ,MSG_PHN_NUM ,AUTHREP_PREFIX_NAME ,REACTIVATION_IND ,AUTH_REP_SW ,NOTICE_METHOD_CD ,EMAIL ,INTERVIEW_TYPE_CD ,APPLICANT_HOMELESS_SW ,GUIDE_TO_SERVICE_CD ,USER_ACTION_CD ,VIS_APPOINTMENT_SW ,AUTHREP_INDV_ID_VRF_CD ,OFFICE_NUM ,HISTORY_SEQ ,CREATE_DT ,AVAIL_DAY ,CASE_MODE_CD ,SPOKEN_LANGUAGE_TYPE_CD ,CASE_NUM ,PRIOR_SNAP_SW ,PHN_NUM_TYP ,AUTHREP_MID_NAME ,OTHER_PH_NUM ,TEMPORARY_MEDICAL_IND ,MAIL_LINK_CARD_REQ_IND ,PREF_CNTC_IND ,CASE_STATUS_CD ,UNABLE_TO_LOCATE_SW ,CONVERSION_DT ,AUTH_REP_IND ,COOP_MED_SUPPORT_RIGHTS_SW ,VULNERABLE_SW ,VIS_APPOINTMENT_DT ,UNIQUE_TRANS_ID ,PHN_TXT_TYP_CD ,AUTHREP_LAST_NAME ,SCHEDULE_CD ,LANGUAGE_CD ,PREF_CNTC_TM_TXT ,AUTHREP_ORG_NAME ,WORK_PH_NUM ,AUTHREP_CAREGIVER_SW ,CREATE_USER_ID ,AUTHREP_FIRST_NAME ,ACTION_DT ,PROCESS_ID ,AUTHREP_OTHER_NUM ,CASE_CLOSED_DT ,DHS_EMP_CASE_SW ,PH_NUM ,UNABLE_TO_LOCATE_DT ,INTERVIEW_DT ,VAL_PHN_NUM_CD ,ARCHIVE_DT ,AUTHREP_SUFX_NAME ,RID() as rowid ,COMPANY_ID ,REACTIVATION_DT ,RR_COUNTER_CREDIT_SW ,AUTHREP_PH_NUM ,EBT_ACCT_NUM  FROM DC_CASES";
	protected static final String SELECT_SQL_A= "SELECT AUTHREP_FIRST_NAME ,REACTIVATION_DT ,RR_COUNTER_CREDIT_SW ,SCHEDULE_CD ,REACTIVATION_IND ,AUDIT_USER_ID ,PROCESS_ID ,AVAIL_DAY ,PHN_TXT_TYP_CD ,WORK_PH_NUM ,REGISTER_TO_VOTE ,AUDIT_DT ,USER_ACTION_CD ,MSG_PHN_NUM ,PH_NUM ,EBT_ACCT_NUM ,RELATIONSHIP_INDV_CD ,UNABLE_TO_LOCATE_DT ,LANGUAGE_CD ,INTERVIEW_TYPE_CD ,PHN_NUM_TYP ,AUTHREP_LAST_NAME ,AUTHORIZED_EMAIL_SW ,AUTHREP_OTHER_NUM ,AUTHREP_PREFIX_NAME ,INTERVIEW_DT ,APPLICANT_HOMELESS_SW ,PREF_CNTC_TM_TXT ,CREATE_DT ,PREF_CNTC_IND ,ACTION_DT ,VULNERABLE_SW ,AUTHREP_INDV_ID_VRF_CD ,AUTHREP_CAREGIVER_SW ,COMPANY_ID ,CHOICE_OFFICE_NUM ,VIS_APPOINTMENT_SW ,AUTHREP_PH_NUM ,CREATE_USER_ID ,DHS_EMP_CASE_SW ,AUTHREP_SUFX_NAME ,ARCHIVE_DT ,OTHER_PH_NUM ,APP_RECVD_DT ,WORK_PH_NUM_EXT ,AUTHREP_ORG_NAME ,CDB_SNAP_DENIED_SW ,CASE_NUM ,NOTICE_METHOD_CD ,CONVERSION_DT ,SPOKEN_LANGUAGE_TYPE_CD ,AUTH_REP_SW ,UNIQUE_TRANS_ID ,VAL_PHN_NUM_CD ,AUTHREP_WORK_NUM ,TEMPORARY_MEDICAL_IND ,OFFICE_NUM ,PRIOR_SNAP_SW ,AUTH_REP_IND ,MAIL_LINK_CARD_REQ_IND ,GUIDE_TO_SERVICE_CD ,AUTHREP_MID_NAME ,CASE_MODE_CD ,VIS_APPOINTMENT_DT ,HISTORY_SEQ ,CASE_CLOSED_DT ,RID() as rowid ,SUMMARY_INDICATOR ,COOP_MED_SUPPORT_RIGHTS_SW ,UNABLE_TO_LOCATE_SW ,EMAIL ,FUEL_TYPE_CD ,CASE_STATUS_CD  FROM DC_CASES_A";
	private static final String INSERT_SQL = " INSERT INTO DC_CASES (AUTHREP_WORK_NUM,WORK_PH_NUM_EXT,AUTHORIZED_EMAIL_SW,REGISTER_TO_VOTE,SUMMARY_INDICATOR,CHOICE_OFFICE_NUM,CDB_SNAP_DENIED_SW,APP_RECVD_DT,RELATIONSHIP_INDV_CD,FUEL_TYPE_CD,MSG_PHN_NUM,AUTHREP_PREFIX_NAME,REACTIVATION_IND,AUTH_REP_SW,NOTICE_METHOD_CD,EMAIL,INTERVIEW_TYPE_CD,APPLICANT_HOMELESS_SW,GUIDE_TO_SERVICE_CD,USER_ACTION_CD,VIS_APPOINTMENT_SW,AUTHREP_INDV_ID_VRF_CD,OFFICE_NUM,HISTORY_SEQ,CREATE_DT,AVAIL_DAY,CASE_MODE_CD,SPOKEN_LANGUAGE_TYPE_CD,CASE_NUM,PRIOR_SNAP_SW,PHN_NUM_TYP,AUTHREP_MID_NAME,OTHER_PH_NUM,TEMPORARY_MEDICAL_IND,MAIL_LINK_CARD_REQ_IND,PREF_CNTC_IND,CASE_STATUS_CD,UNABLE_TO_LOCATE_SW,CONVERSION_DT,AUTH_REP_IND,COOP_MED_SUPPORT_RIGHTS_SW,VULNERABLE_SW,VIS_APPOINTMENT_DT,UNIQUE_TRANS_ID,PHN_TXT_TYP_CD,AUTHREP_LAST_NAME,SCHEDULE_CD,LANGUAGE_CD,PREF_CNTC_TM_TXT,AUTHREP_ORG_NAME,WORK_PH_NUM,AUTHREP_CAREGIVER_SW,CREATE_USER_ID,AUTHREP_FIRST_NAME,ACTION_DT,PROCESS_ID,AUTHREP_OTHER_NUM,CASE_CLOSED_DT,DHS_EMP_CASE_SW,PH_NUM,UNABLE_TO_LOCATE_DT,INTERVIEW_DT,VAL_PHN_NUM_CD,ARCHIVE_DT,AUTHREP_SUFX_NAME,COMPANY_ID,REACTIVATION_DT,RR_COUNTER_CREDIT_SW,AUTHREP_PH_NUM,EBT_ACCT_NUM) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,DC_CASES_2SQ.NEXTVAL,SYSDATE,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	private static final String INSERT_SQL_A = " INSERT INTO DC_CASES_A (AUTHREP_FIRST_NAME,REACTIVATION_DT,RR_COUNTER_CREDIT_SW,SCHEDULE_CD,REACTIVATION_IND,AUDIT_USER_ID,PROCESS_ID,AVAIL_DAY,PHN_TXT_TYP_CD,WORK_PH_NUM,REGISTER_TO_VOTE,AUDIT_DT,USER_ACTION_CD,MSG_PHN_NUM,PH_NUM,EBT_ACCT_NUM,RELATIONSHIP_INDV_CD,UNABLE_TO_LOCATE_DT,LANGUAGE_CD,INTERVIEW_TYPE_CD,PHN_NUM_TYP,AUTHREP_LAST_NAME,AUTHORIZED_EMAIL_SW,AUTHREP_OTHER_NUM,AUTHREP_PREFIX_NAME,INTERVIEW_DT,APPLICANT_HOMELESS_SW,PREF_CNTC_TM_TXT,CREATE_DT,PREF_CNTC_IND,ACTION_DT,VULNERABLE_SW,AUTHREP_INDV_ID_VRF_CD,AUTHREP_CAREGIVER_SW,COMPANY_ID,CHOICE_OFFICE_NUM,VIS_APPOINTMENT_SW,AUTHREP_PH_NUM,CREATE_USER_ID,DHS_EMP_CASE_SW,AUTHREP_SUFX_NAME,ARCHIVE_DT,OTHER_PH_NUM,APP_RECVD_DT,WORK_PH_NUM_EXT,AUTHREP_ORG_NAME,CDB_SNAP_DENIED_SW,CASE_NUM,NOTICE_METHOD_CD,CONVERSION_DT,SPOKEN_LANGUAGE_TYPE_CD,AUTH_REP_SW,UNIQUE_TRANS_ID,VAL_PHN_NUM_CD,AUTHREP_WORK_NUM,TEMPORARY_MEDICAL_IND,OFFICE_NUM,PRIOR_SNAP_SW,AUTH_REP_IND,MAIL_LINK_CARD_REQ_IND,GUIDE_TO_SERVICE_CD,AUTHREP_MID_NAME,CASE_MODE_CD,VIS_APPOINTMENT_DT,HISTORY_SEQ,CASE_CLOSED_DT,SUMMARY_INDICATOR,COOP_MED_SUPPORT_RIGHTS_SW,UNABLE_TO_LOCATE_SW,EMAIL,FUEL_TYPE_CD,CASE_STATUS_CD) VALUES(?,?,?,?,?,?,?,?,?,?,?,SYSDATE,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
	private static final String UPDATE_SQL = " UPDATE DC_CASES SET AUTHREP_WORK_NUM= ? ,WORK_PH_NUM_EXT= ? ,AUTHORIZED_EMAIL_SW= ? ,REGISTER_TO_VOTE= ? ,SUMMARY_INDICATOR= ? ,CHOICE_OFFICE_NUM= ? ,CDB_SNAP_DENIED_SW= ? ,APP_RECVD_DT= ? ,RELATIONSHIP_INDV_CD= ? ,FUEL_TYPE_CD= ? ,MSG_PHN_NUM= ? ,AUTHREP_PREFIX_NAME= ? ,REACTIVATION_IND= ? ,AUTH_REP_SW= ? ,NOTICE_METHOD_CD= ? ,EMAIL= ? ,INTERVIEW_TYPE_CD= ? ,APPLICANT_HOMELESS_SW= ? ,GUIDE_TO_SERVICE_CD= ? ,USER_ACTION_CD= ? ,VIS_APPOINTMENT_SW= ? ,AUTHREP_INDV_ID_VRF_CD= ? ,OFFICE_NUM= ? ,HISTORY_SEQ= DC_CASES_2SQ.NEXTVAL ,CREATE_DT= SYSDATE ,AVAIL_DAY= ? ,CASE_MODE_CD= ? ,SPOKEN_LANGUAGE_TYPE_CD= ? ,PRIOR_SNAP_SW= ? ,PHN_NUM_TYP= ? ,AUTHREP_MID_NAME= ? ,OTHER_PH_NUM= ? ,TEMPORARY_MEDICAL_IND= ? ,MAIL_LINK_CARD_REQ_IND= ? ,PREF_CNTC_IND= ? ,CASE_STATUS_CD= ? ,UNABLE_TO_LOCATE_SW= ? ,CONVERSION_DT= ? ,AUTH_REP_IND= ? ,COOP_MED_SUPPORT_RIGHTS_SW= ? ,VULNERABLE_SW= ? ,VIS_APPOINTMENT_DT= ? ,UNIQUE_TRANS_ID= ? ,PHN_TXT_TYP_CD= ? ,AUTHREP_LAST_NAME= ? ,SCHEDULE_CD= ? ,LANGUAGE_CD= ? ,PREF_CNTC_TM_TXT= ? ,AUTHREP_ORG_NAME= ? ,WORK_PH_NUM= ? ,AUTHREP_CAREGIVER_SW= ? ,CREATE_USER_ID= ? ,AUTHREP_FIRST_NAME= ? ,ACTION_DT= ? ,PROCESS_ID= ? ,AUTHREP_OTHER_NUM= ? ,CASE_CLOSED_DT= ? ,DHS_EMP_CASE_SW= ? ,PH_NUM= ? ,UNABLE_TO_LOCATE_DT= ? ,INTERVIEW_DT= ? ,VAL_PHN_NUM_CD= ? ,ARCHIVE_DT= ? ,AUTHREP_SUFX_NAME= ? ,COMPANY_ID= ? ,REACTIVATION_DT= ? ,RR_COUNTER_CREDIT_SW= ? ,AUTHREP_PH_NUM= ? ,EBT_ACCT_NUM= ?  WHERE CASE_NUM = ? ";
	private static final String DELETE_SQL = " DELETE FROM DC_CASES WHERE CASE_NUM = ?";
	public static final String[][] COLUMN_MAP = {
		{
		"AUTHREP_WORK_NUM","authrepWorkNum","java.lang.String"}
		,{
		"WORK_PH_NUM_EXT","workPhNumExt","long"}
		,{
		"AUTHORIZED_EMAIL_SW","authorizedEmailSw","char"}
		,{
		"REGISTER_TO_VOTE","registerToVote","java.lang.String"}
		,{
		"SUMMARY_INDICATOR","summaryIndicator","java.lang.String"}
		,{
		"CHOICE_OFFICE_NUM","choiceOfficeNum","long"}
		,{
		"CDB_SNAP_DENIED_SW","cdbSnapDeniedSw","char"}
		,{
		"APP_RECVD_DT","appRecvdDt","java.sql.Timestamp"}
		,{
		"RELATIONSHIP_INDV_CD","relationshipIndvCd","java.lang.String"}
		,{
		"FUEL_TYPE_CD","fuelTypeCd","java.lang.String"}
		,{
		"MSG_PHN_NUM","msgPhnNum","java.lang.String"}
		,{
		"AUTHREP_PREFIX_NAME","authrepPrefixName","java.lang.String"}
		,{
		"REACTIVATION_IND","reactivationInd","char"}
		,{
		"AUTH_REP_SW","authRepSw","char"}
		,{
		"NOTICE_METHOD_CD","noticeMethodCd","java.lang.String"}
		,{
		"EMAIL","email","java.lang.String"}
		,{
		"INTERVIEW_TYPE_CD","interviewTypeCd","java.lang.String"}
		,{
		"APPLICANT_HOMELESS_SW","applicantHomelessSw","char"}
		,{
		"GUIDE_TO_SERVICE_CD","guideToServiceCd","java.lang.String"}
		,{
		"USER_ACTION_CD","userActionCd","java.lang.String"}
		,{
		"VIS_APPOINTMENT_SW","visAppointmentSw","char"}
		,{
		"AUTHREP_INDV_ID_VRF_CD","authrepIndvIdVrfCd","java.lang.String"}
		,{
		"OFFICE_NUM","officeNum","long"}
		,{
		"HISTORY_SEQ","historySeq","long"}
		,{
		"CREATE_DT","createDt","java.sql.Timestamp"}
		,{
		"AVAIL_DAY","availDay","short"}
		,{
		"CASE_MODE_CD","caseModeCd","java.lang.String"}
		,{
		"SPOKEN_LANGUAGE_TYPE_CD","spokenLanguageTypeCd","java.lang.String"}
		,{
		"CASE_NUM","caseNum","long"}
		,{
		"PRIOR_SNAP_SW","priorSnapSw","char"}
		,{
		"PHN_NUM_TYP","phnNumTyp","char"}
		,{
		"AUTHREP_MID_NAME","authrepMidName","java.lang.String"}
		,{
		"OTHER_PH_NUM","otherPhNum","java.lang.String"}
		,{
		"TEMPORARY_MEDICAL_IND","temporaryMedicalInd","java.lang.String"}
		,{
		"MAIL_LINK_CARD_REQ_IND","mailLinkCardReqInd","char"}
		,{
		"PREF_CNTC_IND","prefCntcInd","long"}
		,{
		"CASE_STATUS_CD","caseStatusCd","java.lang.String"}
		,{
		"UNABLE_TO_LOCATE_SW","unableToLocateSw","char"}
		,{
		"CONVERSION_DT","conversionDt","java.sql.Timestamp"}
		,{
		"AUTH_REP_IND","authRepInd","char"}
		,{
		"COOP_MED_SUPPORT_RIGHTS_SW","coopMedSupportRightsSw","char"}
		,{
		"VULNERABLE_SW","vulnerableSw","char"}
		,{
		"VIS_APPOINTMENT_DT","visAppointmentDt","java.sql.Timestamp"}
		,{
		"UNIQUE_TRANS_ID","uniqueTransId","long"}
		,{
		"PHN_TXT_TYP_CD","phnTxtTypCd","java.lang.String"}
		,{
		"AUTHREP_LAST_NAME","authrepLastName","java.lang.String"}
		,{
		"SCHEDULE_CD","scheduleCd","short"}
		,{
		"LANGUAGE_CD","languageCd","java.lang.String"}
		,{
		"PREF_CNTC_TM_TXT","prefCntcTmTxt","java.lang.String"}
		,{
		"AUTHREP_ORG_NAME","authrepOrgName","java.lang.String"}
		,{
		"WORK_PH_NUM","workPhNum","java.lang.String"}
		,{
		"AUTHREP_CAREGIVER_SW","authrepCaregiverSw","char"}
		,{
		"CREATE_USER_ID","createUserId","java.lang.String"}
		,{
		"AUTHREP_FIRST_NAME","authrepFirstName","java.lang.String"}
		,{
		"ACTION_DT","actionDt","java.sql.Timestamp"}
		,{
		"PROCESS_ID","processId","java.lang.String"}
		,{
		"AUTHREP_OTHER_NUM","authrepOtherNum","java.lang.String"}
		,{
		"CASE_CLOSED_DT","caseClosedDt","java.sql.Timestamp"}
		,{
		"DHS_EMP_CASE_SW","dhsEmpCaseSw","char"}
		,{
		"PH_NUM","phNum","java.lang.String"}
		,{
		"UNABLE_TO_LOCATE_DT","unableToLocateDt","java.sql.Timestamp"}
		,{
		"INTERVIEW_DT","interviewDt","java.sql.Timestamp"}
		,{
		"VAL_PHN_NUM_CD","valPhnNumCd","java.lang.String"}
		,{
		"ARCHIVE_DT","archiveDt","java.sql.Timestamp"}
		,{
		"AUTHREP_SUFX_NAME","authrepSufxName","java.lang.String"}
		,{
		"rowid","rowid","java.lang.String"}
		,{
		"COMPANY_ID","companyId","long"}
		,{
		"REACTIVATION_DT","reactivationDt","java.sql.Timestamp"}
		,{
		"RR_COUNTER_CREDIT_SW","rrCounterCreditSw","char"}
		,{
		"AUTHREP_PH_NUM","authrepPhNum","java.lang.String"}
		,{
		"EBT_ACCT_NUM","ebtAcctNum","long"}
	}
	;
	public static String[][] getMAP() {
		return COLUMN_MAP;
	}
	public String[][] getMap() {
		return getMAP();
	}
	public static final String[] KEY_MAP = {
	"CASE_NUM","rowid"}
	;
	public static String[] getKEYS() {
		return KEY_MAP;
	}
	public String[] getKeys() {
		return getKEYS();
	}
	public static final String[] TABLE_MAP = {
	"DC_CASES"}
	;
	public static String[] getTABLEMAP() {
		return TABLE_MAP;
	}
	public String[] getTableMap() {
		return getTABLEMAP();
	}
	public static String getTable() {
		return getTABLEMAP()[0];
	}
	public String getTableName() {
		return getTable();
	}
	
	public void getRowFromResultSet(DcCasesCargo row, ResultSet rs) throws SQLException{
		row.setAuthrepWorkNum(rs.getString("AUTHREP_WORK_NUM"));
		row.setWorkPhNumExt(rs.getLong("WORK_PH_NUM_EXT"));
		row.setAuthorizedEmailSw(getCharacterFromResultSet(rs,"AUTHORIZED_EMAIL_SW"));
		row.setRegisterToVote(rs.getString("REGISTER_TO_VOTE"));
		row.setSummaryIndicator(getCharacterFromResultSet(rs,"SUMMARY_INDICATOR"));
		row.setChoiceOfficeNum(rs.getLong("CHOICE_OFFICE_NUM"));
		row.setCdbSnapDeniedSw(getCharacterFromResultSet(rs,"CDB_SNAP_DENIED_SW"));
		row.setAppRecvdDt(rs.getTimestamp("APP_RECVD_DT"));
		row.setRelationshipIndvCd(rs.getString("RELATIONSHIP_INDV_CD"));
		row.setFuelTypeCd(rs.getString("FUEL_TYPE_CD"));
		row.setMsgPhnNum(rs.getString("MSG_PHN_NUM"));
		row.setAuthrepPrefixName(rs.getString("AUTHREP_PREFIX_NAME"));
		row.setReactivationInd(getCharacterFromResultSet(rs,"REACTIVATION_IND"));
		row.setAuthRepSw(getCharacterFromResultSet(rs,"AUTH_REP_SW"));
		row.setNoticeMethodCd(rs.getString("NOTICE_METHOD_CD"));
		row.setEmail(rs.getString("EMAIL"));
		row.setInterviewTypeCd(rs.getString("INTERVIEW_TYPE_CD"));
		row.setApplicantHomelessSw(getCharacterFromResultSet(rs,"APPLICANT_HOMELESS_SW"));
		row.setGuideToServiceCd(rs.getString("GUIDE_TO_SERVICE_CD"));
		row.setUserActionCd(rs.getString("USER_ACTION_CD"));
		row.setVisAppointmentSw(rs.getString("VIS_APPOINTMENT_SW"));
		row.setAuthrepIndvIdVrfCd(rs.getString("AUTHREP_INDV_ID_VRF_CD"));
		row.setOfficeNum(rs.getLong("OFFICE_NUM"));
		row.setHistorySeq(rs.getLong("HISTORY_SEQ"));
		row.setCreateDt(rs.getTimestamp("CREATE_DT"));
		row.setAvailDay(rs.getShort("AVAIL_DAY"));
		row.setCaseModeCd(rs.getString("CASE_MODE_CD"));
		row.setSpokenLanguageTypeCd(rs.getString("SPOKEN_LANGUAGE_TYPE_CD"));
		row.setCaseNum(rs.getLong("CASE_NUM"));
		row.setPriorSnapSw(getCharacterFromResultSet(rs,"PRIOR_SNAP_SW"));
		row.setPhnNumTyp(getCharacterFromResultSet(rs,"PHN_NUM_TYP"));
		row.setAuthrepMidName(rs.getString("AUTHREP_MID_NAME"));
		row.setOtherPhNum(rs.getString("OTHER_PH_NUM"));
		row.setTemporaryMedicalInd(rs.getString("TEMPORARY_MEDICAL_IND"));
		row.setMailLinkCardReqInd(getCharacterFromResultSet(rs,"MAIL_LINK_CARD_REQ_IND"));
		row.setPrefCntcInd(rs.getLong("PREF_CNTC_IND"));
		row.setCaseStatusCd(rs.getString("CASE_STATUS_CD"));
		row.setUnableToLocateSw(getCharacterFromResultSet(rs,"UNABLE_TO_LOCATE_SW"));
		row.setConversionDt(rs.getTimestamp("CONVERSION_DT"));
		row.setAuthRepInd(getCharacterFromResultSet(rs,"AUTH_REP_IND"));
		row.setCoopMedSupportRightsSw(getCharacterFromResultSet(rs,"COOP_MED_SUPPORT_RIGHTS_SW"));
		row.setVulnerableSw(getCharacterFromResultSet(rs,"VULNERABLE_SW"));
		row.setVisAppointmentDt(rs.getTimestamp("VIS_APPOINTMENT_DT"));
		row.setUniqueTransId(rs.getLong("UNIQUE_TRANS_ID"));
		row.setPhnTxtTypCd(rs.getString("PHN_TXT_TYP_CD"));
		row.setAuthrepLastName(rs.getString("AUTHREP_LAST_NAME"));
		row.setScheduleCd(rs.getShort("SCHEDULE_CD"));
		row.setLanguageCd(rs.getString("LANGUAGE_CD"));
		row.setPrefCntcTmTxt(rs.getString("PREF_CNTC_TM_TXT"));
		row.setAuthrepOrgName(rs.getString("AUTHREP_ORG_NAME"));
		row.setWorkPhNum(rs.getString("WORK_PH_NUM"));
		row.setAuthrepCaregiverSw(getCharacterFromResultSet(rs,"AUTHREP_CAREGIVER_SW"));
		row.setCreateUserId(rs.getString("CREATE_USER_ID"));
		row.setAuthrepFirstName(rs.getString("AUTHREP_FIRST_NAME"));
		row.setActionDt(rs.getTimestamp("ACTION_DT"));
		row.setProcessId(rs.getString("PROCESS_ID"));
		row.setAuthrepOtherNum(rs.getString("AUTHREP_OTHER_NUM"));
		row.setCaseClosedDt(rs.getTimestamp("CASE_CLOSED_DT"));
		row.setDhsEmpCaseSw(getCharacterFromResultSet(rs,"DHS_EMP_CASE_SW"));
		row.setPhNum(rs.getString("PH_NUM"));
		row.setUnableToLocateDt(rs.getTimestamp("UNABLE_TO_LOCATE_DT"));
		row.setInterviewDt(rs.getTimestamp("INTERVIEW_DT"));
		row.setValPhnNumCd(rs.getString("VAL_PHN_NUM_CD"));
		row.setArchiveDt(rs.getTimestamp("ARCHIVE_DT"));
		row.setAuthrepSufxName(rs.getString("AUTHREP_SUFX_NAME"));
		row.setRowid(rs.getString("rowid"));
		row.setCompanyId(rs.getLong("COMPANY_ID"));
		row.setReactivationDt(rs.getTimestamp("REACTIVATION_DT"));
		row.setRrCounterCreditSw(getCharacterFromResultSet(rs,"RR_COUNTER_CREDIT_SW"));
		row.setAuthrepPhNum(rs.getString("AUTHREP_PH_NUM"));
		row.setEbtAcctNum(rs.getLong("EBT_ACCT_NUM"));
		row.setVoidSw('N');
	}
	public void getAuditRowFromResultSet(DcCasesCargo row, ResultSet rs) throws SQLException{
		row.setAuthrepFirstName(rs.getString("AUTHREP_FIRST_NAME"));
		row.setReactivationDt(rs.getTimestamp("REACTIVATION_DT"));
		row.setRrCounterCreditSw(getCharacterFromResultSet(rs,"RR_COUNTER_CREDIT_SW"));
		row.setScheduleCd(rs.getShort("SCHEDULE_CD"));
		row.setReactivationInd(getCharacterFromResultSet(rs,"REACTIVATION_IND"));
		row.setAuditUserId(rs.getString("AUDIT_USER_ID"));
		row.setProcessId(rs.getString("PROCESS_ID"));
		row.setAvailDay(rs.getShort("AVAIL_DAY"));
		row.setPhnTxtTypCd(rs.getString("PHN_TXT_TYP_CD"));
		row.setWorkPhNum(rs.getString("WORK_PH_NUM"));
		row.setRegisterToVote(rs.getString("REGISTER_TO_VOTE"));
		row.setAuditDt(rs.getTimestamp("AUDIT_DT"));
		row.setUserActionCd(rs.getString("USER_ACTION_CD"));
		row.setMsgPhnNum(rs.getString("MSG_PHN_NUM"));
		row.setPhNum(rs.getString("PH_NUM"));
		row.setEbtAcctNum(rs.getLong("EBT_ACCT_NUM"));
		row.setRelationshipIndvCd(rs.getString("RELATIONSHIP_INDV_CD"));
		row.setUnableToLocateDt(rs.getTimestamp("UNABLE_TO_LOCATE_DT"));
		row.setLanguageCd(rs.getString("LANGUAGE_CD"));
		row.setInterviewTypeCd(rs.getString("INTERVIEW_TYPE_CD"));
		row.setPhnNumTyp(getCharacterFromResultSet(rs,"PHN_NUM_TYP"));
		row.setAuthrepLastName(rs.getString("AUTHREP_LAST_NAME"));
		row.setAuthorizedEmailSw(getCharacterFromResultSet(rs,"AUTHORIZED_EMAIL_SW"));
		row.setAuthrepOtherNum(rs.getString("AUTHREP_OTHER_NUM"));
		row.setAuthrepPrefixName(rs.getString("AUTHREP_PREFIX_NAME"));
		row.setInterviewDt(rs.getTimestamp("INTERVIEW_DT"));
		row.setApplicantHomelessSw(getCharacterFromResultSet(rs,"APPLICANT_HOMELESS_SW"));
		row.setPrefCntcTmTxt(rs.getString("PREF_CNTC_TM_TXT"));
		row.setCreateDt(rs.getTimestamp("CREATE_DT"));
		row.setPrefCntcInd(rs.getLong("PREF_CNTC_IND"));
		row.setActionDt(rs.getTimestamp("ACTION_DT"));
		row.setVulnerableSw(getCharacterFromResultSet(rs,"VULNERABLE_SW"));
		row.setAuthrepIndvIdVrfCd(rs.getString("AUTHREP_INDV_ID_VRF_CD"));
		row.setAuthrepCaregiverSw(getCharacterFromResultSet(rs,"AUTHREP_CAREGIVER_SW"));
		row.setCompanyId(rs.getLong("COMPANY_ID"));
		row.setChoiceOfficeNum(rs.getLong("CHOICE_OFFICE_NUM"));
		row.setVisAppointmentSw(rs.getString("VIS_APPOINTMENT_SW"));
		row.setAuthrepPhNum(rs.getString("AUTHREP_PH_NUM"));
		row.setCreateUserId(rs.getString("CREATE_USER_ID"));
		row.setDhsEmpCaseSw(getCharacterFromResultSet(rs,"DHS_EMP_CASE_SW"));
		row.setAuthrepSufxName(rs.getString("AUTHREP_SUFX_NAME"));
		row.setArchiveDt(rs.getTimestamp("ARCHIVE_DT"));
		row.setOtherPhNum(rs.getString("OTHER_PH_NUM"));
		row.setAppRecvdDt(rs.getTimestamp("APP_RECVD_DT"));
		row.setWorkPhNumExt(rs.getLong("WORK_PH_NUM_EXT"));
		row.setAuthrepOrgName(rs.getString("AUTHREP_ORG_NAME"));
		row.setCdbSnapDeniedSw(getCharacterFromResultSet(rs,"CDB_SNAP_DENIED_SW"));
		row.setCaseNum(rs.getLong("CASE_NUM"));
		row.setNoticeMethodCd(rs.getString("NOTICE_METHOD_CD"));
		row.setConversionDt(rs.getTimestamp("CONVERSION_DT"));
		row.setSpokenLanguageTypeCd(rs.getString("SPOKEN_LANGUAGE_TYPE_CD"));
		row.setAuthRepSw(getCharacterFromResultSet(rs,"AUTH_REP_SW"));
		row.setUniqueTransId(rs.getLong("UNIQUE_TRANS_ID"));
		row.setValPhnNumCd(rs.getString("VAL_PHN_NUM_CD"));
		row.setAuthrepWorkNum(rs.getString("AUTHREP_WORK_NUM"));
		row.setTemporaryMedicalInd(rs.getString("TEMPORARY_MEDICAL_IND"));
		row.setOfficeNum(rs.getLong("OFFICE_NUM"));
		row.setPriorSnapSw(getCharacterFromResultSet(rs,"PRIOR_SNAP_SW"));
		row.setAuthRepInd(getCharacterFromResultSet(rs,"AUTH_REP_IND"));
		row.setMailLinkCardReqInd(getCharacterFromResultSet(rs,"MAIL_LINK_CARD_REQ_IND"));
		row.setGuideToServiceCd(rs.getString("GUIDE_TO_SERVICE_CD"));
		row.setAuthrepMidName(rs.getString("AUTHREP_MID_NAME"));
		row.setCaseModeCd(rs.getString("CASE_MODE_CD"));
		row.setVisAppointmentDt(rs.getTimestamp("VIS_APPOINTMENT_DT"));
		row.setHistorySeq(rs.getLong("HISTORY_SEQ"));
		row.setCaseClosedDt(rs.getTimestamp("CASE_CLOSED_DT"));
		row.setRowid(rs.getString("rowid"));
		row.setSummaryIndicator(getCharacterFromResultSet(rs,"SUMMARY_INDICATOR"));
		row.setCoopMedSupportRightsSw(getCharacterFromResultSet(rs,"COOP_MED_SUPPORT_RIGHTS_SW"));
		row.setUnableToLocateSw(getCharacterFromResultSet(rs,"UNABLE_TO_LOCATE_SW"));
		row.setEmail(rs.getString("EMAIL"));
		row.setFuelTypeCd(rs.getString("FUEL_TYPE_CD"));
		row.setCaseStatusCd(rs.getString("CASE_STATUS_CD"));
		row.setVoidSw('Y');
	}
	public IValueObject findByPrimaryKey(IPrimaryKey aKey) throws TIERSRunTimeException {
		DcCasesPrimaryKey key = (DcCasesPrimaryKey)aKey;
		Connection conn = null;
		
		PreparedStatement statement = null;
		
		ResultSet rs = null;
		DcCasesCargo cb = new DcCasesCargo();
		try {
			conn = getConnection();
			String clause = " WHERE (( CASE_NUM = ?)) WITH UR";
			if (key.getRowid() != null) {
				clause = " WHERE RID() = ? WITH UR";
			}
			String sqlString = SELECT_SQL  + " " + clause;
			if(getLogger().isLoggable(this,ILog.INFO)) {
				getLogger().log(this, ILog.INFO, "sql="+sqlString);
			}
			statement = conn.prepareStatement(sqlString);
			if (key.getRowid() != null) {
				statement.setLong(1,Long.parseLong(key.getRowid()));
			}
			else {
				int idx = 1;
				statement.setLong(idx++,key.getCaseNum());
			}
			
			rs = statement.executeQuery();
			if (rs.next()) {
				
				getRowFromResultSet(cb,rs);
			}
		}
		catch (SQLException e) {
			
			throw new TIERSRunTimeException(e.getMessage());
		}
		finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (statement != null) {
					statement.close();
				}
				if (conn != null && getClose()) {
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage());
			}
		}
		return cb;
	}
	public IValueObject findByPrimaryKey(ICargo cb) throws TIERSRunTimeException {
		DcCasesCargo cargo = (DcCasesCargo)cb;
		cargo = (DcCasesCargo)findByPrimaryKey(getKey(cargo));
		if ( !cargo.getKey().isCompleteLogicalPrimaryKey()) {
			//select value from auditTable
			DcCasesCargo lcargo = (DcCasesCargo)cb;
			Connection conn = null;
			
			PreparedStatement statement = null;
			
			ResultSet rs = null;
			cargo = new DcCasesCargo();
			try {
				conn = getConnection();
				String clause = " WHERE (( HISTORY_SEQ = ? AND  CASE_NUM = ?)) WITH UR";
				if (lcargo.getRowid() != null) {
					clause = " WHERE RID() = ? WITH UR";
				}
				String sqlString = SELECT_SQL_A  + " " + clause;
				if(getLogger().isLoggable(this,ILog.INFO)) {
					getLogger().log(this, ILog.INFO, "sql="+sqlString);
				}
				statement = conn.prepareStatement(sqlString);
				if (lcargo.getRowid() != null) {
					statement.setLong(1,Long.parseLong(lcargo.getRowid()));
				}
				else {
					int idx = 1;
					statement.setLong(idx++,lcargo.getHistorySeq());
					statement.setLong(idx++,lcargo.getCaseNum());
				}
				
				rs = statement.executeQuery();
				if (rs.next()) {
					
					getAuditRowFromResultSet(cargo,rs);
				}
			}
			catch (SQLException e) {
				
				throw new TIERSRunTimeException(e.getMessage());
			}
			finally {
				try {
					if (rs != null) {
						rs.close();
					}
					if (statement != null) {
						statement.close();
					}
					if (conn != null && getClose()) {
						conn.close();
					}
				}
				catch (SQLException e) {
					throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage());
				}
			}
		}
		return cargo;
	}
	public Collection findAll(IPrimaryKey aKey) throws TIERSRunTimeException {
		DcCasesPrimaryKey key = (DcCasesPrimaryKey)aKey;
		ArrayList v = new ArrayList();
		Connection conn = null;
		
		PreparedStatement statement = null;
		
		ResultSet rs = null;
		try {
			conn = getConnection();
			String clause = " WHERE (( CASE_NUM = ?))";
			String sqlString = SELECT_SQL  + " " + clause ;
			if(getLogger().isLoggable(this,ILog.INFO)) {
				getLogger().log(this, ILog.INFO, "sql="+sqlString);
			}
			statement = conn.prepareStatement(sqlString);
			int idx = 1;
			statement.setLong(idx++,key.getCaseNum());
			rs = statement.executeQuery();
			while(rs.next()) {
				DcCasesCargo cb = new DcCasesCargo();
				getRowFromResultSet(cb,rs);
				v.add(cb);
			}
			statement.close();
			rs.close();
			idx = 1;
			clause = " WHERE (( CASE_NUM = ?))";
			String auditSqlString = SELECT_SQL_A  + " " + clause ;
			if(getLogger().isLoggable(this,ILog.INFO)) {
				getLogger().log(this, ILog.INFO, "sql="+auditSqlString);
			}
			statement = conn.prepareStatement(auditSqlString);
			statement.setLong(idx++,key.getCaseNum());
			rs = statement.executeQuery();
			while(rs.next()) {
				DcCasesCargo cb = new DcCasesCargo();
				getAuditRowFromResultSet(cb,rs);
				v.add(cb);
			}
		}
		catch (SQLException e) {
			
			throw new TIERSRunTimeException(e.getMessage());
		}
		finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (statement != null) {
					statement.close();
				}
				if (conn != null && getClose()) {
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage());
			}
		}
		return v;
	}
	/**
	* Use findByPrimaryKey(IPrimaryKey)
	* @deprecated
	*/
	public Collection findAllNoHistorySequence(IPrimaryKey aKey) throws TIERSRunTimeException {
		ArrayList v = new ArrayList();
		DcCasesCargo cb = (DcCasesCargo) findByPrimaryKey(aKey);
		if(cb.getKey().isCompleteLogicalPrimaryKey()) v.add(cb);
		return v;
	}
	
	public DcCasesCargo[] select(String clause) throws TIERSRunTimeException {
		ArrayList v = new ArrayList();
		Connection conn = null;
		
		PreparedStatement statement = null;
		
		ResultSet rs = null;
		DcCasesCargo[] rows = null;
		try {
			conn = getConnection();
			String sqlString = SELECT_SQL + " " + clause;
			if(getLogger().isLoggable(this,ILog.INFO)) {
				getLogger().log(this, ILog.INFO, "sql="+sqlString);
			}
			statement = conn.prepareStatement(sqlString);
			rs = statement.executeQuery();
			while(rs.next()) {
				DcCasesCargo row = new DcCasesCargo();
				getRowFromResultSet(row,rs);
				v.add(row);
			}
			rows = new DcCasesCargo[v.size()];
			v.toArray( rows);
		}
		catch (SQLException e) {
			
			throw new TIERSRunTimeException(e.getMessage());
			
		}
		finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (statement != null) {
					statement.close();
				}
				if (conn != null && getClose()) {
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage());
			}
		}
		return rows;
	}
	public IPrimaryKey getKey(ICargo cb) {
		DcCasesCargo cargo = (DcCasesCargo)cb;
		DcCasesPrimaryKey key = new DcCasesPrimaryKey();
		key.setCaseNum(cargo.getCaseNum());
		key.setRowid(cargo.getRowid());
		return key;
	}
	public boolean insert(ICargo cb) throws TIERSRunTimeException {
		DcCasesCargo cargo = (DcCasesCargo)cb;
		Connection conn = null;
		
		PreparedStatement statement = null;
		
		int rowCount = 0;
		try {
			conn = getConnection();
			SelectHelper.setTransID(conn, cb, TRANSID);
			int idx = 1;
			String sqlString=INSERT_SQL;
			if(getLogger().isLoggable(this,ILog.INFO)) {
				getLogger().log(this, ILog.INFO, "sql="+sqlString);
			}
			statement = conn.prepareStatement(sqlString);
			statement.setString(idx++,cargo.getAuthrepWorkNum());
			statement.setLong(idx++,cargo.getWorkPhNumExt());
			statement.setString(idx++,cargo.getAuthorizedEmailSw()== 0 ? null : cargo.getAuthorizedEmailSw() + "");
			statement.setString(idx++,cargo.getRegisterToVote());
			statement.setString(idx++,cargo.getSummaryIndicator()== 0 ? null : cargo.getSummaryIndicator() + "");
			statement.setLong(idx++,cargo.getChoiceOfficeNum());
			statement.setString(idx++,cargo.getCdbSnapDeniedSw()== 0 ? null : cargo.getCdbSnapDeniedSw() + "");
			statement.setTimestamp(idx++,cargo.getAppRecvdDt());
			statement.setString(idx++,cargo.getRelationshipIndvCd());
			statement.setString(idx++,cargo.getFuelTypeCd());
			statement.setString(idx++,cargo.getMsgPhnNum());
			statement.setString(idx++,cargo.getAuthrepPrefixName());
			statement.setString(idx++,cargo.getReactivationInd()== 0 ? null : cargo.getReactivationInd() + "");
			statement.setString(idx++,cargo.getAuthRepSw()== 0 ? null : cargo.getAuthRepSw() + "");
			statement.setString(idx++,cargo.getNoticeMethodCd());
			statement.setString(idx++,cargo.getEmail());
			statement.setString(idx++,cargo.getInterviewTypeCd());
			statement.setString(idx++,cargo.getApplicantHomelessSw()== 0 ? null : cargo.getApplicantHomelessSw() + "");
			statement.setString(idx++,cargo.getGuideToServiceCd());
			statement.setString(idx++,cargo.getUserActionCd());
			statement.setString(idx++,cargo.getVisAppointmentSw());
			statement.setString(idx++,cargo.getAuthrepIndvIdVrfCd());
			if(cargo.getOfficeNum() == 0) {
				statement.setNull(idx++,Types.BIGINT);
			}
			else statement.setLong(idx++,cargo.getOfficeNum());
			statement.setInt(idx++,cargo.getAvailDay());
			statement.setString(idx++,cargo.getCaseModeCd());
			statement.setString(idx++,cargo.getSpokenLanguageTypeCd());
			statement.setLong(idx++,cargo.getCaseNum());
			statement.setString(idx++,cargo.getPriorSnapSw()== 0 ? null : cargo.getPriorSnapSw() + "");
			statement.setString(idx++,cargo.getPhnNumTyp()== 0 ? null : cargo.getPhnNumTyp() + "");
			statement.setString(idx++,cargo.getAuthrepMidName());
			statement.setString(idx++,cargo.getOtherPhNum());
			statement.setString(idx++,cargo.getTemporaryMedicalInd());
			statement.setString(idx++,cargo.getMailLinkCardReqInd()== 0 ? null : cargo.getMailLinkCardReqInd() + "");
			statement.setLong(idx++,cargo.getPrefCntcInd());
			statement.setString(idx++,cargo.getCaseStatusCd());
			statement.setString(idx++,cargo.getUnableToLocateSw()== 0 ? null : cargo.getUnableToLocateSw() + "");
			statement.setTimestamp(idx++,cargo.getConversionDt());
			statement.setString(idx++,cargo.getAuthRepInd()== 0 ? null : cargo.getAuthRepInd() + "");
			statement.setString(idx++,cargo.getCoopMedSupportRightsSw()== 0 ? null : cargo.getCoopMedSupportRightsSw() + "");
			statement.setString(idx++,cargo.getVulnerableSw()== 0 ? null : cargo.getVulnerableSw() + "");
			statement.setTimestamp(idx++,cargo.getVisAppointmentDt());
			statement.setLong(idx++,cargo.getUniqueTransId());
			statement.setString(idx++,cargo.getPhnTxtTypCd());
			statement.setString(idx++,cargo.getAuthrepLastName());
			statement.setInt(idx++,cargo.getScheduleCd());
			statement.setString(idx++,cargo.getLanguageCd());
			statement.setString(idx++,cargo.getPrefCntcTmTxt());
			statement.setString(idx++,cargo.getAuthrepOrgName());
			statement.setString(idx++,cargo.getWorkPhNum());
			statement.setString(idx++,cargo.getAuthrepCaregiverSw()== 0 ? null : cargo.getAuthrepCaregiverSw() + "");
			statement.setString(idx++,getContext().getUserId());
			statement.setString(idx++,cargo.getAuthrepFirstName());
			statement.setTimestamp(idx++,cargo.getActionDt());
			statement.setString(idx++,cargo.getProcessId());
			statement.setString(idx++,cargo.getAuthrepOtherNum());
			statement.setTimestamp(idx++,cargo.getCaseClosedDt());
			statement.setString(idx++,cargo.getDhsEmpCaseSw()== 0 ? null : cargo.getDhsEmpCaseSw() + "");
			statement.setString(idx++,cargo.getPhNum());
			statement.setTimestamp(idx++,cargo.getUnableToLocateDt());
			statement.setTimestamp(idx++,cargo.getInterviewDt());
			statement.setString(idx++,cargo.getValPhnNumCd());
			statement.setTimestamp(idx++,cargo.getArchiveDt());
			statement.setString(idx++,cargo.getAuthrepSufxName());
			if(cargo.getCompanyId() == 0) {
				statement.setNull(idx++,Types.BIGINT);
			}
			else statement.setLong(idx++,cargo.getCompanyId());
			statement.setTimestamp(idx++,cargo.getReactivationDt());
			statement.setString(idx++,cargo.getRrCounterCreditSw()== 0 ? null : cargo.getRrCounterCreditSw() + "");
			statement.setString(idx++,cargo.getAuthrepPhNum());
			statement.setLong(idx++,cargo.getEbtAcctNum());
			rowCount = statement.executeUpdate();
			if (rowCount == 0) throw new TIERSRunTimeException("No Records updated");
		}
		catch (SQLException e) {
			
			throw new TIERSRunTimeException(e.getMessage());
			
		}
		finally {
			try {
				if (statement != null) {
					statement.close();
				}
				if (conn != null && getClose()) {
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage());
			}
		}
		return true;
	}
	public boolean insertAudit(ICargo cb) throws TIERSRunTimeException {
		DcCasesCargo cargo = (DcCasesCargo)cb;
		Connection conn = null;
		
		PreparedStatement statement = null;
		
		int rowCount = 0;
		try {
			conn = getConnection();
			int idx = 1;
			String sqlString=INSERT_SQL_A;
			if(getLogger().isLoggable(this,ILog.INFO)) {
				getLogger().log(this, ILog.INFO, "sql="+sqlString);
			}
			statement = conn.prepareStatement(sqlString);
			statement.setString(idx++,cargo.getAuthrepFirstName());
			statement.setTimestamp(idx++,cargo.getReactivationDt());
			statement.setString(idx++,cargo.getRrCounterCreditSw()== 0 ? null : cargo.getRrCounterCreditSw() + "");
			statement.setInt(idx++,cargo.getScheduleCd());
			statement.setString(idx++,cargo.getReactivationInd()== 0 ? null : cargo.getReactivationInd() + "");
			statement.setString(idx++,getContext().getUserId());
			statement.setString(idx++,cargo.getProcessId());
			statement.setInt(idx++,cargo.getAvailDay());
			statement.setString(idx++,cargo.getPhnTxtTypCd());
			statement.setString(idx++,cargo.getWorkPhNum());
			statement.setString(idx++,cargo.getRegisterToVote());
			statement.setString(idx++,cargo.getUserActionCd());
			statement.setString(idx++,cargo.getMsgPhnNum());
			statement.setString(idx++,cargo.getPhNum());
			statement.setLong(idx++,cargo.getEbtAcctNum());
			statement.setString(idx++,cargo.getRelationshipIndvCd());
			statement.setTimestamp(idx++,cargo.getUnableToLocateDt());
			statement.setString(idx++,cargo.getLanguageCd());
			statement.setString(idx++,cargo.getInterviewTypeCd());
			statement.setString(idx++,cargo.getPhnNumTyp()== 0 ? null : cargo.getPhnNumTyp() + "");
			statement.setString(idx++,cargo.getAuthrepLastName());
			statement.setString(idx++,cargo.getAuthorizedEmailSw()== 0 ? null : cargo.getAuthorizedEmailSw() + "");
			statement.setString(idx++,cargo.getAuthrepOtherNum());
			statement.setString(idx++,cargo.getAuthrepPrefixName());
			statement.setTimestamp(idx++,cargo.getInterviewDt());
			statement.setString(idx++,cargo.getApplicantHomelessSw()== 0 ? null : cargo.getApplicantHomelessSw() + "");
			statement.setString(idx++,cargo.getPrefCntcTmTxt());
			statement.setTimestamp(idx++,cargo.getCreateDt());
			statement.setLong(idx++,cargo.getPrefCntcInd());
			statement.setTimestamp(idx++,cargo.getActionDt());
			statement.setString(idx++,cargo.getVulnerableSw()== 0 ? null : cargo.getVulnerableSw() + "");
			statement.setString(idx++,cargo.getAuthrepIndvIdVrfCd());
			statement.setString(idx++,cargo.getAuthrepCaregiverSw()== 0 ? null : cargo.getAuthrepCaregiverSw() + "");
			statement.setLong(idx++,cargo.getCompanyId());
			statement.setLong(idx++,cargo.getChoiceOfficeNum());
			statement.setString(idx++,cargo.getVisAppointmentSw());
			statement.setString(idx++,cargo.getAuthrepPhNum());
			statement.setString(idx++,cargo.getCreateUserId());
			statement.setString(idx++,cargo.getDhsEmpCaseSw()== 0 ? null : cargo.getDhsEmpCaseSw() + "");
			statement.setString(idx++,cargo.getAuthrepSufxName());
			statement.setTimestamp(idx++,cargo.getArchiveDt());
			statement.setString(idx++,cargo.getOtherPhNum());
			statement.setTimestamp(idx++,cargo.getAppRecvdDt());
			statement.setLong(idx++,cargo.getWorkPhNumExt());
			statement.setString(idx++,cargo.getAuthrepOrgName());
			statement.setString(idx++,cargo.getCdbSnapDeniedSw()== 0 ? null : cargo.getCdbSnapDeniedSw() + "");
			statement.setLong(idx++,cargo.getCaseNum());
			statement.setString(idx++,cargo.getNoticeMethodCd());
			statement.setTimestamp(idx++,cargo.getConversionDt());
			statement.setString(idx++,cargo.getSpokenLanguageTypeCd());
			statement.setString(idx++,cargo.getAuthRepSw()== 0 ? null : cargo.getAuthRepSw() + "");
			statement.setLong(idx++,cargo.getUniqueTransId());
			statement.setString(idx++,cargo.getValPhnNumCd());
			statement.setString(idx++,cargo.getAuthrepWorkNum());
			statement.setString(idx++,cargo.getTemporaryMedicalInd());
			statement.setLong(idx++,cargo.getOfficeNum());
			statement.setString(idx++,cargo.getPriorSnapSw()== 0 ? null : cargo.getPriorSnapSw() + "");
			statement.setString(idx++,cargo.getAuthRepInd()== 0 ? null : cargo.getAuthRepInd() + "");
			statement.setString(idx++,cargo.getMailLinkCardReqInd()== 0 ? null : cargo.getMailLinkCardReqInd() + "");
			statement.setString(idx++,cargo.getGuideToServiceCd());
			statement.setString(idx++,cargo.getAuthrepMidName());
			statement.setString(idx++,cargo.getCaseModeCd());
			statement.setTimestamp(idx++,cargo.getVisAppointmentDt());
			statement.setLong(idx++,cargo.getHistorySeq());
			statement.setTimestamp(idx++,cargo.getCaseClosedDt());
			statement.setString(idx++,cargo.getSummaryIndicator() == 0 ? null: cargo.getSummaryIndicator() + "" );
			statement.setString(idx++,cargo.getCoopMedSupportRightsSw()== 0 ? null : cargo.getCoopMedSupportRightsSw() + "");
			statement.setString(idx++,cargo.getUnableToLocateSw()== 0 ? null : cargo.getUnableToLocateSw() + "");
			statement.setString(idx++,cargo.getEmail());
			statement.setString(idx++,cargo.getFuelTypeCd());
			statement.setString(idx++,cargo.getCaseStatusCd());
			rowCount = statement.executeUpdate();
			if (rowCount == 0) throw new TIERSRunTimeException("No Records updated");
		}
		catch (SQLException e) {
			
			throw new TIERSRunTimeException(e.getMessage());
			
		}
		finally {
			try {
				if (statement != null) {
					statement.close();
				}
				if (conn != null && getClose()) {
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage());
			}
		}
		return true;
	}
	public boolean update(ICargo cb) throws TIERSRunTimeException {
		DcCasesCargo cargo = (DcCasesCargo)cb;
		Connection conn = null;
		
		PreparedStatement statement = null;
		
		int rowCount = 0;
		try {
			conn = getConnection();
			SelectHelper.selectForUpdate(conn, cargo.getUniqueTransId(), cargo.getRowid(), getTable());
			cargo.setUniqueTransId(0);
			SelectHelper.setTransID(conn, cargo, TRANSID);
			String sqlString=UPDATE_SQL;
			if(getLogger().isLoggable(this,ILog.INFO)) {
				getLogger().log(this, ILog.INFO, "sql="+sqlString);
			}
			statement = conn.prepareStatement(sqlString);
			int idx = 1;
			statement.setString(idx++,cargo.getAuthrepWorkNum());
			statement.setLong(idx++,cargo.getWorkPhNumExt());
			statement.setString(idx++,cargo.getAuthorizedEmailSw()== 0 ? null : cargo.getAuthorizedEmailSw() + "");
			statement.setString(idx++,cargo.getRegisterToVote());
			statement.setString(idx++,cargo.getSummaryIndicator()== 0 ? null : cargo.getSummaryIndicator() + "");
			statement.setLong(idx++,cargo.getChoiceOfficeNum());
			statement.setString(idx++,cargo.getCdbSnapDeniedSw()== 0 ? null : cargo.getCdbSnapDeniedSw() + "");
			statement.setTimestamp(idx++,cargo.getAppRecvdDt());
			statement.setString(idx++,cargo.getRelationshipIndvCd());
			statement.setString(idx++,cargo.getFuelTypeCd());
			statement.setString(idx++,cargo.getMsgPhnNum());
			statement.setString(idx++,cargo.getAuthrepPrefixName());
			statement.setString(idx++,cargo.getReactivationInd()== 0 ? null : cargo.getReactivationInd() + "");
			statement.setString(idx++,cargo.getAuthRepSw()== 0 ? null : cargo.getAuthRepSw() + "");
			statement.setString(idx++,cargo.getNoticeMethodCd());
			statement.setString(idx++,cargo.getEmail());
			statement.setString(idx++,cargo.getInterviewTypeCd());
			statement.setString(idx++,cargo.getApplicantHomelessSw()== 0 ? null : cargo.getApplicantHomelessSw() + "");
			statement.setString(idx++,cargo.getGuideToServiceCd());
			statement.setString(idx++,cargo.getUserActionCd());
			statement.setString(idx++,cargo.getVisAppointmentSw());
			statement.setString(idx++,cargo.getAuthrepIndvIdVrfCd());
			if(cargo.getOfficeNum() == 0) {
				statement.setNull(idx++,Types.BIGINT);
			}
			else statement.setLong(idx++,cargo.getOfficeNum());
			statement.setInt(idx++,cargo.getAvailDay());
			statement.setString(idx++,cargo.getCaseModeCd());
			statement.setString(idx++,cargo.getSpokenLanguageTypeCd());
			statement.setString(idx++,cargo.getPriorSnapSw()== 0 ? null : cargo.getPriorSnapSw() + "");
			statement.setString(idx++,cargo.getPhnNumTyp()== 0 ? null : cargo.getPhnNumTyp() + "");
			statement.setString(idx++,cargo.getAuthrepMidName());
			statement.setString(idx++,cargo.getOtherPhNum());
			statement.setString(idx++,cargo.getTemporaryMedicalInd());
			statement.setString(idx++,cargo.getMailLinkCardReqInd()== 0 ? null : cargo.getMailLinkCardReqInd() + "");
			statement.setLong(idx++,cargo.getPrefCntcInd());
			statement.setString(idx++,cargo.getCaseStatusCd());
			statement.setString(idx++,cargo.getUnableToLocateSw()== 0 ? null : cargo.getUnableToLocateSw() + "");
			statement.setTimestamp(idx++,cargo.getConversionDt());
			statement.setString(idx++,cargo.getAuthRepInd()== 0 ? null : cargo.getAuthRepInd() + "");
			statement.setString(idx++,cargo.getCoopMedSupportRightsSw()== 0 ? null : cargo.getCoopMedSupportRightsSw() + "");
			statement.setString(idx++,cargo.getVulnerableSw()== 0 ? null : cargo.getVulnerableSw() + "");
			statement.setTimestamp(idx++,cargo.getVisAppointmentDt());
			statement.setLong(idx++,cargo.getUniqueTransId());
			statement.setString(idx++,cargo.getPhnTxtTypCd());
			statement.setString(idx++,cargo.getAuthrepLastName());
			statement.setInt(idx++,cargo.getScheduleCd());
			statement.setString(idx++,cargo.getLanguageCd());
			statement.setString(idx++,cargo.getPrefCntcTmTxt());
			statement.setString(idx++,cargo.getAuthrepOrgName());
			statement.setString(idx++,cargo.getWorkPhNum());
			statement.setString(idx++,cargo.getAuthrepCaregiverSw()== 0 ? null : cargo.getAuthrepCaregiverSw() + "");
			statement.setString(idx++,getContext().getUserId());
			statement.setString(idx++,cargo.getAuthrepFirstName());
			statement.setTimestamp(idx++,cargo.getActionDt());
			statement.setString(idx++,cargo.getProcessId());
			statement.setString(idx++,cargo.getAuthrepOtherNum());
			statement.setTimestamp(idx++,cargo.getCaseClosedDt());
			statement.setString(idx++,cargo.getDhsEmpCaseSw()== 0 ? null : cargo.getDhsEmpCaseSw() + "");
			statement.setString(idx++,cargo.getPhNum());
			statement.setTimestamp(idx++,cargo.getUnableToLocateDt());
			statement.setTimestamp(idx++,cargo.getInterviewDt());
			statement.setString(idx++,cargo.getValPhnNumCd());
			statement.setTimestamp(idx++,cargo.getArchiveDt());
			statement.setString(idx++,cargo.getAuthrepSufxName());
			if(cargo.getCompanyId() == 0) {
				statement.setNull(idx++,Types.BIGINT);
			}
			else statement.setLong(idx++,cargo.getCompanyId());
			statement.setTimestamp(idx++,cargo.getReactivationDt());
			statement.setString(idx++,cargo.getRrCounterCreditSw()== 0 ? null : cargo.getRrCounterCreditSw() + "");
			statement.setString(idx++,cargo.getAuthrepPhNum());
			statement.setLong(idx++,cargo.getEbtAcctNum());
			statement.setLong(idx++,cargo.getCaseNum());
			rowCount = statement.executeUpdate();
			if (rowCount == 0) throw new TIERSRunTimeException("No Records updated");
		}
		catch (SQLException e) {
			
			throw new TIERSRunTimeException(e.getMessage());
		}
		finally {
			try {
				if (statement != null) {
					statement.close();
				}
				if (conn != null && getClose()) {
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage());
			}
		}
		return true;
	}
	public boolean updateArchive(ICargo cb) throws TIERSRunTimeException {
		DcCasesCargo cargo = (DcCasesCargo)cb;
		Connection conn = null;
		
		PreparedStatement statement = null;
		
		int rowCount = 0;
		String sqlString = null;
		try {
			conn = getConnection();
			sqlString = "UPDATE DC_CASES SET ARCHIVE_DT = ?  WHERE (( CASE_NUM = ?))";
			if(getLogger().isLoggable(this,ILog.INFO)) {
				getLogger().log(this, ILog.INFO, "sql="+sqlString);
			}
			statement = conn.prepareStatement(sqlString);
			int idx = 1;
			statement.setTimestamp(idx++,cargo.getArchiveDt());
			statement.setLong(idx++,cargo.getCaseNum());
			rowCount = statement.executeUpdate();
			statement.close();
			idx = 1;
			sqlString = "UPDATE DC_CASES_A SET ARCHIVE_DT = ?  WHERE (( CASE_NUM = ?))";
			if(getLogger().isLoggable(this,ILog.INFO)) {
				getLogger().log(this, ILog.INFO, "sql="+sqlString);
			}
			statement = conn.prepareStatement(sqlString);
			statement.setTimestamp(idx++,cargo.getArchiveDt());
			statement.setLong(idx++,cargo.getCaseNum());
			rowCount = statement.executeUpdate();
		}
		catch (SQLException e) {
			
			throw new TIERSRunTimeException(e.getMessage());
		}
		finally {
			try {
				if (statement != null) {
					statement.close();
				}
				if (conn != null && getClose()) {
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage());
			}
		}
		return true;
	}
	public boolean delete(ICargo cb) throws TIERSRunTimeException {
		DcCasesCargo cargo = (DcCasesCargo)cb;
		return delete(getKey(cargo));
	}
	public boolean delete(IPrimaryKey aKey) throws TIERSRunTimeException {
		DcCasesPrimaryKey key = (DcCasesPrimaryKey)aKey;
		Connection conn = null;
		
		PreparedStatement statement = null;
		
		int rowCount = 0;
		try {
			int idx = 1;
			conn = getConnection();
			String sqlString = DELETE_SQL;
			if(getLogger().isLoggable(this,ILog.INFO)) {
				getLogger().log(this, ILog.INFO, "sql="+sqlString);
			}
			statement = conn.prepareStatement(sqlString);
			statement.setLong(idx++,key.getCaseNum());
			rowCount = statement.executeUpdate();
			if (rowCount == 0) return false;
		}
		catch (SQLException e) {
			
			throw new TIERSRunTimeException(e.getMessage());
		}
		finally {
			try {
				if (statement != null) {
					statement.close();
				}
				if (conn != null && getClose()) {
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage());
			}
		}
		return true;
	}
}
