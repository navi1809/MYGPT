 /// FPP					
							if ("0".equalsIgnoreCase(appInPrflCargo.getBackdt_fpp_app())) {
								appInPrflCargo.setBackdt_fpp_app("0");
							} else if("1".equalsIgnoreCase(appInPrflCargo.getBackdt_fpp_app())){
								appInPrflCargo.setBackdt_fpp_app("1");
							} else {
								appInPrflCargo.setBackdt_fpp_app("3");
							}
							
							
							
							//Changed By rashmi
							if((appInPrflCargo.getRefusal_to_work_resp() == null )|| (appInPrflCargo.getRefusal_to_work_resp().trim().equals(""))){
								appInPrflCargo.setRefusal_to_work_resp(FwConstants.SPACE);
							}
														
							if((appInPrflCargo.getPresc_drug_resp() == null )|| (appInPrflCargo.getPresc_drug_resp().trim().equals(""))){
								appInPrflCargo.setPresc_drug_resp(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getAssociation_fee_resp() == null )|| (appInPrflCargo.getAssociation_fee_resp().trim().equals(""))){
								appInPrflCargo.setAssociation_fee_resp(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getUnocc_home_paymt_resp() == null )|| (appInPrflCargo.getUnocc_home_paymt_resp().trim().equals(""))){
								appInPrflCargo.setUnocc_home_paymt_resp(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getOther_housing_bill_resp()== null )|| (appInPrflCargo.getOther_housing_bill_resp().trim().equals(""))){
								appInPrflCargo.setOther_housing_bill_resp(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getPrsnl_care_provided_resp()== null )|| (appInPrflCargo.getPrsnl_care_provided_resp().trim().equals(""))){
								appInPrflCargo.setPrsnl_care_provided_resp(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getOthr_incm_unemp_bnfts_resp() == null )|| (appInPrflCargo.getOthr_incm_unemp_bnfts_resp().trim().equals(""))){
								appInPrflCargo.setOthr_incm_unemp_bnfts_resp(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getIn_patient_treatment_resp()== null )|| (appInPrflCargo.getIn_patient_treatment_resp().trim().equals(""))){
								appInPrflCargo.setIn_patient_treatment_resp(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getCopay_srvc_sw()== null )|| (appInPrflCargo.getCopay_srvc_sw().trim().equals(""))){
								appInPrflCargo.setCopay_srvc_sw(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getDental_care_sw()== null )|| (appInPrflCargo.getDental_care_sw().trim().equals(""))){
								appInPrflCargo.setDental_care_sw(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getVision_serv_sw()== null )|| (appInPrflCargo.getVision_serv_sw().trim().equals(""))){
								appInPrflCargo.setVision_serv_sw(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getDoa_comm_serv_sw()== null )|| (appInPrflCargo.getDoa_comm_serv_sw().trim().equals(""))){
								appInPrflCargo.setDoa_comm_serv_sw(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getDhs_comm_serv_sw()== null )|| (appInPrflCargo.getDhs_comm_serv_sw().trim().equals(""))){
								appInPrflCargo.setDhs_comm_serv_sw(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getHearing_serv_sw()== null )|| (appInPrflCargo.getHearing_serv_sw().trim().equals(""))){
								appInPrflCargo.setHearing_serv_sw(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getMed_equipment_supplies_sw()== null )|| (appInPrflCargo.getMed_equipment_supplies_sw().trim().equals(""))){
								appInPrflCargo.setMed_equipment_supplies_sw(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getMedicare_prem_sw()== null )|| (appInPrflCargo.getMedicare_prem_sw().trim().equals(""))){
								appInPrflCargo.setMedicare_prem_sw(FwConstants.SPACE);
							}
							
							/*if((appInPrflCargo.getMed_trans_milage()== null )|| (appInPrflCargo.getMed_trans_milage().trim().equals(""))){
								appInPrflCargo.setMed_trans_milage(FwConstants.SPACE);
							}*/
							
							if((appInPrflCargo.getOther_qual_prof_sw()== null )|| (appInPrflCargo.getOther_qual_prof_sw().trim().equals(""))){
								appInPrflCargo.setOther_qual_prof_sw(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getPsyc_rehab_sw()== null )|| (appInPrflCargo.getPsyc_rehab_sw().trim().equals(""))){
								appInPrflCargo.setPsyc_rehab_sw(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getLabor_xray_sw()== null )|| (appInPrflCargo.getLabor_xray_sw().trim().equals(""))){
								appInPrflCargo.setLabor_xray_sw(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getPres_srvc_animal_resp()== null )|| (appInPrflCargo.getPres_srvc_animal_resp().trim().equals(""))){
								appInPrflCargo.setPres_srvc_animal_resp(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getMed_trans_milege()== null )|| (appInPrflCargo.getMed_trans_milege().trim().equals(""))){
								appInPrflCargo.setMed_trans_milege(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getAttdt_hsekpr_srvc_animal_resp()== null )|| (appInPrflCargo.getAttdt_hsekpr_srvc_animal_resp().trim().equals(""))){
								appInPrflCargo.setAttdt_hsekpr_srvc_animal_resp(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getMed_equip_supplies_resp() == null )|| (appInPrflCargo.getMed_equip_supplies_resp() .trim().equals(""))){
								appInPrflCargo.setMed_equip_supplies_resp(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getTransport_resp() == null )|| (appInPrflCargo.getTransport_resp().trim().equals(""))){
								appInPrflCargo.setTransport_resp(FwConstants.SPACE);
							}
														
							if((appInPrflCargo.getOthr_incm_rentl_resp() == null )|| (appInPrflCargo.getOthr_incm_rentl_resp().trim().equals(""))){
								appInPrflCargo.setOthr_incm_rentl_resp(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getHlth_hosp_insurance_resp() == null )|| (appInPrflCargo.getHlth_hosp_insurance_resp().trim().equals(""))){
								appInPrflCargo.setHlth_hosp_insurance_resp(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getHlth_hosp_insurance_resp() == null )|| (appInPrflCargo.getHlth_hosp_insurance_resp().trim().equals(""))){
								appInPrflCargo.setHlth_hosp_insurance_resp(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getOthr_incm_trbl_ga_resp() == null )|| (appInPrflCargo.getOthr_incm_trbl_ga_resp().trim().equals(""))){
								appInPrflCargo.setOthr_incm_trbl_ga_resp(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getPostage_mail_presc_resp() == null )|| (appInPrflCargo.getPostage_mail_presc_resp().trim().equals(""))){
								appInPrflCargo.setPostage_mail_presc_resp(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getMed_dent_vision_services_resp() == null )|| (appInPrflCargo.getMed_dent_vision_services_resp().trim().equals(""))){
								appInPrflCargo.setMed_dent_vision_services_resp(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getLand_contract_mortgage_resp() == null )|| (appInPrflCargo.getLand_contract_mortgage_resp().trim().equals(""))){
								appInPrflCargo.setLand_contract_mortgage_resp(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getAttdt_hsekpr_srvc_animal_resp() == null )|| (appInPrflCargo.getAttdt_hsekpr_srvc_animal_resp().trim().equals(""))){
								appInPrflCargo.setAttdt_hsekpr_srvc_animal_resp(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getAttendant_housekeeper_resp() == null )|| (appInPrflCargo.getAttendant_housekeeper_resp().trim().equals(""))){
								appInPrflCargo.setAttendant_housekeeper_resp(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getChild_care_provider_resp() == null )|| (appInPrflCargo.getChild_care_provider_resp().trim().equals(""))){
								appInPrflCargo.setChild_care_provider_resp(FwConstants.SPACE);
							}
							
							if((appInPrflCargo.getResettlement_incm_resp()== null )|| (appInPrflCargo.getResettlement_incm_resp().trim().equals(""))){
								appInPrflCargo.setResettlement_incm_resp(FwConstants.SPACE);
							}
							
							
							if((appInPrflCargo.getNursing_care_resp()== null )|| (appInPrflCargo.getNursing_care_resp().trim().equals(""))){
								appInPrflCargo.setNursing_care_resp(FwConstants.SPACE);
							}
							if((appInPrflCargo.getTrbl_ser_resp() == null) || (appInPrflCargo.getTrbl_ser_resp().trim().equals(""))){
								appInPrflCargo.setTrbl_ser_resp(FwConstants.SPACE);
							}
							//mvanlenten - added to ensure no NULL goes in
							if((appInPrflCargo.getBill_heat_ac_resp() == null) || (appInPrflCargo.getBill_heat_ac_resp().trim().equals(""))){
								appInPrflCargo.setBill_heat_ac_resp(FwConstants.SPACE);
							}
							if((appInPrflCargo.getExcess_heat_ac_resp() == null) || (appInPrflCargo.getExcess_heat_ac_resp().trim().equals(""))){
								appInPrflCargo.setExcess_heat_ac_resp(FwConstants.SPACE);
							}
							if((appInPrflCargo.getAlimony_spousal_resp() == null) || (appInPrflCargo.getAlimony_spousal_resp().trim().equals(""))){
								appInPrflCargo.setAlimony_spousal_resp(FwConstants.SPACE);
							}
							if((appInPrflCargo.getIndv_msp_rqst_ind() == null) || (appInPrflCargo.getIndv_msp_rqst_ind().trim().equals(""))){
								appInPrflCargo.setIndv_msp_rqst_ind("0");
							}
							
							//added because following fields are null (temporary fix)
							if((appInPrflCargo.getMedical_premium_resp()==null) || (appInPrflCargo.getMedical_premium_resp().trim().equals(""))){
								appInPrflCargo.setMedical_premium_resp("N");
							}
							if((appInPrflCargo.getSocial_security_app_resp()==null) || (appInPrflCargo.getSocial_security_app_resp().trim().equals(""))){
								appInPrflCargo.setSocial_security_app_resp("N");
							}
							if((appInPrflCargo.getSupplemental_income_app_resp()==null) || (appInPrflCargo.getSupplemental_income_app_resp().trim().equals(""))){
								appInPrflCargo.setSupplemental_income_app_resp("N");
							}
							//Added By Kalpana
							if(appInPrflCargo.getJob_exp_resp()==null){
								appInPrflCargo.setJob_exp_resp("N");
							}
							if(appInPrflCargo.getMis_bill_resp()==null){
								appInPrflCargo.setMis_bill_resp("N");
							}
							if(appInPrflCargo.getSu_cst_garbage_resp()==null){
								appInPrflCargo.setSu_cst_garbage_resp(" ");
							}
							if(appInPrflCargo.getMisc_ettl_resp()==null){
								appInPrflCargo.setMisc_ettl_resp(" ");
							}
						
							if(appInPrflCargo.getEmer_ma_resp() == null){
								appInPrflCargo.setEmer_ma_resp(" ");
							}
							if(appInPrflCargo.getEmer_ma_resp() == null){
								appInPrflCargo.setEmer_ma_resp(" ");
							}
						
						}	
					
						if(beforeColl.containsKey(AppConstants.RELATION_COLLECTION)){
							appRelationBeforeColl = (APP_HSHL_RLT_Collection) beforeColl.get(AppConstants.RELATION_COLLECTION);
						}
						if(appRelationBeforeColl != null && !(appRelationBeforeColl.isEmpty())){
							appRelationBeforeCargo = appRelationBeforeColl.getCargo(0);
							// Setting Default values if the before cargo values are null PCR # 29768
							if(appRelationBeforeCargo.getSrc_app_ind() == null){
								appRelationBeforeCargo.setSrc_app_ind(FwConstants.SPACE);
							}
							if(appRelationBeforeCargo.getChg_eff_dt() == null){
								appRelationBeforeCargo.setChg_eff_dt(AppConstants.HIGH_TIMESTAMP);
							}	
							
							if(appRelationBeforeCargo.isDirty()){
								appRelationBeforeCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
								//CALL PERSIST METHOD
								houseHoldRelationBo.storeHousholdRelationshipDetails(appRelationBeforeColl,null,null);
							}	
						}
				
						//compare and saving the profile information
						if(appInPrflBeforeColl != null  && appInPrflBeforeColl.getCargo(0) != null){
							appInPrflBeforeCargo = appInPrflBeforeColl.getCargo(0);
						if( appInPrflBeforeCargo != null && (!appInPrflBeforeCargo.getIndv_fs_rqst_ind().equals(appInPrflCargo.getIndv_fs_rqst_ind()) 
									|| !appInPrflBeforeCargo.getIndv_fpw_rqst_ind().equals(appInPrflCargo.getIndv_fpw_rqst_ind()) 
									|| !appInPrflBeforeCargo.getIndv_fma_rqst_ind().equals(appInPrflCargo.getIndv_fma_rqst_ind())
									|| !appInPrflBeforeCargo.getIndv_hc_rqst_ind().equals(appInPrflCargo.getIndv_hc_rqst_ind())
									|| !appInPrflBeforeCargo.getIndv_msp_rqst_ind().equals(appInPrflCargo.getIndv_msp_rqst_ind())
									|| !appInPrflBeforeCargo.getIndv_hpe_rqst_ind().equals(appInPrflCargo.getIndv_hpe_rqst_ind())
									|| !appInPrflBeforeCargo.getBackdt_med_app().equals(appInPrflCargo.getBackdt_med_app())
									|| !appInPrflBeforeCargo.getBackdt_fpp_app().equals(appInPrflCargo.getBackdt_fpp_app())
									|| !appInPrflBeforeCargo.getIndv_fpp_pgm().equals(appInPrflCargo.getIndv_fpp_pgm())
									//ILIES-273207 - comparing backdated months and avoiding null pointer exception 
									|| ((appInPrflBeforeCargo.getMa_backdt_mo_1()==null && appInPrflCargo.getMa_backdt_mo_1()!=null) ? true :false)
									|| ((appInPrflBeforeCargo.getMa_backdt_mo_1()!=null && appInPrflCargo.getMa_backdt_mo_1()==null) ? true :false)
									
									|| ((appInPrflBeforeCargo.getMa_backdt_mo_2()==null && appInPrflCargo.getMa_backdt_mo_2()!=null) ? true :false)
									|| ((appInPrflBeforeCargo.getMa_backdt_mo_2()!=null && appInPrflCargo.getMa_backdt_mo_2()==null) ? true :false)
									
									|| ((appInPrflBeforeCargo.getMa_backdt_mo_3()==null && appInPrflCargo.getMa_backdt_mo_3()!=null) ? true :false)
									|| ((appInPrflBeforeCargo.getMa_backdt_mo_3()!=null && appInPrflCargo.getMa_backdt_mo_3()==null) ? true :false))
									){
								// if there is any change in the request then i am upting those values to the data base.
							    appInPrflCargo.setIndv_ebd_rqst_ind(appInPrflBeforeCargo.getIndv_ebd_rqst_ind());
								applicationManager.updateAppInPrflWithPgmRequest(appInPrflCargo);
								//now i am updating to the session.
								//for updating the session i need to get exact cargo from the session
								int size = 0;
								if(appInPrflSessionColl != null)
									size = appInPrflSessionColl.size();
								for(int i =0; i < size;i++){
									appInPrflSessionCargo = appInPrflSessionColl.getCargo(i);
									if(appInPrflSessionCargo.getIndv_seq_num().equals(indvSeqNumber)){
										//now i am updating the session cargo
										appInPrflSessionCargo.setIndv_fma_rqst_ind(appInPrflCargo.getIndv_fma_rqst_ind());
										appInPrflSessionCargo.setIndv_fpw_rqst_ind(appInPrflCargo.getIndv_fpw_rqst_ind());
										appInPrflSessionCargo.setIndv_fs_rqst_ind(appInPrflCargo.getIndv_fs_rqst_ind());
										appInPrflSessionCargo.setIndv_hpe_rqst_ind(appInPrflCargo.getIndv_hpe_rqst_ind());
										appInPrflSessionCargo.setIndv_hc_rqst_ind((appInPrflCargo.getIndv_hc_rqst_ind()));
										appInPrflSessionCargo.setIndv_msp_rqst_ind((appInPrflCargo.getIndv_msp_rqst_ind()));
										appInPrflSessionCargo.setIndv_fpp_pgm((appInPrflCargo.getIndv_fpp_pgm()));
										//ILIES-273207 - update the session once cargo is updated
										appInPrflSessionCargo.setBackdt_med_app((appInPrflCargo.getBackdt_med_app()));
										appInPrflSessionCargo.setMa_backdt_mo_1((appInPrflCargo.getMa_backdt_mo_1()));
										appInPrflSessionCargo.setMa_backdt_mo_2((appInPrflCargo.getMa_backdt_mo_2()));
										appInPrflSessionCargo.setMa_backdt_mo_3((appInPrflCargo.getMa_backdt_mo_3()));
										appInPrflSessionCargo.setBackdt_fpp_app((appInPrflCargo.getBackdt_fpp_app()));
									}
								}
							}
						}
						
						else{
							//if it is new person then i am setting that person information in the data base
							//as well as app in prfl
							appInPrflCargo =  applicationManager.createAppIndividualProfile(appInPrflCargo);
							if(appInPrflSessionColl != null){
								appInPrflSessionColl.add(appInPrflCargo);
							}
							//when we are creating the appin prfl colleciton first time then
							//we will create new collection and add that cargo.				
							else{
								appInPrflSessionColl = new APP_IN_PRFL_Collection();
								appInPrflSessionColl.add(appInPrflCargo);
							}
						}
					 }
					//now i am putting back the app in prfl coll in to the session 
					if(appInPrflSessionColl != null){
						session.put(AppConstants.APP_IN_PRFL_MASTER,appInPrflSessionColl);
					}
					
					
					//ILIES-273207 - retro month changes
					ABMedicareBO retroBo = new ABMedicareBO();
					APP_RETRO_RQST_Cargo persistCargo= new APP_RETRO_RQST_Cargo();
					APP_RETRO_RQST_Collection persistColl= new APP_RETRO_RQST_Collection();
					APP_RETRO_RQST_Collection appRetroRqsttempColl = new APP_RETRO_RQST_Collection();
					String[] backDate = dateRoutine.getBackDatedMonthsYears(fwDate.getDate());
					
					String[] indFromAppInPrfl = houseHoldBo.getIndicatorsfromAppInPrfl(appNumber);
					String[] indFromAppRetroRqst = retroBo.getIndicatorsFromAppRetroRqst(appNumber);
					
					for(int i=0;i<indFromAppInPrfl.length;i++) {
						persistCargo = new APP_RETRO_RQST_Cargo();
						persistCargo.setApp_num(appNumber);
						persistCargo.setRetro_month_seq_num(Integer.toString(i + 1));
						persistCargo.setRetro_month_dt(backDate[i]);
						if(!indFromAppInPrfl[i].equals(indFromAppRetroRqst[i])) {
							if (indFromAppInPrfl[i].equals(AppConstants.PROGRAM_NOT_SELECTED)) {
								persistCargo.setRowAction(FwConstants.ROWACTION_DELETE);
								retroBo.deleteRetroMonthDetails(persistCargo);
								appRetroRqsttempColl.remove(persistCargo);
							} else {
								persistCargo.setRowAction(FwConstants.ROWACTION_INSERT);
								appRetroRqsttempColl.addCargo(persistCargo);
							}
							persistColl.addCargo(persistCargo);
						}
					}
					
					if(programKey[0]==1 && persistColl!=null && !(persistColl.isEmpty()))
					         retroBo.persistAppRetroRqstCol(persistColl);
					
					//ILIES-273207 - storing(updating) backdated months in APP_RQST  table by copying from APP_RETRO
					APP_RQST_Collection appRqstColl = new APP_RQST_Collection();
					ABProgramInformationBO programInfoBo = new ABProgramInformationBO();
					
					// get the size fo existing retro months for app 
					ABMedicareBO medicareBO = new ABMedicareBO();
					int retroMonthsSize = medicareBO.loadAppRetroRqstColl(appNumber).size();
					// load existing app information from DB. add changes on top of that cargo.
					APP_RQST_Collection appRqstCollFromDB = programInfoBo.loadProgramInformation(appNumber);
					APP_RQST_Cargo appRqstFromDBCargo = new APP_RQST_Cargo();
					appRqstFromDBCargo = appRqstCollFromDB.getCargo(0);
					if(appRqstFromDBCargo!=null){
						if(programKey!=null && programKey.length>8 && (programKey[0] == 1 || programKey[8] == 1)){
							AFBNavigationBO bo = new AFBNavigationBO(); 
							bo.persitAppRqstBackDtMonths(appNumber);
						}
						
						//keep RETRO_RQST_SW is "R" if applicaion has atleast one backdated month selected or else keep "N" in APP_PRFL table
						String retroStatus = IAppProfileManager.DEFAULT_APP_PRFL_SW;
						if(retroMonthsSize>0) {
							retroStatus = String.valueOf(IAppProfileManager.STATUS_REQUIRED);;
						}
						short[] fieldId = { IAppProfileManager.RETRO_RQST_SW };
						String[] reponseVal = { retroStatus };
						appProfileManager.persist(appNumber, "", fieldId,
								reponseVal);
						
					}
					
					boolean ageGenderChangeFlag = false;
					boolean runRelevanceWithoutRelationships = false;
					//compare and saving the individual information
					if(appIndvBeforeColl != null && appIndvBeforeColl.getCargo(0) != null){
						appIndvBeforeCargo = appIndvBeforeColl.getCargo(0);
						//now we need to compare the cargos
						//setting the previous values
						appIndvCargo.setPreg_resp(appIndvBeforeCargo.getPreg_resp());
						appIndvCargo.setRlvn_ind(appIndvBeforeCargo.getRlvn_ind());
						appIndvCargo.setChld_trb_mbr_resp(" ");
						appIndvCargo.setTrb_mbr_resp(" ");
						appIndvCargo = (APP_INDV_Cargo)isChanged(appIndvBeforeCargo,appIndvCargo);
						if(appIndvCargo.isDirty()){
							scheduleABHMS = true;
							IndividualAge indvBeforeAge = peopleHandler.getIndividualAge(indvSeqNumber);
							//if the cargo is dirty then we are updating the data base
							peopleHandler.updateIndividual(appIndvCargo);
							//now we need to check what they chaged age
							
							if(!appIndvBeforeCargo.getBrth_dt().equals(AppConstants.HIGH_TIMESTAMP)&& !appIndvBeforeCargo.getBrth_dt().substring(0, 10).equals(appIndvCargo.getBrth_dt().substring(0, 10)) && !appIndvBeforeCargo.getChld_out_home_resp().equals("Y")){
								ageGenderChangeFlag = true;
								// PCR # 31616-Production -- Starts
								//*** logic to delete Health Insutrance details  and set app_in_prfl response to N of the individual who's age is changed	
									IndividualAge ageBefore = new IndividualAge();
									IndividualAge ageCurr = new IndividualAge();
									ageBefore = DateRoutine.getInstance().getAge(dateRoutine.getDateFromTimeStamp(appIndvBeforeCargo.getBrth_dt()), FwDate.getInstance().getDate());
									ageCurr = DateRoutine.getInstance().getAge(dateRoutine.getDateFromTimeStamp(appIndvCargo.getBrth_dt()), FwDate.getInstance().getDate());
									
									//if updated age is less than 18 than set Medical Insurance response as N and Delete previously entered data
									if(ageBefore.getYears() >= 18 && ageCurr.getYears() < 18){
										//check app_in_prfl response and call method to delete individual details
										//PCR# 35501
										String temp = null;
										if(appInPrflBeforeCargo != null)
											temp = appInPrflBeforeCargo.getMed_ins_resp();
										boolean statusFlag = false;;
										if(temp != null && !temp.equals("N")){
											int size = 0;
											if(appInPrflSessionColl != null)
												size = appInPrflSessionColl.size();
											for(int i =0; i < size;i++){
												appInPrflSessionCargo = appInPrflSessionColl.getCargo(i);
												if(appInPrflSessionCargo.getIndv_seq_num().equals(indvSeqNumber)){
													//now i am updating the session cargo
													appInPrflSessionCargo.setMed_ins_resp(FwConstants.NO);
												}
											}
											
											//call method to delete current individual insurance details
											statusFlag = houseHoldBo.checkIndvPlcyStatus(appNumber, indvSeqNumber);
										}
										if(!statusFlag){
											driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABHCD",driverArray,appNumber);
										}
									}
								//PCR # 31616-Production -- ends	
							}
							//If updated age is between 16 and 26 queue up ABHHQ page. 
							if(!appIndvBeforeCargo.getBrth_dt().substring(0, 10).equals(appIndvCargo.getBrth_dt().substring(0, 10))){
								IndividualAge ageCurr = new IndividualAge();
								ageCurr = DateRoutine.getInstance().getAge(dateRoutine.getDateFromTimeStamp(appIndvCargo.getBrth_dt()), FwDate.getInstance().getDate());
								if(ageCurr.getYears() >= 16 && ageCurr.getYears()<=26 ){
									driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER, AppConstants.ABHHQ, driverArray, appNumber);
									driverManager.makeRequired(FwConstants.AFB_DRIVER, "ABHHQ", driverArray, appNumber);
								}
							}							
							if(appIndvBeforeCargo.getSex_ind().trim().length()>0 &&!appIndvBeforeCargo.getSex_ind().equals(appIndvCargo.getSex_ind())&& !appIndvBeforeCargo.getChld_out_home_resp().equals("Y")){
								ageGenderChangeFlag = true;	
							}
							//if age or gender did not change and the living situation did change
							if (!ageGenderChangeFlag && (
									appIndvBeforeCargo.getLive_arng_typ()!=null && !appIndvBeforeCargo.getLive_arng_typ().equals(appIndvCargo.getLive_arng_typ())
								) && !appIndvCargo.getChld_out_home_resp().equals("Y")){						
								runRelevanceWithoutRelationships = true;
							}
							
							if(ageGenderChangeFlag && currentPageStatus != FwConstants.DRIVER_REQUIRED){
								//if we found preg indicator we are deleting the preg information from preg table
								if(appInPrflBeforeCargo!= null && !appInPrflBeforeCargo.getPreg_resp().equals(FwConstants.NO)){
									if(houseHoldBo != null)
										houseHoldBo.deletePregnancy(indvSeqNumber,appNumber);
									int size = 0;
									if(appInPrflSessionColl != null)
										size = appInPrflSessionColl.size();
									for(int i =0; i < size;i++){
										appInPrflSessionCargo = appInPrflSessionColl.getCargo(i);
										if(appInPrflSessionCargo.getIndv_seq_num().equals(indvSeqNumber)){
											//now i am updating the session cargo
											appInPrflSessionCargo.setPreg_resp(FwConstants.NO);
										}
									}
								}
								//deleting the absent parent information
								if(appInPrflBeforeCargo != null && !appInPrflBeforeCargo.getPreg_resp().equals(FwConstants.NO)|| indvBeforeAge.getYears()<19){
									houseHoldBo.deleteAbsentParent(indvSeqNumber,appNumber);
								}
								//deleting the relationship
								int indvYears = indvBeforeAge.getYears();
								//Deleting the new born information
								if(indvYears == 0 || (indvYears == 1 && indvBeforeAge.getMonths() < 1)){
									houseHoldBo.deleteNewBorn(indvSeqNumber, appNumber);										
								}
								//deleting the school enrollment
								if(indvYears < 49){
									houseHoldBo.deleteSchoolEnrollment(indvSeqNumber,appNumber);
								}
							}
						} 
						
						//if the age or gender did not change, but the program request did for this individual
						if (appInPrflBeforeCargo!=null && appInPrflCargo!=null){
							appInPrflCargo = (APP_IN_PRFL_Cargo)isChanged(appInPrflBeforeCargo,appInPrflCargo);
							
							if (appInPrflCargo!=null && appInPrflCargo.isDirty()){

								if (!ageGenderChangeFlag && (
										(appInPrflBeforeCargo.getIndv_fs_rqst_ind()!=null && !appInPrflCargo.getIndv_fs_rqst_ind().equals(appInPrflBeforeCargo.getIndv_fs_rqst_ind()))
										|| (appInPrflBeforeCargo.getIndv_fpw_rqst_ind()!=null && !appInPrflCargo.getIndv_fpw_rqst_ind().equals(appInPrflBeforeCargo.getIndv_fpw_rqst_ind()))
										|| (appInPrflBeforeCargo.getIndv_fma_rqst_ind()!=null && !appInPrflCargo.getIndv_fma_rqst_ind().equals(appInPrflBeforeCargo.getIndv_fma_rqst_ind()))
										|| (appInPrflBeforeCargo.getIndv_hc_rqst_ind()!=null && !appInPrflCargo.getIndv_hc_rqst_ind().equals(appInPrflBeforeCargo.getIndv_hc_rqst_ind()))
										|| (appInPrflBeforeCargo.getIndv_msp_rqst_ind()!=null && !appInPrflCargo.getIndv_msp_rqst_ind().equals(appInPrflBeforeCargo.getIndv_msp_rqst_ind()))
										|| (appInPrflBeforeCargo.getIndv_hpe_rqst_ind()!=null && !appInPrflCargo.getIndv_hpe_rqst_ind().equals(appInPrflBeforeCargo.getIndv_hpe_rqst_ind()))
										|| (appInPrflBeforeCargo.getIndv_fpp_pgm()!=null && !appInPrflCargo.getIndv_fpp_pgm().equals(appInPrflBeforeCargo.getIndv_fpp_pgm()))
									)){						
									runRelevanceWithoutRelationships = true;
								}
						
							}
						}
						
					}
					else{
						//if the individual seq number is 1 then we are updating the information
						//other wise we are updating the individual information.
						if(indvSeqNumber.equals("1")){
							appIndvCargo = setPersonalInformation(appIndvCargo,appNumber,peopleHandler);
							peopleHandler.addNewIndividual(appIndvCargo);							
						}
						else{
							peopleHandler.addNewIndividual(appIndvCargo);
							if(appIndvCargo.getChld_out_home_resp().equals("N"))
								ageGenderChangeFlag = true;
						}
					}
					//This code is added to check the where this person is currently living -- for Institutional Details Page -- Starts
					String livingArrangType = appIndvCargo.getLive_arng_typ();
					String maritalStaus = appIndvCargo.getMrtl_stat_cd();	
					InstitutionBO instBO = new InstitutionBO();
					String livingArrangBeforeType = "";
					String maritalStatusBefore = "";
					if(appIndvBeforeCargo != null){
						livingArrangBeforeType = appIndvBeforeCargo.getLive_arng_typ();
						maritalStatusBefore = appIndvBeforeCargo.getMrtl_stat_cd();
					}
					Object [] array = {"06","08","20","22"}; //these number indicates person is living in Institution
					List livingTypeList = Arrays.asList(array);
					
					Object [] arrayMarital = {"MA","SE","LS"}; //these number indicates person is living in Institution
					List maritalTypeList = Arrays.asList(arrayMarital);
					
					//Check FMA requested than only schedule ABIND
					boolean isFMARequested = false;
					short[] programKeyArray = (short[])session.get(FwConstants.AFB_PROGRAM_KEY);
					if(programManager.isThisProgramRequested(programKeyArray,FwConstants.FMA_INDEX)){
						isFMARequested = true;
					}
					if((livingTypeList.contains(livingArrangType) || livingTypeList.contains(livingArrangBeforeType)) ){
					 	String reqPages = "ABIND";
					 	
					 		if((livingTypeList.contains(livingArrangType) || livingTypeList.contains(livingArrangBeforeType)) && isFMARequested){
				 			driverManager.makeRequired(FwConstants.AFB_DRIVER,reqPages,driverArray,appNumber);
					 		}
					 	
					  		if(livingTypeList.contains(livingArrangType) && !livingTypeList.contains(livingArrangBeforeType) && isFMARequested){
					 			driverManager.makeRequired(FwConstants.AFB_DRIVER,reqPages,driverArray,appNumber);
					 		}
					 		if(!livingTypeList.contains(livingArrangType) && livingTypeList.contains(livingArrangBeforeType)){
					 			instBO.deleteIndividualRecord(indvSeqNumber,appNumber);
					 		}
					 		
					 		if(livingTypeList.contains(livingArrangType) && livingTypeList.contains(livingArrangBeforeType) && !isFMARequested){
					 			instBO.deleteIndividualRecord(indvSeqNumber,appNumber);
					 		}
					 		
					 		if(livingTypeList.contains(livingArrangType)){
					 			if(!maritalTypeList.contains(maritalStaus) && maritalTypeList.contains(maritalStatusBefore)){
					 				//delete only spouse address
					 				String spouseIndvSeqNum = instBO.isWifeOrHusband(appNumber, indvSeqNumber);
					 				if(spouseIndvSeqNum.equals("0")){
					 					instBO.deleteSpouseAddress(indvSeqNumber, appNumber);
					 				}
					 			}
					 			if(!isFMARequested){
					 				instBO.deleteSpouseAddress(indvSeqNumber, appNumber);
					 			}
					 		}
					}
					
					if(currentPageStatus == FwConstants.DRIVER_REQUIRED || currentPageStatus == FwConstants.DRIVER_VISIT_AGAIN ||
							currentPageStatus == FwConstants.DRIVER_COMPLETE ||	currentPageStatus == FwConstants.DRIVER_ADD_NEW){
						List instList = instBO.findInstitutionEnrolledPeople(appNumber);
						if(instList == null || instList.size()== 0){
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABIND",driverArray,appNumber);
						}
						if(!isFMARequested){
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABIND",driverArray,appNumber);
						}
					}
					//This code is added to check the where this person is currently living -- for Institutional Details Page -- Ends
					//Added by Uma to fix the issue of back flow of Nursing facility BRGUS00287916
					boolean isdeleted = false;
					if(nursingFlag){
						if(indvSeqNumber.equals(AppConstants.ONE) && currentPageStatus!=FwConstants.DRIVER_REQUIRED){
							if(beforeCollPeopleAlongWithSpouse!=null && beforeCollPeopleAlongWithSpouse.length()>0
									&& (peopleAlongWithSpouse==null || peopleAlongWithSpouse.length()==0)){
								houseHoldBo.deleteHouseHoldDetails(appNumber);
								isdeleted = true;								
							}else if((beforeCollPeopleAlongWithSpouse==null || beforeCollPeopleAlongWithSpouse.length()==0)
									&& peopleAlongWithSpouse!=null && peopleAlongWithSpouse.length()>0){
								if(houseHoldBo != null)
									houseHoldBo.deleteHouseHoldDetails(appNumber);
								isdeleted = true;
							}else if(beforeCollPeopleAlongWithSpouse!=null && beforeCollPeopleAlongWithSpouse.length()>0
									&& peopleAlongWithSpouse!=null && peopleAlongWithSpouse.length()>0){
								if(!peopleAlongWithSpouse.equalsIgnoreCase(beforeCollPeopleAlongWithSpouse)){
									if(houseHoldBo != null)
										houseHoldBo.deleteHouseHoldDetails(appNumber);
									isdeleted = true;
									//Changes Made by Varshi Kasarla for ILIES-282111. Removed unused declaration. Sonar Issue.
								}
							}
							// Checking for Child at home					
							else if(beforeCollChildrenAtHome!=null && beforeCollChildrenAtHome.length()>0
									&& (childrenAtHome==null || childrenAtHome.length()==0)){
								if(houseHoldBo != null)
									houseHoldBo.deleteHouseHoldDetails(appNumber);
								isdeleted = true;
								//Changes Made by Varshi Kasarla for ILIES-282111. Removed unused declaration. Sonar Issue.
							}else if((beforeCollChildrenAtHome==null || beforeCollChildrenAtHome.length()==0)
									&& childrenAtHome!=null && childrenAtHome.length()>0){
								if(houseHoldBo != null)
									houseHoldBo.deleteHouseHoldDetails(appNumber);
								isdeleted = true;
								//Changes Made by Varshi Kasarla for ILIES-282111. Removed unused declaration. Sonar Issue.
							}else if(beforeCollChildrenAtHome!=null && beforeCollChildrenAtHome.length()>0
									&& childrenAtHome!=null && childrenAtHome.length()>0){
								if(!childrenAtHome.equalsIgnoreCase(beforeCollChildrenAtHome)){
									if(houseHoldBo != null)
										houseHoldBo.deleteHouseHoldDetails(appNumber);
									isdeleted = true;
									//Changes Made by Varshi Kasarla for ILIES-282111. Removed unused declaration. Sonar Issue.
								}
							}
						}
						if(isdeleted){							
							tempColl =(INDIVIDUAL_Custom_Collection)beforeColl.get("INDIVIDUAL_Custom_Collection");
							if(tempColl!=null && !(tempColl.isEmpty())){
								for(int i=0;i<tempColl.size();i++){
									if(Integer.parseInt(tempColl.getResult(i).getIndv_seq_num())>1){
										tempColl.remove(i);
										i--;
									}
								}
							}
							List tempList = (List) beforeColl.get("RECORD_ARRAY");							
							IndivTypeSeqBean tempIndvBean= null;							
							if(tempList!=null && tempList.size()>0){
								for(int i=0;i<tempList.size();i++){
									tempIndvBean = (IndivTypeSeqBean) tempList.get(i);
									if(Integer.parseInt(tempIndvBean.getIndivSeqNum())>1){
										tempList.remove(i);
										i--;
									}
								}
							}
							if(beforeColl.get(FwConstants.CURRENT_RECORD_INDEX)!=null && 
									Integer.parseInt((String)beforeColl.get(FwConstants.CURRENT_RECORD_INDEX))>0){
								beforeColl.put(FwConstants.CURRENT_RECORD_INDEX, AppConstants.ZERO);
							}
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,(String)request.get(FwConstants.CURRENT_PAGE_ID),driverArray,appNumber);
							driverManager.makeRequired(FwConstants.AFB_DRIVER,(String)request.get(FwConstants.CURRENT_PAGE_ID),driverArray,appNumber);
							beforeColl.put("RECORD_ARRAY", tempList);
							beforeColl.put("INDIVIDUAL_Custom_Collection",tempColl);
							beforeColl.put(FwConstants.LAST_RECORD_INDEX, AppConstants.ZERO);
							beforeColl.put(FwConstants.CURRENT_RECORD_INDEX, AppConstants.ZERO);
							indvSeqNumber = AppConstants.ONE;
						}
						currentPageStatus = driverManager.getAFBStatus(FwConstants.AFB_DRIVER,pageId,driverArray);
						if(currentPageStatus == FwConstants.DRIVER_REQUIRED && peopleInYourHome!=null && peopleInYourHome.trim().length()>0) {
							peopleCountForLooping=Integer.parseInt(peopleInYourHome);
						}
					}
					boolean pageComplete = false;
					INDIVIDUAL_Custom_Collection indvCustColl_temp = peopleHandler.getInAndOutOfHomeIndividuals(appNumber);
					String individual_index = request.get(AppConstants.INDV_INDEX) != null ? (String) request.get(AppConstants.INDV_INDEX) : "0";
					if((currentPageStatus == FwConstants.DRIVER_REQUIRED || currentPageStatus == FwConstants.DRIVER_VISIT_AGAIN) && beforeColl.get(FwConstants.CURRENT_RECORD_INDEX) != null){
						
						//now i am checking is they any persons we have to display
						int currentArrayIndex = Integer.parseInt((String)beforeColl.get(FwConstants.CURRENT_RECORD_INDEX));  

						int peopleCount =Integer.parseInt((String) beforeColl.get(AppConstants.PEOPLE_COUNT));						
						int totalCount=peopleCount+childCount;
						if(currentArrayIndex+1 == totalCount && indvCustColl_temp.size() == totalCount){
							pageComplete = true;
						}
					}
					//How to skip If the page was completed before and more than 1 individuals was deleted from the application
					if((currentPageStatus == FwConstants.DRIVER_REQUIRED || currentPageStatus == FwConstants.DRIVER_VISIT_AGAIN) && houseHoldBo.loadMaxSeqNum(appNumber) == houseHoldBo.loadHouseholdCount(appNumber)){
						pageComplete = indvCustColl_temp.size() == Integer.parseInt(individual_index);
					}
					
					//How to skip If the page was completed before and the previous action was personal information change
					if(session.get(AppConstants.HOUSEHOLD_CHANGE) != null && FwConstants.YES.equals((String) session.get(AppConstants.HOUSEHOLD_CHANGE))){
						pageComplete = indvCustColl_temp.size() == Integer.parseInt(individual_index);
					}
					if(pageComplete && session.get(AppConstants.HOUSEHOLD_CHANGE) != null){
						session.remove(AppConstants.HOUSEHOLD_CHANGE);
					}

					boolean schedulePeopleSection = false;
					if((pageComplete == true || currentPageStatus == FwConstants.DRIVER_COMPLETE) && ageGenderChangeFlag == true || session.containsKey(AppConstants.SET_FILING_DATE)){
						schedulePeopleSection = true;
					}
					// ADD the new people handler with only in home inividuals
					if(pageComplete || currentPageStatus == FwConstants.DRIVER_COMPLETE || currentPageStatus == FwConstants.DRIVER_ADD_NEW)
					{
						peopleHandler=new PeopleHandler();
						peopleHandler.loadPeopleHandler(appNumber);
						session.put(AppConstants.INDIV_MASTER_HANDLER,peopleHandler);	
					}
					boolean scheduleRunRelevance = false;
					if((pageComplete == true || currentPageStatus == FwConstants.DRIVER_COMPLETE) && runRelevanceWithoutRelationships == true){
						scheduleRunRelevance = true;
					}									
					//if the driver status is addnew and driver status is complete 	
					if(schedulePeopleSection == true || currentPageStatus == FwConstants.DRIVER_ADD_NEW || pageComplete == true){
						
						List instList = instBO.findInstitutionEnrolledPeople(appNumber);
						if(instList == null || instList.size()== 0){
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABIND",driverArray,appNumber);
						}
										
						driverManager.makeComplete(FwConstants.AFB_DRIVER,(String)request.get(FwConstants.CURRENT_PAGE_ID),driverArray,appNumber);
						//now i need to set ABPRG page required
						indvCustColl = peopleHandler.getInHomeIndividuals();
						INDIVIDUAL_Custom_Collection indvOutChildCustColl = peopleHandler.getInAndOutOfHomeIndividuals(appNumber);
						int indvCustCollSize = indvCustColl.size();
						int indvOutCustCollSize = indvOutChildCustColl.size();
						if(indvCustCollSize > 1 || indvOutCustCollSize > 1){
						//Added by Uma for Nursing Facility BRGUS00287916
							if(nursingFlag && isdeleted)
								driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,AppConstants.ABHHR,driverArray,appNumber);
							driverManager.makeRequired(FwConstants.AFB_DRIVER,AppConstants.ABHHR,driverArray,appNumber);
						}
						else{
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,AppConstants.ABHHR,driverArray,appNumber);
						}
						//now i am setting the page status for other paresnts ABOTH
						/*
						PCR# 35501 - Production Exception
							Reason ::: When ever Individual is deleted from Summary, we don't decrement the HSHL_INDV_CT in APP_RQST table.
								So When there is only 2 individuals in application and one is deleted - we get peopleCountForLooping (HSHL_INDV_CT in APP_RQST table) as 2.
								and we are trying to get age of this 2nd individual from People Handler which will cause exception.
						    Fix: So to aviod this exception, we have compare peopleCountForLooping count with People Handler count and if peopleCountForLooping > People Handle
						    	than we have take People Handler count.
						 */
						if(currentPageStatus != FwConstants.DRIVER_REQUIRED ){
							if(peopleCountForLooping > indvCustColl.size())
								peopleCountForLooping = indvCustColl.size();
						}
						
						if(peopleCountForLooping==2){
							List IndvList=new ArrayList();
							if(Integer.parseInt(indvCustColl.getResult(0).getIndv_seq_num())>Integer.parseInt(indvCustColl.getResult(1).getIndv_seq_num()))
								indvSeqNumber=indvCustColl.getResult(0).getIndv_seq_num();
							else
								indvSeqNumber=indvCustColl.getResult(1).getIndv_seq_num();
							
							IndividualAge indvAge = peopleHandler.getIndividualAge(indvSeqNumber);
							boolean fpwOnlyFlag = false;
							if(!programManager.isThisProgramRequested(programKey,FwConstants.FS_INDEX) && 
									!programManager.isThisProgramRequested(programKey,FwConstants.SER_INDEX) && 
									programManager.isThisProgramRequested(programKey,FwConstants.FPW_INDEX) && 
									!programManager.isThisProgramRequested(programKey,FwConstants.FMA_INDEX)){
								fpwOnlyFlag = true;
							}
							if(indvAge.getYears() < 19 && !fpwOnlyFlag){
							//Added by Uma for Nursing Facility BRGUS00287916
								if(nursingFlag && isdeleted)
									driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABAPD",driverArray,appNumber);
								driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABAPD",driverArray,appNumber);
								// start of BRGUS00289239 by rotanak 
								driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABAPI",driverArray,appNumber);
								if(appInPrflSessionColl != null){
								for (APP_IN_PRFL_Cargo appINPRFLCargo : appInPrflSessionColl.getResults()) {
									if (appINPRFLCargo.getIndv_seq_num().equals(indvSeqNumber)) {
										applicationManager.makeRequiredAndPersist(IApplicationManager.OTHER_APP_RESP, appINPRFLCargo);
										break;
									}
								}
								}
								//Page ABAPS is deleded as requirement ILIES-173329 R3
								driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABADS",driverArray,appNumber);
								// end of BRGUS00289239 by rotanak
							}
							else{
								driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABAPD",driverArray,appNumber);
							}
							if(programManager.isMSPOnlyProgramRequested(programKey)){
								//Page ABAPS is deleded as requirement ILIES-173329 R3
								driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,new String[]{"ABAPD","ABADS"},driverArray,appNumber);
							}
						}else
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABAPD",driverArray,appNumber);
						boolean fMAOnly =false;

						ABSchoolEnrollmentBO schoolBo = new ABSchoolEnrollmentBO();
						List schoolList = schoolBo.findSchoolEnrollmentPeople(peopleHandler, programKey, appInPrflSessionColl);
						//start of ILIES-127671
						if(!programManager.isThisProgramRequested(programKey,FwConstants.FS_INDEX) && 
								!programManager.isThisProgramRequested(programKey,FwConstants.HC_INDEX) && 
								!programManager.isThisProgramRequested(programKey,FwConstants.MSP_INDEX) && 
								 programManager.isThisProgramRequested(programKey,FwConstants.FMA_INDEX)){
							fMAOnly = true;
						}
						if(fMAOnly){
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABSEN",driverArray,appNumber);
						}
						//end of ILIES-127671
						else{
						String schoolEnrollPageId[] = {"ABSEN","ABHIS"};
						if(schoolList != null && schoolList.size()>0){
							if(ageGenderChangeFlag){
							//Added by Uma for Nursing Facility BRGUS00287916
								if(nursingFlag && isdeleted)
									driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,schoolEnrollPageId,driverArray,appNumber);
								driverManager.makeRequired(FwConstants.AFB_DRIVER,schoolEnrollPageId,driverArray,appNumber);
							}
							else{
							
								//Added by Uma for Nursing Facility BRGUS00287916
								if(nursingFlag && isdeleted)
									driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABSEN",driverArray,appNumber);
									driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABSEN",driverArray,appNumber);
								if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABHIS",driverArray) == FwConstants.DRIVER_NOT_REQUIRED){
								//Added by Uma for Nursing Facility BRGUS00287916
									if(nursingFlag && isdeleted)
										driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABHIS",driverArray,appNumber);
									driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABHIS",driverArray,appNumber);
								}
							}
						}
						else{
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABSEN",driverArray,appNumber);
						}
						}
						//PCR# 35051 - Don't schedule Pregnancy Question page if it is only FS request
						boolean isFMARequestedFlag = false;
						boolean isFPWRequestedFlag = false;
						short[] programKeyArr = (short[])session.get(FwConstants.AFB_PROGRAM_KEY);
						if(programManager.isThisProgramRequested(programKeyArray,FwConstants.FMA_INDEX)){
							isFMARequestedFlag = true;
						}
						if(programManager.isThisProgramRequested(programKeyArray,FwConstants.FPW_INDEX)){
							isFPWRequestedFlag = true;
						}
						//Indrani 
						boolean isHCRequestedFlag = false;
						if(programManager.isThisProgramRequested(programKeyArray,FwConstants.HC_INDEX)){
							isHCRequestedFlag = true;
						}
						IndividualAge indvAge = null;
						boolean prgFlag = false;
						boolean jobIncomeFlag =false;
						String jobIncomePages[] = {"ABJIQ","ABJIS"};
						//get ABPRG driver status
						int drvrABPRG = driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABPRG",driverArray);
						
						for(int i=0; i <indvCustCollSize;i++ ){
							indvCustCargo = indvCustColl.getResult(i);
							indvAge = indvCustCargo.getIndv_age();
							if(indvCustCargo.getSex_ind().equals(AppConstants.SEX_IND_FEMALE)){
								// Added HC request - Indrani for Self Service Expansion
								//if(indvAge.getYears() >= 10 && indvAge.getYears()<60 ){
								//Changing the age lower limit from 10 years to 9 years for pregnancy question- Varun Maddirala per JIRA: ILIES-69714
								if(indvAge.getYears() >= 9 && indvAge.getYears()<60 ){
									// uncommented - Indrani for Self service Expansion
									//Added by Uma for Nursing Facility BRGUS00287916
									if(nursingFlag && isdeleted)
										driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABPRG",driverArray,appNumber);
									driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABPRG",driverArray,appNumber);
									prgFlag = true;
								}//PCR# 35051 - Don't schedule Pregnancy Question page if it is only FS request
								// If user already provided PREG information by selection HC program and 
								//now he comes back by selection only FS, we have schedule and show PREG information what he/she entered before
								//below ELSE part will take care of this scenario
								else if(drvrABPRG == FwConstants.DRIVER_COMPLETE || drvrABPRG == FwConstants.DRIVER_VISIT_AGAIN){
									APP_IN_PRFL_Cargo tempAppInPrflCargo = null; 
									int size = 0;
									if(appInPrflSessionColl != null)
										size = appInPrflSessionColl.size();
									for(int x=0; x<size; x++){
										tempAppInPrflCargo = appInPrflSessionColl.getCargo(x);
										if(tempAppInPrflCargo.getIndv_seq_num().equals(indvCustCargo.getIndv_seq_num())){
											if(tempAppInPrflCargo.getPreg_resp().equals(AppConstants.YES) || 
														tempAppInPrflCargo.getPreg_resp().equals("R")){
												// uncommented - Indrani
												//Added by Uma for Nursing Facility BRGUS00287916
												if(nursingFlag && isdeleted)
													driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABPRG",driverArray,appNumber);
												driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABPRG",driverArray,appNumber);
												prgFlag = true;
											}
										}
									}
								}
							}
							//For JobIncome Check for AGE >=16
							//Per ILIES-156121 the question page is showed for all ages
							if(indvAge.getYears() > 0 || ((indvSeqNumber !=null) && ("1".equals(indvSeqNumber)) && (appIndvCargo_indv1.getBrth_dt().equals(AppConstants.HIGH_TIMESTAMP)))){
								if(ageGenderChangeFlag){
								//Added by Uma for Nursing Facility BRGUS00287916
									if(nursingFlag && isdeleted)
										driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABJIQ",driverArray,appNumber);
									driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABJIQ",driverArray,appNumber);
								}
								else{
									if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABJIQ",driverArray) == FwConstants.DRIVER_NOT_REQUIRED){
									//Added by Uma for Nursing Facility BRGUS00287916
										if(nursingFlag && isdeleted)
											driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABJIQ",driverArray,appNumber);
										driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABJIQ",driverArray,appNumber);
									}
								}
								if(ageGenderChangeFlag){
								//Added by Uma for Nursing Facility BRGUS00287916
									if(nursingFlag && isdeleted)
										driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABJIS",driverArray,appNumber);
									driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABJIS",driverArray,appNumber);
								}
								else{
									if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABJIS",driverArray) == FwConstants.DRIVER_NOT_REQUIRED){
									//Added by Uma for Nursing Facility BRGUS00287916
										if(nursingFlag && isdeleted)
											driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABJIS",driverArray,appNumber);
										driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABJIS",driverArray,appNumber);
									}
								}
								jobIncomeFlag = true;
							}
							if(prgFlag && jobIncomeFlag)
								break;
						}
						if(!prgFlag){
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABPRG",driverArray,appNumber);
						}
						if(!jobIncomeFlag){
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,jobIncomePages,driverArray,appNumber);
						}
						if(ageGenderChangeFlag){
							String[] requiredPages = {"ABHMS","ABOIS", "ABESM","ABHIS"};
							//Added by Uma for Nursing Facility BRGUS00287916
							if(nursingFlag && isdeleted)
								driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,requiredPages,driverArray,appNumber);
							driverManager.makeRequired(FwConstants.AFB_DRIVER,requiredPages,driverArray,appNumber);
							if(programManager.isThisProgramRequested(programKey,FwConstants.FS_INDEX) || programManager.isThisProgramRequested(programKey,FwConstants.SER_INDEX)){
							//Added by Uma for Nursing Facility BRGUS00287916
								if(nursingFlag && isdeleted)
									driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABHES",driverArray,appNumber);
								driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABHES",driverArray,appNumber);
							}
						}

						//start of BRGUS00286206 added by rotanak
						//commented by rotanak
						//end of BRGUS00286206 added by rotanak
						
						//New code added for FMA_EBD only ----- to schedule Housing and Util Expenses Page -- starts
						int statusABHEQ = driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABHEQ",driverArray);
						
						//New code added for FMA_EBD only ----- to schedule Housing and Util Expenses Page -- ends
						pageCollection.put("PageCompleteFlag",  Boolean.valueOf(true));
					}
					//run relevance logic if relationships is not scheduled (meaning there was only either a program 
					//change or a living situation change); schedule the relevance page only if there are irrelevant folks
					else if (scheduleRunRelevance){
						ABRelevanceBO  relevanceBo = new ABRelevanceBO();
						//calling the releveance page method to set that relevance page is required or not.
						// Loading people handler with all individuals PCR # 32248
						peopleHandler.getInAndOutOfHomeIndividuals(appNumber);
						if(relevanceBo.determineRelevance(appInPrflSessionColl ,programKey ,appNumber,peopleHandler)){
						//Added by Uma for Nursing Facility BRGUS00287916
							if(nursingFlag && isdeleted)
								driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABRLV",driverArray,appNumber);
							driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABRLV",driverArray,appNumber);
						}
						else{
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABRLV",driverArray,appNumber);
						}
						// reloading the people handler with only inhome individuals PCR # 32248
						peopleHandler=new PeopleHandler();
						peopleHandler.loadPeopleHandler(appNumber);
					}
					else{
						int seqNum = Integer.parseInt(indvSeqNumber);
						//now i am setting the next indiv seq number.
						if(currentPageStatus == FwConstants.DRIVER_REQUIRED || currentPageStatus == FwConstants.DRIVER_VISIT_AGAIN){
							beforeColl.put(AppConstants.INDV_SEQUENCE_NUMBERS,String.valueOf(target_indv_seq_num > seqNum+1 ? target_indv_seq_num : seqNum+1));
							//If ABHMD was required after deletion of some individuals
							if(houseHoldBo.loadMaxSeqNum(appNumber) == houseHoldBo.loadHouseholdCount(appNumber) && target_indv_seq_num <= seqNum+1){
								//check the indv seq number exits in the peopele handler
								int maxSeqNum = houseHoldBo.loadMaxSeqNum(appNumber);
									for(int i=seqNum+1; i <=maxSeqNum; i++)
									{
										//If the next individual was deleted we need to indentify the next one
										if(peopleHandler.getIndividual(String.valueOf(i)) != null){
											beforeColl.put(AppConstants.INDV_SEQUENCE_NUMBERS,String.valueOf(i));
											break;
										}
									}
							}
							
						}
						else{
							//check the indv seq number exits in the peopele handler
							int maxSeqNum = houseHoldBo.loadMaxSeqNum(appNumber);
							for(int i=seqNum+1; i <=maxSeqNum; i++)
							{
								if(peopleHandler.getIndividual(String.valueOf(i)) != null){
									beforeColl.put(AppConstants.INDV_SEQUENCE_NUMBERS,String.valueOf(i));
									break;
								}
							}
						}
						beforeColl.remove("APP_INDV_Collection");
						beforeColl.remove("APP_IN_PRFL_Collection"); 
						session.put(FwConstants.BEFORE_COLLECTION,beforeColl);
					}			
					boolean SERHeatSrc = false;
					if(programKeyArray!=null && programKeyArray[5]==1)					
						SERHeatSrc = true;
					
					int starus_ABSHS=(int) driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABSHS", driverArray);
					
					if(SERHeatSrc && starus_ABSHS==0){
					//Added by Uma for Nursing Facility BRGUS00287916
						if(nursingFlag && isdeleted)
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABSHS",driverArray,appNumber);
						driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABSHS",driverArray,appNumber);
					}
					session.remove(AppConstants.PERSON_ADD);
					session.remove(AppConstants.SET_FILING_DATE);
					
					// Added for ILIES-156735
					if(programManager.isMSPOnlyProgramRequested(programKey)){
						//Page ABAPS is deleded as requirement ILIES-173329 R3
						//ABBNR Page is deleted as per ILIES-174325 requirement
						String[] reqPages = {"ABPRG","ABHHQ","ABWSS","ABAPD","ABCHI","ABSAP","ABAPI","ABADS","ABHEQ","ABHES","ABATS","ABSEN","ABHIS","ABMAC","ABPSQ"};
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,reqPages,driverArray,appNumber);
					}
					// End Added for ILIES-156735
					
					if(scheduleABHMS){
					//Added by Uma for Nursing Facility BRGUS00287916
						if(nursingFlag && isdeleted)
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABHMS",driverArray,appNumber);
						driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABHMS",driverArray,appNumber);
					}
					//Added by smejiaibarra for ILIES-174329. Skip the normal flow If save and exit was queue before
					String isSave_and_exit = (String)session.get(FwConstants.SAVE_AND_EXIT_FLAG);
					if(isSave_and_exit != null && isSave_and_exit.equals("Y")){
						String [] pageIds ={"ABHMD","ABPRG","ABAPD","ABHHR","ABRLV","ABHHQ", "ABJIQ", "ABOIQ", "ABHEQ", "ABOEQ","ABCSD","ABUIT","ABSCT","ABUCT", "ABEDT","ABSED" ,"ABHKQ", "ABHKE","ABPFQ", 
								 "ABUID","ABSCD","ABUCD","ABDCD","ABMED","ABSEN","ABHMS", "ABJIS", "ABOIS", "ABHES", "ABESM","ABHIS","ABPAS","ABWSS","ABCRC","ABMAC","ABCBS","ABBAR","ABSBI","ABSBD","ABSDB","ABBRS","ABCCR","ABCAP","ABCDI","ABCCD","ABCCS",
								 "ABMDQ","ABMRE","ABMEA","ABMDD","ABMCD","ABMDT","ABMDA","ABMDS","ABSNH","ABNTS","ABSRD","ABSOD","ABSUD","ABLAQ","ABLAT","ABLAD","ABLAS",
								 "ABOAQ","ABVAT","ABVAD","ABRPT","ABRPD","ABLIT","ABLID","ABBAT","ABBAD","ABAAT","ABPPD","ABOAS","ABAPI","ABADS","ABMSB","ABJIE","ABATS"};
						int size = pageIds.length;
						List pagesNotRequired = new ArrayList();

						for(int i=0;i <size;i++){
							if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,pageIds[i],driverArray)!=FwConstants.DRIVER_COMPLETE){
								pagesNotRequired.add(pageIds[i]); 
							}
						}
						size = pagesNotRequired.size();
						if(size  > 0 ){
							String[] pages = new String[size];
							for(int i=0; i < size;i++){
								pages[i] = String.valueOf(pagesNotRequired.get(i));	
							}
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,pages,driverArray,(String)session.get(AppConstants.APP_NUMBER));
						}
						session.remove(FwConstants.SAVE_AND_EXIT_FLAG);
					}
					
					//ILIES-273207 - drive flow for backdated months				
					//After completion of adding all the individual data to APP_IN_PRFL table and all the individual prior months queue required pages in driver flow.
					String totalNoOFPeopleInHouse = Integer.toString(peopleCountForLooping);
					if(totalNoOFPeopleInHouse != null && indvSeqNumber != null && totalNoOFPeopleInHouse.equalsIgnoreCase(indvSeqNumber)){
						String retroStatus = IAppProfileManager.DEFAULT_APP_PRFL_SW;
						
						ABMedicareBO abMedicareBO = new ABMedicareBO();
						APP_RETRO_RQST_Collection appRetroRqstColltemp = abMedicareBO.loadAppRetroRqstColl(appNumber);
						int size = appRetroRqstColltemp.size();
						//If the size is more than 0 is considered one of the individual is requesting prior month coverage.	
						if(size>0){
							retroStatus = String.valueOf(IAppProfileManager.STATUS_REQUIRED);
							if (currentPageStatus == driverManager.DRIVER_INDEX_COMPLETE)
								driverManager.makeAddNew(FwConstants.AFB_DRIVER, "ABRMQ", driverArray, appNumber);
							else
								driverManager.makeRequired(FwConstants.AFB_DRIVER, "ABRMQ", driverArray, appNumber);
						} else {
								retroStatus = IAppProfileManager.DEFAULT_APP_PRFL_SW;
								driverManager.makeAbsoluteNotRequired(
										FwConstants.AFB_DRIVER, "ABRMQ", driverArray,
										appNumber);
						}
					}
						
					//process APTC after adding/changing individual related info
					(new ABOtherExpensesQuestionsBO()).processAPTCLogic(appNumber, driverArray);
					//Added by Varshi Kasarla for ILIES-282240 : Removing the values from session.
					ABRegistrationBO registrationBo = new ABRegistrationBO();
					registrationBo.clearSessionOfWarningMsgOnSaveAndExitFunc(session);
					//ILIES-282240 changes end here
					log(ILog.INFO, "HouseHoldInfoEJBBean::storeHouseHoldMembersDetail::End");
				} catch(FwException fe) {
					ctx.setRollbackOnly();
					FwWrappedException we = new FwWrappedException();
					we.setCallingClassID(this.getClass().getName());
					we.setCallingMethodID(AppConstants.STORE_HOUSE_HOLD_MEMBER_DETAILS);
					we.setFwException(fe);
					throw we;
				} catch(Exception e) {
					ctx.setRollbackOnly();
					throw createFwException(this.getClass().getName(), AppConstants.STORE_HOUSE_HOLD_MEMBER_DETAILS, e);
				}
			}


	      private boolean checkForDocWarningMesgs(String reqWarningMsg, FwMessageList messageList) {
				log(ILog.DEBUG, "AppSessionBean::checkForDocWarningMesgs::Start");
			  try{
					// Code to check for Warning Messages
					boolean noValidation = false;
					//ArrayList messages = messageList.getMessageList();
					if (reqWarningMsg != null && reqWarningMsg.trim().length() > 0){
						// Check if the new warning messages are same as or subset of previous, don't display validations.
					    int messageListSize = 0;
					    if(messageList != null)
					        messageListSize = messageList.getMessageListSize();
						List warningMsgList = new ArrayList();
						// Collecting warning message in a list. Return false, if the message list has other than warning message
						for(int i=0;i<messageListSize;i++){
							if(messageList.getMessageAtIndex(i).getMessageSeverity() != null && messageList.getMessageAtIndex(i).getMessageSeverity().equals(AppConstants.WARNING)){
									warningMsgList.add(messageList.getMessageAtIndex(i).getMessageCode());
							}else{
								return noValidation;
							}
						}	
						// Tokenizing the request warrning message and putting into a list
						StringTokenizer tokenizer = new StringTokenizer(reqWarningMsg, "~");
						List reqMsgList = new ArrayList();
						while(tokenizer.hasMoreElements()){
							reqMsgList.add(tokenizer.nextElement());	
						}
						if(null == reqMsgList || reqMsgList.isEmpty() || null == warningMsgList || warningMsgList.isEmpty()){
							log(ILog.DEBUG, "All the warning messages are shown");
							return false;
						}
						Collections.sort(reqMsgList);
						Collections.sort(warningMsgList);
						if(warningMsgList.equals(reqMsgList)){
							log(ILog.DEBUG, "All the warning messages are shown");
							return true;
						}else{
							return false;
						}
					}
					log(ILog.DEBUG, "AppSessionBean::checkForDocWarningMesgs::End");
					return noValidation;
				}catch (FwException fe) {
					throw fe;
				}catch(Exception e) {
					log(ILog.ERROR, "Exception HouseHoldInfoEJBBean::checkForDocWarningMesgs::" +e.getMessage() + "StackTrace::" +e.getStackTrace()
					+"::cause::"+e.getCause());
					throw createFwException(this.getClass().getName(), "checkForDocWarningMesgs", e);
				}
			}


		private void setDocDefaultValues(Map request, APP_INDV_Cargo appIndvCargo, String appNumber) {
			log(ILog.DEBUG, "HouseHoldInfoEJBBean.setDocDefaultValues - start - appNumber - " + appNumber);
			try{
				if(null != request.get("livingArrangementProv") && null == appIndvCargo.getLive_arng_typ()){
					appIndvCargo.setLive_arng_typ((String) request.get("livingArrangementProv"));
				}
				if(null != request.get("facilityCdProv") && null == appIndvCargo.getFacility_cd()){
					appIndvCargo.setFacility_cd((String) request.get("facilityCdProv")); 
				}
				if(StringUtils.isEmpty(appIndvCargo.getFacility_cd())){
					appIndvCargo.setFacility_cd(FwConstants.SPACE);
				}
				if(StringUtils.isEmpty(appIndvCargo.getInmate_num())){
					appIndvCargo.setInmate_num(FwConstants.SPACE);
				}
				
			 }catch(Exception e) {
					log(ILog.ERROR, "Exception in HouseHoldInfoEJBBean::setDocDefaultValues - appNumber - " + appNumber + " -stackTrace - " + 
							e.getStackTrace() + " - message - " + e.getMessage() + " - cause - " + e.getCause());
 					throw createFwException(this.getClass().getName(), "setDocDefaultValues", e);
			}
		}


			private void setValuesForSexGender(APP_INDV_Cargo appIndvCargo_indv1 ,APP_INDV_Cargo appIndvCargo, String indvSeqNum) {
				
				if((indvSeqNum !=null) && ("1".equals(indvSeqNum))){
					appIndvCargo.setSex_at_birth(appIndvCargo_indv1.getSex_at_birth());
					appIndvCargo.setSex_at_birth_details(appIndvCargo_indv1.getSex_at_birth_details());
					appIndvCargo.setGender_identity(appIndvCargo_indv1.getGender_identity());
					appIndvCargo.setGender_identity_details(appIndvCargo_indv1.getGender_identity_details());
					appIndvCargo.setSexual_orientation(appIndvCargo_indv1.getSexual_orientation());
					appIndvCargo.setSexual_orientation_details(appIndvCargo_indv1.getSexual_orientation_details());
				}else{
					appIndvCargo.setSex_at_birth(appIndvCargo.getSex_at_birth());
					appIndvCargo.setSex_at_birth_details(appIndvCargo.getSex_at_birth_details());
					appIndvCargo.setGender_identity(appIndvCargo.getGender_identity());
					appIndvCargo.setGender_identity_details(appIndvCargo.getGender_identity_details());
					appIndvCargo.setSexual_orientation(appIndvCargo.getSexual_orientation());
					appIndvCargo.setSexual_orientation_details(appIndvCargo.getSexual_orientation_details());
				}
				
				
				
				
			}


			private void setDefaultValuesForRaceEthnicity(
					APP_INDV_Cargo appIndvCargo) {
				//Race
				if (appIndvCargo.getNo_race_specified_ind() == null) {
					appIndvCargo.setNo_race_specified_ind("0");
				}
				if (appIndvCargo.getTwo_or_more_race_ind() == null) {
					appIndvCargo.setTwo_or_more_race_ind("0");
				}
				List<String> raceList = new ArrayList<String>();
				if (appIndvCargo.getPac_isl_ind() == null) {
					appIndvCargo.setPac_isl_ind("0");
				}else{
					raceList.add(appIndvCargo.getPac_isl_ind());
				}
				if (appIndvCargo.getOther_race_ind() == null) {
					appIndvCargo.setOther_race_ind("0");
				}else{
					raceList.add(appIndvCargo.getOther_race_ind());
				}
				if (appIndvCargo.getAsian_american_ind() == null) {
					appIndvCargo.setAsian_american_ind("0");
				}else{
					raceList.add(appIndvCargo.getAsian_american_ind());
				}
				if (appIndvCargo.getAi_ind() == null) {
					appIndvCargo.setAi_ind("0");
				}else{
					raceList.add(appIndvCargo.getAi_ind());
				}
				if (appIndvCargo.getAs_indn_ind() == null) {
					appIndvCargo.setAs_indn_ind("0");
				}else{
					raceList.add(appIndvCargo.getAs_indn_ind());
				}
				if (appIndvCargo.getBlk_ind() == null) {
					appIndvCargo.setBlk_ind("0");
				}else{
					raceList.add(appIndvCargo.getBlk_ind());
				}
				if (appIndvCargo.getChi_ind() == null) {
					appIndvCargo.setChi_ind("0");
				}else{
					raceList.add(appIndvCargo.getChi_ind());
				}
				if (appIndvCargo.getWht_ind() == null) {
					appIndvCargo.setWht_ind("0");
				}else{
					raceList.add(appIndvCargo.getWht_ind());
				}
				if (appIndvCargo.getMid_east_north_afr_ind() == null) {
					appIndvCargo.setMid_east_north_afr_ind("0");
				}else{
					raceList.add(appIndvCargo.getMid_east_north_afr_ind());
				}
				if (appIndvCargo.getNat_haw_ind() == null) {
					appIndvCargo.setNat_haw_ind("0");
				}else{
					raceList.add(appIndvCargo.getNat_haw_ind());
				}
				if (appIndvCargo.getGuam_ind() == null) {
					appIndvCargo.setGuam_ind("0");
				}else{
					raceList.add(appIndvCargo.getGuam_ind());
				}
				if (appIndvCargo.getSam_ind() == null) {
					appIndvCargo.setSam_ind("0");
				}else{
					raceList.add(appIndvCargo.getSam_ind());
				}
				if (appIndvCargo.getFil_ind() == null) {
					appIndvCargo.setFil_ind("0");
				}else{
					raceList.add(appIndvCargo.getFil_ind());
				}
				if (appIndvCargo.getJp_ind() == null) {
					appIndvCargo.setJp_ind("0");
				}else{
					raceList.add(appIndvCargo.getJp_ind());
				}
				if (appIndvCargo.getKor_ind() == null) {
					appIndvCargo.setKor_ind("0");
				}else{
					raceList.add(appIndvCargo.getKor_ind());
				}
				if (appIndvCargo.getVt_ind() == null) {
					appIndvCargo.setVt_ind("0");
				}else{
					raceList.add(appIndvCargo.getVt_ind());
				}
				if (appIndvCargo.getAsia_ind() == null) {
					appIndvCargo.setAsia_ind("0");
				}else{
					raceList.add(appIndvCargo.getAsia_ind());
				}
				if (appIndvCargo.getOther_race_alone_ind() == null) {
					appIndvCargo.setOther_race_alone_ind("0");
				}else{
					raceList.add(appIndvCargo.getOther_race_alone_ind());
				}
				
				if(raceList.size() > 1){
					appIndvCargo.setTwo_or_more_race_ind(AppConstants.YES);
				}
				if(raceList.isEmpty()){
					appIndvCargo.setNo_race_specified_ind(AppConstants.EMPTY_STRING);
				}
				//Ethnicity
				List<String> ethList = new ArrayList<String>();
				if(appIndvCargo.getPr_ind() == null){
					appIndvCargo.setPr_ind("0");
				}else{
					ethList.add(appIndvCargo.getPr_ind());
				}
				if(appIndvCargo.getMex_ind() == null){
					appIndvCargo.setMex_ind("0");
				}else{
					ethList.add(appIndvCargo.getMex_ind());
				}
				if(appIndvCargo.getCub_ind() == null){
					appIndvCargo.setCub_ind("0");
				}else{
					ethList.add(appIndvCargo.getCub_ind());
				}
				if(appIndvCargo.getNon_hspc_ind() == null){
					appIndvCargo.setNon_hspc_ind("0");
				}else{
					ethList.add(appIndvCargo.getNon_hspc_ind());
				}
				if(appIndvCargo.getHspc_ind() == null){
					appIndvCargo.setHspc_ind("0");
				}else{
					ethList.add(appIndvCargo.getHspc_ind());
				}
				if(appIndvCargo.getOther_ethnicity_ind() == null){
					appIndvCargo.setOther_ethnicity_ind("0");
				}else{
					ethList.add(appIndvCargo.getOther_ethnicity_ind());
				}
				if(appIndvCargo.getPrefer_not_answer_ind() == null){
					appIndvCargo.setPrefer_not_answer_ind("0");
				}
				if(ethList.isEmpty()){
					appIndvCargo.setPrefer_not_answer_ind("S");
				}
			}
		
	/**
	* Loads the House hold members summary page information
	*@param txnBean gov.wisconsin.framework.business.entities.FwTransaction
	*@author govinpr 
	*/
	public void getHouseHoldInfoSummary(FwTransaction txnBean) throws javax.ejb.EJBException {

		try { 
			Map session = txnBean.getSession();
			Map request = txnBean.getRequest();
			Map pageCollection = txnBean.getPageCollection();
			Map httpSession = (Map) session.get(FwConstants.HTTP_SESSION);
			Map securedSessMap = (Map) httpSession.get(FwConstants.SECURED_SESSION); 
			Map listViewMap = null;
			// Getting appNum from session
			String appNumber = (String)session.get(AppConstants.APP_NUMBER);
			String languageCd = (String)httpSession.get(AppConstants.LANGUAGE);
			if (languageCd==null || languageCd.trim().length()==0){
				languageCd = "EN";
			}	
			// Getting PeopleHandler object from session
			//PeopleHandler peopleHandler = (PeopleHandler)session.get(AppConstants.INDIV_MASTER_HANDLER);
			PeopleHandler peopleHandler=new PeopleHandler();
			peopleHandler.loadPeopleHandler(appNumber);
			session.put(AppConstants.INDIV_MASTER_HANDLER,peopleHandler);	
			//As we have to display all in and outside home individuals so instead of getting the people 
			//handler from session we are creating a new people handler with all in and out home individuals
			
			// Initializing bussiness object			
			ABHouseholdMembersSummaryBO householdMembersSummaryBO = new ABHouseholdMembersSummaryBO();
			//ILIES-312006 start
			householdMembersSummaryBO.validateHouseholdComposition(appNumber);
			if(householdMembersSummaryBO.hasMessages()){
				request.put(FwConstants.MESSAGE_LIST, householdMembersSummaryBO.getMessageList());
			}
			//ILIES-312006 end
			// Forming individual sequence array 		
			INDIVIDUAL_Custom_Collection indvColl = peopleHandler.getSortedIndividualsByIndvSeqNum();
			int indvCollSize = indvColl.size();
			String[] indvSeq = new String[indvCollSize]; 			
			// Getting all indv seq numbers
			for(int i=0;i<indvCollSize;i++){ 
				indvSeq[i] = indvColl.getResult(i).getIndv_seq_num();
			}
			APP_INDV_Collection appIndvColl = householdMembersSummaryBO.loadHouseholdMembers(appNumber);
			listViewMap = new HashMap();
			listViewMap.put("APP_INDV_Collection", appIndvColl);
			listViewMap.put("INDIVIDUAL_Custom_Collection", indvColl);
			//	Loading household individual information list view
			ABHouseHoldMembersListview listviewbean1 = new ABHouseHoldMembersListview();
			listviewbean1.setLanguage(languageCd);
			//call the set DisplayData 
			listviewbean1.setDisplayData(listViewMap);
			//uniquely name the listview
			listviewbean1.setName("ABHouseHoldMembersListview_ListView");
			//this one for the paging
			listviewbean1.setPageSize(100);
			// define the columns to be sorted on takes a boolean array
			boolean[] sortableCols1 = new boolean[6];
			listviewbean1.setSortableColumns(sortableCols1);
			//specify the type of the columns in listview
			int[] dataType1 = {IListviewFormatter.stringCol, IListviewFormatter.stringCol, IListviewFormatter.stringCol,  IListviewFormatter.stringCol, IListviewFormatter.stringCol};			 
			listviewbean1.setColDataType(dataType1);
			pageCollection.put("ABHouseHoldMembersListview_ListView",listviewbean1);
			
			
			//***********Loading houseHold member outside home information
			ABHouseHoldOutsideHomeMembersListview listViewOutSideHomeBean=new ABHouseHoldOutsideHomeMembersListview();
			peopleHandler=new PeopleHandler();
			INDIVIDUAL_Custom_Collection indvInOutHomeColl=peopleHandler.getInAndOutOfHomeIndividuals(appNumber);
			session.put(AppConstants.INDIV_MASTER_HANDLER,peopleHandler);	
			INDIVIDUAL_Custom_Collection indvOutHomeColl=new INDIVIDUAL_Custom_Collection();
			int size=indvInOutHomeColl.size();
			for(int i=0;i<size;i++)
			{
				INDIVIDUAL_Custom_Cargo indvCargo=new INDIVIDUAL_Custom_Cargo();
				indvCargo=indvInOutHomeColl.getResult(i);
				if(indvCargo.getOut_of_home_ind().equals("Y"))
					indvOutHomeColl.addCargo(indvCargo);
			}
			Map listViewInOutMap = new HashMap();
			listViewInOutMap.put("APP_INDV_Collection", appIndvColl);
			listViewInOutMap.put("INDIVIDUAL_Custom_Collection", indvOutHomeColl);
			listViewOutSideHomeBean.setLanguage(languageCd);
//			call the set DisplayData 
			listViewOutSideHomeBean.setDisplayData(listViewInOutMap);
			//uniquely name the listview
			listViewOutSideHomeBean.setName("ABHouseHoldOutsideHomeMembersListview_ListView");
			//this one for the paging
			listViewOutSideHomeBean.setPageSize(100);
			// define the columns to be sorted on takes a boolean array
			boolean[] sortableOutSideCols = new boolean[6];
			listViewOutSideHomeBean.setSortableColumns(sortableOutSideCols);
//			specify the type of the columns in listview
			int[] dataTypeOutHome = {IListviewFormatter.stringCol, IListviewFormatter.stringCol, IListviewFormatter.stringCol,  IListviewFormatter.stringCol, IListviewFormatter.stringCol};			 
			listviewbean1.setColDataType(dataTypeOutHome);
			pageCollection.put("ABHouseHoldOutsideHomeMembersListview_ListView",listViewOutSideHomeBean);
			
			//*************************OUT SIDE HOME LIST VIEW ENDS
			// Calling business object to load the pregnancy information list view
			APP_IN_PREG_Collection appInPregCollection = householdMembersSummaryBO.loadHouseholdPregnancySummary(appNumber, indvSeq);

			ABHouseHoldMembersPregnancyListview listviewbean2 = new ABHouseHoldMembersPregnancyListview();
			listviewbean2.setLanguage(languageCd);
			//call the set DisplayData 
			listviewbean2.setDisplayData(appInPregCollection);
			//uniquely name the listview
			listviewbean2.setName("ABHouseHoldMembersPregnancyListview_ListView");
			//this one for the paging
			listviewbean2.setPageSize(100);
			// define the columns to be sorted on takes a boolean array
			boolean[] sortableCols2 = new boolean[4];
			listviewbean2.setSortableColumns(sortableCols2);
			//specify the type of the columns in listview
			int[] dataType2 = {IListviewFormatter.stringCol, IListviewFormatter.stringCol, IListviewFormatter.stringCol,  IListviewFormatter.stringCol};			 
			listviewbean2.setColDataType(dataType2);
			pageCollection.put("ABHouseHoldMembersPregnancyListview_ListView",listviewbean2);
			pageCollection.put(AppConstants.APP_PREG_COLLECTION, appInPregCollection);
			
			// Calling business object to load the household relationship information list view
			//PCR# 32248 - show all in and out people relation in summary
			INDIVIDUAL_Custom_Collection indvAllColl = peopleHandler.sortIndividuals(peopleHandler.getInAndOutOfHomeIndividuals(appNumber));
			int indvAllCollSize = indvAllColl.size();
			String[] indvAllSeq = new String[indvAllCollSize]; 
			for(int i=0;i<indvAllCollSize;i++){ 
				indvAllSeq[i] = indvAllColl.getResult(i).getIndv_seq_num();
			}
			APP_HSHL_RLT_Collection appHshlRltCollection = householdMembersSummaryBO.loadHouseholdRelationshipsSummary(appNumber, indvAllSeq);
			appHshlRltCollection = this.sortRelationshipCargoOnIndvSeq(appHshlRltCollection);
			listViewMap = new HashMap();
			listViewMap.put("APP_HSHL_RLT_Collection", appHshlRltCollection);
			listViewMap.put(AppConstants.INDIV_MASTER_HANDLER, peopleHandler);
			ABHouseHoldMembersRelationshipsListview listviewbean3 = new ABHouseHoldMembersRelationshipsListview();
			listviewbean3.setLanguage(languageCd);
			//call the set DisplayData 
			listviewbean3.setDisplayData(listViewMap);
			//uniquely name the listview
			listviewbean3.setName("ABHouseHoldMembersRelationshipsListview_ListView");
			//this one for the paging
			listviewbean3.setPageSize(200);
			// define the columns to be sorted on takes a boolean array
			boolean[] sortableCols3 = new boolean[4];
			listviewbean3.setSortableColumns(sortableCols3);
			//specify the type of the columns in listview
			int[] dataType3 = {IListviewFormatter.stringCol, IListviewFormatter.stringCol, IListviewFormatter.stringCol,  IListviewFormatter.stringCol};			 
			listviewbean3.setColDataType(dataType3);
			pageCollection.put("ABHouseHoldMembersRelationshipsListview_ListView",listviewbean3);
			// commented by arurajan. Absent parent has its own summary page and is not being printed on household summary page anymore
			// Calling business object to load the other parents information list view
//			APP_ABS_PRNT_Cust_Collection appAbsPrntCustCollection = householdMembersSummaryBO.loadOtherParentSummary(appNumber, indvSeq);
//
//			// Absent parent print collection
//			ABAbsentParentBO absentParentBo = new ABAbsentParentBO();
//			List fatherMotherList = null;
//			int fatherMotherListSize = 0;
//			short[] programKeyArray = (short[])session.get(FwConstants.AFB_PROGRAM_KEY);
//			fatherMotherList = absentParentBo.findAbsentParent(peopleHandler,(APP_IN_PRFL_Collection)session.get(AppConstants.APP_IN_PRFL_MASTER),appNumber,programKeyArray);
//			if(fatherMotherList != null)
//			fatherMotherListSize=fatherMotherList.size();
//			int appAbsPrntCustCollectionSize=appAbsPrntCustCollection.size();
//			String indvSeqNumber = null;
//			String absInd = null;
//			APP_ABS_PRNT_Cust_Collection sortedColl = new APP_ABS_PRNT_Cust_Collection();
//			APP_ABS_PRNT_Cust_Cargo absPrntCustCargo = null;
//			for(int i=0;i<fatherMotherListSize;i++){
//				IndivTypeSeqBean indvTypeSeqBean = (IndivTypeSeqBean)fatherMotherList.get(i);
//				indvSeqNumber = indvTypeSeqBean.getIndivSeqNum();
//				absInd = indvTypeSeqBean.getType();
//				for(int j=0;j<appAbsPrntCustCollectionSize;j++){
//					absPrntCustCargo=appAbsPrntCustCollection.getResult(j);
//					if(absPrntCustCargo.getIndv_seq_num().equals(indvSeqNumber)&& absPrntCustCargo.getAbs_ind().equals(absInd)){
//						sortedColl.addCargo(absPrntCustCargo);
//						break;
//					}
//				}
//			}
//			listViewMap = new HashMap();			
//			listViewMap.put("APP_ABS_PRNT_Cust_Collection",sortedColl);
//			listViewMap.put(AppConstants.INDIV_MASTER_HANDLER, peopleHandler);
//			ABHouseHoldOtherParentsListview listviewbean4 = new ABHouseHoldOtherParentsListview();
//			listviewbean4.setLanguage(languageCd);
//			//call the set DisplayData 
//			// start of BRGUS00289239 by rotanak
////			listviewbean4.setDisplayData(listViewMap);
//			// end of BRGUS00289239 by rotanak
//			//uniquely name the listview
//			listviewbean4.setName("ABHouseHoldOtherParentsListview_ListView");
//			//this one for the paging
//			listviewbean4.setPageSize(100);
//			// define the columns to be sorted on takes a boolean array
//			boolean[] sortableCols4 = new boolean[5];
//			listviewbean4.setSortableColumns(sortableCols4);
//			//specify the type of the columns in listview
//			int[] dataType4 = {IListviewFormatter.stringCol, IListviewFormatter.stringCol, IListviewFormatter.stringCol,  IListviewFormatter.stringCol, IListviewFormatter.stringCol};			 
//			listviewbean4.setColDataType(dataType4);
//			pageCollection.put("ABHouseHoldOtherParentsListview_ListView",listviewbean4);
//			pageCollection.put(AppConstants.ABSENT_PARENT_COLLECTION, appAbsPrntCustCollection);			
			
//			 Calling business object to load the blindness and disability information list view
			APP_IN_DABL_Collection appInBlindDisableCollection = householdMembersSummaryBO.loadHouseholdBlindDisableSummary(appNumber, indvSeq);
			ABHouseHoldMembersBlindDisableListview listviewbean5 = new ABHouseHoldMembersBlindDisableListview();
			listviewbean5.setLanguage(languageCd);
			//call the set DisplayData 
			listviewbean5.setDisplayData(appInBlindDisableCollection);
			//uniquely name the listview
			listviewbean5.setName("ABHouseHoldMembersBlindDisableListview_ListView");
			//this one for the paging
			listviewbean5.setPageSize(100);
			// define the columns to be sorted on takes a boolean array
			boolean[] sortableCols5 = new boolean[6];
			listviewbean5.setSortableColumns(sortableCols5);
			//specify the type of the columns in listview
			int[] dataType5 = {IListviewFormatter.stringCol, IListviewFormatter.stringCol, IListviewFormatter.stringCol, IListviewFormatter.stringCol,  IListviewFormatter.stringCol, IListviewFormatter.stringCol};			 
			listviewbean5.setColDataType(dataType5);
			pageCollection.put("ABHouseHoldMembersBlindDisableListview_ListView",listviewbean5);
			pageCollection.put(AppConstants.BLIND_DISABLE_COLLECTION, appInBlindDisableCollection);
			
//			 Calling business object to load the institution information list view
			
			//dont display Institution section if ABIND is not scheduled
			String instStatus = FwConstants.YES;
			int[] driverArray = (int[]) session.get(FwConstants.AFB_DRIVER);
			if(driverManager.getStatus(FwConstants.AFB_DRIVER,"ABIND",driverArray).equals(String.valueOf(IApplicationManager.STATUS_NOT_REQUIRED))){
				instStatus = FwConstants.NO;
			}
			pageCollection.put("ABIND_Status",instStatus);
			APP_IN_INST_Collection appInstituteCollection = householdMembersSummaryBO.loadHouseholdInstitutionSummary(appNumber, indvSeq);
			ABHouseHoldMembersInstitutionListview listviewbean6 = new ABHouseHoldMembersInstitutionListview();
			listviewbean6.setLanguage(languageCd);
			//call the set DisplayData 
			listviewbean6.setDisplayData(appInstituteCollection);
			//uniquely name the listview
			listviewbean6.setName("ABHouseHoldMembersInstitutionListview_ListView");
			//this one for the paging
			listviewbean6.setPageSize(100);
			// define the columns to be sorted on takes a boolean array
			boolean[] sortableCols6 = new boolean[4];
			listviewbean6.setSortableColumns(sortableCols6);
			//specify the type of the columns in listview
			int[] dataType6 = {IListviewFormatter.stringCol, IListviewFormatter.stringCol, IListviewFormatter.stringCol,  IListviewFormatter.stringCol};			 
			listviewbean6.setColDataType(dataType6);
			pageCollection.put("ABHouseHoldMembersInstitutionListview_ListView",listviewbean6);
			pageCollection.put(AppConstants.INSTITUTION_COLLECTION, appInstituteCollection);

			
			// Getting APP_IN_PROFILE from session
			APP_IN_PRFL_Collection appInPrflColl = (APP_IN_PRFL_Collection)session.get(AppConstants.APP_IN_PRFL_MASTER);
			
			// Running component manager to get list of components
			this.componentManager.getComponents((String)request.get(FwConstants.CURRENT_PAGE_ID), txnBean);
			
			// Creating and loading questions response map
			pageCollection = this.createAndLoadABHMSResponseMapsToPageCollection(appInPrflColl, pageCollection, peopleHandler, true);
			
			//RIDP Service
			SecurityHelperBO secHelperBO = new SecurityHelperBO();
			boolean displayRIDP = false;
			boolean displaySosRIDP = false;
			if(secHelperBO.isSOSSwitchOn(AppConstants.RIDP_WORKFLOW_AFB)){
				displayRIDP = verifyIdProof(session, securedSessMap, appNumber, secHelperBO);
				if(displayRIDP){
					String userId ="";
					userId =(String) securedSessMap.get(FwConstants.LDAP_WID);
					if(userId == null || userId.isEmpty()){
						userId = (String) securedSessMap.get(FwConstants.ACS_ID);
					}
					String prv = (String) session.get(FwConstants.PRV_APPLICATION);
					boolean prvApplication = false;
					String appNum = "";
					// handle provider workflows and user reattempts threshold
					if(prv != null && prv.equals("PRV")){
						prvApplication = true;
						appNum = (String) session.get("APP_NUMBER");
					}
					displaySosRIDP = secHelperBO.validateSOSUserRetry(userId,appNum);
					if(displaySosRIDP){
						String HHdob ="";
						session.put(AppConstants.DISPLAY_SOS_RIDP, AppConstants.YES);
						session.put(AppConstants.IDPROOF_IND_SOS,AppConstants.RIDP_WORKFLOW_AFB);
						HHdob = secHelperBO.loadIndvDOB("AFB",null,appNumber);
						if(HHdob!=null && !HHdob.isEmpty()){
							securedSessMap.put(AppConstants.DOB, HHdob);
						}
						if(securedSessMap.containsKey("SOS_OPTIN")){
							securedSessMap.remove("SOS_OPTIN");
						}
						
						
					}
					else{
						// set displayRIDP to false, to check existing RIDP flow and reset accordingly
						displayRIDP = false;
						session.remove("DISPLAY_SOS_RIDP");
						session.remove("IDPROOF_IND_SOS");
						session.remove("VERIFIED_ID_PROOFING");
					}
				}
			}
			
			if(displaySosRIDP == false && secHelperBO.verifyRIDPSwitches("AFB")){
				verifyIdProof(session, securedSessMap, appNumber, secHelperBO);
			}	
			
			session.put(FwConstants.BEFORE_COLLECTION, pageCollection); ;
			setValuesForCard(request, session,appNumber,peopleHandler);
			
		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("getHouseHoldInfoSummary");
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "getHouseHoldInfoSummary", e);
			throw fe;
		}
	}


	
	/**
/	* Validates and stores the House hold members summary page information
	*@param txnBean gov.wisconsin.framework.business.entities.FwTransaction
	*@author govinpr 
	*/
	public void storeHouseHoldInfoSummary(FwTransaction txnBean) throws javax.ejb.EJBException {

		try {
			Map session = txnBean.getSession();
			Map request = txnBean.getRequest();
			Map pageCollection = txnBean.getPageCollection();
			ABSaveAndExitBO saveAndExitBO = new ABSaveAndExitBO();
			String indvSeqNum = null;
			
			String appNumber = (String)session.get(AppConstants.APP_NUMBER);
			
			APP_IN_PRFL_Collection sessionAppInPrflCollection = (APP_IN_PRFL_Collection) session.get(AppConstants.APP_IN_PRFL_MASTER);
			 
			Map beforeCollection = (Map) session.get(FwConstants.BEFORE_COLLECTION);
			
			PeopleHandler peopleHandler=new PeopleHandler();
			peopleHandler.loadPeopleHandler(appNumber);
			session.put(AppConstants.INDIV_MASTER_HANDLER,peopleHandler);
			
			APP_IN_PRFL_Collection appInPrflAfterCollection = (APP_IN_PRFL_Collection) pageCollection.get("APP_IN_PRFL_Collection");
			
			NO_ONE_Collection noOneCollection = (NO_ONE_Collection) pageCollection.get("NO_ONE_Collection");
			
			Map noOneCheckedMap = (Map) beforeCollection.get(AppConstants.NO_ONE_CHECKED_MAP);
			
		 			
			int sessionAppInPrflCollectionSize =  sessionAppInPrflCollection.size();
			int appInPrflAfterCollectionSize = 0;
			if(appInPrflAfterCollection != null){
				appInPrflAfterCollectionSize = appInPrflAfterCollection.size();
			}
    		// Added DRUG_TRTMNT_PROG and PAROLE_PROB_VIOL fields for ILIES-129516
			short[] questionsFieldArray = {IApplicationManager.DISABLED_PERSON, IApplicationManager.DRUG_FELON,  IApplicationManager.DRUG_TRTMNT_PROG, IApplicationManager.PAROLE_PROB_VIOL, IApplicationManager.RECEIVE_FS_IN_OTHER_STATE, IApplicationManager.SSI_BENEFIT_RESP,IApplicationManager.CASH_BENEFIT_RESP};

			 applicationManager.preparePageColl(appInPrflAfterCollection,sessionAppInPrflCollection,questionsFieldArray);