package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.jdbc.core.RowMapper;

import gov.nv.dwss.domain.record.sor.EligBudgetUnitSorRecord;

public class BudgetUnitRowMapper implements RowMapper<EligBudgetUnitSorRecord> {
    
	@Override
	public EligBudgetUnitSorRecord mapRow(ResultSet rs, int rowNum) throws SQLException {
		final EligBudgetUnitSorRecord eligBudgetUnitSorRecord = new  EligBudgetUnitSorRecord();
		eligBudgetUnitSorRecord.setTotalIncomeAmount(rs.getBigDecimal("TOT_INCM_AMT"));
		eligBudgetUnitSorRecord.setUnearnedIncomeAmount(rs.getBigDecimal("UERND_INCM_AMT"));
		eligBudgetUnitSorRecord.setCashBenefitAmount(rs.getBigDecimal("AFDC_BNFT_AMT"));
		eligBudgetUnitSorRecord.setGrossEarndIncomeAmount(rs.getBigDecimal("GRS_EARND_INCM_AMT"));
		eligBudgetUnitSorRecord.setRentExpenseAmount(rs.getBigDecimal("RENT_EXP_AMT"));
		eligBudgetUnitSorRecord.setUtilExpenseAmount(rs.getBigDecimal("UTIL_EXP_AMT"));
		eligBudgetUnitSorRecord.setDependentCareExpenseAmount(rs.getBigDecimal("DPNDT_CRE_EXP_AMT"));
		eligBudgetUnitSorRecord.setHomeExpenseAmount(rs.getBigDecimal("HOME_EXP_AMT"));
		eligBudgetUnitSorRecord.setOngoingMedicalExpenseAmount(rs.getBigDecimal("OG_MDCL_EXP_AMT"));
		eligBudgetUnitSorRecord.setOtherMedicalExpenseAmount(rs.getBigDecimal("OTH_MDCL_EXP_AMT"));
		return eligBudgetUnitSorRecord;
	}

}



package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.jdbc.core.RowCallbackHandler;
import org.springframework.jdbc.core.RowMapper;

import gov.nv.dwss.domain.record.sor.CaseActionSorRecord;
import gov.nv.dwss.domain.record.sor.GeneralAssistanceIncomeSorRecord;

public class CaseActionRecordRowMapper implements RowMapper<CaseActionSorRecord> {

	@Override
	public CaseActionSorRecord mapRow(ResultSet rs, int rowNum) throws SQLException {
		final CaseActionSorRecord actionSorRecord = new  CaseActionSorRecord();
		actionSorRecord.setActionTimeStamp(rs.getTimestamp("ACTN_TS"));
		actionSorRecord.setIci(rs.getInt("ICI"));
		return actionSorRecord;
	}

}


package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.jdbc.core.RowMapper;

import gov.nv.dwss.domain.record.sor.CodeTableSorRecord;

public class CodeTableMapper implements RowMapper<CodeTableSorRecord> {

	@Override
	public CodeTableSorRecord mapRow(ResultSet rs, int rowNum) throws SQLException {
		final CodeTableSorRecord codeTableSorRecord = new  CodeTableSorRecord();
		codeTableSorRecord.setCodeTableCd(rs.getString("CODE_TBL_CD"));
		codeTableSorRecord.setCodeDesc(rs.getString("CODE_DESC"));
		return codeTableSorRecord;
	}

}



package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.jdbc.core.RowMapper;

import gov.nv.dwss.domain.record.sor.EligMemberTestResultSorRecord;

public class EligMemberTestResultMapper implements RowMapper<EligMemberTestResultSorRecord> {

	@Override
	public EligMemberTestResultSorRecord mapRow(ResultSet rs, int rowNum) throws SQLException {
		final EligMemberTestResultSorRecord memberTestResultSorRecord = new  EligMemberTestResultSorRecord();
		memberTestResultSorRecord.setSsnTestResultCode(rs.getString("SSN_TEST_RSLT_CD"));
		memberTestResultSorRecord.setCitizenshipTestResultCode(rs.getString("CTZNP_TST_RSCD"));
		memberTestResultSorRecord.setFelonTestResultcode(rs.getString("FELON_TST_RSCD"));
		memberTestResultSorRecord.setDrugConvictionTestResultCode(rs.getString("DRGCNVT_TST_RSCD"));
		return memberTestResultSorRecord;
	}
}


package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;

import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.EligVersionCaseHistoryRecord;
import org.springframework.jdbc.core.RowMapper;

public class EligVersionCaseHistoryRowMapper implements RowMapper<EligVersionCaseHistoryRecord> {

	@Override
	public EligVersionCaseHistoryRecord mapRow(ResultSet rs, int rowNum) throws SQLException {
		final EligVersionCaseHistoryRecord eligVersionCaseHistoryRecord = new  EligVersionCaseHistoryRecord();
		eligVersionCaseHistoryRecord.setIci(rs.getInt("ICI"));
		eligVersionCaseHistoryRecord.setVersionNumber(rs.getInt("VER_NMB"));
		eligVersionCaseHistoryRecord.setMtdEntlmAmount(rs.getBigDecimal("MTD_ENTLM_AMT"));
		eligVersionCaseHistoryRecord.setEligNumber(rs.getInt("ELIG_NUM"));
		eligVersionCaseHistoryRecord.setBnftReductionAmount(rs.getBigDecimal("BNFT_RDCTN_AMT"));
		eligVersionCaseHistoryRecord.setMthlyRptrInd(rs.getString("MTHLY_RPTR_IND"));
		eligVersionCaseHistoryRecord.setHohUpi(rs.getInt("HOH_UPI"));
		eligVersionCaseHistoryRecord.setFsSufx(rs.getString("FS_SUFX"));
		eligVersionCaseHistoryRecord.setHmlsInd(rs.getString("HMLS_IND"));
		return eligVersionCaseHistoryRecord;
	}

}



package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.jdbc.core.RowCallbackHandler;
import org.springframework.jdbc.core.RowMapper;

import gov.nv.dwss.domain.record.sor.GeneralAssistanceIncomeSorRecord;

public class GeneralAssistanceIncomeRowMapper implements RowMapper<GeneralAssistanceIncomeSorRecord> {

	@Override
	public GeneralAssistanceIncomeSorRecord mapRow(ResultSet rs, int rowNum) throws SQLException {
		final GeneralAssistanceIncomeSorRecord generalAssistanceIncomeSorRecord = new  GeneralAssistanceIncomeSorRecord();
		generalAssistanceIncomeSorRecord.setAmount(rs.getBigDecimal("GEN_ASIST_INC_AMT"));
		generalAssistanceIncomeSorRecord.setFrequencyCode(rs.getString("GEN_ASIST_FREQ"));
		return generalAssistanceIncomeSorRecord;
	}
}



package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;

import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.MemberRecord;
import gov.nv.dwss.fw.batch.util.ObjectUtils;
import org.springframework.jdbc.core.RowMapper;

public class MemberReordRowMapper implements RowMapper<MemberRecord> {

	@Override
	public MemberRecord mapRow(ResultSet rs, int rowNum) throws SQLException {
		final MemberRecord memberRecord = new  MemberRecord();
		memberRecord.setUpi(rs.getInt("UPI"));
		memberRecord.setIci(rs.getInt("ICI"));
		memberRecord.setDob(ObjectUtils.getUtilDate(rs.getDate("DOB")));
		memberRecord.setEthnicCode(rs.getString("ETHNC_CD"));
		memberRecord.setSexCode(rs.getString("SEX_CD"));
		memberRecord.setPersonDisQlRsnCd(rs.getString("DISQL_RSN_CD"));
		memberRecord.setIncapDisabilityIndicator(rs.getString("DISABILITY_IND"));
		memberRecord.setMedicalExpenseTotAmt(rs.getBigDecimal("MED_EXP_TOT_AMT"));
		return memberRecord;
	}

}



package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.jdbc.core.RowMapper;

import gov.nv.dwss.domain.record.sor.OfficeSorRecord;

public class OfficeCodeRowMapper implements RowMapper<OfficeSorRecord> {

	@Override
	public OfficeSorRecord mapRow(ResultSet rs, int rowNum) throws SQLException {
		final OfficeSorRecord officeSorRecord = new  OfficeSorRecord();
		officeSorRecord.setOfficeCode(rs.getString("OFC_CD"));
		officeSorRecord.setOfficeName(rs.getString("OFC_NM"));
		return officeSorRecord;
	}

}


package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;

import gov.nv.dwss.fw.batch.util.ObjectUtils;
import org.springframework.jdbc.core.RowMapper;

import gov.nv.dwss.domain.record.sor.BenefitsCaseProgramHistorySorRecord;

public class ProgramCaseHistryRowMapper implements RowMapper<BenefitsCaseProgramHistorySorRecord> {

	@Override
	public BenefitsCaseProgramHistorySorRecord mapRow(ResultSet rs, int rowNum) throws SQLException {
		final BenefitsCaseProgramHistorySorRecord benefitsCaseProgramHistorySorRecord = new  BenefitsCaseProgramHistorySorRecord();
		benefitsCaseProgramHistorySorRecord.setProgramStatusCode(rs.getString("PRGM_CASE_STS"));
		benefitsCaseProgramHistorySorRecord.setProgramEffectiveDate(ObjectUtils.getUtilDate(rs.getDate("PRGM_EFF_DT")));
		benefitsCaseProgramHistorySorRecord.setApplicationReceivedDate(ObjectUtils.getUtilDate(rs.getDate("RCRT_APL_DT")));
		benefitsCaseProgramHistorySorRecord.setIci(rs.getInt("ICI"));
		benefitsCaseProgramHistorySorRecord.setEffectiveEndDate(ObjectUtils.getUtilDate(rs.getDate("PRD_END_DT")));
		benefitsCaseProgramHistorySorRecord.setRedeterminationFrequency(rs.getInt("REDET_FRQ"));
		return benefitsCaseProgramHistorySorRecord;
	}

}


package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;

import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.SnapCharacteristicRecord;
import org.springframework.jdbc.core.RowMapper;

public class SnapCharacteristicRowMapper implements RowMapper<SnapCharacteristicRecord> {

	@Override
	public SnapCharacteristicRecord mapRow(ResultSet rs, int rowNum) throws SQLException {
		final SnapCharacteristicRecord snapCharacteristicRecord = new  SnapCharacteristicRecord();
		snapCharacteristicRecord.setOfficeCode(rs.getString("OFC_CD"));
		snapCharacteristicRecord.setOfficeName(rs.getString("OFC_NM"));
		return snapCharacteristicRecord;
	}

}



package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.jdbc.core.RowMapper;

import gov.nv.dwss.domain.record.sor.UnearnedIncomeSorRecord;

public class UnearnedIncomeRowMapper implements RowMapper<UnearnedIncomeSorRecord> {

	@Override
	public UnearnedIncomeSorRecord mapRow(ResultSet rs, int rowNum) throws SQLException {
		final UnearnedIncomeSorRecord unearnedIncomeSorRecord = new  UnearnedIncomeSorRecord();
		unearnedIncomeSorRecord.setTypeCode(rs.getString("UERND_INC_TYPE_CD"));
		unearnedIncomeSorRecord.setAmount(rs.getBigDecimal("UERND_INC_AMT"));
		return unearnedIncomeSorRecord;
	}

}



package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.mapper;

import java.sql.ResultSet;
import java.sql.SQLException;

import org.springframework.jdbc.core.RowMapper;

import gov.nv.dwss.domain.record.sor.UtilityExpenseSorRecord;


public class UtilitiesRowMapper implements RowMapper<UtilityExpenseSorRecord> {

	@Override
	public UtilityExpenseSorRecord mapRow(ResultSet rs, int rowNum) throws SQLException {
		final UtilityExpenseSorRecord utilityExpenseSorRecord = new  UtilityExpenseSorRecord();
		utilityExpenseSorRecord.setStandardUtilityAllowanceIndicator(rs.getString("SUA_IND"));
		utilityExpenseSorRecord.setNumberSharingSUA(rs.getInt("NMB_SHRG_SUA"));
		return utilityExpenseSorRecord;
	}
}

