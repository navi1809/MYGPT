import java.io.*;
import java.util.*;
import java.util.regex.*;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class JspParserEnhanced {
    private static final Pattern ELEMENT_PATTERN = Pattern.compile(
            "<(input|select|textarea|button|label|a|span|div|form|table|tr|td)(.*?)>",
            Pattern.DOTALL | Pattern.CASE_INSENSITIVE);

    private static final Pattern SELECT_PATTERN = Pattern.compile(
            "<select.*?name=\\\"(.*?)\\\".*?>(.*?)</select>", Pattern.DOTALL | Pattern.CASE_INSENSITIVE);

    private static final Pattern OPTION_PATTERN = Pattern.compile(
            "<option.*?value=\\\"(.*?)\\\".*?>(.*?)</option>", Pattern.DOTALL | Pattern.CASE_INSENSITIVE);

    private static final Pattern JSP_DIRECTIVE_PATTERN = Pattern.compile("<%@\s*page\s+(.*?)%>", Pattern.DOTALL | Pattern.CASE_INSENSITIVE);

    private static final Pattern JSP_INCLUDE_PATTERN = Pattern.compile("<jsp:include\s+page=\\\"(.*?)\\\".*?/>", Pattern.DOTALL | Pattern.CASE_INSENSITIVE);

    private static final Pattern FORM_PATTERN = Pattern.compile("<form\s+.*?>(.*?)</form>", Pattern.DOTALL | Pattern.CASE_INSENSITIVE);

    private static final Pattern TABLE_PATTERN = Pattern.compile("<table\s+.*?>(.*?)</table>", Pattern.DOTALL | Pattern.CASE_INSENSITIVE);

    public static void main(String[] args) throws IOException {
        File sourceFolder = new File("C:/path/to/jsp/folder");  // ✅ Update the JSP folder path
        File outputFile = new File("C:/path/to/output/jsp_metadata.json");  // ✅ Update output path

        List<JspData> jspDataList = new ArrayList<>();
        processJspFiles(sourceFolder, jspDataList);
        writeDataToJson(jspDataList, outputFile);

        System.out.println("✅ JSP metadata extraction complete. JSON saved at: " + outputFile.getAbsolutePath());
    }

    private static void processJspFiles(File folder, List<JspData> jspDataList) throws IOException {
        for (File file : Objects.requireNonNull(folder.listFiles())) {
            if (file.isDirectory()) {
                processJspFiles(file, jspDataList);
            } else if (file.getName().endsWith(".jsp")) {
                jspDataList.add(parseJsp(file));
            }
        }
    }

    private static JspData parseJsp(File jspFile) throws IOException {
        String content = new String(java.nio.file.Files.readAllBytes(jspFile.toPath()));
        List<ElementData> elements = new ArrayList<>();
        List<String> jspDirectives = new ArrayList<>();
        List<String> jspIncludes = new ArrayList<>();
        List<String> forms = new ArrayList<>();
        List<String> tables = new ArrayList<>();

        Matcher matcher = ELEMENT_PATTERN.matcher(content);
        while (matcher.find()) {
            elements.add(new ElementData(matcher.group(1), matcher.group(2)));
        }

        Matcher directiveMatcher = JSP_DIRECTIVE_PATTERN.matcher(content);
        while (directiveMatcher.find()) {
            jspDirectives.add(directiveMatcher.group(1));
        }

        Matcher includeMatcher = JSP_INCLUDE_PATTERN.matcher(content);
        while (includeMatcher.find()) {
            jspIncludes.add(includeMatcher.group(1));
        }

        Matcher formMatcher = FORM_PATTERN.matcher(content);
        while (formMatcher.find()) {
            forms.add(formMatcher.group(1));
        }

        Matcher tableMatcher = TABLE_PATTERN.matcher(content);
        while (tableMatcher.find()) {
            tables.add(tableMatcher.group(1));
        }

        return new JspData(jspFile.getName(), jspFile.getAbsolutePath(), elements, jspDirectives, jspIncludes, forms, tables);
    }

    private static void writeDataToJson(List<JspData> jspDataList, File outputFile) throws IOException {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))) {
            writer.write(gson.toJson(jspDataList));
        }
    }

    static class JspData {
        String filename;
        String path;
        List<ElementData> elements;
        List<String> jspDirectives;
        List<String> jspIncludes;
        List<String> forms;
        List<String> tables;

        JspData(String filename, String path, List<ElementData> elements, List<String> jspDirectives, List<String> jspIncludes, List<String> forms, List<String> tables) {
            this.filename = filename;
            this.path = path;
            this.elements = elements;
            this.jspDirectives = jspDirectives;
            this.jspIncludes = jspIncludes;
            this.forms = forms;
            this.tables = tables;
        }
    }

    static class ElementData {
        String type;
        String attributes;

        ElementData(String type, String attributes) {
            this.type = type;
            this.attributes = attributes;
        }
    }
}
