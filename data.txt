// READS TWNPERSON
Function AIN64P9-PER-S01()
  WDB00PI();
  /*  */
  VDBCOMMON.UAPPLNAM = "AIN64A";
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.USQLREC = "H2-PERSON";
  VDBCONTROL.UPROC-NM = "AIN64P9-PER-S01";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  VDBCONTROL.UPROC-OBJ = "H2-PERSON";
  /*  */
  try
    get H2-PERSON
      with #sql{
        select FRST_NM,
          LST_NM
        from TWNPERSON T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE T1.UPI = :UPI
        FOR FETCH ONLY
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into FRST-NM,
           LST-NM ;
  end
  /*  */
  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();
end

// end AIN64P9-PER-S01

// READS TWNPERSON
Function AIN64P9-PER-S02()
  WDB00PI();
  /*  */
  VDBCOMMON.UAPPLNAM = "AIN64A";
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.USQLREC = "H2-PERSON";
  VDBCONTROL.UPROC-NM = "AIN64P9-PER-S02";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  VDBCONTROL.UPROC-OBJ = "H2-PERSON";
  /*  */
  try
    get H2-PERSON singleRow
      with #sql{
        select UPI
        from TWNPERSON T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE T1.SSN = :SSN
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into UPI ;
  end
  /*  */
  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();
end

// end AIN64P9-PER-S02

// READS TWNPERSON
Function AIN64P9-PER-S03()
  WDB00PI();
  /*  */
  VDBCOMMON.UAPPLNAM = "AIN64A";
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.USQLREC = "H2-PERSON";
  VDBCONTROL.UPROC-NM = "AIN64P9-PER-S03";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  VDBCONTROL.UPROC-OBJ = "H2-PERSON";
  /*  */
  try
    get H2-PERSON singleRow
      with #sql{
        select DOB
        from TWNPERSON T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE T1.UPI = :AIN64W1.WS-CHILD-UPI
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into DOB ;
  end
  /*  */
  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();
end

// end AIN64P9-PER-S03

// PROCESS DCFS FLAT FILE
Function AIN64P9-PROC-DATA()
  AIN64W.WS-INPUT-DATA = SR-AIN64-RECIN.INPUT-DATA;
  AIN64W2.WS-ERROR-CODE = " ";
  AIN64W1.WS-GOOD-REC = "Y";
  AIN64W2.WS-OUTPUT-DATA = AIN64W.WS-INPUT-DATA;
  /*  */
  AIN64P9-VALIDATE();
  /*  */
  if (AIN64W1.WS-GOOD-REC == "N")
    /*  */
    AIN64P9-WRITE-OUT();
    /*  */
    AIN64W2.WS-OUTPUT-DATA = " ";
    AIN64W1.WS-GOOD-REC = "Y";
  else
    AIN64W1.WS-NCP-DCFS-NMB = AIN64W.WS-NCP-DCFS-NUM;
    if (AIN64W.WS-REC-TYPE == "A")
      AIN64P9-ADD();
    else
      if (AIN64W.WS-REC-TYPE == "M")
        AIN64P9-MODIFY();
      else
        if (AIN64W.WS-REC-TYPE == "D")
          AIN64P9-DELETE();
        end
      end
    end
  end
end

// end AIN64P9-PROC-DATA

// INSERTS RECS INTO TWNREFERRAL
Function AIN64P9-REF-I01()
  WDB00PI();
  /*  */
  VDBCOMMON.UAPPLNAM = "AIN64A";
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.USQLREC = "H2-REFERRAL";
  VDBCONTROL.UPROC-NM = "AIN64P9-REF-I01";
  VDBCONTROL.UPROC-OPT = "INSERT";
  VDBCONTROL.UPROC-OBJ = "H2-REFERRAL";
  /*  */
  try
    add H2-REFERRAL
      with #sql{
        insert into TWNREFERRAL 
        (ICI, NCP_SQNC_NMB, RFRL_DT, RFRL_STS,
          IVD_OFFICE, CRTN_FAME_OFFICE, CRTN_FAME_WRKR,
          FRM_4000_EXISTS, FRM_4000_RCVD_DT,
          RCVD_IVD_WRKR, RFR_BACK_DT, RFR_BACK_RSN,
          RFR_BACK_IVD_WRKR, RESOLUTION_DT,
          RESOLV_IVD_WRKR, CRTN_TS, DECLINE_DT,
          DECLINE_RSN, DECLINE_IVD_WRKR, DECLINE_OFC_CD)
        values (:ICI, :NCP-SQNC-NMB, :RFRL-DT, :RFRL-STS,
          :IVD-OFFICE, :CRTN-FAME-OFFICE, :CRTN-FAME-WRKR,
          :FRM-4000-EXISTS, :FRM-4000-RCVD-DT,
          :RCVD-IVD-WRKR, :RFR-BACK-DT, :RFR-BACK-RSN,
          :RFR-BACK-IVD-WRKR, :RESOLUTION-DT,
          :RESOLV-IVD-WRKR, :CRTN-TS, :DECLINE-DT,
          :DECLINE-RSN, :DECLINE-IVD-WRKR, :DECLINE-OFC-CD)
      } ;
  end
  /*  */
  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();
end

// end AIN64P9-REF-I01

// READS TWNREFERRAL
Function AIN64P9-REF-S01()
  WDB00PI();
  /*  */
  VDBCOMMON.UAPPLNAM = "AIN64A";
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.USQLREC = "H2-REFERRAL";
  VDBCONTROL.UPROC-NM = "AIN64P9-REF-S01";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  VDBCONTROL.UPROC-OBJ = "H2-REFERRAL";
  /*  */
  try
    get H2-REFERRAL
      with #sql{
        select MAX(NCP_SQNC_NMB)
        from TWNREFERRAL T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE T1.ICI = :AIN64W1.WS-ICI
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into AIN64W1.WS-MAX-NCP-SQNC-NMB ;
  end
  /*  */
  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();
end

// end AIN64P9-REF-S01

// UPDATES TWNREFERRAL
Function AIN64P9-REF-U01()
  WDB00PI();
  /*  */
  VDBCOMMON.UAPPLNAM = "AIN64A";
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.USQLREC = "H2-REFERRAL";
  VDBCONTROL.UPROC-NM = "AIN64P9-REF-U01";
  VDBCONTROL.UPROC-OPT = "UPDATE";
  VDBCONTROL.UPROC-OBJ = "H2-REFERRAL";
  /*  */
  try
    execute update 
      #sql{
        UPDATE
          TWNREFERRAL T1
        SET
          RFRL_STS = 'D'
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE ICI = :AIN64W1.WS-ICI
          AND NCP_SQNC_NMB = :AIN64W1.WS-MAX-NCP-SQNC-NMB
      }
      for H2-REFERRAL ; // model = update
  end
  /*  */
  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();
end

// end AIN64P9-REF-U01

// DELETES TWNRESOLUTION RECORDS
Function AIN64P9-RES-D01()
  WDB00PI();
  /*  */
  VDBCOMMON.UAPPLNAM = "AIN64A";
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.USQLREC = "H2-RESOLUTION";
  VDBCONTROL.UPROC-NM = "AIN64P9-RES-D01";
  VDBCONTROL.UPROC-OPT = "DELETE";
  VDBCONTROL.UPROC-OBJ = "H2-RESOLUTION";
  /*  */
  try
    execute delete 
      #sql{
        DELETE FROM
          TWNRESOLUTION T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE ICI = :AIN64W1.WS-ICI
          AND NCP_SQNC_NMB = :AIN64W1.WS-MAX-NCP-SQNC-NMB
      }
      for H2-RESOLUTION ; // model = delete
  end
  /*  */
  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();
end

// end AIN64P9-RES-D01

// ADDS RECS TO TWNRESOLUTION
Function AIN64P9-RES-I01()
  WDB00PI();
  /*  */
  VDBCOMMON.UAPPLNAM = "AIN64A";
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.USQLREC = "H2-RESOLUTION";
  VDBCONTROL.UPROC-NM = "AIN64P9-RES-I01";
  VDBCONTROL.UPROC-OPT = "INSERT";
  VDBCONTROL.UPROC-OBJ = "H2-RESOLUTION";
  /*  */
  try
    add H2-RESOLUTION ;
  end
  /*  */
  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();
end

// end AIN64P9-RES-I01

// READS TWNRESOLUTION
Function AIN64P9-RES-S01()
  WDB00PI();
  /*  */
  VDBCOMMON.UAPPLNAM = "AIN64A";
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.USQLREC = "H2-RESOLUTION";
  VDBCONTROL.UPROC-NM = "AIN64P9-RES-S01";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  VDBCONTROL.UPROC-OBJ = "H2-RESOLUTION";
  /*  */
  try
    get H2-RESOLUTION
      with #sql{
        select DCFS_NCP_ID,
          SSN,
          ICI
        from TWNRESOLUTION T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE T1.DCFS_NCP_ID = :DCFS-NCP-ID
         --** INSERT ORDER BY CLAUSE HERE **
        FOR FETCH ONLY
      }
      into DCFS-NCP-ID,
           SSN, 
           AIN64W1.WS-ICI ;
  end
  /*  */
  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();
end

// end AIN64P9-RES-S01

// READS TWNRESOLUTION
Function AIN64P9-RES-S02()
  WDB00PI();
  /*  */
  VDBCOMMON.UAPPLNAM = "AIN64A";
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.USQLREC = "H2-2-FAM-RES";
  VDBCONTROL.UPROC-NM = "AIN64P9-RES-S02";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  VDBCONTROL.UPROC-OBJ = "H2-2-FAM-RES";
  /*  */
  try
    get H2-2-FAM-RES
      with #sql{
        select T2.ICI,
               T2.DCFS_NCP_ID,
               'RES'
        from TWNFAM_CASE T1,
             TWNRESOLUTION T2
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        where T1.ICI = T2.ICI
        and   T1.IVE_CASE_ID = :H2-2-FAM-RES.IVE-CASE-ID
        and   T2.DCFS_NCP_ID = :H2-2-FAM-RES.DCFS-NCP-ID
        union
        select T2.ICI,
               T2.DCFS_NCP_ID,
               'RFL'
        from TWNFAM_CASE T1,
             TWNIVD_RFRL_DTLS T2
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        where T1.ICI = T2.ICI
        and   T1.IVE_CASE_ID = :H2-2-FAM-DRF.IVE-CASE-ID
        and   T2.DCFS_NCP_ID = :H2-2-FAM-DRF.DCFS-NCP-ID
         --** INSERT ORDER BY CLAUSE HERE **
        FOR FETCH ONLY
      }
      into AIN64W1.WS-ICI,
           DCFS-NCP-ID,
           AIN64W1.WS-FROM ;
  end
  /*  */
  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == -811)
  	sysVar.sqlData.sqlcode = 0;
  	AIN64W1.WS-From = "BTH";
  end
  
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();
end

// end AIN64P9-RES-S02


// UPDATES TWNRESOLUTION
Function AIN64P9-RES-U01()
  WDB00PI();
  /*  */
  VDBCOMMON.UAPPLNAM = "AIN64A";
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.USQLREC = "H2-RESOLUTION";
  VDBCONTROL.UPROC-NM = "AIN64P9-RES-U01";
  VDBCONTROL.UPROC-OPT = "UPDATE";
  VDBCONTROL.UPROC-OBJ = "H2-RESOLUTION";
  /*  */
  try
    execute update 
      #sql{
        UPDATE
          TWNRESOLUTION T1
        SET
          SSN=:SSN,
          LST_NM=:LST-NM,
          FRST_NM=:FRST-NM,
          MID_NM=:MID-NM,
          MODFR=:MODFR,
          HM_PHN_NMB=:HM-PHN-NMB,
          ETHNC_CD=:ETHNC-CD,
          SEX_CD=:SEX-CD,
          PLACE_OF_BIRTH=:PLACE-OF-BIRTH,
          BIRTH_PLACE_CD=:BIRTH-PLACE-CD,
          DOB=:DOB,
          DCFS_NCP_ID=:DCFS-NCP-ID,
          DCFS_CSORDR_FILEDT=:DCFS-CSORDR-FILEDT,
          DCFS_SRVC_OFC_WRKR=:DCFS-SRVC-OFC-WRKR,
          DCFS_SRVC_OFC_PHN=:DCFS-SRVC-OFC-PHN,
          DCFS_SRVC_OFC_CD=:DCFS-SRVC-OFC-CD,
          LGL_CST_BEG_DT=:LGL-CST-BEG-DT,
          LGL_CST_END_DT=:LGL-CST-END-DT
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE ICI = :AIN64W1.WS-ICI
          AND NCP_SQNC_NMB = :AIN64W1.WS-MAX-NCP-SQNC-NMB
      }
      for H2-RESOLUTION ; // model = update
  end
  /*  */
  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();
end

// end AIN64P9-RES-U01

// DELETES TWNRFRL_ADRS RECORDS
Function AIN64P9-RFA-D01()
  WDB00PI();
  /*  */
  VDBCOMMON.UAPPLNAM = "AIN64A";
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.USQLREC = "H2-RFRL-ADRS";
  VDBCONTROL.UPROC-NM = "AIN64P9-RFA-D01";
  VDBCONTROL.UPROC-OPT = "DELETE";
  VDBCONTROL.UPROC-OBJ = "H2-RFRL-ADRS";
  /*  */
  try
    execute delete 
      #sql{
        DELETE FROM
          TWNRFRL_ADRS T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE T1.ICI = :AIN64W1.WS-ICI
          AND T1.NCP_SQNC_NMB = :AIN64W1.WS-MAX-NCP-SQNC-NMB
      }
      for H2-RFRL-ADRS ; // model = delete
  end
  /*  */
  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();
end

// end AIN64P9-RFA-D01

// ADDS RECS TO TWNRFRL_ADRS
Function AIN64P9-RFA-I01()
  WDB00PI();
  /*  */
  VDBCOMMON.UAPPLNAM = "AIN64A";
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.USQLREC = "H2-RFRL-ADRS";
  VDBCONTROL.UPROC-NM = "AIN64P9-RFA-I01";
  VDBCONTROL.UPROC-OPT = "INSERT";
  VDBCONTROL.UPROC-OBJ = "H2-RFRL-ADRS";
  /*  */
  try
    add H2-RFRL-ADRS ;
  end
  /*  */
  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();
end

// end AIN64P9-RFA-I01

// UPDATES TWNRFRL_ADRS RECORDS
Function AIN64P9-RFA-U01()
  WDB00PI();
  /*  */
  VDBCOMMON.UAPPLNAM = "AIN64A";
  VDBCONTROL.UACCTYP = "W";
  VDBCOMMON.USQLREC = "H2-RFRL-ADRS";
  VDBCONTROL.UPROC-NM = "AIN64P9-RFA-U01";
  VDBCONTROL.UPROC-OPT = "UPDATE";
  VDBCONTROL.UPROC-OBJ = "H2-RFRL-ADRS";
  /*  */
  try
    execute update 
      #sql{
        UPDATE
          TWNRFRL_ADRS T1
        SET
          HOUSE_NMB=:HOUSE-NMB,
          STR_DIR=:STR-DIR,
          STR_NM=:STR-NM,
          STR_TYPE=:STR-TYPE,
          APT_NMB=:APT-NMB,
          OTH_ADDR=:OTH-ADDR,
          CITY=:CITY,
          ST_CD=:ST-CD,
          ZIP_CD=:ZIP-CD
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE ICI = :AIN64W1.WS-ICI
          AND NCP_SQNC_NMB = :AIN64W1.WS-MAX-NCP-SQNC-NMB
      }
      for H2-RFRL-ADRS ; // model = update
  end
  /*  */
  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /*  */
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();
end

// end AIN64P9-RFA-U01

// READ RECORDS
Function AIN64P9-SCAN-INPUT()
  VGVar.handleHardIOErrors = 1;
  /*  */
  try
    get next SR-AIN64-RECIN ;
  end
  /*  */
  if (SR-AIN64-RECIN is ioError && SR-AIN64-RECIN not endOfFile)
    VDBCONTROL.UPROC-OBJ = "SR-AIN64-RECIN";
    VDBCONTROL.UPROC-NM = "AIN64P9-SCAN-INPUT";
    VDBCONTROL.UPROC-OPT = "SCAN";
    VMESSAGE.WS-ERR-CD = sysVar.errorCode;
    VMESSAGE.UMSGINS[1] = VMESSAGE.WS-ERR-LAST-FOUR;
    VMESSAGE.UMSGINS[2] = sysVar.transferName;
    VDBCONTROL.UMSQLCODE = 0;
    if (SR-AIN64-RECIN is invalidFormat)
      VDBCONTROL.UEZESQRRM = "FILE FORMAT MISMATCH";
    end
    /*  */
    WCM00P2-TO-CEP01A();
    /*  */
  end
  /*  */
  if (SR-AIN64-RECIN is endOfFile && AIN64W1.WS-FIRST-IND == "Y")
    VDBCONTROL.UMSQLCODE = 0;
    VDBCONTROL.UPROC-OBJ = "SR-AIN64-RECIN";
    VDBCONTROL.UPROC-NM = "AIN64P9-SCAN-INPUT";
    VDBCONTROL.UPROC-OPT = "SCAN";
    VMESSAGE.UMSGINS[1] = " ";
    VMESSAGE.UMSGINS[2] = "AIN64A";
    VMESSAGE.UMSGCODE = "GEN0274";
    VDBCONTROL.UEZESQRRM = "NO DATA FOUND";
    VMESSAGE.UMSGCODE-JCL-ERR = 8;
    /*  */
    WCM00P2-TO-CEP01A();
    /*  */
  end
  /*  */
  AIN64W1.WS-FIRST-IND = "N";
end

// end AIN64P9-SCAN-INPUT

// WRITE TRACKING RECORD
Function AIN64P9-TRACK()
  set VSTRREC4 empty;
  AIN64W1.WS-TRACK-TEXT1 = " ";
  AIN64W1.WS-TRACK-TEXT2 = " ";
  /*  */
  set H2-PERSON empty;
  H2-PERSON.UPI = AIN64W1.WS-CHILD-UPI;
  /*  */
  AIN64P9-PER-S01();
  /*  */
  VSTRREC4.USTRING = H2-PERSON.FRST-NM;
  VSTRREC4.UCONCAT = H2-PERSON.LST-NM;
  VSTRREC4.USTRLEN = 16;
  VSTRREC4.UCONLEN = 20;
  /*  */
  call "WST50A" (VSTRREC4) {isNoRefresh = yes};
  /*  */
  if (AIN64W1.WS-LGL-BEG-DT-CHANGED == "Y")
    AIN64W1.WS-TEXT1 = "DCFS OPENING LEGAL CUSTODY DATE CHANGED ";
    AIN64W1.WS-TEXT-DATE1 = AIN64W.WS-LGL-CST-BEG-DT;
    AIN64W1.WS-TEXT2 = " FOR CHILD ";
    AIN64W1.WS-CHILD-NAME1 = VSTRREC4.USTRING;
    /*  */
    PDCM-CASE-TRACKING.PDCM-UPI = AIN64W1.WS-NCP-UPI;
    PDCM-CASE-TRACKING.PDCM-CASE-SUFFIX = AIN64W1.WS-NCP-CASE-SUFFIX;
    PDCM-CASE-TRACKING.PDCM-MSG-TYPE = "19S";
    PDCM-CASE-TRACKING.PDCM-PARTICIPANT = " ";
    /*  */
    PDCM-CASE-TRACKING.PDCM-TEXT1 = AIN64W1.WS-TRACK-TEXT1;
    /*  */
    call "DCM08A" (VDBCONTROL, VMESSAGE, GNOMADS, G-IV-D, PDCM-CASE-TRACKING) {isNoRefresh = yes};
    /*  */
    if (VDBCONTROL.URC > 104)
      WCM00P2-TO-CEP01A();
    end
  end
  /*  */
  if (AIN64W1.WS-LGL-END-DT-CHANGED == "Y")
    AIN64W1.WS-TEXT3 = "DCFS ENDING LEGAL CUSTODY DATE CHANGED ";
    AIN64W1.WS-TEXT-DATE2 = AIN64W.WS-LGL-CST-BEG-DT;
    AIN64W1.WS-TEXT4 = " FOR CHILD ";
    AIN64W1.WS-CHILD-NAME2 = VSTRREC4.USTRING;
    /*  */
    PDCM-CASE-TRACKING.PDCM-UPI = AIN64W1.WS-NCP-UPI;
    PDCM-CASE-TRACKING.PDCM-CASE-SUFFIX = AIN64W1.WS-NCP-CASE-SUFFIX;
    PDCM-CASE-TRACKING.PDCM-MSG-TYPE = "19S";
    PDCM-CASE-TRACKING.PDCM-PARTICIPANT = " ";
    /*  */
    PDCM-CASE-TRACKING.PDCM-TEXT1 = AIN64W1.WS-TRACK-TEXT2;
    /*  */
    call "DCM08A" (VDBCONTROL, VMESSAGE, GNOMADS, G-IV-D, PDCM-CASE-TRACKING) {isNoRefresh = yes};
  /*  */
    if (VDBCONTROL.URC > 104)
      WCM00P2-TO-CEP01A();
    end
  end
end

// end AIN64P9-TRACK

// PROCESS TO CHECK DCFS RECORD
Function AIN64P9-VALIDATE()
  if (AIN64W.WS-REC-TYPE != "A" && 
  AIN64W.WS-REC-TYPE != "D" && 
  AIN64W.WS-REC-TYPE != "M")
    AIN64W2.WS-ERROR-CODE = "DT01";
    AIN64W1.WS-GOOD-REC = "N";
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-CHILD-DCFS-NUM not numeric)
      AIN64W2.WS-ERROR-CODE = "DT06";
      AIN64W1.WS-GOOD-REC = "N";
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-DCFS-NUM not numeric)
      AIN64W2.WS-ERROR-CODE = "DT07";
      AIN64W1.WS-GOOD-REC = "N";
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-REC-TYPE == "A")
      if (AIN64W.WS-NCP-DCFS-NUM is numeric)
        AIN64W1.WS-NCP-DCFS-NMB = AIN64W.WS-NCP-DCFS-NUM;
        set H2-2-FAM-RES empty;
        H2-2-FAM-RES.DCFS-NCP-ID = AIN64W1.WS-NCP-DCFS-NMB;
        H2-2-FAM-RES.IVE-CASE-ID = AIN64W.WS-CHILD-DCFS-NUM;
        set H2-2-FAM-DRF empty;
        H2-2-FAM-DRF.DCFS-NCP-ID = AIN64W1.WS-NCP-DCFS-NMB;
        H2-2-FAM-DRF.IVE-CASE-ID = AIN64W.WS-CHILD-DCFS-NUM;
        /*  */
        AIN64P9-RES-S02();
        /*  */
        if (VDBCONTROL.URC > 104)
          WCM00P2-TO-CEP01A();
        end
        /*  */
        if (sysVar.sqlData.sqlcode == 0)
          AIN64W2.WS-ERROR-CODE = "DT10";
          AIN64W1.WS-GOOD-REC = "N";
        end
      else
        AIN64W2.WS-ERROR-CODE = "DT07";
        AIN64W1.WS-GOOD-REC = "N";
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-LGL-CST-BEG-DT == "0001-01-01" || 
    AIN64W.WS-LGL-CST-BEG-DT == "9999-12-31")
      AIN64W2.WS-ERROR-CODE = "DT44";
      AIN64W1.WS-GOOD-REC = "N";
    else
      VDTSREC.UDATYY = AIN64W.WS-LGL-CST-BEG-CCYY;
      VDTSREC.UDATMM = AIN64W.WS-LGL-CST-BEG-MM;
      VDTSREC.UDATDD = AIN64W.WS-LGL-CST-BEG-DD;
      /*  */
      call "WDT10A" (VCONTROL, VDTSREC) {isNoRefresh = yes};
      /*  */
      if (VCONTROL.URC != 0)
        AIN64W2.WS-ERROR-CODE = "DT45";
        AIN64W1.WS-GOOD-REC = "N";
      else
        AIN64W.WS-LGL-CST-BEG-CCYY = VDTSREC.UDATYY;
        AIN64W.WS-LGL-CST-BEG-MM = VDTSREC.UDATMM;
        AIN64W.WS-LGL-CST-BEG-DD = VDTSREC.UDATDD;
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-REC-TYPE == "M")
      if (AIN64W.WS-NCP-DCFS-NUM is numeric)
        AIN64W1.WS-NCP-DCFS-NMB = AIN64W.WS-NCP-DCFS-NUM;
        set H2-2-FAM-RES empty;
        H2-2-FAM-RES.DCFS-NCP-ID = AIN64W1.WS-NCP-DCFS-NMB;
        H2-2-FAM-RES.IVE-CASE-ID = AIN64W.WS-CHILD-DCFS-NUM;
        set H2-2-FAM-DRF empty;
        H2-2-FAM-DRF.DCFS-NCP-ID = AIN64W1.WS-NCP-DCFS-NMB;
        H2-2-FAM-DRF.IVE-CASE-ID = AIN64W.WS-CHILD-DCFS-NUM;
        /*  */
        AIN64P9-RES-S02();
        if (VDBCONTROL.URC > 104)
          WCM00P2-TO-CEP01A();
        end
        /*  */
        if (sysVar.sqlData.sqlcode == 100)
          AIN64W2.WS-ERROR-CODE = "DT03";
          AIN64W1.WS-GOOD-REC = "N";
        end
      else
        AIN64W2.WS-ERROR-CODE = "DT07";
        AIN64W1.WS-GOOD-REC = "N";
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-REC-TYPE == "D")
      if (AIN64W.WS-NCP-DCFS-NUM is numeric)
        AIN64W1.WS-NCP-DCFS-NMB = AIN64W.WS-NCP-DCFS-NUM;
        set H2-2-FAM-RES empty;
        H2-2-FAM-RES.DCFS-NCP-ID = AIN64W1.WS-NCP-DCFS-NMB;
        H2-2-FAM-RES.IVE-CASE-ID = AIN64W.WS-CHILD-DCFS-NUM;
        set H2-2-FAM-DRF empty;
        H2-2-FAM-DRF.DCFS-NCP-ID = AIN64W1.WS-NCP-DCFS-NMB;
        H2-2-FAM-DRF.IVE-CASE-ID = AIN64W.WS-CHILD-DCFS-NUM;  
        /*  */
        AIN64P9-RES-S02();
        /*  */
        if (VDBCONTROL.URC > 104)
          WCM00P2-TO-CEP01A();
        end
        /*  */
        if (sysVar.sqlData.sqlcode == 100)
          AIN64W2.WS-ERROR-CODE = "DT04";
          AIN64W1.WS-GOOD-REC = "N";
        end
      else
        AIN64W2.WS-ERROR-CODE = "DT07";
        AIN64W1.WS-GOOD-REC = "N";
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    set H2-FAM-CASE empty;
    H2-FAM-CASE.IVE-CASE-ID = AIN64W.WS-CHILD-DCFS-NUM;
    /*  */
    AIN64P9-FAM-S01();
    /*  */
    if (VDBCONTROL.URC > 104)
      WCM00P2-TO-CEP01A();
    end
    /*  */
    if (sysVar.sqlData.sqlcode == 100)
      AIN64W2.WS-ERROR-CODE = "DT08";
      AIN64W1.WS-GOOD-REC = "N";
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    VDTSREC.UDATYY = AIN64W.WS-REFER-CCYY;
    VDTSREC.UDATMM = AIN64W.WS-REFER-MM;
    VDTSREC.UDATDD = AIN64W.WS-REFER-DD;
    /*  */
    call "WDT10A" (VCONTROL, VDTSREC) {isNoRefresh = yes};
    /*  */
    if (VCONTROL.URC != 0)
      AIN64W2.WS-ERROR-CODE = "DT11";
      AIN64W1.WS-GOOD-REC = "N";
    else
      AIN64W.WS-REFER-CCYY = VDTSREC.UDATYY;
      AIN64W.WS-REFER-MM = VDTSREC.UDATMM;
      AIN64W.WS-REFER-DD = VDTSREC.UDATDD;
    end
  end
  if (AIN64W1.WS-GOOD-REC == "Y")
    VDTSREC.UDATYY = AIN64W.WS-CS-ORDR-CCYY;
    VDTSREC.UDATMM = AIN64W.WS-CS-ORDR-MM;
    VDTSREC.UDATDD = AIN64W.WS-CS-ORDR-DD;
    /*  */
    call "WDT10A" (VCONTROL, VDTSREC) {isNoRefresh = yes};
    /*  */
    if (VCONTROL.URC != 0)
      AIN64W2.WS-ERROR-CODE = "DT12";
      AIN64W1.WS-GOOD-REC = "N";
    else
      AIN64W.WS-CS-ORDR-CCYY = VDTSREC.UDATYY;
      AIN64W.WS-CS-ORDR-MM = VDTSREC.UDATMM;
      AIN64W.WS-CS-ORDR-DD = VDTSREC.UDATDD;
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-SSN != " ")
      if (AIN64W.WS-NCP-SSN not numeric)
        AIN64W2.WS-ERROR-CODE = "DT13";
        AIN64W1.WS-GOOD-REC = "N";
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-LAST-NAME == " " || 
    AIN64W.WS-NCP-LAST-NAME == "UNKNOWN")
      AIN64W2.WS-ERROR-CODE = "DT14";
      AIN64W1.WS-GOOD-REC = "N";
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-FIRST-NAME == " " || 
    AIN64W.WS-NCP-FIRST-NAME == "UNKNOWN")
      AIN64W2.WS-ERROR-CODE = "DT15";
      AIN64W1.WS-GOOD-REC = "N";
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-MID-NAME != " ")
      if (AIN64W.WS-NCP-MID-NAME == "UNKNOWN")
        AIN64W2.WS-ERROR-CODE = "DT16";
        AIN64W1.WS-GOOD-REC = "N";
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-MODIFIER != " ")
      if (AIN64W.WS-NCP-MODIFIER == "UNK")
        AIN64W2.WS-ERROR-CODE = "DT16";
        AIN64W1.WS-GOOD-REC = "N";
      else
        set H2-CODE-TBL empty;
        H2-CODE-TBL.CODE-TBL-CD = AIN64W.WS-NCP-MODIFIER;
        H2-CODE-TBL.CODE-TBL-TYP = "NAMEMOD";
        /*  */
        AIN64P9-CDT-S01();
        /*  */
        if (VDBCONTROL.URC > 104)
          WCM00P2-TO-CEP01A();
        end
        /*  */
        if (sysVar.sqlData.sqlcode != 0)
          AIN64W2.WS-ERROR-CODE = "DT17";
          AIN64W1.WS-GOOD-REC = "N";
        end
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-STREET-DIR != " ")
      set H2-CODE-TBL empty;
      H2-CODE-TBL.CODE-TBL-CD = AIN64W.WS-NCP-STREET-DIR;
      H2-CODE-TBL.CODE-TBL-TYP = "STRETDIR";
      /*  */
      AIN64P9-CDT-S01();
      /*  */
      if (VDBCONTROL.URC > 104)
        WCM00P2-TO-CEP01A();
      end
      /*  */
      if (sysVar.sqlData.sqlcode != 0)
        AIN64W2.WS-ERROR-CODE = "DT18";
        AIN64W1.WS-GOOD-REC = "N";
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-STREET-TYPE != " ")
      set H2-CODE-TBL empty;
      H2-CODE-TBL.CODE-TBL-CD = AIN64W.WS-NCP-STREET-TYPE;
      H2-CODE-TBL.CODE-TBL-TYP = "STRTTYPE";
      /*  */
      AIN64P9-CDT-S01();
      /*  */
      if (VDBCONTROL.URC > 104)
        WCM00P2-TO-CEP01A();
      end
      /*  */
      if (sysVar.sqlData.sqlcode != 0)
        AIN64W2.WS-ERROR-CODE = "DT19";
        AIN64W1.WS-GOOD-REC = "N";
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-CITY == " " && 
    AIN64W.WS-NCP-ZIP-CODE != " ")
      AIN64W2.WS-ERROR-CODE = "DT20";
      AIN64W1.WS-GOOD-REC = "N";
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-STATE != " ")
      set H2-CODE-TBL empty;
      H2-CODE-TBL.CODE-TBL-CD = AIN64W.WS-NCP-STATE;
      H2-CODE-TBL.CODE-TBL-TYP = "ST_CNTRY";
      /*  */
      AIN64P9-CDT-S01();
      /*  */
      if (VDBCONTROL.URC > 104)
        WCM00P2-TO-CEP01A();
      end
      /*  */
      if (sysVar.sqlData.sqlcode != 0)
        AIN64W2.WS-ERROR-CODE = "DT21";
        AIN64W1.WS-GOOD-REC = "N";
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-CITY != " " && 
    AIN64W.WS-NCP-ZIP-CODE == " ")
      AIN64W2.WS-ERROR-CODE = "DT22";
      AIN64W1.WS-GOOD-REC = "N";
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-STATE != " ")
      if (AIN64W.WS-NCP-STATE == "NV")
        set H2-CODE-TBL empty;
        H2-CODE-TBL.CODE-TBL-CD = AIN64W.WS-NCP-ZIP-CODE;
        H2-CODE-TBL.CODE-TBL-TYP = "ZIPCODE";
        /*  */
        AIN64P9-CDT-S01();
        /*  */
        if (VDBCONTROL.URC > 104)
          WCM00P2-TO-CEP01A();
        end
        /*  */
        if (sysVar.sqlData.sqlcode != 0)
          AIN64W2.WS-ERROR-CODE = "DT23";
          AIN64W1.WS-GOOD-REC = "N";
        end
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-PHONE != " ")
      if (AIN64W.WS-NCP-PHONE not numeric)
        AIN64W2.WS-ERROR-CODE = "DT24";
        AIN64W1.WS-GOOD-REC = "N";
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-RACE != " ")
      set H2-CODE-TBL empty;
      H2-CODE-TBL.CODE-TBL-CD = AIN64W.WS-NCP-RACE;
      H2-CODE-TBL.CODE-TBL-TYP = "ETHNICTY";
      /*  */
      AIN64P9-CDT-S01();
      /*  */
      if (VDBCONTROL.URC > 104)
        WCM00P2-TO-CEP01A();
      end
      /*  */
      if (sysVar.sqlData.sqlcode != 0)
        AIN64W2.WS-ERROR-CODE = "DT25";
        AIN64W1.WS-GOOD-REC = "N";
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-SEX != " ")
      set H2-CODE-TBL empty;
      H2-CODE-TBL.CODE-TBL-CD = AIN64W.WS-NCP-SEX;
      H2-CODE-TBL.CODE-TBL-TYP = "SEXCD";
      /*  */
      AIN64P9-CDT-S01();
      /*  */
      if (VDBCONTROL.URC > 104)
        WCM00P2-TO-CEP01A();
      end
      /*  */
      if (sysVar.sqlData.sqlcode != 0)
        AIN64W2.WS-ERROR-CODE = "DT26";
        AIN64W1.WS-GOOD-REC = "N";
      end
    else
      AIN64W2.WS-ERROR-CODE = "DT26";
      AIN64W1.WS-GOOD-REC = "N";
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-HAIR != " ")
      set H2-CODE-TBL empty;
      H2-CODE-TBL.CODE-TBL-CD = AIN64W.WS-NCP-HAIR;
      H2-CODE-TBL.CODE-TBL-TYP = "HAIRCLR";
      /*  */
      AIN64P9-CDT-S01();
      /*  */
      if (VDBCONTROL.URC > 104)
        WCM00P2-TO-CEP01A();
      end
      /*  */
      if (sysVar.sqlData.sqlcode != 0)
        AIN64W2.WS-ERROR-CODE = "DT27";
        AIN64W1.WS-GOOD-REC = "N";
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-EYES != " ")
      set H2-CODE-TBL empty;
      H2-CODE-TBL.CODE-TBL-CD = AIN64W.WS-NCP-EYES;
      H2-CODE-TBL.CODE-TBL-TYP = "EYECLR";
      /*  */
      AIN64P9-CDT-S01();
      /*  */
      if (VDBCONTROL.URC > 104)
        WCM00P2-TO-CEP01A();
      end
      /*  */
      if (sysVar.sqlData.sqlcode != 0)
        AIN64W2.WS-ERROR-CODE = "DT28";
        AIN64W1.WS-GOOD-REC = "N";
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-WEIGHT != " ")
      if (AIN64W.WS-NCP-WEIGHT not numeric)
        AIN64W2.WS-ERROR-CODE = "DT29";
        AIN64W1.WS-GOOD-REC = "N";
      else
        AIN64W1.WS-NCP-WEIGHT-NMB = AIN64W.WS-NCP-WEIGHT;
      end
    else
      AIN64W1.WS-NCP-WEIGHT-NMB = 000;
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-HEIGHT != " ")
      if (AIN64W.WS-NCP-HEIGHT not numeric)
        AIN64W2.WS-ERROR-CODE = "DT30";
        AIN64W1.WS-GOOD-REC = "N";
      else
        AIN64W1.WS-NCP-HEIGHT-NMB = AIN64W.WS-NCP-HEIGHT;
      end
    else
      AIN64W1.WS-NCP-HEIGHT-NMB = 000;
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-DISABLED != " ")
      if (AIN64W.WS-NCP-DISABLED != "Y" && 
      AIN64W.WS-NCP-DISABLED != "N")
        AIN64W2.WS-ERROR-CODE = "DT31";
        AIN64W1.WS-GOOD-REC = "N";
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-BIRTH-ST != " ")
      set H2-CODE-TBL empty;
      H2-CODE-TBL.CODE-TBL-CD = AIN64W.WS-NCP-BIRTH-ST;
      H2-CODE-TBL.CODE-TBL-TYP = "ST_CNTRY";
      /*  */
      AIN64P9-CDT-S01();
      /*  */
      if (VDBCONTROL.URC > 104)
        WCM00P2-TO-CEP01A();
      end
      /*  */
      if (sysVar.sqlData.sqlcode != 0)
        AIN64W2.WS-ERROR-CODE = "DT32";
        AIN64W1.WS-GOOD-REC = "N";
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-NCP-DOB != " ")
      VDTSREC.UDATYY = AIN64W.WS-DOB-CCYY;
      VDTSREC.UDATMM = AIN64W.WS-DOB-MM;
      VDTSREC.UDATDD = AIN64W.WS-DOB-DD;
      /*  */
      call "WDT10A" (VCONTROL, VDTSREC) {isNoRefresh = yes};
      /*  */
      if (VCONTROL.URC != 0)
        AIN64W2.WS-ERROR-CODE = "DT33";
        AIN64W1.WS-GOOD-REC = "N";
      else
        AIN64W.WS-DOB-CCYY = VDTSREC.UDATYY;
        AIN64W.WS-DOB-MM = VDTSREC.UDATMM;
        AIN64W.WS-DOB-DD = VDTSREC.UDATDD;
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-PARENTS-EVER-MARRIED != " ")
      if (AIN64W.WS-PARENTS-EVER-MARRIED != "Y" && 
      AIN64W.WS-PARENTS-EVER-MARRIED != "N" && 
      AIN64W.WS-PARENTS-EVER-MARRIED != "U")
        AIN64W2.WS-ERROR-CODE = "DT34";
        AIN64W1.WS-GOOD-REC = "N";
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-DT-OF-MARRIAGE != " ")
      VDTSREC.UDATYY = AIN64W.WS-MARRIAGE-CCYY;
      VDTSREC.UDATMM = AIN64W.WS-MARRIAGE-MM;
      VDTSREC.UDATDD = AIN64W.WS-MARRIAGE-DD;
      /*  */
      call "WDT10A" (VCONTROL, VDTSREC) {isNoRefresh = yes};
      /*  */
      if (VCONTROL.URC != 0)
        AIN64W2.WS-ERROR-CODE = "DT35";
        AIN64W1.WS-GOOD-REC = "N";
      else
        AIN64W.WS-MARRIAGE-CCYY = VDTSREC.UDATYY;
        AIN64W.WS-MARRIAGE-MM = VDTSREC.UDATMM;
        AIN64W.WS-MARRIAGE-DD = VDTSREC.UDATDD;
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-CURRENTLY-MARRIED != " ")
      if (AIN64W.WS-CURRENTLY-MARRIED != "Y" && 
      AIN64W.WS-CURRENTLY-MARRIED != "N" && 
      AIN64W.WS-CURRENTLY-MARRIED != "U")
        AIN64W2.WS-ERROR-CODE = "DT37";
        AIN64W1.WS-GOOD-REC = "N";
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-DT-OF-DIVORCE != " ")
      VDTSREC.UDATYY = AIN64W.WS-DIVORCE-CCYY;
      VDTSREC.UDATMM = AIN64W.WS-DIVORCE-MM;
      VDTSREC.UDATDD = AIN64W.WS-DIVORCE-DD;
      /*  */
      call "WDT10A" (VCONTROL, VDTSREC) {isNoRefresh = yes};
      /*  */
      if (VCONTROL.URC != 0)
        AIN64W2.WS-ERROR-CODE = "DT38";
        AIN64W1.WS-GOOD-REC = "N";
      else
        AIN64W.WS-DIVORCE-CCYY = VDTSREC.UDATYY;
        AIN64W.WS-DIVORCE-MM = VDTSREC.UDATMM;
        AIN64W.WS-DIVORCE-DD = VDTSREC.UDATDD;
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-DCFS-SRVC-OFC-WRKR == " ")
      AIN64W2.WS-ERROR-CODE = "DT40";
      AIN64W1.WS-GOOD-REC = "N";
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-DCFS-SRVC-OFC-PHN == " ")
      AIN64W2.WS-ERROR-CODE = "DT41";
      AIN64W1.WS-GOOD-REC = "N";
    else
      if (AIN64W.WS-DCFS-SRVC-OFC-PHN not numeric)
        AIN64W2.WS-ERROR-CODE = "DT42";
        AIN64W1.WS-GOOD-REC = "N";
      end
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
    if (AIN64W.WS-DCFS-SRVC-OFC-CD == " ")
      AIN64W2.WS-ERROR-CODE = "DT43";
      AIN64W1.WS-GOOD-REC = "N";
    end
  end
  /*  */
  if (AIN64W1.WS-GOOD-REC == "Y")
  	if (AIN64W.WS-LGL-CST-END-DT == "9999-12-31")
  	else
      VDTSREC.UDATYY = AIN64W.WS-LGL-CST-END-CCYY;
      VDTSREC.UDATMM = AIN64W.WS-LGL-CST-END-MM;
      VDTSREC.UDATDD = AIN64W.WS-LGL-CST-END-DD;
      /*  */
      call "WDT10A" (VCONTROL, VDTSREC) {isNoRefresh = yes};
      /*  */
      if (VCONTROL.URC != 0)
        AIN64W2.WS-ERROR-CODE = "DT46";
        AIN64W1.WS-GOOD-REC = "N";
      else
        AIN64W.WS-LGL-CST-END-CCYY = VDTSREC.UDATYY;
        AIN64W.WS-LGL-CST-END-MM = VDTSREC.UDATMM;
        AIN64W.WS-LGL-CST-END-DD = VDTSREC.UDATDD;
      end
    end
  end
end
// end AIN64P9-VALIDATE

// WRITES RECORDS
Function AIN64P9-WRITE-OUT()
  SR-AIN64-RECOUT.OUTPUT-DATA = AIN64W2.WS-OUTPUT-DATA;
  /*  */
  try
    add SR-AIN64-RECOUT ;
  end
  /*  */
  if (SR-AIN64-RECOUT is ioError)
    VDBCONTROL.UPROC-OBJ = "SR-AIN64-RECOUT";
    VDBCONTROL.UPROC-NM = "AIN64P9-WRITE-OUT";
    VDBCONTROL.UPROC-OPT = "ADD";
    VMESSAGE.WS-ERR-CD = sysVar.errorCode;
    VMESSAGE.UMSGINS[1] = VMESSAGE.WS-ERR-LAST-FOUR;
    VMESSAGE.UMSGINS[2] = sysVar.transferName;
    VDBCONTROL.UMSQLCODE = 0;
    
    /*  */
    WCM00P2-TO-CEP01A();
  end
end

Record AIN64W type basicRecord
  10 WS-INPUT-DATA char(350) ; 
    15 WS-REC-TYPE char(1) ; 
    15 WS-CHILD-DCFS-NUM char(9) ; 
    15 WS-NCP-DCFS-NUM char(9) ; 
    15 WS-REFERRAL-DATE char(10) ; 
      20 WS-REFER-CCYY char(4) ; 
      20 * char(1) ; 
      20 WS-REFER-MM char(2) ; 
      20 * char(1) ; 
      20 WS-REFER-DD char(2) ; 
    15 WS-CS-ORDR-FILEDT char(10) ; 
      20 WS-CS-ORDR-CCYY char(4) ; 
      20 * char(1) ; 
      20 WS-CS-ORDR-MM char(2) ; 
      20 * char(1) ; 
      20 WS-CS-ORDR-DD char(2) ; 
    15 WS-NCP-SSN char(9) ; 
    15 WS-NCP-LAST-NAME char(21) ; 
    15 WS-NCP-FIRST-NAME char(16) ; 
    15 WS-NCP-MID-NAME char(16) ; 
    15 WS-NCP-MODIFIER char(3) ; 
    15 WS-NCP-STREET-NUMBER char(8) ; 
    15 WS-NCP-STREET-DIR char(2) ; 
    15 WS-NCP-STREET-NAME char(25) ; 
    15 WS-NCP-STREET-TYPE char(4) ; 
    15 WS-NCP-APARTMENT-NMB char(5) ; 
    15 WS-NCP-OTHER char(25) ; 
    15 WS-NCP-CITY char(20) ; 
    15 WS-NCP-STATE char(3) ; 
    15 WS-NCP-ZIP-CODE char(11) ; 
    15 WS-NCP-PHONE char(10) ; 
    15 WS-NCP-RACE char(1) ; 
    15 WS-NCP-SEX char(1) ; 
    15 WS-NCP-HAIR char(2) ; 
    15 WS-NCP-EYES char(2) ; 
    15 WS-NCP-WEIGHT char(3) ; 
    15 WS-NCP-HEIGHT char(3) ; 
    15 WS-NCP-DISABLED char(1) ; 
    15 WS-NCP-BIRTH-CITY char(20) ; 
    15 WS-NCP-BIRTH-ST char(3) ; 
    15 WS-NCP-DOB char(10) ; 
      20 WS-DOB-CCYY char(4) ; 
      20 * char(1) ; 
      20 WS-DOB-MM char(2) ; 
      20 * char(1) ; 
      20 WS-DOB-DD char(2) ; 
    15 WS-PARENTS-EVER-MARRIED char(1) ; 
    15 WS-DT-OF-MARRIAGE char(10) ; 
      20 WS-MARRIAGE-CCYY char(4) ; 
      20 * char(1) ; 
      20 WS-MARRIAGE-MM char(2) ; 
      20 * char(1) ; 
      20 WS-MARRIAGE-DD char(2) ; 
    15 WS-CURRENTLY-MARRIED char(1) ; 
    15 WS-DT-OF-DIVORCE char(10) ; 
      20 WS-DIVORCE-CCYY char(4) ; 
      20 * char(1) ; 
      20 WS-DIVORCE-MM char(2) ; 
      20 * char(1) ; 
      20 WS-DIVORCE-DD char(2) ; 
    15 WS-DCFS-SRVC-OFC-WRKR char(8) ; 
    15 WS-DCFS-SRVC-OFC-PHN char(10) ; 
    15 WS-DCFS-SRVC-OFC-CD char(2) ; 
    15 WS-LGL-CST-BEG-DT char(10) ; 
      20 WS-LGL-CST-BEG-CCYY char(4) ; 
      20 * char(1) ; 
      20 WS-LGL-CST-BEG-MM char(2) ; 
      20 * char(1) ; 
      20 WS-LGL-CST-BEG-DD char(2) ; 
    15 WS-LGL-CST-END-DT char(10) ; 
      20 WS-LGL-CST-END-CCYY char(4) ; 
      20 * char(1) ; 
      20 WS-LGL-CST-END-MM char(2) ; 
      20 * char(1) ; 
      20 WS-LGL-CST-END-DD char(2) ; 
    15 * char(25) ; 
end

// end AIN64W

Record AIN64W1 type basicRecord
  10 WS-CHILD-DCFS-NMB num(9) ; 
  10 WS-NCP-DCFS-NMB num(9) ; 
  10 WS-GOOD-REC char(1) ; 
  10 WS-FIRST-IND char(1) ; 
  10 WS-RFRL-EXISTS char(1) ; 
  10 WS-MAX-NCP-SQNC-NMB smallint ; 
  10 WS-NEXT-NCP-SQNC-NMB smallint ; 
  10 WS-NCP-WEIGHT-NMB num(3) ; 
  10 WS-NCP-HEIGHT-NMB num(3) ; 
  10 WS-NCP-UPI decimal(9) ; 
  10 WS-CHILD-UPI decimal(9) ; 
  10 WS-ICI decimal(9) ; 
  10 WS-APPL-UPI decimal(9) ;
  10 WS-CST-UPI decimal(9) ;
  10 WS-NCP-CASE-SUFFIX char(1) ; 
  10 WS-LGL-BEG-DT-CHANGED char(1) ; 
  10 WS-LGL-END-DT-CHANGED char(1) ; 
  10 WS-TRACK-TEXT1 char(98) ; 
    15 WS-TEXT1 char(40) ; 
    15 WS-TEXT-DATE1 char(10) ; 
    15 WS-TEXT2 char(11) ; 
    15 WS-CHILD-NAME1 char(37) ; 
  10 WS-TRACK-TEXT2 char(97) ; 
    15 WS-TEXT3 char(39) ; 
    15 WS-TEXT-DATE2 char(10) ; 
    15 WS-TEXT4 char(11) ; 
    15 WS-CHILD-NAME2 char(37) ; 
  10 WS-PROC-DATE char(10) ; 
    15 WS-PROC-DT-CC char(2) ; 
    15 WS-PROC-DT-YY char(2) ; 
    15 WS-PROC-DASH1 char(1) ; 
    15 WS-PROC-DT-MM char(2) ; 
    15 WS-PROC-DASH2 char(1) ; 
    15 WS-PROC-DT-DD char(2) ; 
  10 WS-WORK-DATE char(8) ; 
    15 WS-WORK-CCYY char(4) ; 
    15 WS-WORK-MM char(2) ; 
    15 WS-WORK-DD char(2) ; 
  10 WS-TEMP-DATE char(10) ; 
    15 WS-TEMP-CCYY char(4) ; 
      20 WS-TEMP-CCYY-NUM num(4) ; 
        25 WS-TEMP-CC char(2) ; 
          30 WS-TEMP-CC-NUM num(2) ; 
        25 WS-TEMP-YY char(2) ; 
          30 WS-TEMP-YY-NUM num(2) ; 
    15 WS-TEMP-FIL1 char(1) ; 
    15 WS-TEMP-MM char(2) ; 
      20 WS-TEMP-MM-NUM num(2) ; 
    15 WS-TEMP-FIL2 char(1) ; 
    15 WS-TEMP-DD char(2) ; 
      20 WS-TEMP-DD-NUM num(2) ; 
  10 WS-PREV-DATE num(8) ; 
    15 WS-PREV-CCYY num(4) ; 
      20 WS-PREV-CC num(2) ; 
        25 WS-PREV-CC-C char(2) ; 
      20 WS-PREV-YY num(2) ; 
        25 WS-PREV-YY-C char(2) ; 
    15 WS-PREV-MM num(2) ; 
      20 WS-PREV-MM-C char(2) ; 
    15 WS-PREV-DD num(2) ; 
      20 WS-PREV-DD-C char(2) ; 
  10 WS-LAST-DATE char(10) ; 
    15 WS-LAST-DATE-CC char(2) ; 
    15 WS-LAST-DATE-YY char(2) ; 
    15 WS-LAST-DATE-FIL1 char(1) ; 
    15 WS-LAST-DATE-MM char(2) ; 
    15 WS-LAST-DATE-FIL2 char(1) ; 
    15 WS-LAST-DATE-DD char(2) ; 
  10 WS-REM1 num(4) ; 
  10 WS-REM2 num(4) ; 
  10 WS-REM3 num(4) ; 
  10 WS-TEMP-REF-DATE char(10) ; 
    15 WS-TEMP-REF-CCYY char(4) ; 
      20 WS-TEMP-REF-CC char(2) ; 
      20 WS-TEMP-REF-YY char(2) ; 
    15 WS-TEMP-REF-FIL1 char(1) ; 
    15 WS-TEMP-REF-MM char(2) ; 
    15 WS-TEMP-REF-FIL2 char(1) ; 
    15 WS-TEMP-REF-DD char(2) ; 
  10 WS-EMAN-DATE char(10) ; 
    15 WS-EMAN-DATE-CCYY char(4) ; 
      20 WS-EMAN-DATE-CCNUM num(4) ; 
    15 WS-EMAN-FIL1 char(1) ; 
    15 WS-EMAN-DATE-MM char(2) ; 
      20 WS-EMAN-DATE-MMNUM num(2) ; 
    15 WS-EMAN-FIL2 char(1) ; 
    15 WS-EMAN-DATE-DD char(2) ; 
  10 WS-RFRL-ADDED char(1) ;
  10 WS-FROM char(3); 
end

// end AIN64W1

Record AIN64W2 type basicRecord
  10 WS-OUTPUT-DATA char(350) ; 
    15 WS-REC-TYPE char(1) ; 
    15 WS-CHILD-DCFS-NUM char(9) ; 
    15 WS-NCP-DCFS-NUM char(9) ; 
    15 WS-REFERRAL-DATE char(10) ; 
    15 WS-CS-ORDR-FILEDT char(10) ; 
    15 WS-NCP-SSN char(9) ; 
    15 WS-NCP-LAST-NAME char(21) ; 
    15 WS-NCP-FIRST-NAME char(16) ; 
    15 WS-NCP-MID-NAME char(16) ; 
    15 WS-NCP-MODIFIER char(3) ; 
    15 WS-NCP-STREET-NUMBER char(8) ; 
    15 WS-NCP-STREET-DIR char(2) ; 
    15 WS-NCP-STREET-NAME char(25) ; 
    15 WS-NCP-STREET-TYPE char(4) ; 
    15 WS-NCP-APARTMENT-NMB char(5) ; 
    15 WS-NCP-OTHER char(25) ; 
    15 WS-NCP-CITY char(20) ; 
    15 WS-NCP-STATE char(3) ; 
    15 WS-NCP-ZIP-CODE char(11) ; 
    15 WS-NCP-PHONE char(10) ; 
    15 WS-NCP-RACE char(1) ; 
    15 WS-NCP-SEX char(1) ; 
    15 WS-NCP-HAIR char(2) ; 
    15 WS-NCP-EYES char(2) ; 
    15 WS-NCP-WEIGHT num(3) ; 
    15 WS-NCP-HEIGHT num(3) ; 
    15 WS-NCP-DISABLED char(1) ; 
    15 WS-NCP-BIRTH-CITY char(20) ; 
    15 WS-NCP-BIRTH-ST char(3) ; 
    15 WS-NCP-DOB char(10) ; 
    15 WS-PARENTS-EVER-MARRIED char(1) ; 
    15 WS-DT-OF-MARRIAGE char(10) ; 
    15 WS-CURRENTLY-MARRIED char(1) ; 
    15 WS-DT-OF-DIVORCE char(10) ; 
    15 WS-DCFS-SRVC-OFC-WRKR char(8) ; 
    15 WS-DCFS-SRVC-OFC-PHN char(10) ; 
    15 WS-DCFS-SRVC-OFC-CD char(2) ; 
    15 WS-LGL-CST-BEG-DT char(10) ; 
    15 WS-LGL-CST-END-DT char(10) ; 
    15 WS-ERROR-CODE char(4) ; 
    15 * char(21) ; 
end

// end HA-CNET-TRN-HDR

Record SR-AIN64-RECIN type serialRecord  {
  fileName = "INFILE"
  }
  10 INPUT-DATA char(350) ; 
end

// end SR-AIN64-RECIN

Record SR-AIN64-RECOUT type serialRecord  {
  fileName = "OUTFILE"
  }
  10 OUTPUT-DATA char(350) ; 
end // end AIN64A