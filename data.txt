package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model;

import lombok.Data;
import lombok.Getter;
import lombok.Setter;

import java.math.BigDecimal;
import java.util.Date;

@Data
public class MemberRecord {
	private Integer upi;
	private Integer ici;
	private Date dob;
	private String ethnicCode;
	private String sexCode;
	private String personDisQlRsnCd;
	private String incapDisabilityIndicator;
	private BigDecimal medicalExpenseTotAmt;
}



package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model;

import java.math.BigDecimal;
import java.util.Map;

public interface SnapCharacteristicBaseRecord {

    String getOfficeCode();

    // Q01
    int getActiveCases();

    // Q02
    int getTotalPeopleOnActiveCases();

    // Q03
    int getCasesOnMonthlyReporting();

    // Q04 - A
    int getPaCases();

    // Q04 - B
    int getNacases();

    // Q05
    Map<Integer,Integer> getCasesByHouseoldSize();

    // Q06
    BigDecimal getAverageHosehodlSize();

    // Q07
    Map<String,Integer> getIndividualsbyAge();

    // Q08 - A
    int getDisqualifiedIndividuals();

    // Q08 - B
    Map<String,Integer> getOccurencesByIPBbyType();

    // Q09 - A
    int getOtherDisqualifiedIndividuals();

    // Q09 - B
    Map<String,Integer> getOtherDisqualifiedIndividualsType();

    // Q10 & Q12
    Map<String, Integer> getEthnicityMaleMap();
    Map<String, Integer> getEthnicityFemaleMap();
    Map<String, Integer> getEthnicityTotalMap();

    // Q11 - A
    int getMaleCasesNotDesignatedAsM0rF();

    // Q11 - B
    int getFemaleCasesNotDesignatedAsM0rF();

    // Q13 - A
    int getCasesWithAge60OrDisabled();

    // Q13 - B
    int getCasesWithAgeOnly60OrDisabled();

    // Q14
    int getIndividualWithMedicalExpenses();

    // Q15
    int getCasesWithMedicalExpenses();

    // Q16
    BigDecimal getAverageMedicalExpense();

    // Q17
    Map<String, Integer> getZipCodeData();

    // Q18
    int getCasesWithAuthorizedRepresentative();

    // Q19
    int getCasesWithIncome();

    // Q20 - A
    int getCasesWithEarnedIncome();

    // Q20 - B
    int getCasesWithUnEarnedIncome();

    // Q20 - C
    Map<String, Integer> getOccurencesOfMiscUnin();

    // Q20 - D
    Map<String, Integer> getOccuerencesOfUnearnedIncomeByType();

    // Q21
    BigDecimal getAllCasesAverageGrossIncome();

    // Q22 - A
    BigDecimal getAllPACasesAverageGrossIncome();

    // Q22 - B
    BigDecimal getAllNACasesAverageGrossIncome();

    // Q22 - C
    BigDecimal getAllPAWithIncomeCasesAverageGrossIncome();

    // Q22 - D
    BigDecimal getAllNAWithIncomeCasesAverageGrossIncome();

    // Q23 - A
    BigDecimal getAllElderlyDisabledWithIncomeAverageGrossIncome();

    // Q23 - B
    BigDecimal getAllElderlyDisabledAverageGrossIncome();

    // Q24 - A
    BigDecimal getAverageEarnedIncome();

    // Q24 - B
    BigDecimal getAverageUnearnedIncome();

    // Q24 - C
    BigDecimal getMiscUnearnedIncomeAveragesGaga();

    // Q24 - D
    BigDecimal getMiscUnearnedIncomeAveragesTanf();

    // Q24 - E
    BigDecimal getMiscUnearnedIncomeAveragesEdin();

    // Q24 - F
    Map<String, Integer> getAverageUnearnedIncomeByType();

    // Q25 - A
    BigDecimal getAverageRent();

    // Q25 - B
    int getCasesWithRent();

    // Q26
    int getCasesOnFullSua();

    // Q27
    int getCasesOnPartialSua();

    // Q28
    int getCasesWithDependentCareExpense();

    // Q29
    BigDecimal getAverageDependentCare();

    // Q30
    int getCasesOnActualUntilities();

    // Q31
    BigDecimal getAverageActualUtilityCost();

    // Q32
    BigDecimal getAverageCombinedShelterUtilities();

    // Q33 - A
    int getCasesWithNoShelter();

    // Q33 - B
    int getCasesWithShelter();

    // Q33 - C
    int getCasesWithAnyExpense();

    // Q34 - A
    BigDecimal getAverageOngoinfBenefitAllCases();

    // Q34 - B
    BigDecimal getAverageOngoinfBenefitPACases();

    // Q34 - C
    BigDecimal getAverageOngoinfBenefitNACases();

    // Q35 - A
    BigDecimal getAverageBenefitByHosueholdSize1();

    // Q35 - B
    BigDecimal getAverageBenefitByHosueholdSize2();

    // Q35 - C
    BigDecimal getAverageBenefitByHosueholdSize3();

    // Q35 - D
    BigDecimal getAverageBenefitByHosueholdSize4();

    // Q35 - E
    BigDecimal getAverageBenefitByHosueholdSize5();

    // Q35 - F
    BigDecimal getAverageBenefitByHosueholdSize6();

    // Q35 - G
    BigDecimal getAverageBenefitByHosueholdSize7();

    // Q36
    BigDecimal getAverageAssignedCertPeriod();

    // Q37
    Map<Integer, Integer> getCasesByAssignedCertPeriod();

    // Q38
    BigDecimal getCasesWithBenefitReduction();

    // Q39
    Map<Integer, Integer> getCasesByDayOfProgramEffectiveDate();

    // Q40
    BigDecimal getAverageActualCertPeriod();

    // Q41
    int getReinstationWithin30Days();

    // Q42
    int getReApplicationWithin30Days();

    // Q43
    BigDecimal getAverageAppOrReappForApprovedCases();

    // Q44
    BigDecimal getAverageAppOrReappForDenialCases();

    // Q45
    BigDecimal getAverageAppOrReappForAllCases();

    // Q46 - A
    int getHoseholdHeads18NoSpouse();

    // Q46 - B
    int getHoseholdHeads18WithSpouse();

    // Q47 - A
    int getHoseholdHeads15NoSpouse();

    // Q47 - B
    int getHoseholdHeads15WithSpouse();

    // Q47 - C
    int getNoOfHomeLessCases();
}


package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model;

import java.math.BigDecimal;

import lombok.Getter;
import lombok.Setter;

import static gov.nv.dwss.fw.batch.constants.FWConstants.CHAR_N;
import static gov.nv.dwss.fw.batch.constants.FWConstants.DEFAULT_DECIMAL;
import static gov.nv.dwss.fw.batch.constants.FWConstants.DEFAULT_INTEGER;

@Setter
@Getter
public class SnapCharacteristicControlParam {
	private String houseHoldAge18Flag = CHAR_N;
    private String houseHoldAge15Flag = CHAR_N;
    private String spouseFlag = CHAR_N;
    private String suaFlag = CHAR_N;
    private String psuaFlag = CHAR_N;
    private String gagaIncomeFlag = CHAR_N;
    private String edinIncomeFlag = CHAR_N;
    private BigDecimal rehmut = DEFAULT_DECIMAL;
    private BigDecimal allAmount = DEFAULT_DECIMAL;
    private BigDecimal mthGagaAmount = DEFAULT_DECIMAL;
    private Integer agedCount = DEFAULT_INTEGER;
    private Integer disabledCount = DEFAULT_INTEGER;
    private Integer disabledOrAgedCount = DEFAULT_INTEGER;
    private Integer agddisUpiCount = DEFAULT_INTEGER;
    private Integer iciCount = DEFAULT_INTEGER;
    private Integer ici;
    private String disqFlag;
}



package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model;

import java.util.List;

import gov.nv.dwss.domain.record.sor.CodeTableSorRecord;
import gov.nv.dwss.fw.batch.context.SystemInfoParam;
import lombok.Getter;
import lombok.Setter;

public class SnapCharacteristicInputParam {

	@Getter
	@Setter
	private static String reportBegDateTs;
	@Getter
	@Setter
	private static String reportEndDateTs;
	@Getter
	@Setter
    private static List<CodeTableSorRecord> ipvDisCodeTable;
	@Getter
	@Setter
    private static List<CodeTableSorRecord> ethnicityCodeTable;
	@Getter
	@Setter
    private static List<CodeTableSorRecord> uninCodeTable;
}



package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model;

import lombok.Data;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;


@Data
public class SnapCharacteristicRecord implements SnapCharacteristicBaseRecord {
	
	//Q01
	private int activeCases;
	//Q02
	private int totalPeopleOnActiveCases;
	//Q03
	private int casesOnMonthlyReporting;
	//Q04 - A
	private int paCases;
	//Q04 - B
	private int nacases;
	//Q05
	private Map<Integer,Integer>  casesByHouseoldSize = new HashMap<>();
	//Q06
	private BigDecimal averageHosehodlSize = BigDecimal.ZERO;
	//Q07
	private Map<String,Integer>  individualsbyAge = new HashMap<>();
	//Q08 - A
	private int disqualifiedIndividuals;
	//Q08 - B
	private Map<String,Integer>  occurencesByIPBbyType= new HashMap<>();
	//Q09 - A
	private int otherDisqualifiedIndividuals;
	//Q09 - B
	private Map<String,Integer>  otherDisqualifiedIndividualsType = new HashMap<>();
	//Q10 & 12
	private final Map<String, Integer> ethnicityMaleMap = new LinkedHashMap<>();
	//Q10 & 12
    private final Map<String, Integer> ethnicityFemaleMap = new LinkedHashMap<>();
    //Q10 & 12
    private final Map<String, Integer> ethnicityTotalMap = new LinkedHashMap<>();
    //Q11 - A
	private int maleCasesNotDesignatedAsM0rF;
	//Q11 - B
	private int femaleCasesNotDesignatedAsM0rF;
	//Q13 - A
	private int casesWithAge60OrDisabled;
	//Q13 - B
	private int casesWithAgeOnly60OrDisabled;
	//Q14
	private int individualWithMedicalExpenses;
	//Q15
	private int casesWithMedicalExpenses;
	//Q16
	private BigDecimal averageMedicalExpense = BigDecimal.ZERO;
	//Q17
	private Map<String, Integer> zipCodeData = new HashMap<>();
	//Q18
	private int casesWithAuthorizedRepresentative;
	//Q19
	private int casesWithIncome;
	//Q20 - A
	private int casesWithEarnedIncome;
	//Q20 - B
	private int casesWithUnEarnedIncome;
	//Q20 - C
	private Map<String, Integer> occurencesOfMiscUnin = new HashMap<>();
	//Q20 - D
	private Map<String, Integer> occuerencesOfUnearnedIncomeByType = new HashMap<>();
	//Q21
	private BigDecimal allCasesAverageGrossIncome = BigDecimal.ZERO;
	//Q22 - A
	private BigDecimal allPACasesAverageGrossIncome= BigDecimal.ZERO; 
	//Q22 - B
	private BigDecimal allNACasesAverageGrossIncome= BigDecimal.ZERO;
	//Q22 - C
	private BigDecimal allPAWithIncomeCasesAverageGrossIncome= BigDecimal.ZERO;
	//Q22 - D
	private BigDecimal allNAWithIncomeCasesAverageGrossIncome= BigDecimal.ZERO;
	//Q23 - A
	private BigDecimal allElderlyDisabledWithIncomeAverageGrossIncome= BigDecimal.ZERO;
	//Q23 - B
	private BigDecimal allElderlyDisabledAverageGrossIncome= BigDecimal.ZERO;
	//Q24 - A
	private BigDecimal averageEarnedIncome= BigDecimal.ZERO;
	//Q24 - B
	private BigDecimal averageUnearnedIncome= BigDecimal.ZERO;
	//Q24 - C
	private BigDecimal miscUnearnedIncomeAveragesGaga= BigDecimal.ZERO;
	//Q24 - D
	private BigDecimal miscUnearnedIncomeAveragesTanf= BigDecimal.ZERO;
	//Q24 - E
	private BigDecimal miscUnearnedIncomeAveragesEdin= BigDecimal.ZERO;
	//Q24 - F
	private Map<String, Integer> averageUnearnedIncomeByType = new HashMap<>();
	//Q25 - A
	private BigDecimal averageRent= BigDecimal.ZERO;
	//Q25 - B
	private int casesWithRent;
	//Q26
	private int casesOnFullSua;
	//Q27
	private int casesOnPartialSua;
	//Q28
	private int casesWithDependentCareExpense;
	//Q29
	private BigDecimal averageDependentCare= BigDecimal.ZERO;
	//Q30
	private int casesOnActualUntilities;
	//Q31
	private BigDecimal averageActualUtilityCost= BigDecimal.ZERO;
	//Q32
	private BigDecimal averageCombinedShelterUtilities= BigDecimal.ZERO;
	//Q33 - A
	private int casesWithNoShelter;
	//Q33 - B
	private int casesWithShelter;
	//Q33 - C
	private int casesWithAnyExpense;
	//Q34 - A
	private BigDecimal averageOngoinfBenefitAllCases= BigDecimal.ZERO;
	//Q34 - B
	private BigDecimal averageOngoinfBenefitPACases= BigDecimal.ZERO;
	//Q34 - C
	private BigDecimal averageOngoinfBenefitNACases= BigDecimal.ZERO;
	//Q35 - A
	private BigDecimal averageBenefitByHosueholdSize1= BigDecimal.ZERO;
	//Q35 - B
	private BigDecimal averageBenefitByHosueholdSize2= BigDecimal.ZERO;
	//Q35 - C
	private BigDecimal averageBenefitByHosueholdSize3= BigDecimal.ZERO;
	//Q35 - D
	private BigDecimal averageBenefitByHosueholdSize4= BigDecimal.ZERO;
	//Q35 - E
	private BigDecimal averageBenefitByHosueholdSize5= BigDecimal.ZERO;
	//Q35 - F
	private BigDecimal averageBenefitByHosueholdSize6= BigDecimal.ZERO;
	//Q35 - G
	private BigDecimal averageBenefitByHosueholdSize7= BigDecimal.ZERO;
	//Q36
	private BigDecimal averageAssignedCertPeriod= BigDecimal.ZERO;
	//Q37
	private Map<Integer, Integer> casesByAssignedCertPeriod = new HashMap<>();
	//Q38
	private BigDecimal casesWithBenefitReduction= BigDecimal.ZERO;
	//Q39
	private Map<Integer, Integer> casesByDayOfProgramEffectiveDate = new HashMap<>();
	//Q40
	private BigDecimal averageActualCertPeriod = BigDecimal.ZERO; /* STAT CURRENTLY NOT IN USE*/
	//Q41
	private int reinstationWithin30Days;  /* STAT CURRENTLY NOT IN USE*/
	//Q42
	private int reApplicationWithin30Days; /* STAT CURRENTLY NOT IN USE*/
	//Q43
	private BigDecimal averageAppOrReappForApprovedCases= BigDecimal.ZERO;
	//Q44
	private BigDecimal averageAppOrReappForDenialCases= BigDecimal.ZERO;
	//Q45
	private BigDecimal averageAppOrReappForAllCases= BigDecimal.ZERO;
	//Q46 - A
	private int hoseholdHeads18NoSpouse;
	//Q46 - B
	private int hoseholdHeads18WithSpouse;
	//Q47 - A
	private int hoseholdHeads15NoSpouse;
	//Q47 - B
	private int hoseholdHeads15WithSpouse;
	//Q47 - C
	private int noOfHomeLessCases;
	
	
	private BigDecimal uninGagaTotal= BigDecimal.ZERO;
	private BigDecimal uninEdinTotal= BigDecimal.ZERO;
	private BigDecimal householdTotal1= BigDecimal.ZERO;
	private BigDecimal householdTotal2= BigDecimal.ZERO;
	private BigDecimal householdTotal3= BigDecimal.ZERO;
	private BigDecimal householdTotal4= BigDecimal.ZERO;
	private BigDecimal householdTotal5= BigDecimal.ZERO;
	private BigDecimal householdTotal6= BigDecimal.ZERO;
	private BigDecimal householdTotal7= BigDecimal.ZERO;
	private int householdTotal;
	private String officeCode;
	private String officeName;
	private BigDecimal medexAmount = BigDecimal.ZERO;
	private BigDecimal totalGrossIncome= BigDecimal.ZERO;
	private BigDecimal allPACasesAverageGrossIncomeTotal= BigDecimal.ZERO;
	private BigDecimal allNACasesAverageGrossIncomeTotal= BigDecimal.ZERO;
	private BigDecimal totalEarnedIncome= BigDecimal.ZERO;
	private BigDecimal totalUnEarnedIncome= BigDecimal.ZERO;
	private BigDecimal totalUninTanfIncome= BigDecimal.ZERO;
	private BigDecimal totalRmAmount= BigDecimal.ZERO;
	private BigDecimal totalDcexAmount= BigDecimal.ZERO;
	private BigDecimal totalUtilAmount= BigDecimal.ZERO;
	private BigDecimal totalShelterAmount= BigDecimal.ZERO;
	private BigDecimal totalRentHomeUtilAmount= BigDecimal.ZERO;
	private BigDecimal allExpensesAmount= BigDecimal.ZERO;
	private BigDecimal totalDisabledIncomeAmount= BigDecimal.ZERO;
	private int totalDisabledIncomeCount;
	private BigDecimal totalDsaIncomeAmount= BigDecimal.ZERO;
	private int disAllCount;
	private int diffADays;
	private int diffDDays;
	private int diffDays;
	private int iciACount;
	private int iciDCount;
	private int iciADCount;
	private int totalEligNumbers;
	private int allPACasesCount;
	private int allNACasesCount;
	private BigDecimal totalPAIncomeAmount= BigDecimal.ZERO;
	private int benefitCount;
	private BigDecimal totalPaBenefitAmount = BigDecimal.ZERO;
	private BigDecimal totalBenefitAmount = BigDecimal.ZERO;
	private BigDecimal totalNaBenefitAmount = BigDecimal.ZERO;
	private Map<String, BigDecimal> uninAmountTotal = new HashMap<>();
	private BigDecimal totalNAIncomeAmount = BigDecimal.ZERO;

}



package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model;

import lombok.Getter;
import lombok.Setter;

import java.util.ArrayList;
import java.util.List;

import static java.util.Collections.synchronizedList;


public class SnapCharacteristicReport {

    @Getter
    @Setter
    private static List<SnapCharacteristicRecord> snapCharacteristicRecords = synchronizedList(new ArrayList<>());
}



package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model;

import lombok.Data;

import java.util.Date;

@Data
public class SnapCharacteristicReportData {
    private Date reportRunDate;
    private int rptSeqNo;
    private String ofcCd;
    private String quesCd;
    private String rptCategory;
    private int categorySeqNo;
    private int totalCount;
}


package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model;

import lombok.Data;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

@Data
public class SnapCharacteristicStateWideRecord implements SnapCharacteristicBaseRecord {

	//Q01
	private int activeCases;
	//Q02
	private int totalPeopleOnActiveCases;
	//Q03
	private int casesOnMonthlyReporting;
	//Q04 - A
	private int paCases;
	//Q04 - B
	private int nacases;
	//Q05
	private Map<Integer,Integer>  casesByHouseoldSize = new HashMap<>();
	//Q06
	private BigDecimal averageHosehodlSize = BigDecimal.ZERO;
	//Q07
	private Map<String,Integer>  individualsbyAge = new HashMap<>();
	//Q08 - A
	private int disqualifiedIndividuals;
	//Q08 - B
	private Map<String,Integer>  occurencesByIPBbyType= new HashMap<>();
	//Q09 - A
	private int otherDisqualifiedIndividuals;
	//Q09 - B
	private Map<String,Integer>  otherDisqualifiedIndividualsType = new HashMap<>();
	//Q10 & 12
	private final Map<String, Integer> ethnicityMaleMap = new LinkedHashMap<>();
	//Q10 & 12
	private final Map<String, Integer> ethnicityFemaleMap = new LinkedHashMap<>();
	//Q10 & 12
	private final Map<String, Integer> ethnicityTotalMap = new LinkedHashMap<>();
	//Q11 - A
	private int maleCasesNotDesignatedAsM0rF;
	//Q11 - B
	private int femaleCasesNotDesignatedAsM0rF;
	//Q13 - A
	private int casesWithAge60OrDisabled;
	//Q13 - B
	private int casesWithAgeOnly60OrDisabled;
	//Q14
	private int individualWithMedicalExpenses;
	//Q15
	private int casesWithMedicalExpenses;
	//Q16
	private BigDecimal averageMedicalExpense = BigDecimal.ZERO;
	//Q17
	private Map<String, Integer> zipCodeData = new HashMap<>();
	//Q18
	private int casesWithAuthorizedRepresentative;
	//Q19
	private int casesWithIncome;
	//Q20 - A
	private int casesWithEarnedIncome;
	//Q20 - B
	private int casesWithUnEarnedIncome;
	//Q20 - C
	private Map<String, Integer> occurencesOfMiscUnin = new HashMap<>();
	//Q20 - D
	private Map<String, Integer> occuerencesOfUnearnedIncomeByType = new HashMap<>();
	//Q21
	private BigDecimal allCasesAverageGrossIncome = BigDecimal.ZERO;
	//Q22 - A
	private BigDecimal allPACasesAverageGrossIncome= BigDecimal.ZERO;
	//Q22 - B
	private BigDecimal allNACasesAverageGrossIncome= BigDecimal.ZERO;
	//Q22 - C
	private BigDecimal allPAWithIncomeCasesAverageGrossIncome= BigDecimal.ZERO;
	//Q22 - D
	private BigDecimal allNAWithIncomeCasesAverageGrossIncome= BigDecimal.ZERO;
	//Q23 - A
	private BigDecimal allElderlyDisabledWithIncomeAverageGrossIncome= BigDecimal.ZERO;
	//Q23 - B
	private BigDecimal allElderlyDisabledAverageGrossIncome= BigDecimal.ZERO;
	//Q24 - A
	private BigDecimal averageEarnedIncome= BigDecimal.ZERO;
	//Q24 - B
	private BigDecimal averageUnearnedIncome= BigDecimal.ZERO;
	//Q24 - C
	private BigDecimal miscUnearnedIncomeAveragesGaga= BigDecimal.ZERO;
	//Q24 - D
	private BigDecimal miscUnearnedIncomeAveragesTanf= BigDecimal.ZERO;
	//Q24 - E
	private BigDecimal miscUnearnedIncomeAveragesEdin= BigDecimal.ZERO;
	//Q24 - F
	private Map<String, Integer> averageUnearnedIncomeByType= new HashMap<>();
	//Q25 - A
	private BigDecimal averageRent= BigDecimal.ZERO;
	//Q25 - B
	private int casesWithRent;
	//Q26
	private int casesOnFullSua;
	//Q27
	private int casesOnPartialSua;
	//Q28
	private int casesWithDependentCareExpense;
	//Q29
	private BigDecimal averageDependentCare= BigDecimal.ZERO;
	//Q30
	private int casesOnActualUntilities;
	//Q31
	private BigDecimal averageActualUtilityCost= BigDecimal.ZERO;
	//Q32
	private BigDecimal averageCombinedShelterUtilities= BigDecimal.ZERO;
	//Q33 - A
	private int casesWithNoShelter;
	//Q33 - B
	private int casesWithShelter;
	//Q33 - C
	private int casesWithAnyExpense;
	//Q34 - A
	private BigDecimal averageOngoinfBenefitAllCases= BigDecimal.ZERO;
	//Q34 - B
	private BigDecimal averageOngoinfBenefitPACases= BigDecimal.ZERO;
	//Q34 - C
	private BigDecimal averageOngoinfBenefitNACases= BigDecimal.ZERO;
	//Q35 - A
	private BigDecimal averageBenefitByHosueholdSize1= BigDecimal.ZERO;
	//Q35 - B
	private BigDecimal averageBenefitByHosueholdSize2= BigDecimal.ZERO;
	//Q35 - C
	private BigDecimal averageBenefitByHosueholdSize3= BigDecimal.ZERO;
	//Q35 - D
	private BigDecimal averageBenefitByHosueholdSize4= BigDecimal.ZERO;
	//Q35 - E
	private BigDecimal averageBenefitByHosueholdSize5= BigDecimal.ZERO;
	//Q35 - F
	private BigDecimal averageBenefitByHosueholdSize6= BigDecimal.ZERO;
	//Q35 - G
	private BigDecimal averageBenefitByHosueholdSize7= BigDecimal.ZERO;
	//Q36
	private BigDecimal averageAssignedCertPeriod= BigDecimal.ZERO;
	//Q37
	private Map<Integer, Integer> casesByAssignedCertPeriod = new HashMap<>();
	//Q38
	private BigDecimal casesWithBenefitReduction= BigDecimal.ZERO;
	//Q39
	private Map<Integer, Integer> casesByDayOfProgramEffectiveDate = new HashMap<>();
	//Q40
	private BigDecimal averageActualCertPeriod= BigDecimal.ZERO;
	//Q41
	private int reinstationWithin30Days;
	//Q42
	private int reApplicationWithin30Days;
	//Q43
	private BigDecimal averageAppOrReappForApprovedCases= BigDecimal.ZERO;
	//Q44
	private BigDecimal averageAppOrReappForDenialCases= BigDecimal.ZERO;
	//Q45
	private BigDecimal averageAppOrReappForAllCases= BigDecimal.ZERO;
	//Q46 - A
	private int hoseholdHeads18NoSpouse;
	//Q46 - B
	private int hoseholdHeads18WithSpouse;
	//Q47 - A
	private int hoseholdHeads15NoSpouse;
	//Q47 - B
	private int hoseholdHeads15WithSpouse;
	//Q47 - C
	private int noOfHomeLessCases;

	@Override
	public String getOfficeCode() {
		return "ST";
	}
}

