package IVA_Batch;
import egl.core.*;
import CommonMigratedParts.*;
import DataTables.*;
//*** PROGRAM=AIN99A ****
// COMPONENT NAME: AIN99a
// ===============
// THIS APPLICATION PROCESS THE SDX RECONCILIATION FILE AND
// PRODUCES THE SSI REPORT
// ***********************
Program AIN99A type basicProgram //VAGen Info - main batch program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes
  }

  // Data Declarations
  AIN99W AIN99W; // record
  AIN99W-DET-REC AIN99W-DET-REC; // record
  AIN99W-HEAD-REC AIN99W-HEAD-REC; // record
  AIN99W-SUBH-REC AIN99W-SUBH-REC; // record
  AIN99W-TOT-REC AIN99W-TOT-REC; // record
  CEP01W CEP01W; // record
  FORMATW FORMATW; // record
  GDW GDW; // record
  SR-Q-PRINT-REC SR-Q-PRINT-REC; // record
  SR-Q-SDX-REC SR-Q-SDX-REC; // record
  VCOMMON VCOMMON; // record
  VDBCOMMON VDBCOMMON; // record
  VDBCONTROL VDBCONTROL; // record
  VMESSAGE VMESSAGE; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use VDB00T1 {deleteAfterUse = yes}; // table

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    AIN99P9-MAIN: AIN99P9-MAIN();
  end // end main
end // end AIN99A


Function AIN99P9-FMT-HEAD()
  set AIN99W-HEAD-REC empty;
  AIN99W-HEAD-REC.WS-HEAD1 = AIN99W.WS-DATE1;
  AIN99W-HEAD-REC.WS-HEAD2 = "SDX-ELIG-BY-SUP-AMT";
  AIN99W-HEAD-REC.WS-HEAD3 = "PAGE 1";
  SR-Q-PRINT-REC.SR-Q-OUT-REC = AIN99W-HEAD-REC.WS-HEAD-REC;
  AIN99P9-WRITE-REC();
  SR-Q-PRINT-REC.SR-Q-OUT-REC = " ";
  AIN99P9-WRITE-REC();
  set AIN99W-SUBH-REC empty;
  AIN99W-SUBH-REC.WS-CATIND = "CAT*IND";
  AIN99W-SUBH-REC.WS-FEDLVG = "FED*LVG";
  AIN99W-SUBH-REC.WS-SUPAMT = "SUP*AMT";
  AIN99W-SUBH-REC.WS-TALLY = "TALLY";
  SR-Q-PRINT-REC.SR-Q-OUT-REC = AIN99W-SUBH-REC.WS-SUBH-REC;
  AIN99P9-WRITE-REC();
  SR-Q-PRINT-REC.SR-Q-OUT-REC = " ";
  AIN99P9-WRITE-REC();
end // end AIN99P9-FMT-HEAD


Function AIN99P9-FMT-LINE()
  set AIN99W-DET-REC empty;
  set FORMATW empty;
  AIN99W-DET-REC.WS-DET1 = AIN99W.TRE-MULTI-CATEGORY-IND;
  AIN99W-DET-REC.WS-DET2 = AIN99W.WS-LVG-ARG-OLD;
  FORMATW.INPUT-NUMBER = AIN99W.WS-AMOUNT;
  FORMATW.DEC-COUNT = 2;
  FORMATW.LENGTH = 10;
  FORMATW.FORMAT-FLAG = "Y";
  FORMATW.DOLLAR-FLAG = "N";
  REPP9-FORMAT-PROC();
  AIN99W-DET-REC.WS-DET3 = FORMATW.OUTPUT-CHAR;
  FORMATW.INPUT-NUMBER = AIN99W.WS-NUMBER;
  FORMATW.DEC-COUNT = 0;
  FORMATW.LENGTH = 7;
  FORMATW.FORMAT-FLAG = "Y";
  FORMATW.DOLLAR-FLAG = "N";
  REPP9-FORMAT-PROC();
  AIN99W-DET-REC.WS-DET4 = FORMATW.OUTPUT-CHAR;
  SR-Q-PRINT-REC.SR-Q-OUT-REC = AIN99W-DET-REC.WS-DET-REC;
  AIN99P9-WRITE-REC();
end // end AIN99P9-FMT-LINE


Function AIN99P9-FORMAT-TOT()
  set AIN99W-DET-REC empty;
  set FORMATW empty;
  AIN99W-DET-REC.WS-DET1 = AIN99W.TRE-MULTI-CATEGORY-IND;
  AIN99W-DET-REC.WS-DET2 = " ";
  FORMATW.INPUT-NUMBER = AIN99W.WS-TOTAL-AMOUNT;
  FORMATW.DEC-COUNT = 2;
  FORMATW.LENGTH = 10;
  FORMATW.FORMAT-FLAG = "Y";
  FORMATW.DOLLAR-FLAG = "N";
  REPP9-FORMAT-PROC();
  AIN99W-DET-REC.WS-DET3 = FORMATW.OUTPUT-CHAR;
  set FORMATW empty;
  FORMATW.INPUT-NUMBER = AIN99W.WS-TOTAL-NUMBER;
  FORMATW.DEC-COUNT = 0;
  FORMATW.LENGTH = 7;
  FORMATW.FORMAT-FLAG = "Y";
  FORMATW.DOLLAR-FLAG = "N";
  REPP9-FORMAT-PROC();
  AIN99W-DET-REC.WS-DET4 = FORMATW.OUTPUT-CHAR;
  SR-Q-PRINT-REC.SR-Q-OUT-REC = AIN99W-DET-REC.WS-DET-REC;
  AIN99P9-WRITE-REC();
  SR-Q-PRINT-REC.SR-Q-OUT-REC = " ";
  AIN99P9-WRITE-REC();
end // end AIN99P9-FORMAT-TOT


// MAIN PROCESS
Function AIN99P9-MAIN()
  /* initialization process;*/

  set AIN99W empty;
  call "DATEAPP" (GDW, VDBCONTROL, VMESSAGE) {isNoRefresh = yes};
  AIN99W.WS-DATE = GDW.DTL;
  AIN99W.WS-YY1 = AIN99W.WS-YY;
  AIN99W.WS-MM1 = AIN99W.WS-MM;
  AIN99W.WS-DD1 = AIN99W.WS-DD;
  AIN99W.WS-SEP1 = "/";
  AIN99W.WS-SEP2 = "/";
  AIN99P9-FMT-HEAD();
  AIN99P9-READ-FILE();
  if (sysVar.errorCode == "00000000")

    AIN99W.TRE-MULTI-CATEGORY-IND = SR-Q-SDX-REC.TRE-MULTI-CATEGORY-IND;
    AIN99W.WS-LVG-ARG-NEW-1 = SR-Q-SDX-REC.TRE-FED-LIVING-ARRANGE-CD[1];
    AIN99W.WS-LVG-ARG-NEW-2 = SR-Q-SDX-REC.TRE-OPT-STATE-SUP-LIV-ARR-CD[1];
    AIN99W.WS-LVG-ARG-OLD = AIN99W.WS-LVG-ARG-NEW;
    while (sysVar.errorCode == "00000000")
      AIN99P9-PROC-PARA();
      set SR-Q-SDX-REC empty;
      AIN99P9-READ-FILE();
      AIN99W.WS-LVG-ARG-NEW-1 = SR-Q-SDX-REC.TRE-FED-LIVING-ARRANGE-CD[1];
      AIN99W.WS-LVG-ARG-NEW-2 = SR-Q-SDX-REC.TRE-OPT-STATE-SUP-LIV-ARR-CD[1];
    end
  end
  AIN99P9-FMT-LINE();
  AIN99P9-FORMAT-TOT();
  set AIN99W-TOT-REC empty;
  set FORMATW empty;
  FORMATW.INPUT-NUMBER = AIN99W.WS-GRAND-AMOUNT;
  FORMATW.DEC-COUNT = 2;
  FORMATW.LENGTH = 10;
  FORMATW.FORMAT-FLAG = "Y";
  FORMATW.DOLLAR-FLAG = "N";
  REPP9-FORMAT-PROC();
  AIN99W-TOT-REC.WS-TOT1 = FORMATW.OUTPUT-CHAR;

  set FORMATW empty;
  FORMATW.INPUT-NUMBER = AIN99W.WS-GRAND-NUMBER;
  FORMATW.DEC-COUNT = 0;
  FORMATW.LENGTH = 7;
  FORMATW.FORMAT-FLAG = "Y";
  FORMATW.DOLLAR-FLAG = "N";
  REPP9-FORMAT-PROC();
  AIN99W-TOT-REC.WS-TOT2 = FORMATW.OUTPUT-CHAR;
  SR-Q-PRINT-REC.SR-Q-OUT-REC = AIN99W-TOT-REC.WS-TOT-REC;
  AIN99P9-WRITE-REC();
end // end AIN99P9-MAIN


Function AIN99P9-PROC-PARA()
  if ((SR-Q-SDX-REC.TRE-MULTI-CATEGORY-IND != 
  AIN99W.TRE-MULTI-CATEGORY-IND
   || AIN99W.WS-LVG-ARG-NEW != AIN99W.WS-LVG-ARG-OLD))

    if (SR-Q-SDX-REC.TRE-MULTI-CATEGORY-IND != 
    AIN99W.TRE-MULTI-CATEGORY-IND)
      AIN99P9-FMT-LINE();
      AIN99P9-FORMAT-TOT();
      AIN99W.WS-NUMBER = 1;
      AIN99W.WS-TOTAL-NUMBER = 1;
      AIN99W.WS-GRAND-NUMBER = AIN99W.WS-GRAND-NUMBER + 1;
      AIN99W.WS-AMOUNT = SR-Q-SDX-REC.TRE-STATE-SUPPLEMENT-AMT;
      AIN99W.WS-TOTAL-AMOUNT = SR-Q-SDX-REC.TRE-STATE-SUPPLEMENT-AMT;
      AIN99W.WS-GRAND-AMOUNT = AIN99W.WS-GRAND-AMOUNT +       SR-Q-SDX-REC.TRE-STATE-SUPPLEMENT-AMT;
    else
      if (AIN99W.WS-LVG-ARG-NEW != AIN99W.WS-LVG-ARG-OLD)
        AIN99P9-FMT-LINE();
        AIN99W.WS-NUMBER = 1;
        AIN99W.WS-TOTAL-NUMBER = AIN99W.WS-TOTAL-NUMBER + 1;
        AIN99W.WS-GRAND-NUMBER = AIN99W.WS-GRAND-NUMBER + 1;
        AIN99W.WS-AMOUNT = SR-Q-SDX-REC.TRE-STATE-SUPPLEMENT-AMT;
        AIN99W.WS-TOTAL-AMOUNT = AIN99W.WS-TOTAL-AMOUNT +         SR-Q-SDX-REC.TRE-STATE-SUPPLEMENT-AMT;
        AIN99W.WS-GRAND-AMOUNT = AIN99W.WS-GRAND-AMOUNT +         SR-Q-SDX-REC.TRE-STATE-SUPPLEMENT-AMT;
      end
    end

    AIN99W.TRE-MULTI-CATEGORY-IND = SR-Q-SDX-REC.TRE-MULTI-CATEGORY-IND;
    AIN99W.WS-LVG-ARG-OLD = AIN99W.WS-LVG-ARG-NEW;

  else

    AIN99W.WS-LVG-ARG-NEW-1 = SR-Q-SDX-REC.TRE-FED-LIVING-ARRANGE-CD[1];
    AIN99W.WS-LVG-ARG-NEW-2 = SR-Q-SDX-REC.TRE-OPT-STATE-SUP-LIV-ARR-CD[1];
    AIN99W.WS-NUMBER = AIN99W.WS-NUMBER + 1;
    AIN99W.WS-TOTAL-NUMBER = AIN99W.WS-TOTAL-NUMBER + 1;
    AIN99W.WS-GRAND-NUMBER = AIN99W.WS-GRAND-NUMBER + 1;
    AIN99W.WS-AMOUNT = AIN99W.WS-AMOUNT +     SR-Q-SDX-REC.TRE-STATE-SUPPLEMENT-AMT;
    AIN99W.WS-TOTAL-AMOUNT = AIN99W.WS-TOTAL-AMOUNT +     SR-Q-SDX-REC.TRE-STATE-SUPPLEMENT-AMT;
    AIN99W.WS-GRAND-AMOUNT = AIN99W.WS-GRAND-AMOUNT +     SR-Q-SDX-REC.TRE-STATE-SUPPLEMENT-AMT;
  end
  /*  */
end // end AIN99P9-PROC-PARA


// READ INPUT UNITY FILE
Function AIN99P9-READ-FILE()
  VGVar.handleHardIOErrors = 1;
  try
    get next SR-Q-SDX-REC ;
  end
  if (SR-Q-SDX-REC is ioError && SR-Q-SDX-REC not endOfFile)
    VDBCONTROL.UPROC-NM = "AIN99P9-READ-SDX";
    VDBCONTROL.UPROC-OBJ = "SR-Q-SDX-REC";
    VDBCONTROL.UPROC-OPT = "SCAN";
    VMESSAGE.UMSGINS[2] = "AIN99A";
    /*  */
    /* the following conditions are added to move the corresponding*/
    /* error message*/
  /*  */
    if (SR-Q-SDX-REC is fileNotAvailable)
      VDBCONTROL.UEZESQRRM = "FILE IS NOT AVAILABLE";
    else
      if (SR-Q-SDX-REC is fileNotFound)
        VDBCONTROL.UEZESQRRM = "FILE NOT FOUND";
      else
        if (SR-Q-SDX-REC is invalidFormat)
          VDBCONTROL.UEZESQRRM = "FILE FORMAT MISMATCH";
        end /* ** end check for format mismatch*/
      end /* ** end check for file not found*/
    end /* ** end check for file not available*/
    WCM00P2-TO-CEP01A();
  end /* ** end check for record found*/
end // end AIN99P9-READ-FILE


Function AIN99P9-WRITE-REC()
  try
    add SR-Q-PRINT-REC ;
  end
  if (SR-Q-PRINT-REC is ioError)
    VDBCONTROL.UPROC-NM = "AIN99P9-WRITE-REC";
    VDBCONTROL.UPROC-OBJ = "SR-Q-PRINT-REC";
    VDBCONTROL.UPROC-OPT = "ADD";
    VMESSAGE.UMSGINS[2] = "AIN99A";
     /*  */
     /* the following conditions are added to move the corresponding*/
     /* error message*/
   /*  */
    if (SR-Q-PRINT-REC is fileNotAvailable)
      VDBCONTROL.UEZESQRRM = "FILE IS NOT AVAILABLE";
    else
      if (SR-Q-PRINT-REC is fileNotFound)
        VDBCONTROL.UEZESQRRM = "FILE NOT FOUND";
      else
        if (SR-Q-PRINT-REC is invalidFormat)
          VDBCONTROL.UEZESQRRM = "FILE FORMAT MISMATCH";
        end /* ** end check for format mismatch*/
      end /* ** end check for file not found*/
    end /* ** end check for file not available*/
    WCM00P2-TO-CEP01A();
  end
  /* CBSI end;*/
end // end AIN99P9-WRITE-REC


Record AIN99W type basicRecord
  10 WS-NUMBER decimal(5) ; 
  10 WS-TOTAL-NUMBER decimal(5) ; 
  10 WS-GRAND-NUMBER decimal(5) ; 
  10 WS-AMOUNT decimal(9,2) ; 
  10 WS-TOTAL-AMOUNT decimal(9,2) ; 
  10 WS-GRAND-AMOUNT decimal(9,2) ; 
  10 WS-LVG-ARG-OLD char(2) ; 
    15 WS-LVG-ARG-OLD-1 char(1) ; 
    15 WS-LVG-ARG-OLD-2 char(1) ; 
  10 WS-LVG-ARG-NEW char(2) ; 
    15 WS-LVG-ARG-NEW-1 char(1) ; 
    15 WS-LVG-ARG-NEW-2 char(1) ; 
  10 TRE-MULTI-CATEGORY-IND char(1) ; 
  10 WS-TOT1 num(10) ; 
  10 WS-TOT2 num(5) ; 
  10 WS-DET3 num(10) ; 
  10 WS-DET4 num(5) ; 
  10 WS-DATE char(8) ; 
    15 WS-CCYY char(4) ; 
      20 WS-CC char(2) ; 
      20 WS-YY char(2) ; 
    15 WS-MM char(2) ; 
    15 WS-DD char(2) ; 
  10 WS-DATE1 char(8) ; 
    15 WS-MM1 char(2) ; 
    15 WS-SEP1 char(1) ; 
    15 WS-DD1 char(2) ; 
    15 WS-SEP2 char(1) ; 
    15 WS-YY1 char(2) ; 
end // end AIN99W


Record AIN99W-DET-REC type basicRecord
  5 WS-DET-REC char(80) ; 
    10 WS-FILLER1 char(18) ; 
    10 WS-DET1 char(1) ; 
    10 WS-FILLER2 char(9) ; 
    10 WS-DET2 char(2) ; 
    10 WS-FILLER3 char(6) ; 
    10 WS-DET3 char(10) ; 
    10 WS-FILLER4 char(8) ; 
    10 WS-DET4 char(7) ; 
    10 WS-FILLER5 char(19) ; 
end // end AIN99W-DET-REC


Record AIN99W-HEAD-REC type basicRecord
  5 WS-HEAD-REC char(80) ; 
    10 WS-FILLER1 char(2) ; 
    10 WS-HEAD1 char(8) ; 
    10 WS-FILLER2 char(20) ; 
    10 WS-HEAD2 char(19) ; 
    10 WS-FILLER3 char(20) ; 
    10 WS-HEAD3 char(6) ; 
    10 WS-FILLER4 char(5) ; 
end // end AIN99W-HEAD-REC


Record AIN99W-SUBH-REC type basicRecord
  5 WS-SUBH-REC char(80) ; 
    10 WS-FILLER1 char(15) ; 
    10 WS-CATIND char(7) ; 
    10 WS-FILLER2 char(4) ; 
    10 WS-FEDLVG char(7) ; 
    10 WS-FILLER3 char(5) ; 
    10 WS-SUPAMT char(7) ; 
    10 WS-FILLER4 char(10) ; 
    10 WS-TALLY char(5) ; 
    10 WS-FILLER5 char(20) ; 
end // end AIN99W-SUBH-REC


Record AIN99W-TOT-REC type basicRecord
  5 WS-TOT-REC char(80) ; 
    10 WS-FILLER1 char(36) ; 
    10 WS-TOT1 char(10) ; 
    10 WS-FILLER2 char(8) ; 
    10 WS-TOT2 char(7) ; 
    10 WS-FILLER3 char(19) ; 
end // end AIN99W-TOT-REC


