package gov.nv.dwss.crystalreports.statistics.programhistory.partitioner;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.batch.core.partition.support.Partitioner;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import gov.nv.dwss.crystalreports.statistics.programhistory.dao.ProgramHistoryExtractDao;
import gov.nv.dwss.fw.batch.constants.FWConstants;
import gov.nv.dwss.fw.batch.context.SystemInfoParam;
import gov.nv.dwss.fw.batch.util.ObjectUtils;

@Component
public class ProgramHistoryPartitioner implements Partitioner {
	
	private static final Logger LOG = LogManager.getLogger(ProgramHistoryPartitioner.class);
	
	@Autowired
	ProgramHistoryExtractDao monthlyProgramCaseHistoryExtractDao;
	
	@Value("${ofc-list}")
	String ofcList;
	
	@Override
	public Map<String, ExecutionContext> partition(int gridSize) {

		Map<String, ExecutionContext> result = new HashMap<>();
		int lines = 0;

		List<String> offices;
		LOG.info("Before - ofcList: {}", ofcList);
		if (!ObjectUtils.isNullOrEmptyOrBlank(ofcList)) {
			String ofcCds = Arrays.stream(ofcList.split(",")).map(e -> "'" + e + "'").collect(Collectors.joining(","));
			offices = monthlyProgramCaseHistoryExtractDao.getOfficeDetails(ofcCds);
		} else {
			offices = this.monthlyProgramCaseHistoryExtractDao.getOfficeDetails();
		}
		String ofcCds = offices.stream().map(e -> "'" + e + "'").collect(Collectors.joining(","));

		Integer programCaseHistoryDetails =
				monthlyProgramCaseHistoryExtractDao.getProgramCaseHistoryDetailsForAllOfcCdCounts(ofcCds, SystemInfoParam.getAsOfDate());
		LOG.info("Fetched ProgramCaseHistoryDetails counts for officeCodes :: {} and size: {}", ofcCds, programCaseHistoryDetails);

		if (programCaseHistoryDetails != null) {
			lines = programCaseHistoryDetails;
		}

		if (lines == 0) {
			return result;
		}

		if (gridSize <= 0 || lines < gridSize) {
			gridSize = FWConstants.ONE;
		}

		int range = lines / gridSize;
		int remains = lines % gridSize;
		int fromLine = 0;
		int toLine = range;
		for (int i = 1; i <= gridSize; i++) {
			if (i == gridSize) {
				toLine += remains;
			}
			ExecutionContext value = new ExecutionContext();
			value.putInt("minValue", fromLine);
			value.putInt("maxValue", toLine);
			value.putInt("totalLines", lines);
			fromLine = toLine;
			toLine += range;
			result.put("partition" + i, value);
		}
		return result;
	}

}

-------------
package gov.nv.dwss.crystalreports.statistics.programhistory.processor;

import java.util.List;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.batch.item.ItemProcessor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import gov.nv.dwss.crystalreports.statistics.common.model.PceRecord;
import gov.nv.dwss.crystalreports.statistics.programhistory.model.ProgramCaseHistoryDetails;
import gov.nv.dwss.crystalreports.statistics.programhistory.model.WorkingStorage;
import gov.nv.dwss.crystalreports.statistics.programhistory.service.ProgramHistoryService;
import gov.nv.dwss.fw.batch.common.AbstractBatchStepComponent;

@Component
public class ProgramHistoryProcessor extends AbstractBatchStepComponent implements ItemProcessor<ProgramCaseHistoryDetails, List<PceRecord>>{

	@Autowired
	ProgramHistoryService service;
	
	Set<PceRecord> programCaseSet = ConcurrentHashMap.newKeySet();
	
	@Override
	public List<PceRecord> process(ProgramCaseHistoryDetails item) throws Exception {
		WorkingStorage workingStorage = new WorkingStorage();
		PceRecord pceRecord = this.service.buildPceRecord(item,workingStorage);
		return this.service.getFamActionDetails(item,pceRecord,workingStorage,programCaseSet);
	}

}
--------------------
package gov.nv.dwss.crystalreports.statistics.programhistory.reader;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.NonTransientResourceException;
import org.springframework.batch.item.ParseException;
import org.springframework.batch.item.UnexpectedInputException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;

import gov.nv.dwss.crystalreports.statistics.programhistory.dao.ProgramHistoryExtractDao;
import gov.nv.dwss.crystalreports.statistics.programhistory.model.ProgramCaseHistoryDetails;
import gov.nv.dwss.fw.batch.common.AbstractBatchStepComponent;
import gov.nv.dwss.fw.batch.context.SystemInfoParam;
import gov.nv.dwss.fw.batch.util.ObjectUtils;

public class ProgramHistoryReader extends AbstractBatchStepComponent implements ItemReader<ProgramCaseHistoryDetails> {

	private static final Logger LOG = LogManager.getLogger(ProgramHistoryReader.class);

	@Autowired
	ProgramHistoryExtractDao monthlyProgramCaseHistoryExtractDao;

	@Value("${ofc-list}")
	String ofcList;
	
	Iterator<ProgramCaseHistoryDetails> iterator;
	
	private Map<String, Object> map = new HashMap<>();

	public ProgramHistoryReader(Long partition, Long minValue, Long maxValue) {
		map.put("partition", partition);
		map.put("maxValue", maxValue);
		map.put("minValue", minValue);
	}

	@Override
	public ProgramCaseHistoryDetails read()
			throws Exception, UnexpectedInputException, ParseException, NonTransientResourceException {
		if(iterator == null) {
			List<String> offices = new ArrayList<>();
			LOG.info("Before - ofcList: {}", ofcList);
			if (!ObjectUtils.isNullOrEmptyOrBlank(ofcList)) {
				String ofcCds = Arrays.stream(ofcList.split(",")).map(e -> "'" + e + "'").collect(Collectors.joining(","));
				offices = this.monthlyProgramCaseHistoryExtractDao.getOfficeDetails(ofcCds);
			} else {
				offices = this.monthlyProgramCaseHistoryExtractDao.getOfficeDetails();
			}

			String ofcCds = offices.stream().map(e -> "'" + e + "'").collect(Collectors.joining(","));

			Long minVal = (Long) map.get("minValue");
			Long maxVal = (Long) map.get("maxValue");
			
			if(minVal==null || maxVal == null){
				return null;
			}
			
			List<ProgramCaseHistoryDetails> programCaseHistoryDetails = this.monthlyProgramCaseHistoryExtractDao
					.getProgramCaseHistoryDetailsForAllOfcCds(ofcCds, SystemInfoParam.getAsOfDate(), minVal + 1, maxVal);
			LOG.info("Fetching ProgramCaseHistoryDetails for officeCodes size: {} and Range minVal:{}, maxVal:{}",
					programCaseHistoryDetails.size(), minVal + 1, maxVal);
			
			iterator = programCaseHistoryDetails.iterator();
		}
		
		if (iterator.hasNext()) {
			return iterator.next();
		} else {
			iterator = null; // reset iterator for next job
			return null;
		}
	}

}

---------------------

package gov.nv.dwss.crystalreports.statistics.programhistory.service;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang3.SerializationUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.core.task.TaskExecutor;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import gov.nv.dwss.crystalreports.statistics.common.model.PceRecord;
import gov.nv.dwss.crystalreports.statistics.programhistory.dao.ProgramHistoryExtractDao;
import gov.nv.dwss.crystalreports.statistics.programhistory.model.EligibilityVersionInfo;
import gov.nv.dwss.crystalreports.statistics.programhistory.model.FamilyAction;
import gov.nv.dwss.crystalreports.statistics.programhistory.model.NomadsUser;
import gov.nv.dwss.crystalreports.statistics.programhistory.model.ProgramCaseHistoryDetails;
import gov.nv.dwss.crystalreports.statistics.programhistory.model.WorkingStorage;
import gov.nv.dwss.fw.batch.common.AbstractSorDataService;
import gov.nv.dwss.fw.batch.constants.FWConstants;
import gov.nv.dwss.fw.batch.context.SystemInfoParam;
import gov.nv.dwss.fw.batch.util.ObjectUtils;

import static gov.nv.dwss.crystalreports.statistics.constants.StatisticsConstants.DUMMY_DATE;

@Service
public class ProgramHistoryService extends AbstractSorDataService {

	private static final Logger LOG = LogManager.getLogger(ProgramHistoryService.class);

	@Autowired
	ProgramHistoryExtractDao monthlyProgramCaseHistoryExtractDao;
	
	@Autowired
	@Qualifier("threadPoolFWTaskExecutor")
	protected TaskExecutor fwTaskExecutor;

	public PceRecord buildPceRecord(ProgramCaseHistoryDetails programCaseHistoryDetails, WorkingStorage workingStorage) {
		PceRecord pceRecord = new PceRecord(); 
		pceRecord.setPceLastRecForMnth(FWConstants.CHAR_N);
		pceRecord.setPceReinstInd(FWConstants.CHAR_N);
		pceRecord.setPceReopnInd(FWConstants.CHAR_N);
		pceRecord.setPceReappInd(FWConstants.CHAR_N);
		pceRecord.setPceAprvlInd(FWConstants.CHAR_N);
		pceRecord.setPceRedetInd(FWConstants.CHAR_N);
		pceRecord.setPceConfrsInd(FWConstants.CHAR_N);
		pceRecord.setPceRedetCmplThisMnth(FWConstants.CHAR_N);

		workingStorage.setFileAidCd(FWConstants.BLANK);
		workingStorage.setFileEligCd(FWConstants.BLANK);

		pceRecord.setPceReisntDt(FWConstants.LOW_DATE);
		pceRecord.setPceNextRedetDt(FWConstants.LOW_DATE);

		pceRecord.setPceIci(programCaseHistoryDetails.getIci());
		pceRecord.setPcePrgmCaseType(programCaseHistoryDetails.getPrgmCaseType());
		pceRecord.setPceAidCd(programCaseHistoryDetails.getAidCd());
		workingStorage.setFileAidCd(programCaseHistoryDetails.getAidCd());
		pceRecord.setPcePrgmCaseSts(programCaseHistoryDetails.getPrgmCaseSts());
		pceRecord.setPcePrgmStsEffDt(programCaseHistoryDetails.getStsEffDt());
		pceRecord.setPceInitAprvlDt(programCaseHistoryDetails.getInitAprvlDt());
		workingStorage.setInitAprvlDt(programCaseHistoryDetails.getInitAprvlDt());
		pceRecord.setPceApplDt(programCaseHistoryDetails.getApplDt());

		if (programCaseHistoryDetails.getPrgmCaseType().equals("MA")
				&& (programCaseHistoryDetails.getPrgmCaseSts().equals(FWConstants.CHAR_D)
						|| programCaseHistoryDetails.getPrgmCaseSts().equals(FWConstants.CHAR_T))) {
			pceRecord.setPceClsreRsnCd(programCaseHistoryDetails.getClsreRsnCd());
		} else {
			pceRecord.setPceClsreRsnCd(programCaseHistoryDetails.getSysClsreDnlRsn());
		}

		pceRecord.setPceExpdFsRsnCd(programCaseHistoryDetails.getExpdFsRsnCd());
		pceRecord.setPceEligCd(programCaseHistoryDetails.getEligCd());
		workingStorage.setFileEligCd(programCaseHistoryDetails.getEligCd());

		pceRecord.setPceHohUpi(programCaseHistoryDetails.getHohUpi());
		pceRecord.setPceAssistCd(programCaseHistoryDetails.getFsSufx());
		pceRecord.setPceCaseSts(programCaseHistoryDetails.getCaseSts());
		pceRecord.setPceMthlyRptrInd(programCaseHistoryDetails.getMthlyRptrInd());
		pceRecord.setPceHmlsInd(programCaseHistoryDetails.getHmlsInd());

		pceRecord.setPceOfcCd(programCaseHistoryDetails.getOfcCd());
		pceRecord.setPceSprvsUnit(programCaseHistoryDetails.getSprvsUnit());
		pceRecord.setPceFuncAreaCd(programCaseHistoryDetails.getFuncAreaCd());
		pceRecord.setPceWrkrType(programCaseHistoryDetails.getWrkrType());
		pceRecord.setPcePsnNmb(programCaseHistoryDetails.getPsnNmb());
		pceRecord.setPceCasldId(programCaseHistoryDetails.getCasldId());
		return pceRecord;
	}

	public List<PceRecord> getFamActionDetails(ProgramCaseHistoryDetails programCaseHistoryDetails, PceRecord pceRecord, WorkingStorage workingStorage, Set<PceRecord> programCaseSet) {
//		ARX04P9-GET-AP-DT()
		LOG.info("calling getFamilyActionDetailsForApplicationDate of ICI {} -- PrgmCaseType {} -- PrgmCaseSts {}",
				programCaseHistoryDetails.getIci(), programCaseHistoryDetails.getPrgmCaseType(),programCaseHistoryDetails.getPrgmCaseSts());
		FamilyAction familyActions = monthlyProgramCaseHistoryExtractDao.getFamilyActionDetailsForApplicationDate(
				programCaseHistoryDetails.getIci(), programCaseHistoryDetails.getPrgmCaseType());

		workingStorage.setActApplDtTs(familyActions != null ? familyActions.getActnTs().toLocalDateTime().toLocalDate() : null);
		pceRecord.setActnType(familyActions != null ? familyActions.getActnTyp() : null);
		pceRecord.setPceActApplDt(workingStorage.getActApplDtTs());

		workingStorage.setFlag(FWConstants.CHAR_Y);
		workingStorage.setFamUrowr(FWConstants.ONE);

		String asOfDate = SystemInfoParam.getAsOfDate();
		int year = ObjectUtils.getYear(asOfDate);
		int month = ObjectUtils.getMonth(asOfDate);
//        ARX04P9-FAC-READ()
		List<FamilyAction> familyActionList = monthlyProgramCaseHistoryExtractDao.getFamilyActionDetails(
				programCaseHistoryDetails.getIci(), programCaseHistoryDetails.getPrgmCaseType(), year, month);

		LOG.info("calling getFamilyActionDetails of ICI :: {} && PrgmCaseType {} & Count :: {}",
				programCaseHistoryDetails.getIci(), programCaseHistoryDetails.getPrgmCaseType(),
				familyActionList.size());

		if (CollectionUtils.isEmpty(familyActionList)) {
			if (programCaseHistoryDetails.getPrgmCaseSts().equals(FWConstants.CHAR_D)
					|| programCaseHistoryDetails.getPrgmCaseSts().equals(FWConstants.CHAR_T)) {
				workingStorage.setFlag(FWConstants.CHAR_N);
				LOG.info("Skipping PceRecord because familyActionList: {}, ICI: {}, PrgmCaseType:{} and PrgmCaseSts: {}",
						familyActionList.size(), programCaseHistoryDetails.getIci(),
						programCaseHistoryDetails.getPrgmCaseType(), programCaseHistoryDetails.getPrgmCaseSts());
				return null;
			}
			checkCaseload(programCaseHistoryDetails,pceRecord,workingStorage,programCaseSet);
		}

		List<PceRecord> pceList = new ArrayList<>();
		for (FamilyAction famActn : familyActionList) {
			workingStorage.setFlag(FWConstants.CHAR_N);

			if (famActn.getActnTyp().equals("AP") && famActn.getFamApplType().equals(FWConstants.EMPTY) && (famActn.getBnftYr() > year
					|| famActn.getBnftMth() > month || famActn.getBnftYr() < year || famActn.getBnftMth() < month)) {
//				workingStorage.setFamUrowr(workingStorage.getFamUrowr() - 1);
			} else {
				if (workingStorage.getFamUrowr() > 1) {
					eliminateBlank(pceRecord,workingStorage,pceList);
				}

				pceRecord.setPceAidCd(famActn.getAidCd());
				pceRecord.setPcePrgmStsEffDt(famActn.getActnEffDt());
				pceRecord.setPceExpdFsRsnCd(famActn.getExpdFsRsnCd());
				pceRecord.setPceEligCd(famActn.getEligCd());

				if (!famActn.getApplDt().equals(FWConstants.LOW_DATE)) {
					pceRecord.setPceApplDt(famActn.getApplDt());
				}

				pceRecord.setPceMultClsreInd(FWConstants.BLANK);
				pceRecord.setPceClsreRsnCd(FWConstants.BLANK);
				pceRecord.setPceLastRecForMnth(FWConstants.CHAR_N);
				pceRecord.setPceReinstInd(FWConstants.CHAR_N);
				pceRecord.setPceReopnInd(FWConstants.CHAR_N);
				pceRecord.setPceReappInd(FWConstants.CHAR_N);
				pceRecord.setPceAprvlInd(FWConstants.CHAR_N);
				pceRecord.setPceRedetInd(FWConstants.CHAR_N);
				pceRecord.setPceConfrsInd(FWConstants.CHAR_N);
				pceRecord.setPceRedetCmplThisMnth(FWConstants.CHAR_N);
				pceRecord.setPceReisntDt(FWConstants.LOW_DATE);
				pceRecord.setPceNextRedetDt(FWConstants.LOW_DATE);

				if (pceRecord.getPceInitAprvlDt().equals(FWConstants.LOW_DATE)) {
					pceRecord.setPceInitAprvlDt(workingStorage.getInitAprvlDt());
				}

				if (famActn.getActnTyp().equals("AP") || famActn.getActnTyp().equals("DN")
						|| famActn.getActnTyp().equals("TR")) {
					if (famActn.getFamApplType().equals("FT")) {
						pceRecord.setPceInitAprvlDt(famActn.getInitAprvlDt());
					}

					if (famActn.getFamApplType().equals("RC")) {
						pceRecord.setPceRedetInd(FWConstants.CHAR_Y);
					}

					if (famActn.getFamApplType().equals("RP")) {
						pceRecord.setPceReappInd(FWConstants.CHAR_Y);
					}

					if (famActn.getFamApplType().equals("RO")) {
						pceRecord.setPceReopnInd(FWConstants.CHAR_Y);
					}

					if (famActn.getFamApplType().equals("RI")) {
						pceRecord.setPceReinstInd(FWConstants.CHAR_Y);
						pceRecord.setPceReisntDt(famActn.getActnEffDt());
					}
				}

				if (famActn.getEligCd().equals("7")) {
					pceRecord.setPcePrgmCaseSts(FWConstants.CHAR_P);
					pceRecord.setPceInitAprvlDt(FWConstants.LOW_DATE);
				} else if (famActn.getEligCd().equals("3") || famActn.getEligCd().equals("9")) {
					pceRecord.setPcePrgmCaseSts(FWConstants.CHAR_D);
				} else {
					pceRecord.setPcePrgmCaseSts(FWConstants.CHAR_O);
				}

				if (famActn.getActnTyp().equals("FA")) {
					pceRecord.setPceReappInd(FWConstants.CHAR_N);
				}

				if (famActn.getActnTyp().equals("RA")) {
					pceRecord.setPceRedetInd(FWConstants.CHAR_Y);
				}

				if (famActn.getActnTyp().equals("AP")) {
					pceRecord.setPceAprvlInd(FWConstants.CHAR_Y);
					pceRecord.setPcePrgmCaseSts(FWConstants.CHAR_O);
				}

				if (famActn.getActnTyp().equals("DN")) {
					pceRecord.setPceMultClsreInd(famActn.getMultClsreRsnInd());
					pceRecord.setPcePrgmCaseSts(FWConstants.CHAR_D);
					pceRecord.setPceClsreRsnCd(famActn.getActnRsnCd());
				}

				if (famActn.getActnTyp().equals("TR")) {
					pceRecord.setPceMultClsreInd(famActn.getMultClsreRsnInd());
					pceRecord.setPcePrgmCaseSts(FWConstants.CHAR_T);
					pceRecord.setPceClsreRsnCd(famActn.getActnRsnCd());
				}

				if (famActn.getActnTyp().equals("RE")) {
					if (famActn.getFamApplType().equals("RP") || famActn.getFamApplType().equals("RH")) {
						pceRecord.setPceReappInd(FWConstants.CHAR_Y);
					} else {
						pceRecord.setPceReopnInd(FWConstants.CHAR_Y);
					}
				}

				if (famActn.getActnTyp().equals("RI")) {
					pceRecord.setPceReinstInd(FWConstants.CHAR_Y);
					pceRecord.setPceReisntDt(famActn.getActnEffDt());
				}

				if (famActn.getBnftYr() != 0) {
					getEligibilityDetailsS08(programCaseHistoryDetails, famActn,pceRecord,workingStorage);
				} else {
					pceRecord.setPceNoOfRcpnt(FWConstants.ZERO);
					pceRecord.setPceNoOfChldRcpnt(FWConstants.ZERO);
					pceRecord.setPceBnftAmt(BigDecimal.valueOf(0.00));
					pceRecord.setPceEntlmAmt(BigDecimal.valueOf(0.00));
					pceRecord.setPceBnftRdctnAmt(BigDecimal.valueOf(0.00));
					pceRecord.setPceBnftMnth(FWConstants.ZERO);
					pceRecord.setPceBnftYr(FWConstants.ZERO);
					pceRecord.setPceVerNmb(FWConstants.ZERO);
				}
				workingStorage.setFamUrowr(workingStorage.getFamUrowr() + 1);
			}
			checkCaseload(programCaseHistoryDetails,pceRecord,workingStorage,programCaseSet);
		}

		getEligibilityDetails(programCaseHistoryDetails,pceRecord,workingStorage);
		eliminateBlank(pceRecord,workingStorage,pceList);
		return pceList;
	}

	private void checkCaseload(ProgramCaseHistoryDetails programCaseHistoryDetails, PceRecord pceRecord, WorkingStorage workingStorage, Set<PceRecord> programCaseSet) {
//		if (pceRecord.getPceOfcCd().equals(workingStorage.getPrevOfcCd())
//				&& pceRecord.getPceSprvsUnit().equals(workingStorage.getPrevSprvsUnit())
//				&& pceRecord.getPceFuncAreaCd().equals(workingStorage.getPrevFuncAreaCd())
//				&& pceRecord.getPceWrkrType().equals(workingStorage.getPrevWrkrType())
//				&& pceRecord.getPcePsnNmb().equals(workingStorage.getPrevPsnNmb())) {
//			// Continue
//		} else {
//			workingStorage.setPrevOfcCd(pceRecord.getPceOfcCd());
//			workingStorage.setPrevSprvsUnit(pceRecord.getPceSprvsUnit());
//			workingStorage.setPrevFuncAreaCd(pceRecord.getPceFuncAreaCd());
//			workingStorage.setPrevWrkrType(pceRecord.getPceWrkrType());
//			workingStorage.setPrevPsnNmb(pceRecord.getPcePsnNmb());
//
//			getWorkerDetails(pceRecord,workingStorage);
//		}
		
		synchronized (this) {
			if(!programCaseSet.contains(pceRecord)) {
				workingStorage.setPrevOfcCd(pceRecord.getPceOfcCd());
				workingStorage.setPrevSprvsUnit(pceRecord.getPceSprvsUnit());
				workingStorage.setPrevFuncAreaCd(pceRecord.getPceFuncAreaCd());
				workingStorage.setPrevWrkrType(pceRecord.getPceWrkrType());
				workingStorage.setPrevPsnNmb(pceRecord.getPcePsnNmb());

				getWorkerDetails(pceRecord,workingStorage);
				
				programCaseSet.add(pceRecord);
			}
		}

		if (pceRecord.getPcePrgmCaseSts().equals(FWConstants.CHAR_O)) {
			getRedeterminationDetails(programCaseHistoryDetails,pceRecord,workingStorage);
			getConferenceDetails(programCaseHistoryDetails,pceRecord,workingStorage);
		}
	}

	private void eliminateBlank(PceRecord pceRecord, WorkingStorage workingStorage, List<PceRecord> pceList) {
		String workerId = !ObjectUtils.isNullOrEmptyOrBlank(workingStorage.getWrkrId()) ? workingStorage.getWrkrId() : FWConstants.BLANK;
		String workerName = !ObjectUtils.isNullOrEmptyOrBlank(workingStorage.getWrkrNm()) ? workingStorage.getWrkrNm() : FWConstants.BLANK;
		pceRecord.setPceWrkrId(workerId);
		pceRecord.setPceWrkrNm(workerName);
		if (!pceRecord.getPceCasldId().equals(FWConstants.BLANK) && !pceRecord.getPceOfcCd().equals(FWConstants.BLANK)) {
			PceRecord record = SerializationUtils.clone(pceRecord);
			pceList.add(record);
		}
	}

	private void getEligibilityDetails(ProgramCaseHistoryDetails programCaseHistoryDetails, PceRecord pceRecord, WorkingStorage workingStorage) {
		String asOfDate = SystemInfoParam.getAsOfDate();
		int year = ObjectUtils.getYear(asOfDate);
		int month = ObjectUtils.getMonth(asOfDate);
		pceRecord.setPceLastRecForMnth(FWConstants.CHAR_Y);
		EligibilityVersionInfo eligibilityVersionInfo = monthlyProgramCaseHistoryExtractDao.getEligibilityVersionInfo(
				programCaseHistoryDetails.getIci(), programCaseHistoryDetails.getPrgmCaseType(), year, month, FWConstants.CHAR_Y);

		if (eligibilityVersionInfo != null) {
			pceRecord.setPceNoOfRcpnt(eligibilityVersionInfo.getEligNum());
			pceRecord.setPceNoOfChldRcpnt(eligibilityVersionInfo.getChldNmb());
			pceRecord.setPceBnftAmt(eligibilityVersionInfo.getTotMthlyBnftAmt());
			pceRecord.setPceEntlmAmt(eligibilityVersionInfo.getEntlmAmt());
			pceRecord.setPceBnftRdctnAmt(eligibilityVersionInfo.getBnftRdctnAmt());
			pceRecord.setPceBnftMnth(month);
			pceRecord.setPceBnftYr(year);
			pceRecord.setPceVerNmb(eligibilityVersionInfo.getVerNmb());
			pceRecord.setPceAidCd(workingStorage.getFileAidCd());
			pceRecord.setPceEligCd(workingStorage.getFileEligCd());
		} else {
			pceRecord.setPceNoOfRcpnt(FWConstants.ZERO);
			pceRecord.setPceNoOfChldRcpnt(FWConstants.ZERO);
			pceRecord.setPceBnftAmt(BigDecimal.valueOf(0.00));
			pceRecord.setPceEntlmAmt(BigDecimal.valueOf(0.00));
			pceRecord.setPceBnftRdctnAmt(BigDecimal.valueOf(0.00));
			pceRecord.setPceBnftMnth(FWConstants.ZERO);
			pceRecord.setPceBnftYr(FWConstants.ZERO);
			pceRecord.setPceVerNmb(FWConstants.ZERO);
		}
	}

	private void getEligibilityDetailsS08(ProgramCaseHistoryDetails programCaseHistoryDetails,
			FamilyAction familyAction, PceRecord pceRecord, WorkingStorage workingStorage) {
		EligibilityVersionInfo eligibilityVersionInfo = monthlyProgramCaseHistoryExtractDao
				.getEligibilityVersionInfoS08(programCaseHistoryDetails.getIci(),
						programCaseHistoryDetails.getPrgmCaseType(), familyAction.getBnftYr(),
						familyAction.getBnftMth(), familyAction.getVerNmb());

		if (eligibilityVersionInfo != null) {
			pceRecord.setPceNoOfRcpnt(eligibilityVersionInfo.getEligNum());
			pceRecord.setPceNoOfChldRcpnt(eligibilityVersionInfo.getChldNmb());
			pceRecord.setPceBnftAmt(eligibilityVersionInfo.getTotMthlyBnftAmt());
			pceRecord.setPceEntlmAmt(eligibilityVersionInfo.getEntlmAmt());
			pceRecord.setPceBnftRdctnAmt(eligibilityVersionInfo.getBnftRdctnAmt());
			pceRecord.setPceBnftMnth(eligibilityVersionInfo.getBnftMth());
			pceRecord.setPceBnftYr(eligibilityVersionInfo.getBnftYr());
			pceRecord.setPceVerNmb(eligibilityVersionInfo.getVerNmb());
			pceRecord.setPceAidCd(workingStorage.getFileAidCd());
			pceRecord.setPceEligCd(workingStorage.getFileEligCd());
		} else {
			pceRecord.setPceNoOfRcpnt(FWConstants.ZERO);
			pceRecord.setPceNoOfChldRcpnt(FWConstants.ZERO);
			pceRecord.setPceBnftAmt(BigDecimal.valueOf(0.00));
			pceRecord.setPceEntlmAmt(BigDecimal.valueOf(0.00));
			pceRecord.setPceBnftRdctnAmt(BigDecimal.valueOf(0.00));
			pceRecord.setPceBnftMnth(FWConstants.ZERO);
			pceRecord.setPceBnftYr(FWConstants.ZERO);
			pceRecord.setPceVerNmb(FWConstants.ZERO);
		}
	}

	private void getWorkerDetails(PceRecord pceRecord, WorkingStorage workingStorage) {
		String asOfDate = SystemInfoParam.getAsOfDate();
		NomadsUser nomadsUser = monthlyProgramCaseHistoryExtractDao.getWorkerDetails(workingStorage.getPrevOfcCd(), "A",
				workingStorage.getPrevSprvsUnit(), workingStorage.getPrevPsnNmb(), asOfDate);

		if (nomadsUser != null) {
			LOG.info("calling getWorkerDetails :: {}", nomadsUser.toString());
			
			workingStorage.setWrkrId(nomadsUser.getNomadsUsrid());
			workingStorage.setWrkrLstNm(nomadsUser.getLstNm());
			workingStorage.setWrkrFrstNm(nomadsUser.getFrstNm());
			workingStorage.setWrkrNm(workingStorage.getWrkrLstNm().trim() + FWConstants.BLANK + workingStorage.getWrkrFrstNm().trim());
		}

		String workerId = !ObjectUtils.isNullOrEmptyOrBlank(workingStorage.getWrkrId()) ? workingStorage.getWrkrId() : FWConstants.BLANK;
		String workerName = !ObjectUtils.isNullOrEmptyOrBlank(workingStorage.getWrkrNm()) ? workingStorage.getWrkrNm() : FWConstants.BLANK;
		pceRecord.setPceWrkrId(workerId);
		pceRecord.setPceWrkrNm(workerName);
	}

	private void getRedeterminationDetails(ProgramCaseHistoryDetails programCaseHistoryDetails, PceRecord pceRecord, WorkingStorage workingStorage) {
		String asOfDate = SystemInfoParam.getAsOfDate();
		int year = ObjectUtils.getYear(asOfDate);
		int month = ObjectUtils.getMonth(asOfDate);
		Date redeterminationDetails = monthlyProgramCaseHistoryExtractDao.getNextRedeterminationDate(
				programCaseHistoryDetails.getIci(), programCaseHistoryDetails.getPrgmCaseType());

		if (redeterminationDetails != null) {
			pceRecord.setPceNextRedetDt(redeterminationDetails);
		} else {
			pceRecord.setPceNextRedetDt(DUMMY_DATE);
		}

		workingStorage.setCount(monthlyProgramCaseHistoryExtractDao.getCurrentMonthRedeterminationDetailsCount(
				programCaseHistoryDetails.getIci(), programCaseHistoryDetails.getPrgmCaseType(), year, month));

		if (workingStorage.getCount() > 0) {
			pceRecord.setPceRedetCmplThisMnth(FWConstants.CHAR_Y);
		} else {
			pceRecord.setPceRedetCmplThisMnth(FWConstants.CHAR_N);
		}
	}

	private void getConferenceDetails(ProgramCaseHistoryDetails programCaseHistoryDetails, PceRecord pceRecord, WorkingStorage workingStorage) {
		String asOfDate = SystemInfoParam.getAsOfDate();
		int year = ObjectUtils.getYear(asOfDate);
		int month = ObjectUtils.getMonth(asOfDate);
		workingStorage.setCount(monthlyProgramCaseHistoryExtractDao.getWorkerCalendarDetailsCount(
				workingStorage.getWrkrId(), programCaseHistoryDetails.getHohUpi(),
				programCaseHistoryDetails.getPrgmCaseType(), "HC", "S", year, month));

		if (workingStorage.getCount() > 0) {
			pceRecord.setPceConfrsInd(FWConstants.CHAR_Y);
		} else {
			pceRecord.setPceConfrsInd(FWConstants.CHAR_N);
		}
	}

}