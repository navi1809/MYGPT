// Validation logic
			ABHouseholdMembersSummaryBO householdMembersSummaryBO = new ABHouseholdMembersSummaryBO();
			householdMembersSummaryBO.validateQuestions(appInPrflAfterCollection, noOneCollection, noOneCheckedMap);
			if(householdMembersSummaryBO.hasMessages()){
				request.put(FwConstants.MESSAGE_LIST, householdMembersSummaryBO.getMessageList());
				applicationManager.translateProfileResponseAfterValidation(appInPrflAfterCollection, sessionAppInPrflCollection, questionsFieldArray);
				
				List compIds = (List)beforeCollection.get(FwConstants.PAGE_COMPONENT_LIST);
				int compIdSize = compIds.size();
				for(int i=0;i<compIdSize;i++){
					String str = new StringBuffer(AppConstants.PEOPLE).append(compIds.get(i)).toString();
					pageCollection.put(str, beforeCollection.get(str));
				}
				
				this.createAndLoadABHMSResponseMapsToPageCollection(appInPrflAfterCollection, pageCollection, peopleHandler, false);
				pageCollection.put(AppConstants.NO_ONE_CHECKED_MAP, noOneCheckedMap);	
				pageCollection.put(AppConstants.APP_IN_PRFL_MASTER, appInPrflAfterCollection);
				pageCollection.put(AppConstants.APP_PREG_COLLECTION, beforeCollection.get(AppConstants.APP_PREG_COLLECTION));
				pageCollection.put(AppConstants.ABSENT_PARENT_COLLECTION, beforeCollection.get(AppConstants.ABSENT_PARENT_COLLECTION));
				pageCollection.put(AppConstants.BLIND_DISABLE_COLLECTION, beforeCollection.get(AppConstants.BLIND_DISABLE_COLLECTION));
				pageCollection.put("PEOPLE_347", beforeCollection.get("PEOPLE_347"));
				pageCollection.put("PEOPLE_392", beforeCollection.get("PEOPLE_392"));
				pageCollection.put("PEOPLE_5108", beforeCollection.get("PEOPLE_5108"));
				//Added by Uma Patil BRGUS00287296
				pageCollection.put("PEOPLE_418",beforeCollection.get("PEOPLE_418"));
				pageCollection.put("PEOPLE_419",beforeCollection.get("PEOPLE_419"));
				pageCollection.put("ABHouseHoldMembersListview_ListView", beforeCollection.get("ABHouseHoldMembersListview_ListView"));
				pageCollection.put("ABHouseHoldOutsideHomeMembersListview_ListView", beforeCollection.get("ABHouseHoldOutsideHomeMembersListview_ListView"));
				pageCollection.put("ABHouseHoldMembersPregnancyListview_ListView", beforeCollection.get("ABHouseHoldMembersPregnancyListview_ListView"));
				pageCollection.put("ABHouseHoldMembersRelationshipsListview_ListView", beforeCollection.get("ABHouseHoldMembersRelationshipsListview_ListView"));
				pageCollection.put("ABHouseHoldOtherParentsListview_ListView", beforeCollection.get("ABHouseHoldOtherParentsListview_ListView"));
				pageCollection.put("ABHouseHoldMembersBlindDisableListview_ListView", beforeCollection.get("ABHouseHoldMembersBlindDisableListview_ListView"));
				pageCollection.put("ABHouseHoldMembersInstitutionListview_ListView", beforeCollection.get("ABHouseHoldMembersInstitutionListview_ListView"));
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST, beforeCollection.get(FwConstants.PAGE_COMPONENT_LIST));
				return;

			}
			
			//Initializing dirty indicator for the pages to be scheduled
			int[] dummyDirtyIndicator = {IApplicationManager.NOT_DIRTY};
			
			int dirtyIndicatorArraySize = applicationManager.getMaxSeqNumer(sessionAppInPrflCollection) + 1;
			boolean[] dirtyIndicatorArray = new boolean[dirtyIndicatorArraySize];

			String[] translatedProfileArray = null;
			Map indvResponseMap = new HashMap(); 
			
			// Initialize driver components and update noOne flag
			int[] driverArray = (int[]) session.get(FwConstants.AFB_DRIVER);
			String currentPageId = (String) request.get(FwConstants.CURRENT_PAGE_ID);
			int driverStatus = (int) driverManager.getAFBStatus(FwConstants.AFB_DRIVER, currentPageId, driverArray);
			
			//flags for age and disabled
			boolean ageFlag = false;
			boolean disFlag = false;
			// Added for the ILIES project
			boolean longTermCare = false;

			// Loop for each individual in session app indv profile
			for(int s=0;s<sessionAppInPrflCollectionSize;s++){
				APP_IN_PRFL_Cargo sessionAppInPrflCargo = sessionAppInPrflCollection.getCargo(s);
				appInPrflAfterCollectionSize = appInPrflAfterCollection.size();
				// Loop for each individual in page collection app indv profile
				for (int p = 0; p < appInPrflAfterCollectionSize; p++) {
					APP_IN_PRFL_Cargo appInPrflAfterCargo =	appInPrflAfterCollection.getCargo(p);
					indvSeqNum = appInPrflAfterCargo.getIndv_seq_num();
					// Picking up the matching individuals of session app indv profile from page collection app indv profile
					if (indvSeqNum.equals(sessionAppInPrflCargo.getIndv_seq_num())) {
						translatedProfileArray = new String[questionsFieldArray.length];
						
						//Checking for any changes in the page since load
						INDIVIDUAL_Custom_Cargo indivCargoPP = peopleHandler.getIndividual(indvSeqNum);
						IndividualAge ppAge = indivCargoPP.getIndv_age();
						int age = ppAge.getYears();
						if (age>=65){
							ageFlag=true;
						}
						// For disability response
						if(applicationManager.determineDirtyStatus(appInPrflAfterCargo.getDabl_resp(), sessionAppInPrflCargo.getDabl_resp(), dummyDirtyIndicator, driverStatus) ){
							if(!dirtyIndicatorArray[0]){
								dirtyIndicatorArray[0] = true;
							}
							dirtyIndicatorArray[Integer.parseInt(indvSeqNum)] = true;
							// translating page coll app indiv profile values to session app indv profile values 
							applicationManager.translateProfileResponses(appInPrflAfterCargo.getDabl_resp(), sessionAppInPrflCargo.getDabl_resp(), driverStatus, IApplicationManager.DISABLED_PERSON, sessionAppInPrflCargo);
						}					
						translatedProfileArray[0] = sessionAppInPrflCargo.getDabl_resp();
						String disabled = sessionAppInPrflCargo.getDabl_resp();
						if (!disabled.equals("N")){
							disFlag=true;
						}
						
						// Added for the ILIES project
						if ( indivCargoPP.getLive_arng_typ() != null && indivCargoPP.getLive_arng_typ().equals( "PR" ) )
						{
							longTermCare = true;
						}
		
						// Drug Felon response
						if(applicationManager.determineDirtyStatus(appInPrflAfterCargo.getDrug_feln_resp(), sessionAppInPrflCargo.getDrug_feln_resp(), dummyDirtyIndicator, driverStatus)){
							if(!dirtyIndicatorArray[0]){
								dirtyIndicatorArray[0] = true;
							}
							dirtyIndicatorArray[Integer.parseInt(indvSeqNum)] = true;
							//	translating page coll app indiv profile values to session app indv profile values
							applicationManager.translateProfileResponses(appInPrflAfterCargo.getDrug_feln_resp(), sessionAppInPrflCargo.getDrug_feln_resp(), driverStatus, IApplicationManager.DRUG_FELON, sessionAppInPrflCargo);
						}
						translatedProfileArray[1] = sessionAppInPrflCargo.getDrug_feln_resp();
						
						//Added for ILIES-129516 - Starts						
						// Drug Treatment Program response
						if(applicationManager.determineDirtyStatus(appInPrflAfterCargo.getDrug_trtmnt_prg_resp(), sessionAppInPrflCargo.getDrug_trtmnt_prg_resp(), dummyDirtyIndicator, driverStatus)){
							if(!dirtyIndicatorArray[0]){
								dirtyIndicatorArray[0] = true;
							}
							dirtyIndicatorArray[Integer.parseInt(indvSeqNum)] = true;
							//	translating page coll app indiv profile values to session app indv profile values
							applicationManager.translateProfileResponses(appInPrflAfterCargo.getDrug_trtmnt_prg_resp(), sessionAppInPrflCargo.getDrug_trtmnt_prg_resp(), driverStatus, IApplicationManager.DRUG_TRTMNT_PROG, sessionAppInPrflCargo);
						}
						translatedProfileArray[2] = sessionAppInPrflCargo.getDrug_trtmnt_prg_resp();
						
						// Parole Probation Violation response
						if(applicationManager.determineDirtyStatus(appInPrflAfterCargo.getParole_prob_viol_resp(), sessionAppInPrflCargo.getParole_prob_viol_resp(), dummyDirtyIndicator, driverStatus)){
							if(!dirtyIndicatorArray[0]){
								dirtyIndicatorArray[0] = true;
							}
							dirtyIndicatorArray[Integer.parseInt(indvSeqNum)] = true;
							//	translating page coll app indiv profile values to session app indv profile values
							applicationManager.translateProfileResponses(appInPrflAfterCargo.getParole_prob_viol_resp(), sessionAppInPrflCargo.getParole_prob_viol_resp(), driverStatus, IApplicationManager.PAROLE_PROB_VIOL, sessionAppInPrflCargo);
						}
						translatedProfileArray[3] = sessionAppInPrflCargo.getParole_prob_viol_resp();
						// Added for ILIES-129516 - Ends
						//	Other FS Benefits response
						if(applicationManager.determineDirtyStatus(appInPrflAfterCargo.getRcv_fs_oth_st_resp(), sessionAppInPrflCargo.getRcv_fs_oth_st_resp(), dummyDirtyIndicator, driverStatus)){
							if(!dirtyIndicatorArray[0]){
								dirtyIndicatorArray[0] = true;
							}
							dirtyIndicatorArray[Integer.parseInt(indvSeqNum)] = true;
							//	translating page coll app indiv profile values to session app indv profile values
							applicationManager.translateProfileResponses(appInPrflAfterCargo.getRcv_fs_oth_st_resp(), sessionAppInPrflCargo.getRcv_fs_oth_st_resp(), driverStatus, IApplicationManager.RECEIVE_FS_IN_OTHER_STATE, sessionAppInPrflCargo);
						}	
						translatedProfileArray[4] = sessionAppInPrflCargo.getRcv_fs_oth_st_resp();
						
						//Added by uma  for SSI Benefits response 
						if(applicationManager.determineDirtyStatus(appInPrflAfterCargo.getSsi_benefit_resp(), sessionAppInPrflCargo.getSsi_benefit_resp(), dummyDirtyIndicator, driverStatus)){
							if(!dirtyIndicatorArray[0]){
								dirtyIndicatorArray[0] = true;
							}
							dirtyIndicatorArray[Integer.parseInt(indvSeqNum)] = true;
							//	translating page coll app indiv profile values to session app indv profile values
							applicationManager.translateProfileResponses(appInPrflAfterCargo.getSsi_benefit_resp(), sessionAppInPrflCargo.getSsi_benefit_resp(), driverStatus, IApplicationManager.SSI_BENEFIT_RESP, sessionAppInPrflCargo);
						}
						translatedProfileArray[5] = sessionAppInPrflCargo.getSsi_benefit_resp();
						
						//Added by uma for cash Benefits response
						if(applicationManager.determineDirtyStatus(appInPrflAfterCargo.getCash_benefit_resp(), sessionAppInPrflCargo.getCash_benefit_resp(), dummyDirtyIndicator, driverStatus)){
							if(!dirtyIndicatorArray[0]){
								dirtyIndicatorArray[0] = true;
							}
							dirtyIndicatorArray[Integer.parseInt(indvSeqNum)] = true;
							//	translating page coll app indiv profile values to session app indv profile values
							applicationManager.translateProfileResponses(appInPrflAfterCargo.getCash_benefit_resp(), sessionAppInPrflCargo.getCash_benefit_resp(), driverStatus, IApplicationManager.CASH_BENEFIT_RESP, sessionAppInPrflCargo);
						}
						translatedProfileArray[6] = sessionAppInPrflCargo.getCash_benefit_resp();
						// putting the translated profile string array into the map with key as individual seq number
						indvResponseMap.put(indvSeqNum, translatedProfileArray);
						// breaking to pick the next matching individual from session app indv profile
						break;
					}
				}
			}
			// Persistence logic start
			if(dirtyIndicatorArray[0]){
				for(int i=0;i<appInPrflAfterCollectionSize;i++){
					indvSeqNum = appInPrflAfterCollection.getCargo(i).getIndv_seq_num();
					if(dirtyIndicatorArray[Integer.parseInt(indvSeqNum)]){	
						applicationManager.persist(appNumber, indvSeqNum,  questionsFieldArray, (String[]) indvResponseMap.get(indvSeqNum));
					}
				}
			}
		
			String[] expensesPageIds = {"ABOEQ","ABESM"};
			//Added by Uma for MA Short Forms BRGUS00288048
			ABMedicalDetailsBO medDetailsBO = new ABMedicalDetailsBO();
			String shortForm = medDetailsBO.checkMAShortFormType(appNumber);
			if(householdMembersSummaryBO.checkOtherExpensesRequired(appNumber,peopleHandler,(short[])session.get(FwConstants.AFB_PROGRAM_KEY))){
				if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABOEQ",driverArray) == FwConstants.DRIVER_NOT_REQUIRED){
					//Added by Uma for MA Short Forms BRGUS00288048
					if(shortForm!=null && shortForm.trim().length()>0 
							&&( AppConstants.MA_NURSING_FACILITY.equalsIgnoreCase(shortForm) ||
									AppConstants.MA_HEALTHY_KIDS.equalsIgnoreCase(shortForm)||
									AppConstants.MA_PLAN_FIRST.equalsIgnoreCase(shortForm)))
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,expensesPageIds, driverArray, appNumber);
					else
					driverManager.makeRequired(FwConstants.AFB_DRIVER,expensesPageIds, driverArray, appNumber);
				}
			}
			else{
				driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,expensesPageIds, driverArray, appNumber);
			}
			
			// Commented by Sai Katta as we are not using Health Care Check
			//boolean [] updatedArray = runHealthCareEligibilityCriteria(txnBean);

//			call private method ::: to check Health Care Application Status -- starts
			
			short[] programKeyArray = (short[])session.get(FwConstants.AFB_PROGRAM_KEY);
			boolean groupHCIndiactor = false;
			boolean groupEBDIndicator = false;
			boolean isFMARequired = false;
			if(programManager.isThisProgramRequested(programKeyArray,FwConstants.HC_INDEX))
				groupHCIndiactor = true;
			if(programManager.isThisProgramRequested(programKeyArray,FwConstants.EBD_INDEX))
				groupEBDIndicator = true;
			if(programManager.isThisProgramRequested(programKeyArray,FwConstants.FMA_INDEX))//is FMA required
				isFMARequired = true; 
			
			//mvanlenten - added to see if only SNAP(2) or only Medical Assistance(0)
			//salikatti JIRA:121066
			boolean onlyOne = false;
			boolean onlyBoth = false;
			//boolean onlyMedical = false;
			// Added for the ILIES project
			// There needs to be a check for SNAP and Medical Assistance only
			for (int i=0; i<programKeyArray.length; i++){
				if (i==0 && programKeyArray[i]==1){
					onlyOne = true;
					//onlyMedical = true;
				}else if (i==2 && programKeyArray[i]==1 && !onlyOne){
					onlyOne = true;
					//onlyMedical = false;
				}else if (i==2 && programKeyArray[i]==1 && onlyOne){
					onlyOne = false;
					onlyBoth = true;
				}else if (programKeyArray[i]==1){
					onlyOne = false;
					//onlyMedical = false;
					break;
				}
			}
			
			// Commented by Sai Katta for self Service Expansion
			
			//boolean yeohcStatus=updatedArray[2];
		/*
			pageCollection.put("YEOHCSTATUS",String.valueOf(yeohcStatus));
			//remove the status from session
			session.remove("YEOHCSTATUS");
			//If yeohc status is true, we have to display yeohc page.
			if(yeohcStatus)
			{
				if(driverStatus == FwConstants.DRIVER_REQUIRED){
					//driverManager.makeRequired(FwConstants.AFB_DRIVER, "ABHCA", driverArray, appNumber);
				}else{
					driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER, "ABHCA", driverArray, appNumber);
				}
				//put the status of yeohc in session so that we can know which text to display in healthCareApplication page
				session.put("YEOHCSTATUS",String.valueOf(yeohcStatus));	
			}
			else if(!groupHCIndiactor && !groupEBDIndicator && isFMARequired){
				setDefaultEBDApplication(txnBean);
				groupEBDIndicator = true;
				if(driverStatus == FwConstants.DRIVER_REQUIRED){
					//driverManager.makeRequired(FwConstants.AFB_DRIVER, "ABHCA", driverArray, appNumber);
				}else{
					driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER, "ABHCA", driverArray, appNumber);
				}
			}else{
				driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER, "ABHCA", driverArray, appNumber);
			}*/
			//	call private method ::: to check Health Care Application Status -- ends
			//PCR - 31866			
			boolean isFPWRequired = false;
			boolean isFSRequired = false;
			boolean isSERRequired = false;
			if(programManager.isThisProgramRequested(programKeyArray,FwConstants.FPW_INDEX))//is FPW required
				isFPWRequired = true; 
			if(programManager.isThisProgramRequested(programKeyArray,FwConstants.FS_INDEX))//is FPW required
				isFSRequired = true; 
			
			if(programManager.isThisProgramRequested(programKeyArray,FwConstants.SER_INDEX))//is FPW required
				isSERRequired = true; 
			
			boolean assetPageFlag = false;
			if(groupEBDIndicator){
				if(isFMARequired && !isFPWRequired && !isFSRequired){
					String primaryPersonIndvSeqNum = AppConstants.PRIMARY_INDV_SEQ;
					APP_IN_PRFL_Cargo appPRFLCargo = ApplicationManager.getInstance().getAppInProfile(sessionAppInPrflCollection, primaryPersonIndvSeqNum);
					//get the age of PP and it should be > 19 to ask asset questions
					INDIVIDUAL_Custom_Cargo indivCargoPP = peopleHandler.getIndividual(primaryPersonIndvSeqNum);
					IndividualAge ppAge = indivCargoPP.getIndv_age();
					
					if(!appPRFLCargo.getIndv_ebd_rqst_ind().equals("0") && ppAge.getYears() >= 19){
						assetPageFlag = true;
					}else{
						InstitutionBO insBO = new InstitutionBO();
						String spsIndvSeqNum = insBO.isWifeOrHusband(appNumber, primaryPersonIndvSeqNum);
						//if spsIndvSeqNum is other than ZERO than SPOUSE exists for PP
						if(!spsIndvSeqNum.equals("0")){
							INDIVIDUAL_Custom_Cargo indivCargoPPS = peopleHandler.getIndividual(spsIndvSeqNum);
							IndividualAge ppsAge = indivCargoPPS.getIndv_age();
							//if PP Spouse age is >= 19
							if(ppsAge.getYears() >= 19){
								appPRFLCargo = ApplicationManager.getInstance().getAppInProfile(sessionAppInPrflCollection, spsIndvSeqNum);
								if(!appPRFLCargo.getIndv_ebd_rqst_ind().equals("0")){
									assetPageFlag = true;
								}
							}
					}
						if(!assetPageFlag){//if any individual is EBD and requested FMA and > 19 -- schedule Asset page with questions
							int prflCollSize = sessionAppInPrflCollection.size();
							for(int t=0; t<prflCollSize ; t++){
								APP_IN_PRFL_Cargo prflCargo = sessionAppInPrflCollection.getCargo(t);
								if(!prflCargo.getIndv_ebd_rqst_ind().equals("0") && !prflCargo.getIndv_fma_rqst_ind().equals("0")){
									INDIVIDUAL_Custom_Cargo indivCargo = peopleHandler.getIndividual(prflCargo.getIndv_seq_num());
									IndividualAge indvAge = indivCargo.getIndv_age();
									if(indvAge.getYears() >= 19)
										assetPageFlag = true;
								}
							}
							
						}
					}
				}else if((isFMARequired && (isFPWRequired || isFSRequired))){//FMA and FS or FPW selected
					int prflCollSize = sessionAppInPrflCollection.size();
					for(int t=0; t<prflCollSize ; t++){
						APP_IN_PRFL_Cargo prflCargo = sessionAppInPrflCollection.getCargo(t);
						if(!prflCargo.getIndv_ebd_rqst_ind().equals("0")){
							INDIVIDUAL_Custom_Cargo indivCargo = peopleHandler.getIndividual(prflCargo.getIndv_seq_num());
							IndividualAge indvAge = indivCargo.getIndv_age();
							if(indvAge.getYears() >= 19)
								assetPageFlag = true;
						}
					}
				}			
			}
			
			//schedule Housing & Utility Type page if its EBD and FMA is only requested -- UAT PCR # 30840 -- start
			if(groupEBDIndicator && assetPageFlag){
				if(isFMARequired && !isFPWRequired && !isFSRequired){
					int statusABHEQ = driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABHEQ",driverArray);
					if(statusABHEQ == FwConstants.DRIVER_NOT_REQUIRED){
						driverManager.makeRequired(FwConstants.AFB_DRIVER, "ABHEQ", driverArray, appNumber);
					}
					int statusABHES = driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABHES",driverArray);
					if(statusABHES == FwConstants.DRIVER_NOT_REQUIRED){
						driverManager.makeRequired(FwConstants.AFB_DRIVER, "ABHES", driverArray, appNumber);
					}
				}
			}else if((isSERRequired || isFSRequired) && !groupEBDIndicator){
				
					int statusABHEQ = driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABHEQ",driverArray);
					if(statusABHEQ == FwConstants.DRIVER_NOT_REQUIRED){
						driverManager.makeRequired(FwConstants.AFB_DRIVER, "ABHEQ", driverArray, appNumber);
					}
					int statusABHES = driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABHES",driverArray);
					if(statusABHES == FwConstants.DRIVER_NOT_REQUIRED){
						driverManager.makeRequired(FwConstants.AFB_DRIVER, "ABHES", driverArray, appNumber);
					}
					//start of BRGUS00286206 added by rotanak
			}else{//
				// rotanak commented
				//String[] houseExpNotReqPageIds = {"ABHEQ","ABSCT","ABSCD","ABUCT","ABUCD","ABHES"};
				//driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER, houseExpNotReqPageIds, driverArray, appNumber);
			}
			//schedule Housing & Utility Type page if its EBD and FMA is only requested -- UAT PCR # 30840 -- end
			//end of BRGUS00286206 added by rotanak
			//SS Expand - Cash Routing - RobbinsE1
			boolean isCashRequested = false;
			boolean isPrego = false;
			boolean isMinor = false;
			APP_IN_PRFL_Cargo pregAppInPrflCargo = new APP_IN_PRFL_Cargo();
			for(int s=0;s<sessionAppInPrflCollectionSize;s++){
				//start of BRGUS00287188 by Eric
				pregAppInPrflCargo = sessionAppInPrflCollection.getCargo(s);
				if(pregAppInPrflCargo.getPreg_resp()!=null && !pregAppInPrflCargo.getPreg_resp().equals("N")){
					isPrego = true;
				}
				//end of BRGUS00287188 by Eric
			}			
			
			//Check to see if any minors in household
			INDIVIDUAL_Custom_Collection indvCustomCollection = peopleHandler.getAllIndividuals();
			INDIVIDUAL_Custom_Cargo indvCustomCargo = new INDIVIDUAL_Custom_Cargo();
			IndividualAge indvAge = null;
			for(int i = 0; i<indvCustomCollection.size(); i++){
				indvCustomCargo = indvCustomCollection.getResult(i);
				indvAge = peopleHandler.getIndividualAge(indvCustomCargo.getIndv_seq_num());
				if(indvAge.getYears()<18){
					isMinor=true;
				}
			}
			
			//check to see if Cash benefits have been selected
			if(programManager.isThisProgramRequested(programKeyArray,FwConstants.HC_INDEX))//is cash requested
				isCashRequested = true;
			
			//Perform required check and add Cash Routing pages. 
//			if(isCashRequested && (isPrego || isMinor)){
//				// start of BRGUS00287912 by rotanak
//				String[] requiredCashPages = {"ABWSS"};
//				// end of BRGUS00287912 by rotanak
//				driverManager.makeRequired(FwConstants.AFB_DRIVER, requiredCashPages, driverArray, appNumber);
//			}
//			//End SS Expand - Cash Routing - RobbinsE1
//			// start of by Rotanak
//			if(isCashRequested && !isPrego && !isMinor) {
//				// start of BRGUS00287912 by rotanak
//				String[] notRequiredPages = {"ABWSS"};
//				// end of BRGUS00287912 by rotanak
//				driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER, notRequiredPages, driverArray, appNumber);
//			}
			
			if (isCashRequested) {
				String[] requiredCashPages = {"ABWSS"};
				driverManager.makeRequired(FwConstants.AFB_DRIVER, requiredCashPages, driverArray, appNumber);
			} else {
				String[] notRequiredPages = {"ABWSS"};
				driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER, notRequiredPages, driverArray, appNumber);
				String[] requiredMedicalDisablityQ = {"ABMDQ"};
				driverManager.makeRequired(FwConstants.AFB_DRIVER, requiredMedicalDisablityQ, driverArray, appNumber);
			}
			
			// end of by Rotanak
//			PCR# 35052 - School Enrollment Detail page scheduling logic - starts
				boolean fMAOnly = false;
				short[] programKey = (short[])session.get(FwConstants.AFB_PROGRAM_KEY);
				ABSchoolEnrollmentBO schoolBo = new ABSchoolEnrollmentBO();
				//PeopleHandler tempPeopleHandler=new PeopleHandler();
				//tempPeopleHandler.loadPeopleHandler(appNumber);

				List schoolList = schoolBo.findSchoolEnrollmentPeople(peopleHandler, programKey, sessionAppInPrflCollection);
				String schoolEnrollPageId[] = {"ABSEN","ABHIS"};
				String previousPageId=(String)request.get("previousPageID");
				if(previousPageId.equals("ABHHQ")){
					//start of ILIES-127671
					if(!programManager.isThisProgramRequested(programKey,FwConstants.FS_INDEX) && 
							!programManager.isThisProgramRequested(programKey,FwConstants.HC_INDEX) && 
							!programManager.isThisProgramRequested(programKey,FwConstants.MSP_INDEX) && 
							 programManager.isThisProgramRequested(programKey,FwConstants.FMA_INDEX)){
						fMAOnly = true;
					}
					if(fMAOnly){
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABSEN",driverArray,appNumber);
					}
					//end of ILIES-127671
					else{	
					if(schoolList != null && schoolList.size()>0){
					//if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABSEN",driverArray) == FwConstants.DRIVER_NOT_REQUIRED){
					driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABSEN",driverArray,appNumber);
						//}
					if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABHIS",driverArray) == FwConstants.DRIVER_NOT_REQUIRED){
						driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABHIS",driverArray,appNumber);
					}
				}else{
					driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABSEN",driverArray,appNumber);
				}
				}
				}
			//PCR# 35052 - School Enrollment Detail page scheduling logic - ends
			//mvanlenten - logic to enable/remove liquid assets
			
			// Added for the ILIES project
			// Adding additional logic for the enabling/disabling of the asset pages
			// If either SNAP, Medical Assistance or both are the only selected programs
			//avtsingh: Added for ILIES-126135. Makes the Asset pages required if Cash Assistance program selected
			//ILIES-133651 - ravrajendran - ABE - SSA Edits (State List) - Asset screens - Complete Application Development - START
//			boolean medicalCashSelected =programManager.isMedicalCashProgramRequested(programKey);
			String[] liquidPages = {"ABLAQ", "ABLAS","ABOAQ","ABOAS"};//LAST 2 VARIABLES ADDED FOR ILIES-121338,1213339
			if (saveAndExitBO.isAABDMedical(appNumber).equals(AppConstants.YES) || programManager.isMSPProgramRequested(programKey)) {
				driverManager.makeRequired(FwConstants.AFB_DRIVER,liquidPages,driverArray,appNumber);
			}else{
				driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,liquidPages,driverArray,appNumber);
			}
//			if(isCashRequested){
//				driverManager.makeRequired(FwConstants.AFB_DRIVER,liquidPages,driverArray,appNumber);
//			}
//			else {
//			  if (onlyOne || onlyBoth){
//				if(ageFlag || disFlag || longTermCare){
//					driverManager.makeRequired(FwConstants.AFB_DRIVER,liquidPages,driverArray,appNumber);
//				}else{
//					driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,liquidPages,driverArray,appNumber);
//				}
//			}
//		 	  else{
//				driverManager.makeRequired(FwConstants.AFB_DRIVER,liquidPages,driverArray,appNumber);
//			  }
//			}
			//ILIES-133651 - ravrajendran - ABE - SSA Edits (State List) - Asset screens - Complete Application Development - END
			/*//added by salikatti 121066:Medical only driver flow
			String[] AllAssetsPages = {"ABLAQ", "ABLAS", "ABOAQ", "ABOAS"};
			if (!(onlyMedical && (disFlag || ageFlag))){
				driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,AllAssetsPages,driverArray,appNumber);
			}else{
				driverManager.makeRequired(FwConstants.AFB_DRIVER,AllAssetsPages,driverArray,appNumber);
			}*/
			boolean isHpeFlag = false;
			String isHpe= (String)session.get(FwConstants.HPE_APPLICATION);
			if(isHpe != null && isHpe.equals(FwConstants.YES)){
				isHpeFlag = true;
			}
			// Added for the ILIES project
			// Don't show the page when coming back from the Submit section, and no changes have been made
			for ( int i = 0; i < driverArray.length; i++ )
			{
				String page = driverManager.getPageId( FwConstants.AFB_DRIVER, i );
				
				int currentStatus = driverManager.getAFBStatus( FwConstants.AFB_DRIVER, page, driverArray );
				if(!isHpeFlag){
				if ( currentStatus == 2 )
				{
					driverManager.makeComplete( FwConstants.AFB_DRIVER, page, driverArray, appNumber );
				}
				}
			}
			// Commented for ILIES-129379 
			// ILIES-129379: Added logic to schedule/unschedule 'Other Income Questions Page/Summary' pages based on AABD and MAGI check -- Starts
/*			String[] otherIncPages = {"ABOIQ", "ABOIS"};
			if (programManager.isMedicalOnlyProgramRequested(programKeyArray)){
				boolean agedFlag = false;
				boolean disBlindFlag = false;
				boolean aabdFlag = false;
				int prflCollSize = sessionAppInPrflCollection.size();
				for(int t=0; t<prflCollSize ; t++){
					APP_IN_PRFL_Cargo appInPrflCargo = sessionAppInPrflCollection.getCargo(t);
						INDIVIDUAL_Custom_Cargo indivCargo = peopleHandler.getIndividual(appInPrflCargo.getIndv_seq_num());
						IndividualAge age = indivCargo.getIndv_age();
						if(age.getYears() > 65) {
							agedFlag = true;
						}
					String disabled = appInPrflCargo.getDabl_resp();
					// Individual disabled/blind check
					if (!disabled.equals("N")){
						disBlindFlag = true;
					}
					if (disBlindFlag || agedFlag){
						aabdFlag = true;
						break;
					}	
				}				
                // AABD Check
				if (aabdFlag){
					driverManager.makeRequired(FwConstants.AFB_DRIVER,otherIncPages,driverArray,appNumber);	
				}
				// MAGI Check
				else
				    driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,otherIncPages,driverArray,appNumber);
			}
			else {
				int statusABOIQ = driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABOIQ",driverArray);
				int statusABOIS = driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABOIS",driverArray);
				if(statusABOIQ == FwConstants.DRIVER_NOT_REQUIRED){
				   driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABOIQ",driverArray,appNumber);
				}
				if(statusABOIS == FwConstants.DRIVER_NOT_REQUIRED){
				   driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABOIS",driverArray,appNumber);
				}
			}*/
			// ILIES-129379: Added logic to schedule/unschedule 'Other Income Questions Page/Summary' pages based on AABD and MAGI check -- Ends
			
			//added for ILIES - 133592
			FwMessageList messageList = null;
			boolean skipMessages = false;
			if (!programManager.isMedicalCashSNAPProgramRequested(programKeyArray) && !programManager.isSNAPOnlyProgramRequested(programKeyArray) && !programManager.isMedicalCashProgramRequested(programKeyArray) && !programManager.isMedicalSNAPProgramRequested(programKeyArray)
					&& !programManager.isSNAPMSPProgramRequested(programKeyArray) && !programManager.isSNAPMSPMedicalProgramRequested(programKeyArray) && !programManager.isCashMSPMedicalProgramRequested(programKeyArray)){
				APP_HSHL_RLT_Collection appHSHLRltColl = new APP_HSHL_RLT_Collection();
				APP_HSHL_RLT_Cargo appHSHLRltCargo = new APP_HSHL_RLT_Cargo();
				appHSHLRltCargo.setApp_num(appNumber);
				appHSHLRltColl.addCargo(appHSHLRltCargo);
				APP_HSHL_RLT_Cargo[] appHSHLRltCargoArray = (APP_HSHL_RLT_Cargo[])appHSHLRltColl.select(FwConstants.DAO, "findByAppNum");
				String primaryPersonIndvSeqNum = AppConstants.PRIMARY_INDV_SEQ;
				String secPerSeqNum = "";
				List<String> sec_per_fst_name = new ArrayList<String>();
				List<String>  unique_sec_per_fst_name = new ArrayList<String>();
				InstitutionBO instBO = new InstitutionBO();
				boolean  primaryApplicantAge = false;
				boolean  secondAdultPresent= false;
				for(int i = 0; i<indvCustomCollection.size(); i++){
					if(indvCustomCollection.getResult(i).getIndv_seq_num().equalsIgnoreCase("1")){
						indvAge = peopleHandler.getIndividualAge(indvCustomCollection.getResult(i).getIndv_seq_num());
							if(indvAge.getYears()>=19){
								primaryApplicantAge =true;
							}
					}else{
						indvAge = peopleHandler.getIndividualAge(indvCustomCollection.getResult(i).getIndv_seq_num());
						if(indvAge.getYears()>=19){
							secondAdultPresent =true;
						}
					}
				}
				if(primaryApplicantAge == true && secondAdultPresent == true){
					
					String spouseIndvSeqNum = instBO.isWifeOrHusband(appNumber, primaryPersonIndvSeqNum);
					List primaryChildList = getChildList(appHSHLRltCargoArray, primaryPersonIndvSeqNum);
					boolean commonChildFound = false;
					for(int i = 0; i<indvCustomCollection.size(); i++){
						if(!indvCustomCollection.getResult(i).getIndv_seq_num().equalsIgnoreCase(primaryPersonIndvSeqNum)){
							indvAge = peopleHandler.getIndividualAge(indvCustomCollection.getResult(i).getIndv_seq_num());
								if(indvAge.getYears()>=19){
									if(!indvCustomCollection.getResult(i).getIndv_seq_num().equalsIgnoreCase(spouseIndvSeqNum)){
										List secondaryChildList = getChildList(appHSHLRltCargoArray, indvCustomCollection.getResult(i).getIndv_seq_num());
											if(secondaryChildList.size()>0 && primaryChildList.size()>0 ){
												for(int j=0;j<secondaryChildList.size();j++){
													String childSeqNumber = (String) secondaryChildList.get(j);
														if(primaryChildList.contains(childSeqNumber)){
															commonChildFound = true;
														}
												}
												if(!commonChildFound){
													request.put("msg", "Y");
													unique_sec_per_fst_name.add(peopleHandler.getFirstName(indvCustomCollection.getResult(i).getIndv_seq_num()));
												}
											}else{
												request.put("msg", "Y");
												unique_sec_per_fst_name.add(peopleHandler.getFirstName(indvCustomCollection.getResult(i).getIndv_seq_num()));
											}
									}
								}
						}
					}
				}
				request.put("sec_per_seq_num",unique_sec_per_fst_name);
				request.put("pri_fst_name", peopleHandler.getFirstName(primaryPersonIndvSeqNum));
				messageList = householdMembersSummaryBO.validateSecondAdultMessage(peopleHandler.getFirstName(primaryPersonIndvSeqNum),unique_sec_per_fst_name);
				if(messageList != null&& messageList.hasMessages()){
					String secondTime = (String)request.get("secondTime");
					if (secondTime != null && secondTime.equals("Y") )
					{
						skipMessages = true;
					}
					if(skipMessages == false)
					{
						List compIds = (List)beforeCollection.get(FwConstants.PAGE_COMPONENT_LIST);
						int compIdSize = compIds.size();
						for(int i=0;i<compIdSize;i++){
							String str = new StringBuffer(AppConstants.PEOPLE).append(compIds.get(i)).toString();
							pageCollection.put(str, beforeCollection.get(str));
						}
						this.createAndLoadABHMSResponseMapsToPageCollection(appInPrflAfterCollection, pageCollection, peopleHandler, false);
						pageCollection.put(AppConstants.NO_ONE_CHECKED_MAP, noOneCheckedMap);	
						pageCollection.put(AppConstants.APP_IN_PRFL_MASTER, appInPrflAfterCollection);
						pageCollection.put(AppConstants.APP_PREG_COLLECTION, beforeCollection.get(AppConstants.APP_PREG_COLLECTION));
						pageCollection.put(AppConstants.ABSENT_PARENT_COLLECTION, beforeCollection.get(AppConstants.ABSENT_PARENT_COLLECTION));
						pageCollection.put(AppConstants.BLIND_DISABLE_COLLECTION, beforeCollection.get(AppConstants.BLIND_DISABLE_COLLECTION));
						pageCollection.put("PEOPLE_347", beforeCollection.get("PEOPLE_347"));
						pageCollection.put("PEOPLE_392", beforeCollection.get("PEOPLE_392"));
						pageCollection.put("PEOPLE_5108", beforeCollection.get("PEOPLE_5108"));
						//Added by Uma Patil BRGUS00287296
						pageCollection.put("PEOPLE_418",beforeCollection.get("PEOPLE_418"));
						pageCollection.put("PEOPLE_419",beforeCollection.get("PEOPLE_419"));
						pageCollection.put("ABHouseHoldMembersListview_ListView", beforeCollection.get("ABHouseHoldMembersListview_ListView"));
						pageCollection.put("ABHouseHoldOutsideHomeMembersListview_ListView", beforeCollection.get("ABHouseHoldOutsideHomeMembersListview_ListView"));
						pageCollection.put("ABHouseHoldMembersPregnancyListview_ListView", beforeCollection.get("ABHouseHoldMembersPregnancyListview_ListView"));
						pageCollection.put("ABHouseHoldMembersRelationshipsListview_ListView", beforeCollection.get("ABHouseHoldMembersRelationshipsListview_ListView"));
						pageCollection.put("ABHouseHoldOtherParentsListview_ListView", beforeCollection.get("ABHouseHoldOtherParentsListview_ListView"));
						pageCollection.put("ABHouseHoldMembersBlindDisableListview_ListView", beforeCollection.get("ABHouseHoldMembersBlindDisableListview_ListView"));
						pageCollection.put("ABHouseHoldMembersInstitutionListview_ListView", beforeCollection.get("ABHouseHoldMembersInstitutionListview_ListView"));
						pageCollection.put(FwConstants.PAGE_COMPONENT_LIST, beforeCollection.get(FwConstants.PAGE_COMPONENT_LIST));
						request.put(FwConstants.MESSAGE_LIST, messageList);
						request.put("secondTime", "Y");
						return;
					}
				}
				}
			//end of ILIES - 133592
			
			int abe = driverManager.getAFBStatus(FwConstants.AFB_DRIVER,
					"ABHPE", driverArray);
			if(isHpeFlag){
			if (driverManager.getAFBStatus(FwConstants.AFB_DRIVER,
						"ABHPE", driverArray) != FwConstants.DRIVER_COMPLETE) {
					driverManager.makeRequired(FwConstants.AFB_DRIVER, "ABHPE",
							driverArray, appNumber);
				
				
				}
			}
			//No need to schedule the housing anbd utlitiy page for the HPE Applicaltions
			
			if(session.get(FwConstants.HPE_APPLICATION) != null 
					&&  ((FwConstants.YES).equals(session.get(FwConstants.HPE_APPLICATION)))){
				driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABHEQ",driverArray,appNumber);
				driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABHES",driverArray,appNumber);
			}
			
			if(programManager.isMSPOnlyProgramRequested(programKey)){
				String[] reqPages = {"ABMDQ","ABMDS","ABPRG","ABHHQ","ABWSS","ABAPD","ABCHI","ABSAP","ABAPI","ABAPS","ABADS","ABHEQ","ABHES","ABATS","ABSEN","ABBNR","ABHIS","ABMAC","ABPSQ"};
				driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,reqPages,driverArray,appNumber);
			}
			// Making the current page complete in the driver
			driverManager.makeComplete(FwConstants.AFB_DRIVER, currentPageId, driverArray, appNumber);
			
			//process APTC after adding/changing individual related info
			(new ABOtherExpensesQuestionsBO()).processAPTCLogic(appNumber, driverArray);
		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("storeHouseHoldInfoSummary");
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "storeHouseHoldInfoSummary", e);
			throw fe;
		}
	}

	/**
	* Loads the House hold members details page to modify individuals
	*@param txnBean gov.wisconsin.framework.business.entities.FwTransaction
	*@author govinpr 
	*/
	public void changeHouseHoldMembersDetail(FwTransaction txnBean) throws javax.ejb.EJBException {

		try {
			Map pageCollection = txnBean.getPageCollection();
			//Map request = txnBean.getRequest();
			IndivTypeSeqBean indivTypeSeqBean = new IndivTypeSeqBean();
			INDIVIDUAL_Custom_Collection indvCustomColl = (INDIVIDUAL_Custom_Collection)pageCollection.get("INDIVIDUAL_Custom_Collection");
			//Add by smejiaibarra (ILIES-174329): Allow retrieve the INDV_SEQ_NUM from the request (If the request contains this value)
			Map request = txnBean.getRequest();
			String target_indv_seq_num = (String) request.get("TARGET_INDV_SEQ_NUM");
			
			Map session = txnBean.getSession();
			String appNumber = (String)session.get(AppConstants.APP_NUMBER);
			int[] driverArray = (int[]) session.get(FwConstants.AFB_DRIVER);
			driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER, "ABHMD", driverArray,appNumber);
			driverManager.makeRequired(FwConstants.AFB_DRIVER, "ABHMD", driverArray,appNumber);
			if(target_indv_seq_num == null){
				session.put("HOUSEHOLD_CHANGE",AppConstants.YES);
			}
			
			indivTypeSeqBean.setIndivSeqNum(target_indv_seq_num == null ? indvCustomColl.getResult(0).getIndv_seq_num() : target_indv_seq_num);
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivTypeSeqBean);
		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("changeHouseHoldMembersDetail");
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "changeHouseHoldMembersDetail", e);
			throw fe;
		}
	}	
	/**
	* Deletes the household individual information
	*@param txnBean gov.wisconsin.framework.business.entities.FwTransaction
	*@author govinpr 
	*/
	public void eraseHouseHoldMember(FwTransaction txnBean) throws javax.ejb.EJBException {

		try {
				Map request = txnBean.getRequest();
				Map session = txnBean.getSession();
				Map pageCollection = txnBean.getPageCollection();
				log(ILog.DEBUG, "Page Collection in eraseHouseHold method" +pageCollection); 
				// Getting app number from session
				String appNumber = (String)session.get(AppConstants.APP_NUMBER);
	
				boolean warningMsgFlag = false;
				int[] driverArray = (int[])session.get(FwConstants.AFB_DRIVER);
				// Getting warning message details string from request
				String warningMesgs = (String)request.get(FwConstants.WARNING_MSG_DETAILS);
				
				// Getting APP_IN_PRFL_Collection from session
				APP_IN_PRFL_Collection sessionAppInPrflCollection = (APP_IN_PRFL_Collection) session.get(AppConstants.APP_IN_PRFL_MASTER);
				// Getting APP_IN_PRFL_Collection from before collection 
				Map beforeCollection = (Map) session.get(FwConstants.BEFORE_COLLECTION);
				// Getting people handler from session
				PeopleHandler peopleHandler = (PeopleHandler) session.get(AppConstants.INDIV_MASTER_HANDLER);
				// Getting APP_IN_PRFL_Collection from page collection
				APP_IN_PRFL_Collection appInPrflAfterCollection = (APP_IN_PRFL_Collection) pageCollection.get("APP_IN_PRFL_Collection");
				// Getting NO_ONE_Collection from page collection
				NO_ONE_Collection noOneCollection = (NO_ONE_Collection) pageCollection.get("NO_ONE_Collection");
				// Getting NO_ONE_CHECKED map from session
				Map noOneCheckedMap = (Map) beforeCollection.get(AppConstants.NO_ONE_CHECKED_MAP);
				
				// Getting individual custom collection from page collection 					
				INDIVIDUAL_Custom_Collection indvCustomColl = (INDIVIDUAL_Custom_Collection)pageCollection.get("INDIVIDUAL_Custom_Collection");
				String indvSeqNum = indvCustomColl.getResult(0).getIndv_seq_num();
				// Initializing/getting the session and page app indv profile collection size 			
				//int sessionAppInPrflCollectionSize =  sessionAppInPrflCollection.size();
				// Initializing array for a number of questions (assuming the number of questions is static)
	    		
				// Added DRUG_TRTMNT_PROG and PAROLE_PROB_VIOL fields for ILIES-129516
				short[] questionsFieldArray = {IApplicationManager.DISABLED_PERSON, IApplicationManager.DRUG_FELON, IApplicationManager.DRUG_TRTMNT_PROG, IApplicationManager.PAROLE_PROB_VIOL, IApplicationManager.RECEIVE_FS_IN_OTHER_STATE, IApplicationManager.SSI_BENEFIT_RESP,IApplicationManager.CASH_BENEFIT_RESP};
				
				// Calling a method populate dummy cargos into collection, when before collection doesn't match with the after collection			
				applicationManager.preparePageColl(appInPrflAfterCollection,sessionAppInPrflCollection,questionsFieldArray);
		
				ABHouseholdMembersSummaryBO summaryBO = new ABHouseholdMembersSummaryBO();
				summaryBO.validateQuestions(appInPrflAfterCollection, noOneCollection, noOneCheckedMap);
				
				// Setting individual sequence number in indivTypeSeqBean 
				IndivTypeSeqBean indivTypeSeqBean = new IndivTypeSeqBean();
				indivTypeSeqBean.setIndivSeqNum(indvSeqNum);
				//PCR# 35063 - add type also - so the we will come to know which infor user tried to delete first time
				indivTypeSeqBean.setType("I");
				//This change is done to get the first name for the validation erase message in summary page
				String name=peopleHandler.getFirstName(indvSeqNum);
				//Removed by smejiaibarra for ILIES-182303: Destructive dialog box
				//This code was created to display the warning message when the user is trying to remove a member from the HH. This function now is deprecated.
				/*warningMsgFlag = this.determineSummaryErase(beforeCollection, indivTypeSeqBean, warningMesgs, "146", summaryBO,name);

				if(!warningMsgFlag){
					// Putting messagelist into the request
					request.put(FwConstants.MESSAGE_LIST, summaryBO.getMessageList());
					// Transalates the response profile after validation
					applicationManager.translateProfileResponseAfterValidation(appInPrflAfterCollection, sessionAppInPrflCollection, questionsFieldArray);
					// populate people components into page collection from before collection
					List compIds = (List)beforeCollection.get(FwConstants.PAGE_COMPONENT_LIST);
					int compIdSize = compIds.size();
					for(int i=0;i<compIdSize;i++){
						String str = new StringBuffer(AppConstants.PEOPLE).append(compIds.get(i)).toString();
						pageCollection.put(str, beforeCollection.get(str));
					}
					// Load Maps into page collection
					this.createAndLoadABHMSResponseMapsToPageCollection(appInPrflAfterCollection, pageCollection, peopleHandler, false);
					pageCollection.put(AppConstants.NO_ONE_CHECKED_MAP, noOneCheckedMap);	
					pageCollection.put(AppConstants.APP_IN_PRFL_MASTER, appInPrflAfterCollection);
					pageCollection.put(AppConstants.APP_PREG_COLLECTION, beforeCollection.get(AppConstants.APP_PREG_COLLECTION));
					pageCollection.put(AppConstants.ABSENT_PARENT_COLLECTION, beforeCollection.get(AppConstants.ABSENT_PARENT_COLLECTION));
					pageCollection.put(AppConstants.BLIND_DISABLE_COLLECTION, beforeCollection.get(AppConstants.BLIND_DISABLE_COLLECTION));
					pageCollection.put("PEOPLE_347", beforeCollection.get("PEOPLE_347"));								
					pageCollection.put("ABHouseHoldMembersListview_ListView", beforeCollection.get("ABHouseHoldMembersListview_ListView"));
					pageCollection.put("ABHouseHoldOutsideHomeMembersListview_ListView", beforeCollection.get("ABHouseHoldOutsideHomeMembersListview_ListView"));
					pageCollection.put("ABHouseHoldMembersPregnancyListview_ListView", beforeCollection.get("ABHouseHoldMembersPregnancyListview_ListView"));
					pageCollection.put("ABHouseHoldMembersRelationshipsListview_ListView", beforeCollection.get("ABHouseHoldMembersRelationshipsListview_ListView"));
					pageCollection.put("ABHouseHoldOtherParentsListview_ListView", beforeCollection.get("ABHouseHoldOtherParentsListview_ListView"));
					pageCollection.put("ABHouseHoldMembersBlindDisableListview_ListView", beforeCollection.get("ABHouseHoldMembersBlindDisableListview_ListView"));
					pageCollection.put("ABHouseHoldMembersInstitutionListview_ListView", beforeCollection.get("ABHouseHoldMembersInstitutionListview_ListView"));
					pageCollection.put(FwConstants.PAGE_COMPONENT_LIST, beforeCollection.get(FwConstants.PAGE_COMPONENT_LIST));
					pageCollection.put(AppConstants.INDV_TYPE_SEQ_BEAN, indivTypeSeqBean);
					session.put(FwConstants.BEFORE_COLLECTION, pageCollection);
					//Loading and merging APP_RGST in ABHMD (ILIES-174329)
					setValuesForCard(request, session,appNumber,peopleHandler);
					return;
				}*/
				INDIVIDUAL_Custom_Cargo individual = peopleHandler.getIndividual(indvSeqNum);
				IndividualAge indvAge = peopleHandler.getIndividualAge(indvSeqNum);
				int indvYears = indvAge.getYears();
				String sexInd = individual.getSex_ind();

				ABHouseHoldMemberBO houseHoldMemberBo = new ABHouseHoldMemberBO();

				//Deleting the absent parent details
				ABAbsentParentBO absentParentBo = new ABAbsentParentBO();
				
				if(absentParentBo.isParentForChild(indvSeqNum,appNumber,peopleHandler) && !(FwConstants.DRIVER_COMPLETE == driverManager.getAFBStatus(FwConstants.AFB_DRIVER, "ABMDS", driverArray))){
					driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABAPD", driverArray, appNumber);
					driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABCHI", driverArray, appNumber);
					driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABAPI", driverArray, appNumber);
					driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABADS", driverArray, appNumber);

					
					INDIVIDUAL_Custom_Collection sortedIndvCustColl = peopleHandler.sortIndividuals(peopleHandler.getInHomeIndividuals());
					 if(sortedIndvCustColl != null && !(sortedIndvCustColl.isEmpty())){
						 if(sessionAppInPrflCollection!= null){
							for (int i = 0; i < sortedIndvCustColl.size(); i++){
								String indNum = sortedIndvCustColl.getResult(i).getIndv_seq_num();
								IndividualAge inAge = peopleHandler.getIndividualAge(indNum);
								if (inAge.getYears() < 19){
									for (APP_IN_PRFL_Cargo appINPRFLCargo : sessionAppInPrflCollection.getResults()) {
										if (appINPRFLCargo.getIndv_seq_num().equals(indNum)) {
											applicationManager.makeRequiredAndPersist(IApplicationManager.OTHER_APP_RESP, appINPRFLCargo);								
										}
									}
								}
							}	 
						 }
					 }
				}
				boolean absentParentFlag = false;
				if(sexInd.equals(AppConstants.SEX_IND_FEMALE) && absentParentBo.checkUnMarriedPregWomen(sessionAppInPrflCollection,peopleHandler,indvSeqNum,appNumber)){
					houseHoldMemberBo.deleteAbsentParentUnBornChild(indvSeqNum, appNumber);
					absentParentFlag = true;
				}

				String lvngArrangType = individual.getLive_arng_typ();
				// Delete individual
				peopleHandler.deleteIndividual(appNumber, indvSeqNum);
				int peopleCount = 0;
				//ILIES-312006 start
				int pplInCount = 0;
				int pplOutCount = 0;
				ABHouseHoldMemberBO houseHoldBO = new ABHouseHoldMemberBO();
				peopleCount = houseHoldBO.loadHouseholdCount(appNumber);
				pplInCount = houseHoldBO.loadHouseholdInCount(appNumber);
				pplOutCount = houseHoldBO.loadHouseholdOutCount(appNumber);
				if("HO".equalsIgnoreCase(lvngArrangType)){
					pplInCount = pplInCount - 1;
				}else{
					pplOutCount = pplOutCount - 1;
				}
				houseHoldBO.storeHouseholdMemberCounts(appNumber, String.valueOf(peopleCount - 1),String.valueOf(pplInCount), String.valueOf(pplOutCount));
				//ILIES-312006 end
				short[] programKeyArray = (short[])session.get(FwConstants.AFB_PROGRAM_KEY);
				if(indvYears<19){
					absentParentFlag = houseHoldMemberBo.deleteAbsentParent(indvSeqNum, appNumber);	
//					houseHoldMemberBo.deleteAbsentParent(indvSeqNum, appNumber);
//					absentParentFlag = true;										
				}
				if(absentParentFlag){
					if(!absentParentBo.checkAbsentParentRequired(peopleHandler,sessionAppInPrflCollection,appNumber,programKeyArray)){
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABAPD", driverArray, appNumber);
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABADS", driverArray, appNumber);
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABAPI", driverArray, appNumber);
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABCHI", driverArray, appNumber);
					}
				}
				
				
				// Deleting household relationship details of the individual
				houseHoldMemberBo.deleteHouseholdRelations(indvSeqNum,appNumber);
				// Deleting pregnancy details, if the indvidual is female and isPregnantable
				if(sexInd.equals(AppConstants.SEX_IND_FEMALE) && indvYears >= 10 && indvYears < 60){
					log(ILog.DEBUG, "IndvSeqnumber and app Number before Delete Pregnancy()" +indvSeqNum+" "+appNumber); 
					houseHoldMemberBo.deletePregnancy(indvSeqNum, appNumber);
				}

				//Deleting the new born information
				if(indvYears == 0 || (indvYears == 1 && indvAge.getMonths() < 1)){
					houseHoldMemberBo.deleteNewBorn(indvSeqNum, appNumber);										
				}
				
				// Deleting blind and disabled information
				houseHoldMemberBo.deleteDisability(indvSeqNum, appNumber);
				APP_IN_DABL_Collection dablColl = houseHoldMemberBo.getDABLPersonColl(appNumber);
				if(dablColl.size()==0){
					driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABDIS",driverArray,appNumber);
				}
				
				
				// Page scheduling logic
				indvCustomColl = peopleHandler.getInHomeIndividuals();
				int indvCustCollSize = indvCustomColl.size();
				INDIVIDUAL_Custom_Collection indvOutChildCustColl = peopleHandler.getInAndOutOfHomeIndividuals(appNumber);
				int indvOutCustCollSize = indvOutChildCustColl.size();
				// Making relationship page not required when there is only one household individual
				if(indvCustCollSize == 1 || indvOutCustCollSize == 0){
					//if house hold doesn't have  only one pregnant individual then make absoluteNotRequired on ABHHR 
					APP_IN_PRFL_Cargo appInPrflCargo = applicationManager.getAppInProfile(sessionAppInPrflCollection,"1");
					if(appInPrflCargo.getPreg_resp().equals(FwConstants.NO)){
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABHHR",driverArray,appNumber);
					}	
				}
				
				
				boolean prgFlag = false;
				boolean jobIncomeFlag =false;
				String jobIncomePages[] = {"ABJIQ","ABJIS"};
				INDIVIDUAL_Custom_Cargo indvCustCargo = null;
				for(int i=0; i <indvCustCollSize;i++ ){
					indvCustCargo = indvCustomColl.getResult(i);
					indvAge = indvCustCargo.getIndv_age();
					if(indvCustCargo.getSex_ind().equals(AppConstants.SEX_IND_FEMALE)){
						if(indvAge.getYears() >= 10 && indvAge.getYears()<60){
							prgFlag = true;
						}
					}
					if(indvAge.getYears() >= 16){
						jobIncomeFlag = true;
					}
					if(prgFlag && jobIncomeFlag)
						break;
				}
				if(!prgFlag){
					driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABPRG",driverArray,appNumber);
				}
				if(!jobIncomeFlag){
					driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,jobIncomePages,driverArray,appNumber);
				}
				//to check if the individual is in home or outside home individual
				int size=sessionAppInPrflCollection.size();
				boolean inAppInPrfl=false;
				for(int i=0;i<size;i++)
				{
					APP_IN_PRFL_Cargo sessionAppInPrflCargo=sessionAppInPrflCollection.getCargo(i);
					if(sessionAppInPrflCargo.getIndv_seq_num().equals(indvSeqNum))
						inAppInPrfl=true;
				}
					
			   //details delete logic
				APP_IN_PRFL_Cargo appInPrflDelCargo=new APP_IN_PRFL_Cargo();
			   if(inAppInPrfl)
			   {
			   		appInPrflDelCargo = applicationManager.getAppInProfile(sessionAppInPrflCollection,indvSeqNum);

			   		//now i am deleting this person information from the session
			   		sessionAppInPrflCollection = applicationManager.deleteIndividualFromAppIndividualProfile(sessionAppInPrflCollection,indvSeqNum);
			   }
			  
			  //ABDCD 				  
			  if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABDCD",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl) {				 
				  String updatedSeqNum  = summaryBO.deleteDependentCare(appNumber,indvSeqNum);
				  if(!updatedSeqNum.equals("0")){
					APP_IN_PRFL_Cargo appInPrflCargo = applicationManager.getAppInProfile(sessionAppInPrflCollection,updatedSeqNum);
					applicationManager.makeAbsoluteNotRequired(IApplicationManager.DEPENDENT_CARE,appInPrflCargo);
				  }	
				  
				  if(applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.DEPENDENT_CARE)){
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABDCD",driverArray,appNumber);
				  }				 
			  }			  
			  //ABVAD	- Vehicle Asset Details
				if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABVAD",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
					if(applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.OTHR_ASET_VEHICLE).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED){

						summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABVAD");

						if(applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.OTHR_ASET_VEHICLE)){
							String [] pageIds = {"ABVAD","ABVAT"};
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,pageIds,driverArray,appNumber);
						}
					} 
				}
				 //ABRPD	- Real Property Details
				if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABRPD",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
					if(applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.OTHR_ASET_REAL_RESIDENCE).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED){

						summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABRPD");

						if(applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.OTHR_ASET_REAL_RESIDENCE)){
							String [] pageIds = {"ABRPD","ABRPT"};
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,pageIds,driverArray,appNumber);
						}
					} 
				}
				 //ABPPD	- Personal Property Details
				if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABPPD",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
					if(applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.OTHR_ASET_ADDITIONAL_ASSET).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED){

						summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABPPD");

						if(applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.OTHR_ASET_ADDITIONAL_ASSET)){
							String [] pageIds = {"ABAAT","ABPPD"};
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,pageIds,driverArray,appNumber);
						}
					} 
				}
				 //ABBAD	- Burial Asset Details
				if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABBAD",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
					if(applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.OTHR_ASET_BURIAL).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED){

						summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABBAD");

						if(applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.OTHR_ASET_BURIAL)){
							String [] pageIds = {"ABBAD","ABBAT"};
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,pageIds,driverArray,appNumber);
						}
					} 
				}
				 //ABLID	- Life Insurance Details
				if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABLID",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
					if(applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.OTHR_ASET_LIFE_INSURANCE).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED){

						summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABLID");

						if(applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.OTHR_ASET_LIFE_INSURANCE)){
							String [] pageIds = {"ABLID","ABLIT"};
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,pageIds,driverArray,appNumber);
						}
					} 
				}
			//ABEDT 				  
			if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABEDT",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
				if(applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.EMPLOYMENT).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED
					|| applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.JOB_IN_KIND).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED
					|| applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.ON_STRIKE).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED){
						
					summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABEDT");
					
					if(applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.EMPLOYMENT) 
						&& applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.JOB_IN_KIND)
						&& applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.ON_STRIKE)){
						  driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABEDT",driverArray,appNumber);
					}
				} 
			}
				
			//ABSED	
			if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABSED",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
				if(applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.SELF_EMPLOYMENT).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED){

					summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABSED");

					if(applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.SELF_EMPLOYMENT)){
						  driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABSED",driverArray,appNumber);
					}
				} 
			}

			//ABUID	
			if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABUID",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
				if(applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.OTHER_INCOME).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED){

					summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABUID");

					if(applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.OTHER_INCOME)){
						  driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABUID",driverArray,appNumber);
					}
				} 
			}

			//ABSCD	
			if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABSCD",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
				if(applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.SHELTER_COST).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED){

					summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABSCD");

					if(applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.SHELTER_COST)){
						String [] pageIds = {"ABSCD","ABSCT"};
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,pageIds,driverArray,appNumber);
					}
				} 
			}
				
			//ABUCD	
			if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABUCD",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
				if(applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.UTILITY_EXPENSE).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED){

					summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABUCD");

					if(applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.UTILITY_EXPENSE)){
						String [] pageIds = {"ABUCD","ABUCT"};
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,pageIds,driverArray,appNumber);
					}
				} 
			}

			//ABMED	
			if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABMED",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
				if(applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.MEDICARE_ENTITLE).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED){

					summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABMED");

					if(applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.MEDICARE_ENTITLE)){
						  driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABMED",driverArray,appNumber);
					}
				} 
			}

			//ABSEN	
			if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABSEN",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
				summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABSEN");
			}

			if((indvYears == 0 || (indvYears >= 5 && indvYears <= 59)) && inAppInPrfl){

				ABSchoolEnrollmentBO schoolBo = new ABSchoolEnrollmentBO();
				List schoolList = schoolBo.findSchoolEnrollmentPeople(peopleHandler, programKeyArray, sessionAppInPrflCollection);

				if(schoolList == null){
					driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABSEN",driverArray,appNumber);
				}
			}
			
			//start of BRGUS00286206 added by rotanak
			// added by rotanak
			//ABCCD
			if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABCCD",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
				if(applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.NEED_CHILD_CARE_RESP).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED){

					summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABCCD");

					if(applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.NEED_CHILD_CARE_RESP)){
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABCAP",driverArray,appNumber);
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABCDI",driverArray,appNumber);
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABCCD",driverArray,appNumber);
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABCCS",driverArray,appNumber);
					}
				} 
			}
			
			//ABSBD
			if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABSBD",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
				if(applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.BURIAL_REQUEST_RESP).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED){

					summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABSBD");
					summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABSDB");

					if(applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.BURIAL_REQUEST_RESP)){
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABSBD",driverArray,appNumber);
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABSDB",driverArray,appNumber);
					}
				} 
			}
			//end of BRGUS00286206 added by rotanak
			
			//ABMEA //ABMDD //ABMRE
			if((driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABMEA",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl)
					|| (driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABMDD",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl)
						||(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABMRE",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl)){
				if((applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.EARLY_ON_RESP).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED)
						|| (applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.SPECIAL_EDUCATION_CLASS_RESP).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED)
							|| (applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.MI_REHAB_RESP).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED)){

					summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABMEA");
					
					if((applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.EARLY_ON_RESP))
							|| (applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.SPECIAL_EDUCATION_CLASS_RESP))
								|| (applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.MI_REHAB_RESP))){
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABMEA",driverArray,appNumber);
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABMDD",driverArray,appNumber);
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABMRE",driverArray,appNumber);
					}
				} 
			}
			
			/*//ABMDD
			if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABMDD",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
				if(applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.SPECIAL_EDUCATION_CLASS_RESP).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED){

					summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABMDD");
					
					if(applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.SPECIAL_EDUCATION_CLASS_RESP)){
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABMDD",driverArray,appNumber);
					}
				} 
			}
			
			//ABMRE
			if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABMRE",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
				if(applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.MI_REHAB_RESP).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED){

					summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABMRE");
					
					if(applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.MI_REHAB_RESP)){
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABMRE",driverArray,appNumber);
					}
				} 
			}*/
			
			//ABMCD
			if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABMCD",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
				if(applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.MEDICAL_COVERAGE_RESP).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED){

					summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABMCD");
					
					if(applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.MEDICAL_COVERAGE_RESP)){
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABMCD",driverArray,appNumber);
					}
				} 
			}
			
			//ABMDA
			if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABMDA",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
				if(applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.APPLIED_FOR_DISABILITY_RESP).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED){

					summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABMDA");
					
					if(applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.APPLIED_FOR_DISABILITY_RESP)){
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABMDA",driverArray,appNumber);
					}
				} 
			}
			
			//ABSTD
			if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABSTD",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
				if(applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.TRBL_SER_RESP).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED){

					summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABSTD");
					
					if(applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.TRBL_SER_RESP)){
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABSTD",driverArray,appNumber);
					}
				} 
			}
			
			//ABMBD
			if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABMBD",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
				if(applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.MEDICAL_EXPENSE).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED){

					summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABMBD");
					
					if(applicationManager.isAppInPrflRespNotRequired(sessionAppInPrflCollection,IApplicationManager.MEDICAL_EXPENSE)){
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABMBD",driverArray,appNumber);
					}
				} 
			}
			
			//ABATS
			if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABATS",driverArray) != FwConstants.DRIVER_NOT_REQUIRED && inAppInPrfl){
				if(applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.ADVANCED_PREMIUM_TAX_INFO_RESP).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED
						|| applicationManager.getAppInPrflResponse(appInPrflDelCargo,IApplicationManager.ADVANCED_FEDERAL_TRIBE_INFO_RESP).charAt(0) != IApplicationManager.STATUS_NOT_REQUIRED){

					summaryBO.deleteDetailRecords(appNumber,indvSeqNum,"ABATS");
					
					ABHouseHoldMemberBO houseHoldBo = new ABHouseHoldMemberBO();
					APP_INDV_Collection appIndvColl = (APP_INDV_Collection) houseHoldBo.loadAppIndvColl(appNumber);
					
					for(int i=0; i<appIndvColl.size(); i++){
						APP_INDV_Cargo appIndvCargo = appIndvColl.getCargo(i);
							if(appIndvCargo.getIndv_seq_num().equals(indvSeqNum)){
								appIndvCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
								appIndvCargo.setAptc_eligible("N");
								APP_INDV_Collection appIndvUpdateColl = new APP_INDV_Collection();
								appIndvUpdateColl.addCargo(appIndvCargo);
								appIndvUpdateColl= (APP_INDV_Collection) appIndvUpdateColl.persist(FwConstants.DAO);
							}
					}
					
				} 
			}
			if(programKeyArray!=null && programKeyArray.length>8 && (programKeyArray[0] == 1 || programKeyArray[8] == 1)){
				AFBNavigationBO bo = new AFBNavigationBO(); 
				bo.persitAppRqstBackDtMonths(appNumber);
			}
			peopleHandler=new PeopleHandler();
			peopleHandler.loadPeopleHandler(appNumber);
			session.put(AppConstants.INDIV_MASTER_HANDLER,peopleHandler);
			List fatherMotherList =absentParentBo.findAbsentParent(peopleHandler,appInPrflAfterCollection,appNumber,programKeyArray);
			session.put(AppConstants.PARENTS_LIST,fatherMotherList);
			//process APTC after adding/changing individual related info
			(new ABOtherExpensesQuestionsBO()).processAPTCLogic(appNumber, driverArray);
		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("eraseHouseHoldMember");
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "eraseHouseHoldMember", e);
			throw fe;
		}
	}		
	
	/**
	* Loads the House hold members details page to add an individual
	*@param txnBean gov.wisconsin.framework.business.entities.FwTransaction
	*@author govinpr 
	*/
	public void addHouseHoldIndividual(FwTransaction txnBean) throws javax.ejb.EJBException {

		try {
			Map session = txnBean.getSession();
			Map pageCollection = txnBean.getPageCollection();
			Map request = txnBean.getRequest();
			String pageAction=(String)request.get("PAGE_ACTION");
			String personAdd = null;
			//PCR# 34436 - start
			ABHouseHoldMemberBO houseHoldBO = new ABHouseHoldMemberBO();
			String appNumber =(String) session.get(AppConstants.APP_NUMBER);
			int peopleCount = 0;
			//PCR# 34436 - end
			if(pageAction.equals("ABHMSAdd1")){
				personAdd = "I"; // In Home
			//PCR# 34436 - start	
				peopleCount = houseHoldBO.loadHouseholdCount(appNumber);
				//ILIES-186178 Starts
				session.put("personFromSummary", peopleCount+1);
				//houseHoldBO.storeHouseholdMemberDetail(appNumber, String.valueOf(peopleCount + 1));
				//ILIES-186178 Ends
			//PCR# 34436 - end	
			} else {
				personAdd = "O"; // Outside Home
			//PCR# 34436 - start
				peopleCount = houseHoldBO.loadChildOutOfHomeCount(appNumber);
				houseHoldBO.storeChildOutofHomeDetail(appNumber, String.valueOf(peopleCount + 1));
			//PCR# 34436 - end	
			}
			
			session.put(AppConstants.PERSON_ADD, personAdd);
			int[] driverArray = (int[]) session.get(FwConstants.AFB_DRIVER);
			driverManager.makeAddNew(FwConstants.AFB_DRIVER,"ABHMD",driverArray,(String)session.get(AppConstants.APP_NUMBER));
			driverManager.makeAddNew(FwConstants.AFB_DRIVER,"ABMDQ",driverArray,(String)session.get(AppConstants.APP_NUMBER));
			String[] requiredPages = {"ABHMS","ABJIS", "ABOIS", "ABHES", "ABESM","ABHIS"};
			driverManager.makeRequired(FwConstants.AFB_DRIVER,requiredPages,driverArray,(String)session.get(AppConstants.APP_NUMBER));
			// Added for ILIES - 150483 - START
			boolean flag = false;
			String isHpe= (String)session.get(FwConstants.HPE_APPLICATION);
			if(isHpe != null && isHpe.equals(FwConstants.YES)){
				flag = true;
			}			
			if(flag){
				String[] requiredHpePage = {"ABHPE"};
				driverManager.makeRequired(FwConstants.AFB_DRIVER,requiredHpePage,driverArray,(String)session.get(AppConstants.APP_NUMBER));
			}
			
			short[] programKey = (short[])session.get(FwConstants.AFB_PROGRAM_KEY);
			if(programManager.isMSPOnlyProgramRequested(programKey)){
				driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,new String[]{"ABMDQ","ABMDS"},driverArray,appNumber);
			}
			
			// Added for ILIES - 150483 - END
			txnBean.setPageCollection(pageCollection);
		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addHouseHoldIndividual");
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "addHouseHoldIndividual", e);
			throw fe;
		}
	}	
	/**
	* Loads the House hold pregnancy details page to modify pregnancy information
	*@param txnBean gov.wisconsin.framework.business.entities.FwTransaction
	*@author govinpr 
	*/
	public void changePregnancyInfo(FwTransaction txnBean) throws javax.ejb.EJBException {

		try {
			Map pageCollection = txnBean.getPageCollection();
			//Map request = txnBean.getRequest();
			IndivTypeSeqBean indivTypeSeqBean = new IndivTypeSeqBean();
			APP_IN_PREG_Collection appInPregColl = (APP_IN_PREG_Collection)pageCollection.get("APP_IN_PREG_Collection");
			indivTypeSeqBean.setIndivSeqNum(appInPregColl.getCargo(0).getIndv_seq_num());
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivTypeSeqBean);
		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("changePregnancyInfo");
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "changePregnancyInfo", e);
			throw fe;
		}
	}			
	/**
	* Deletes the pregnancy information of an individual in summary 
	*@param txnBean gov.wisconsin.framework.business.entities.FwTransaction
	*@author govinpr 
	*/
	public void erasePregnancyInfo(FwTransaction txnBean) throws javax.ejb.EJBException {

		try {
				Map request = txnBean.getRequest();
				Map session = txnBean.getSession();
				Map pageCollection = txnBean.getPageCollection();
				
				// Getting app number from session
				String appNumber = (String)session.get(AppConstants.APP_NUMBER);
	
				boolean warningMsgFlag = false;
				String warningMesgs = (String)request.get(FwConstants.WARNING_MSG_DETAILS);
								
				// Getting APP_IN_PRFL_Collection from session
				APP_IN_PRFL_Collection sessionAppInPrflCollection = (APP_IN_PRFL_Collection) session.get(AppConstants.APP_IN_PRFL_MASTER);
				// Getting APP_IN_PRFL_Collection from before collection 
				Map beforeCollection = (Map) session.get(FwConstants.BEFORE_COLLECTION);
				// Getting people handler from session
				PeopleHandler peopleHandler = (PeopleHandler) session.get(AppConstants.INDIV_MASTER_HANDLER);
				// Getting APP_IN_PRFL_Collection from page collection
				APP_IN_PRFL_Collection appInPrflAfterCollection = (APP_IN_PRFL_Collection) pageCollection.get("APP_IN_PRFL_Collection");
				// Getting NO_ONE_Collection from page collection
				NO_ONE_Collection noOneCollection = (NO_ONE_Collection) pageCollection.get("NO_ONE_Collection");
				// Getting NO_ONE_CHECKED map from session
				Map noOneCheckedMap = (Map) beforeCollection.get(AppConstants.NO_ONE_CHECKED_MAP);
				//Getting pregnancy collection from before collection
				APP_IN_PREG_Collection appInPregBeforeColl = (APP_IN_PREG_Collection) beforeCollection.get(AppConstants.APP_PREG_COLLECTION);				
				
				// Getting indiv seq number from list view component				
				APP_IN_PREG_Collection appInPregColl = (APP_IN_PREG_Collection)pageCollection.get("APP_IN_PREG_Collection");
				String indvSeqNum = appInPregColl.getCargo(0).getIndv_seq_num();

				// Initializing/getting the session and page app indv profile collection size 			
				int sessionAppInPrflCollectionSize =  sessionAppInPrflCollection.size();
				// Initializing array for a number of questions (assuming the number of questions is static)
				short[] questionsFieldArray = {IApplicationManager.DISABLED_PERSON, IApplicationManager.DRUG_FELON, IApplicationManager.DRUG_TRTMNT_PROG, IApplicationManager.PAROLE_PROB_VIOL, IApplicationManager.RECEIVE_FS_IN_OTHER_STATE, IApplicationManager.SSI_BENEFIT_RESP,IApplicationManager.CASH_BENEFIT_RESP};
				
				// Calling a method populate dummy cargos into collection, when before collection doesn't match with the after collection			
				applicationManager.preparePageColl(appInPrflAfterCollection,sessionAppInPrflCollection,questionsFieldArray);

				// Calling business validations to check any other validations are there
				ABHouseholdMembersSummaryBO summaryBO = new ABHouseholdMembersSummaryBO();
				summaryBO.validateQuestions(appInPrflAfterCollection, noOneCollection, noOneCheckedMap);

				IndivTypeSeqBean indivTypeSeqBean = new IndivTypeSeqBean();
				indivTypeSeqBean.setIndivSeqNum(indvSeqNum);
				//PCR# 35063 - add type also - so the we will come to know which infor user tried to delete first time
				indivTypeSeqBean.setType("P");
				
				// Determine to throw warning message or continue with erase logic				
				String name=peopleHandler.getFirstName(indvSeqNum);
				warningMsgFlag = this.determineSummaryErase(beforeCollection, indivTypeSeqBean, warningMesgs, "32171", summaryBO,name);

				if(!warningMsgFlag){
					// Putting messagelist into the request
					request.put(FwConstants.MESSAGE_LIST, summaryBO.getMessageList());
					// Translate response profile after validation
					applicationManager.translateProfileResponseAfterValidation(appInPrflAfterCollection, sessionAppInPrflCollection, questionsFieldArray);
					// populate people components into page collection from before collection
					List compIds = (List)beforeCollection.get(FwConstants.PAGE_COMPONENT_LIST);
					int compIdSize = compIds.size();
					for(int i=0;i<compIdSize;i++){
						String str = new StringBuffer(AppConstants.PEOPLE).append(compIds.get(i)).toString();
						pageCollection.put(str, beforeCollection.get(str));
					}
					// Load Maps into page collection
					this.createAndLoadABHMSResponseMapsToPageCollection(appInPrflAfterCollection, pageCollection, peopleHandler, false);
					pageCollection.put(AppConstants.APP_PREG_COLLECTION, beforeCollection.get(AppConstants.APP_PREG_COLLECTION));
					pageCollection.put(AppConstants.ABSENT_PARENT_COLLECTION, beforeCollection.get(AppConstants.ABSENT_PARENT_COLLECTION));
					pageCollection.put(AppConstants.BLIND_DISABLE_COLLECTION, beforeCollection.get(AppConstants.BLIND_DISABLE_COLLECTION));
					pageCollection.put(AppConstants.NO_ONE_CHECKED_MAP, noOneCheckedMap);	
					pageCollection.put(AppConstants.APP_IN_PRFL_MASTER, appInPrflAfterCollection);
					pageCollection.put("PEOPLE_347", beforeCollection.get("PEOPLE_347"));
					pageCollection.put("ABHouseHoldMembersListview_ListView", beforeCollection.get("ABHouseHoldMembersListview_ListView"));
					//PCR# 35063 - Child Out of Home collection was missing to set back 
					pageCollection.put("ABHouseHoldOutsideHomeMembersListview_ListView", beforeCollection.get("ABHouseHoldOutsideHomeMembersListview_ListView"));
					pageCollection.put("ABHouseHoldMembersPregnancyListview_ListView", beforeCollection.get("ABHouseHoldMembersPregnancyListview_ListView"));
					pageCollection.put("ABHouseHoldMembersRelationshipsListview_ListView", beforeCollection.get("ABHouseHoldMembersRelationshipsListview_ListView"));
					pageCollection.put("ABHouseHoldOtherParentsListview_ListView", beforeCollection.get("ABHouseHoldOtherParentsListview_ListView"));
					pageCollection.put("ABHouseHoldMembersBlindDisableListview_ListView", beforeCollection.get("ABHouseHoldMembersBlindDisableListview_ListView"));
					pageCollection.put("ABHouseHoldMembersInstitutionListview_ListView", beforeCollection.get("ABHouseHoldMembersInstitutionListview_ListView"));
					pageCollection.put(FwConstants.PAGE_COMPONENT_LIST, beforeCollection.get(FwConstants.PAGE_COMPONENT_LIST));
					pageCollection.put(AppConstants.INDV_TYPE_SEQ_BEAN, indivTypeSeqBean);
					session.put(FwConstants.BEFORE_COLLECTION, pageCollection);
					//Loading and merging APP_RGST in ABHMD (ILIES-174329)
					setValuesForCard(request, session,appNumber,peopleHandler);
					return;					
				}

				//Deleting pregnancy information
				APP_IN_PREG_Collection appInPregAfterColl = new APP_IN_PREG_Collection();
				int appInPregBeforeCollSize = appInPregBeforeColl.size();
				for(int p=0;p<appInPregBeforeCollSize;p++){
					String indSeq = appInPregBeforeColl.getCargo(p).getIndv_seq_num();
					if(indvSeqNum.equals(indSeq)){
						appInPregBeforeColl.getCargo(p).setSrc_app_ind("AF");
						appInPregAfterColl.addCargo(appInPregBeforeColl.getCargo(p));
						break;
					}
				}
				// Deleting pregnancy information
				summaryBO.deletePregnancyInfo(appInPregAfterColl);

				//Deleting absent parent info for unborn child
				//IndividualAge indvAge = peopleHandler.getIndividualAge(indvSeqNum);
				//int indvYears = indvAge.getYears();
				String sexInd = peopleHandler.getIndividual(indvSeqNum).getSex_ind();
				ABAbsentParentBO absentParentBo = new ABAbsentParentBO();
				ABHouseHoldMemberBO houseHoldMemberBo = new ABHouseHoldMemberBO();
				boolean absentParentFlag = false;

				if(sexInd.equals(AppConstants.SEX_IND_FEMALE) && absentParentBo.checkUnMarriedPregWomen(sessionAppInPrflCollection,peopleHandler,indvSeqNum,appNumber)){
					houseHoldMemberBo.deleteAbsentParentUnBornChild(indvSeqNum, appNumber);
					absentParentFlag = true;
				}
				int[] driverArray = (int[]) session.get(FwConstants.AFB_DRIVER);
				short[] programKeyArray = (short[])session.get(FwConstants.AFB_PROGRAM_KEY);
				short responseId = IApplicationManager.PREGNANCY;
				// Change session APP IN PRFL, if the pregnancy is deleted  
				for(int i =0; i < sessionAppInPrflCollectionSize;i++){
					APP_IN_PRFL_Cargo sessionAppInPrflCargo = sessionAppInPrflCollection.getCargo(i);
					if(sessionAppInPrflCargo.getIndv_seq_num().equals(indvSeqNum)){
						//now i am updating the session cargo
						sessionAppInPrflCargo.setPreg_resp(FwConstants.NO);
						//added new line : to persist in database
						applicationManager.makeAbsoluteNotRequiredAndPersist(responseId,sessionAppInPrflCargo);
						//now i need to check how many people in the house hold 
						int houseHoldSize = peopleHandler.getNumberOfIndividuals();
						if(houseHoldSize == 1){
							driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABHHR", driverArray, appNumber);
						}
					}
				}

				if(absentParentFlag){
					if(!absentParentBo.checkAbsentParentRequired(peopleHandler,sessionAppInPrflCollection,appNumber,programKeyArray)){
						driverManager.makeAbsoluteNotRequired(FwConstants.AFB_DRIVER,"ABAPD", driverArray, appNumber);
					}
				}
				
		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("erasePregnancyInfo");
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "erasePregnancyInfo", e);
			throw fe;
		}
	}
	

	/**
	* Comment here
	*/
	public void addHouseHoldPregnancyIndividual(FwTransaction txnBean) throws javax.ejb.EJBException {

		try {
			Map session = txnBean.getSession();
			Map request = txnBean.getRequest();
			Map pageCollection = txnBean.getPageCollection();
			String indvSeqNum = (String)request.get("individual");
			ABHouseholdMembersSummaryBO summaryBO = new ABHouseholdMembersSummaryBO();
			// Getting app number from session
			String appNumber = (String)session.get(AppConstants.APP_NUMBER);
			if(indvSeqNum.equals(AppConstants.SELECT_DEFAULT_OPTION)){
				summaryBO.validatePregnancyAdd();
				// Putting messagelist into the request
				request.put(FwConstants.MESSAGE_LIST, summaryBO.getMessageList());
				// Getting APP_IN_PRFL_Collection from before collection 
				Map beforeCollection = (Map) session.get(FwConstants.BEFORE_COLLECTION);
				APP_IN_PRFL_Collection appInPrflAfterCollection = (APP_IN_PRFL_Collection)pageCollection.get("APP_IN_PRFL_Collection");
				APP_IN_PRFL_Collection sessionAppInPrflCollection = (APP_IN_PRFL_Collection) session.get(AppConstants.APP_IN_PRFL_MASTER);
	    		
				// Added DRUG_TRTMNT_PROG and PAROLE_PROB_VIOL fields for ILIES-129516
				short[] questionsFieldArray = {IApplicationManager.DISABLED_PERSON, IApplicationManager.DRUG_FELON, IApplicationManager.DRUG_TRTMNT_PROG, IApplicationManager.PAROLE_PROB_VIOL, IApplicationManager.RECEIVE_FS_IN_OTHER_STATE, IApplicationManager.SSI_BENEFIT_RESP,IApplicationManager.CASH_BENEFIT_RESP};
				// Calling a method populate dummy cargos into collection, when before collection doesn't match with the after collection			
				applicationManager.preparePageColl(appInPrflAfterCollection,sessionAppInPrflCollection,questionsFieldArray);
				// Translate response profile after validation
				applicationManager.translateProfileResponseAfterValidation(appInPrflAfterCollection, sessionAppInPrflCollection, questionsFieldArray);
				// populate people components into page collection from before collection
				List compIds = (List)beforeCollection.get(FwConstants.PAGE_COMPONENT_LIST);
				int compIdSize = compIds.size();
				for(int i=0;i<compIdSize;i++){
					String str = new StringBuffer(AppConstants.PEOPLE).append(compIds.get(i)).toString();
					pageCollection.put(str, beforeCollection.get(str));
				}
				// Getting people handler from session
				PeopleHandler peopleHandler = (PeopleHandler) session.get(AppConstants.INDIV_MASTER_HANDLER);

				this.createAndLoadABHMSResponseMapsToPageCollection(appInPrflAfterCollection, pageCollection, peopleHandler, false);
				pageCollection.put(AppConstants.APP_PREG_COLLECTION, beforeCollection.get(AppConstants.APP_PREG_COLLECTION));
				pageCollection.put(AppConstants.ABSENT_PARENT_COLLECTION, beforeCollection.get(AppConstants.ABSENT_PARENT_COLLECTION));		
				pageCollection.put(AppConstants.NO_ONE_CHECKED_MAP, beforeCollection.get(AppConstants.NO_ONE_CHECKED_MAP));	
				pageCollection.put(AppConstants.APP_IN_PRFL_MASTER, beforeCollection.get(AppConstants.APP_IN_PRFL_MASTER));
				pageCollection.put("PEOPLE_347", beforeCollection.get("PEOPLE_347"));
				pageCollection.put("ABHouseHoldMembersListview_ListView", beforeCollection.get("ABHouseHoldMembersListview_ListView"));
				pageCollection.put("ABHouseHoldOutsideHomeMembersListview_ListView", beforeCollection.get("ABHouseHoldOutsideHomeMembersListview_ListView"));
				pageCollection.put("ABHouseHoldMembersPregnancyListview_ListView", beforeCollection.get("ABHouseHoldMembersPregnancyListview_ListView"));
				pageCollection.put("ABHouseHoldMembersRelationshipsListview_ListView", beforeCollection.get("ABHouseHoldMembersRelationshipsListview_ListView"));
				pageCollection.put("ABHouseHoldOtherParentsListview_ListView", beforeCollection.get("ABHouseHoldOtherParentsListview_ListView"));
				pageCollection.put("ABHouseHoldMembersBlindDisableListview_ListView", beforeCollection.get("ABHouseHoldMembersBlindDisableListview_ListView"));
				pageCollection.put("ABHouseHoldMembersInstitutionListview_ListView", beforeCollection.get("ABHouseHoldMembersInstitutionListview_ListView"));
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST, beforeCollection.get(FwConstants.PAGE_COMPONENT_LIST));
				pageCollection.put(AppConstants.INDV_TYPE_SEQ_BEAN, beforeCollection.get(AppConstants.INDV_TYPE_SEQ_BEAN));
				return;
			}
			IndivTypeSeqBean indivTypeSeqBean = new IndivTypeSeqBean();
			if(!("").equals(indvSeqNum)){
				indivTypeSeqBean.setIndivSeqNum(indvSeqNum);				
			}
			//if relation ship page is not required we are making ABHHR page complete
			int[] driverArray = (int[]) session.get(FwConstants.AFB_DRIVER);
			/*if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABHHR",driverArray) == FwConstants.DRIVER_NOT_REQUIRED){
				driverManager.makeComplete(FwConstants.AFB_DRIVER,"ABHHR",driverArray,(String)session.get(AppConstants.APP_NUMBER));
			}*/

			if(driverManager.getAFBStatus(FwConstants.AFB_DRIVER,"ABPRD",driverArray) == FwConstants.DRIVER_NOT_REQUIRED){
				driverManager.makeComplete(FwConstants.AFB_DRIVER,"ABPRD",driverArray,(String)session.get(AppConstants.APP_NUMBER));
			}