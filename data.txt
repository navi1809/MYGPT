package gov.nv.dwss.interfaces.mmistriggerfilebatch.service.dataservice;

import java.sql.SQLException;
import java.util.Collections;
import java.util.List;

import gov.nv.dwss.fw.batch.exception.BatchBusinessException;
import gov.nv.dwss.interfaces.mmistriggerfilebatch.constants.MMISTriggerFileBatchQueryConstants;
import gov.nv.dwss.interfaces.mmistriggerfilebatch.model.MMISTriggerFileBatchEvmEvrPersonRecord;
import gov.nv.dwss.interfaces.mmistriggerfilebatch.model.MMISTriggerFileBatchInputParam;
import gov.nv.dwss.interfaces.mmistriggerfilebatch.service.dataservice.mapper.MMISTriggerFileBatchMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;

import gov.nv.dwss.domain.dao.sor.MmisTriggerSorDao;
import gov.nv.dwss.domain.record.SorRecord;
import gov.nv.dwss.fw.batch.common.AbstractSorDataService;


@Service
public class MMISTriggerFileBatchDataService extends AbstractSorDataService {

    @Autowired
    MmisTriggerSorDao mmisTriggerSorDao;

    public List<MMISTriggerFileBatchEvmEvrPersonRecord> fetchEvmEvrPersonRecords(MMISTriggerFileBatchInputParam inputRecord) throws BatchBusinessException {
        try {
            String query = getQueryWithSchemaName(MMISTriggerFileBatchQueryConstants.FETCH_ELIG_RECORDS);
            Object[] object = new Object[]{inputRecord.getInputRecMedicaidId(),
                    inputRecord.getMinYearBin(), inputRecord.getMaxYearBin(),
                    inputRecord.getMinYearBin(), inputRecord.getMinMonthBin(),
                    inputRecord.getMaxYearBin(), inputRecord.getMaxMonthBin()
            };
            MMISTriggerFileBatchMapper mapper = new MMISTriggerFileBatchMapper();
            return jdbcTemplate.query(query, mapper, object);
        } catch (EmptyResultDataAccessException e) {
            return Collections.emptyList();
        }catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                if (sqlErrorCode <= -104) {
                    MMISTriggerFileBatchInputParam.setSqlErrorFlag(true);
                } else {
                    MMISTriggerFileBatchInputParam.setSqlErrorFlag(true);
                }
            } else {
                MMISTriggerFileBatchInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }

    public Integer fetchPersonRecord(String medicaidId) throws BatchBusinessException {
        try {
            String sqlQuery = getQueryWithSchemaName(MMISTriggerFileBatchQueryConstants.FETCH_PERSON_RECORDS);
            Object[] object = new Object[]{medicaidId};
            return jdbcTemplate.query(sqlQuery, resultSet -> {
                if (resultSet.next()) {
                    return resultSet.getInt("UPI");
                }
                return null;
            }, object);
        } catch (Exception e) {
            if (e.getCause() instanceof SQLException) {
                SQLException sqlException = (SQLException) e.getCause();
                int sqlErrorCode = sqlException.getErrorCode();
                if (sqlErrorCode == -811) {
                    MMISTriggerFileBatchInputParam.setSqlErrorFlag(true);
                } else {
                    MMISTriggerFileBatchInputParam.setSqlErrorFlag(true);
                }
            } else {
                MMISTriggerFileBatchInputParam.setSqlErrorFlag(false);
            }
        }
        return null;
    }

    public void insertMmisFileTriggerRecords(List<SorRecord> mmistriggerRecordlist) {
        mmisTriggerSorDao.batchInsert(mmistriggerRecordlist);
    }


}
