
**1. What will be the output?**
```java
public class Test1 {
    public static void main(String[] args) {
        String a = "abc";
        String b = new String("abc");
        System.out.println(a == b);
        System.out.println(a.equals(b));
    }
}
```
**Answer:**
```
false
true
```
- `==` checks reference, and `new String()` creates a new object.
- `.equals()` checks value, which is the same.

---

**2. What is the output of the following?**
```java
public class Test2 {
    public static void main(String[] args) {
        Integer x = 128;
        Integer y = 128;
        System.out.println(x == y);
    }
}
```
**Answer:**
```
false
```
- Integer caching only applies from `-128` to `127`. `128` is not cached.

---

**3. What will this print?**
```java
public class Test3 {
    public static void main(String[] args) {
        String s1 = "Hello";
        String s2 = "Hel" + "lo";
        System.out.println(s1 == s2);
    }
}
```
**Answer:**
```
true
```
- The compiler optimizes `"Hel" + "lo"` to `"Hello"` at compile time.

---

**4. Predict the output:**
```java
class Parent {
    static void print() {
        System.out.println("Parent");
    }
}
class Child extends Parent {
    static void print() {
        System.out.println("Child");
    }
    public static void main(String[] args) {
        Parent obj = new Child();
        obj.print();
    }
}
```
**Answer:**
```
Parent
```
- Static methods are **not overridden**, they are hidden.

---

**5. What will be the result?**
```java
public class Test5 {
    public static void main(String[] args) {
        int i = 0;
        i = i++ + ++i;
        System.out.println(i);
    }
}
```
**Answer:**
```
2
```
- Post-increment uses `0`, pre-increment becomes `2`: `i = 0 + 2`.

---

### üåê **Advanced Java ‚Äì Threads & Collections**

---

**6. Output?**
```java
public class ThreadTest implements Runnable {
    public void run() {
        System.out.println("Running");
    }

    public static void main(String[] args) {
        Thread t = new Thread(new ThreadTest());
        t.run();  // Not start()
    }
}
```
**Answer:**
```
Running
```
- `.run()` is called like a normal method, not a new thread.

---

**7. Given the below, what‚Äôs the output?**
```java
import java.util.*;

public class MapTest {
    public static void main(String[] args) {
        Map<String, String> map = new HashMap<>();
        map.put(null, "One");
        map.put(null, "Two");
        System.out.println(map.size());
        System.out.println(map.get(null));
    }
}
```
**Answer:**
```
1
Two
```
- `HashMap` allows one `null` key, and the second `put` replaces the first.

---

**8. What will this produce?**
```java
public class StringTest {
    public static void main(String[] args) {
        String s = "abc";
        s.concat("def");
        System.out.println(s);
    }
}
```
**Answer:**
```
abc
```
- Strings are immutable. `concat` returns a new string, which is not used.

---

### üå± **Spring Boot / Spring JPA / REST**

---

**9. What does this controller return?**
```java
@RestController
public class HelloController {

    @GetMapping("/hello")
    public String hello() {
        return null;
    }
}
```
**Answer:**
- Returns **HTTP 204 No Content**. Spring handles `null` as no content for `@RestController`.

---

**10. What happens if `@Entity` class has no `@Id`?**  
```java
@Entity
public class Product {
    private String name;
}
```
**Answer:**
- Runtime exception: **`org.hibernate.AnnotationException: No identifier specified for entity`**

---

**11. What‚Äôs wrong with this repository?**
```java
public interface UserRepo extends JpaRepository<User, Long> {
    User findByEmail(String email);
    List<User> findByAge(int age);
    void deleteByName(String name);
}
```
**Answer:**
- `void deleteByName(String name);` is valid only **if return type is `long` or `void`**, but it's better to use `@Modifying`.

---

**12. Consider the following:**
```java
@Query("SELECT u FROM User u WHERE u.age = :age")
List<User> getByAge(@Param("age") int age);
```
**What happens if `@Param("age")` is not provided?**  
**Answer:**
- Runtime error: **`IllegalArgumentException: Parameter with that name [age] not found`**

---

### üóÉÔ∏è **SQL (MySQL/PostgreSQL)**

---

**13. Given a table `employee(name, salary)`, get 2nd highest salary:**
```sql
SELECT MAX(salary)
FROM employee
WHERE salary < (SELECT MAX(salary) FROM employee);
```
**Answer:**
- This returns the second-highest salary.

---

**14. What does this SQL do?**
```sql
SELECT name FROM employee e
WHERE EXISTS (
    SELECT 1 FROM department d WHERE d.manager_id = e.id
);
```
**Answer:**
- Returns employees who are managers of some department.

---

**15. Find duplicates in a column `email` of `users` table:**
```sql
SELECT email, COUNT(*) 
FROM users 
GROUP BY email 
HAVING COUNT(*) > 1;
```
**Answer:**
- Shows all duplicate emails with their count.

Awesome üòé Let's dive into **some trickier code puzzles and internals**, especially around **Spring Boot, REST APIs, Spring JPA**, and mix in a bit of advanced **Java behavior**.

---

## üî• Advanced Java + Spring Boot Trick Questions

---

### **1. Spring Boot ‚Äì Bean Overriding Conflict**

```java
@Configuration
public class AppConfig {
    @Bean
    public String message() {
        return "From Config";
    }
}

@RestController
public class HelloController {
    @Bean
    public String message() {
        return "From Controller";
    }
}
```

**Q: Will the application start?**

**Answer:**
‚ùå No.  
You can't declare a `@Bean` method inside a `@RestController` (or any `@Component`) directly unless it‚Äôs a `@Configuration`. Spring will throw `BeanDefinitionOverrideException` or a conflict due to duplicate bean names.

---

### **2. Spring Boot ‚Äì Multiple DataSources**

**Q: What happens if you configure two data sources but don‚Äôt mark any as `@Primary` or use `@Qualifier`?**

**Answer:**  
Spring will throw:  
```
No qualifying bean of type 'DataSource' available: expected single matching bean but found 2
```

To fix it, either mark one with `@Primary` or use `@Qualifier` where needed.

---

### **3. Spring Boot + JPA: Lazy Loading Outside Transaction**

```java
@Entity
public class Book {
    @ManyToOne(fetch = FetchType.LAZY)
    private Author author;
}
```

```java
@GetMapping("/book/{id}")
public Book getBook(@PathVariable Long id) {
    return bookRepository.findById(id).get();
}
```

**Q: What happens when you call `/book/1`?**

**Answer:**  
- The `author` property will not load (Lazy), and if Jackson tries to serialize it after the transaction is closed, you'll get:  
  ```
  org.hibernate.LazyInitializationException: could not initialize proxy - no Session
  ```

**Fix:** Use `@Transactional` at service level or DTO pattern to control loading.

---

### **4. Spring JPA ‚Äì Dirty Checking**

```java
@Transactional
public void updateUserEmail(Long id) {
    User u = userRepository.findById(id).get();
    u.setEmail("new@example.com");
    // no repository.save() here
}
```

**Q: Will the email be updated in DB?**

**Answer:**  
‚úÖ Yes.  
JPA performs **dirty checking** ‚Äî any change to managed entities inside a transaction is automatically flushed to DB.

---

### **5. Java Trick ‚Äì Hidden NullPointerException**

```java
public class TrickyNull {
    static String s = null;

    public static void main(String[] args) {
        if (s.equals("hello"))
            System.out.println("Match");
        else
            System.out.println("No match");
    }
}
```

**Q: What is the output?**

**Answer:**
üí• Throws `NullPointerException` because `s` is `null` and you‚Äôre calling `.equals()` on it.

**Fix:** Use `"hello".equals(s)` instead ‚Äî it avoids NPE.

---

### **6. Spring REST ‚Äì RequestBody & Validation**

```java
@PostMapping("/register")
public ResponseEntity<?> register(@RequestBody @Valid UserDTO dto) {
    return ResponseEntity.ok("OK");
}
```

**Q: What happens if the JSON is missing fields?**

**Answer:**
- Spring will return `400 Bad Request` with validation error messages in the response body.  
- You can customize this by implementing a `@ControllerAdvice` with a custom `MethodArgumentNotValidException` handler.

---

### **7. Spring Boot Actuator Exposure**

**Q: By default, which endpoints are exposed in Spring Boot Actuator 3.x?**

**Answer:**
- Only **`/actuator/health`** and **`/actuator/info`** are exposed to the web by default. Others require enabling explicitly in `application.properties`:
```properties
management.endpoints.web.exposure.include=*
```

---

### **8. Spring Boot ‚Äì Custom Starter**

**Q: How can you build a custom Spring Boot starter?**

**Answer:**  
- Create a JAR with your auto-config and dependencies.
- Add a `spring.factories` file (for Spring Boot 2.x) or `META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports` for 3.x.
```properties
org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.example.MyAutoConfig
```

---

### **9. Java Puzzle ‚Äì String Pool + Interning**

```java
public class InternTest {
    public static void main(String[] args) {
        String a = new String("hello");
        String b = "hello";
        System.out.println(a == b);
        System.out.println(a.intern() == b);
    }
}
```

**Answer:**
```
false
true
```
- `.intern()` returns a reference from the string pool, which matches `"hello"`.

---

### **10. SQL: Fetch Top N per Group**

**Q: Write a SQL query to get the highest salary employee per department.**

**Answer:**
```sql
SELECT *
FROM employee e
WHERE salary = (
  SELECT MAX(salary)
  FROM employee
  WHERE department_id = e.department_id
);
```

Alternative (if supported):
```sql
SELECT *
FROM (
  SELECT *, ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) rn
  FROM employee
) t
WHERE rn = 1;
```

