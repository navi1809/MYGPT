package com.example.batch;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ImportMedicaidBatchApplication {
    public static void main(String[] args) {
        SpringApplication.run(ImportMedicaidBatchApplication.class, args);
    }
}


package com.example.batch.model;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "TWNBUYIN_MDCR_EXT")
public class H2BuyinMdcrExtEntity {
    @Id
    private String medicaidId;

    private String medicareClaimNumber;
    private String ssn;
    private String firstName;
    private String lastName;

    // Getters and Setters
    public String getMedicaidId() {
        return medicaidId;
    }
    public void setMedicaidId(String medicaidId) {
        this.medicaidId = medicaidId;
    }
    public String getMedicareClaimNumber() {
        return medicareClaimNumber;
    }
    public void setMedicareClaimNumber(String medicareClaimNumber) {
        this.medicareClaimNumber = medicareClaimNumber;
    }
    public String getSsn() {
        return ssn;
    }
    public void setSsn(String ssn) {
        this.ssn = ssn;
    }
    public String getFirstName() {
        return firstName;
    }
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
    public String getLastName() {
        return lastName;
    }
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}


package com.example.batch.model;

public class LineData {
    private String recordType;
    private String medicaidId;
    private String rawLine;

    public String getRecordType() {
        return recordType;
    }
    public void setRecordType(String recordType) {
        this.recordType = recordType;
    }
    public String getMedicaidId() {
        return medicaidId;
    }
    public void setMedicaidId(String medicaidId) {
        this.medicaidId = medicaidId;
    }
    public String getRawLine() {
        return rawLine;
    }
    public void setRawLine(String rawLine) {
        this.rawLine = rawLine;
    }
}



package com.example.batch.model;

import java.util.ArrayList;
import java.util.List;

public class MedicaidGroup {
    private String medicaidId;
    private List<LineData> lines = new ArrayList<>();

    public String getMedicaidId() {
        return medicaidId;
    }
    public void setMedicaidId(String medicaidId) {
        this.medicaidId = medicaidId;
    }
    public List<LineData> getLines() {
        return lines;
    }
    public void addLine(LineData line) {
        this.lines.add(line);
    }
}


package com.example.batch.batch;

import com.example.batch.model.LineData;
import com.example.batch.model.MedicaidGroup;
import org.springframework.batch.item.*;
import org.springframework.batch.item.file.FlatFileItemReader;

public class GroupingItemReader implements ItemReader<MedicaidGroup> {

    private final FlatFileItemReader<LineData> delegate;
    private LineData nextLine;

    public GroupingItemReader(FlatFileItemReader<LineData> delegate) {
        this.delegate = delegate;
    }

    @Override
    public MedicaidGroup read() throws Exception {
        if (nextLine == null) {
            nextLine = delegate.read();
        }
        if (nextLine == null) {
            return null;
        }

        String currentId = nextLine.getMedicaidId();
        MedicaidGroup group = new MedicaidGroup();
        group.setMedicaidId(currentId);

        while (nextLine != null && currentId.equals(nextLine.getMedicaidId())) {
            group.addLine(nextLine);
            nextLine = delegate.read();
        }

        return group;
    }
}


package com.example.batch.batch;

import com.example.batch.model.H2BuyinMdcrExtEntity;
import com.example.batch.model.LineData;
import com.example.batch.model.MedicaidGroup;
import org.springframework.batch.item.ItemProcessor;

public class MedicaidGroupProcessor implements ItemProcessor<MedicaidGroup, H2BuyinMdcrExtEntity> {
    @Override
    public H2BuyinMdcrExtEntity process(MedicaidGroup group) {
        H2BuyinMdcrExtEntity entity = new H2BuyinMdcrExtEntity();
        entity.setMedicaidId(group.getMedicaidId());

        for (LineData line : group.getLines()) {
            switch(line.getRecordType()) {
                case "B INFO":
                    entity.setLastName(parseLastName(line.getRawLine()));
                    entity.setFirstName(parseFirstName(line.getRawLine()));
                    entity.setSsn(parseSsn(line.getRawLine()));
                    break;

                case "HICN":
                    entity.setMedicareClaimNumber(parseHicn(line.getRawLine()));
                    break;

                // You can add more parsing as needed
            }
        }
        return entity;
    }

    private String parseLastName(String line) {
        // Dummy parsing logic
        return line.length() > 25 ? line.substring(25, 40).trim() : "UNKNOWN";
    }

    private String parseFirstName(String line) {
        // Dummy parsing logic
        return line.length() > 40 ? line.substring(40, 55).trim() : "UNKNOWN";
    }

    private String parseSsn(String line) {
        return line.length() > 7 ? line.substring(7, 16).trim() : "UNKNOWN";
    }

    private String parseHicn(String line) {
        return line.length() > 5 ? line.substring(5, 18).trim() : "UNKNOWN";
    }
}


package com.example.batch.batch;

import com.example.batch.model.H2BuyinMdcrExtEntity;
import com.example.batch.model.LineData;
import com.example.batch.model.MedicaidGroup;

import javax.sql.DataSource;

import org.springframework.batch.core.*;
import org.springframework.batch.core.configuration.annotation.*;
import org.springframework.batch.item.database.*;
import org.springframework.context.annotation.*;
import org.springframework.core.io.*;
import org.springframework.jdbc.core.namedparam.*;
import org.springframework.batch.item.file.*;
import org.springframework.batch.item.file.mapping.*;
import org.springframework.batch.item.file.builder.*;
import org.springframework.boot.autoconfigure.batch.*;
import org.springframework.boot.jdbc.*;
import org.springframework.boot.jdbc.DataSourceBuilder;

@EnableBatchProcessing
@Configuration
public class ImportMedicaidBatch {

    @Bean
    public FlatFileItemReader<LineData> lineDataReader() {
        return new FlatFileItemReaderBuilder<LineData>()
                .name("lineDataReader")
                .resource(new FileSystemResource("src/main/resources/Sample.txt"))
                .lineMapper(new LineMapper<LineData>() {
                    @Override
                    public LineData mapLine(String line, int lineNumber) {
                        String trimmed = line.trim();
                        String recordType = trimmed.length() >= 7 ? trimmed.substring(0, 7).trim() : "UNKNOWN";
                        String medicaidId = trimmed.replaceAll("[^0-9]", "").substring(0, 11);
                        LineData data = new LineData();
                        data.setRecordType(recordType);
                        data.setMedicaidId(medicaidId);
                        data.setRawLine(line);
                        return data;
                    }
                }).build();
    }

    @Bean
    public GroupingItemReader groupingItemReader(FlatFileItemReader<LineData> lineDataReader) {
        return new GroupingItemReader(lineDataReader);
    }

    @Bean
    public ItemProcessor<MedicaidGroup, H2BuyinMdcrExtEntity> processor() {
        return new MedicaidGroupProcessor();
    }

    @Bean
    public JdbcBatchItemWriter<H2BuyinMdcrExtEntity> writer(DataSource dataSource) {
        return new JdbcBatchItemWriterBuilder<H2BuyinMdcrExtEntity>()
                .dataSource(dataSource)
                .sql("INSERT INTO TWNBUYIN_MDCR_EXT (MEDIC_BLNG_SQ_NMB, MEDCR_CLM_NMB, B_LST_NM, B_FRST_NM, B_SSN) " +
                     "VALUES (:medicaidId, :medicareClaimNumber, :lastName, :firstName, :ssn) ")
                .beanMapped()
                .build();
    }

    @Bean
    public Job importMedicaidDataJob(JobBuilderFactory jobs,
                                      StepBuilderFactory steps,
                                      GroupingItemReader reader,
                                      ItemProcessor<MedicaidGroup, H2BuyinMdcrExtEntity> processor,
                                      ItemWriter<H2BuyinMdcrExtEntity> writer) {
        return jobs.get("importMedicaidDataJob")
                .start(steps.get("importStep")
                        .<MedicaidGroup, H2BuyinMdcrExtEntity>chunk(100)
                        .reader(reader)
                        .processor(processor)
                        .writer(writer)
                        .build())
                .build();
    }
}

