// To prepare query string for the given form
function prepareFormRequestParams(frm){
var requestString = "";
	for(var i=0;i<frm.length;i++){
		var elem = frm.elements[i];
		if(elem!=null){
			if(elem.name!=null&&elem.name!="undefined"){
				if(requestString==""){
					requestString+=elem.name+"="+elem.value;
				}
				else{
					requestString+="&"+elem.name+"="+elem.value;
				}
			}
			else if(elem.id!=null&&elem.id!="undefined"){
				if(requestString==""){
					requestString+=elem.name+"="+elem.value;
				}
				else{
					requestString+="&"+elem.name+"="+elem.value;
				}
			}
		}
	}
	return requestString;
}

//Function to set the value of the TARGET of the given form
function setFormTarget(frm,val){
   	frm.target = val;
    return true;
}

//Function to set all the first letters in a given string to Caps
function setAllFirstCaps(frmObj) {
	var index, tmpStr, tmpChar, preString, postString, strLen;

	tmpStr = frmObj.value.toLowerCase();
	strLen = tmpStr.length;
	if (strLen > 0)  {
		for (index = 0; index < strLen; index++)  {
			if (index == 0)  {
				tmpChar = tmpStr.substring(0,1).toUpperCase();
				postString = tmpStr.substring(1,strLen);
				tmpStr = tmpChar + postString;
			}
			else 
			{
				tmpChar = tmpStr.substring(index, index+1);
				if (tmpChar == " " && index < (strLen-1))  {
					tmpChar = tmpStr.substring(index+1, index+2).toUpperCase();
					preString = tmpStr.substring(0, index+1);
					postString = tmpStr.substring(index+2,strLen);
					tmpStr = preString + tmpChar + postString;
         		}
      		}
   		}
	}
	frmObj.value = tmpStr;
}

/********************************************************************
*	Name		:	isGroupChecked()
*	Description :	Function to validate the Program selection
*					and ensure that atleast one programs is selected
*	param1		:	grpElem
*	param2		:	chkNum - the number of elements(radio/checkbox) 
*					that should be checked
*	returns		:	boolean
*********************************************************************/
	function isGroupChecked(grpElem, chkNum){
		var cnt = 0;
		if(grpElem==null){
			return false;
		}
		if(grpElem.length>0){
			for(var i=0;i<grpElem.length;i++){					
				if(grpElem[i].checked){				
					cnt++;					
				}					
			}			
		}
		else{
			if(grpElem.checked){				
				cnt++;		
			}			
		}
		if(cnt>=chkNum){
			return true;
		}
		else{
			return false;
		}
	}

/*****************************************************************
 * Name    		: setDateValue()
 * Description  : Function to set the values for Date fields
 * param1   	: beanId - the Bean Id of the Date field 
 * dateVal      : date Value in the format 'mm/dd/yyyy'
 *****************************************************************/
function setDateValue(beanId, dateVal){

try{

	var dateObj = new Date(dateVal);

	var monthElem = document.getElementById("month"+beanId);

	var dateElem = document.getElementById("date"+beanId);

	var yearElem = document.getElementById("year"+beanId);

		monthElem.value=dateObj.getMonth() + 1;

		dateElem.value=dateObj.getDate();

		yearElem.value=dateObj.getYear();

}catch(Exception){}

}

//Function to set the selected value of a dropdown
function setSelected(combo,selVal){
	for(i=0;i<combo.length;i++){
		if(combo.options[i].value==selVal){
			combo.options[i].selected = true;
		}
	}
}

function isCompleteForm(thisfrm){	
	var manFields = getMandatoryFields(thisfrm);	
	if(manFields!=null&&manFields.length>0){
		return true;
	}
	else{		
		var frmElemIds = new Array();
		for(var i=0;i<thisfrm.length;i++){
			var elem = thisfrm.elements[i];
			if(elem.name=="dynaLoad"){
				break;
			}
			if(elem!=null&&elem.lblDesc!=null&&elem.lblDesc!=""){
				//&&(elem.type=="text"||elem.type=="select-one"||
				//elem.type=="select-multiple"||elem.type=="text-area")){
				if(elem.HELPID!=null){
					addtoUniqueElementArray(frmElemIds,elem.HELPID);					
				}
				else if(elem.helpid!=null){
					addtoUniqueElementArray(frmElemIds,elem.helpid);							
				}				
				else if(elem.name!=null){
					addtoUniqueElementArray(frmElemIds,elem.name);						
				}	
				else if(elem.id!=null){
					addtoUniqueElementArray(frmElemIds,elem.id);							
				}	
			}
		}		
		var ret =  isCompleteFields(frmElemIds,'OR');
		return ret;
	}
	return true;
}

function getMandatoryFields(frm){
	var manElemIdArr = new Array();
	for(var i=0;i<frm.length;i++){		
		var vals = getElementValidations(frm.elements[i]);		
		if(vals!=null&&vals.length>0){
			for(var j=0;j<vals.length;j++){
				if(vals[j]!=null&& vals[j]!=""&&vals[j].indexOf("isComplete(")>=0){					
					if(frm.elements[i].helpid!=null){
						manElemIdArr.push(frm.elements[i].HELPID);	
					}
					else if(frm.elements[i].name!=null){
						manElemIdArr.push(frm.elements[i].name);	
					}	
					else if(frm.elements[i].id!=null){
						manElemIdArr.push(frm.elements[i].id);	
					}	
				}
			}
		}
	}
	return manElemIdArr;
}
function getElementValidations(elem){
	var valFunctions = new Array();
	var validate =elem.validate;
	if ((validate !=null) && (validate!="undefined")&&(validate!="null")){			
		var startPos;
		do{
			startPos=0;
			var fun;
			var endPos=validate.indexOf(";");
			if(endPos > 0){
				fun=validate.substring(startPos,endPos);				
				startPos=endPos+1;
				validate=validate.substring(startPos,validate.length);						
			}else{
				fun=validate;
			}
			var spcs = doTrim(fun);		
			if(spcs!=null&&spcs!="null"&&spcs!=""){
				var netfunc = parseFunctionName(fun);				
				valFunctions.push(netfunc);
			}				
		}while(endPos != -1);
	}
	return valFunctions;
}


function addtoUniqueElementArray(arrObj,valtoAdd){
	var ret = true;
	for(var k=0;k<arrObj.length;k++){
		if(arrObj[k]==valtoAdd){
			ret = false;
			break;
		}
	}
	if(ret){
		arrObj.push(valtoAdd);
	}
	return ret;
}

function setKeyValues(keys,vals){
	var k,m,ind1,ind2=0;
    var sub1,sub2 = "";    
	do {
	 	ind1 = keys.indexOf(":");
	 	ind2 = vals.indexOf(":");
	   	if(ind1 == -1){
	   		sub1 = keys.substring(k);
	   	}else{
	   		sub1 = keys.substring(k,ind1);
	   	}
	   	if(ind2 == -1){
	   		sub2 = vals.substring(k);
	   	}else{
	   		sub2 = vals.substring(k,ind2);
	   	}
	   	m = document.getElementById(sub1);
	   	try{
	    	if(opener.document.getElementById(sub1) != null){
	   			m = opener.document.getElementById(sub1);
	   		} 
	   	}catch(e){}
	   	m.value = sub2;
	   	keys = keys.substring(ind1+1);
	   	vals = vals.substring(ind2+1);
	}while (ind1 != -1);
	
	try{
		if(opener.document.getElementById(sub1) != null){
			window.close();
		} 
	}catch(Exception){}

}

//Function to display characters as uppercase, even when lower case chars are enetered. Use OnKeyPress event to invoke this method.
function uppercase()
{
  key = window.event.keyCode;
  if ((key > 0x60) && (key < 0x7B))
    window.event.keyCode = key-0x20;
}

//Function to pop up a confirmation Dialog for Deletes & then submit the form.
function warnOnDelete(frm,act,val){
 	//var response = confirm('Delete data: Continue?');
 	var response = confirmAction('Do you wish to delete the data?');
 	if(response){
 		return setActionFieldAndSubmit(frm,act,val);
 	}else{
 		return false;
	}
}

//Function to pop up confirm dialogs with custom messages.Returns true if OK was clicked. Returns false if Cancel was clicked.
function confirmAction(msg){
	var fld = confirm(msg);
	return fld;
}

//Function to submit form if - enter key is pressed and PAGE_ACTION is not 'null or empty'.
function handleKeyPress(){
	var frm = document.form1;
	var defButton = document.getElementById("DefaultPageAction");
	
	if (pageSubmit == false && window.event && window.event.srcElement)
  	{	
		var tagName = window.event.srcElement.tagName;
		var fldName = window.event.srcElement.name;
		var elemType = window.event.srcElement.type;
		var inp = document.getElementById("PAGE_ACTION");
		//alert(window.event.keyCode);
		if(window.event.keyCode == 32){//SpaceBar
			if(tagName == "A"){
				window.event.srcElement.click();
			}else return true;
    	}else if (window.event.keyCode == 13) {//EnterKey
			if (tagName !="TEXTAREA") {
				if (inp!=null){
			    	if (inp.value != null && inp.value != "null" && inp.value != ""){
		  				var returnValue = setActionFieldAndSubmit(frm,inp.value,'Y');
			  			if(defButton != null && returnValue == true){
			  				//window.event.returnValue = false;
			  				canClose = false;
			  				pageSubmit = true;
			  				frm.submit();
			  			}
				    }
				}
			}else{
				return true;
			}
		}else{
			return true;
		}  	
  	}
 	return false;
}
var nav = navigator.appName.substring(0,1); 
var M=false; 
var N=false; 
app=navigator.appName.substring(0,1); 
if (app=='N') N=true; else M=true; 
if (M){ 
        document.onkeypress=handleKeyPress 
}else{ 
        document.onkeypress=handleKeyPress() 
} 

//Function used to set focus on error messages 
function setFocusonMessages() {
	
	var errMsgFocusImg = document.getElementById("errMsgImg");	
	try{
		errMsgFocusImg.focus();
		pauseExecution(500);
	}catch(Exception){}  
	
}

//Function to pause execution
function pauseExecution(timeDelay)
{
	d = new Date() //today's date
	while (true){
		mill=new Date() // Date Now
		diff = mill-d //difference in milliseconds
		if(diff > timeDelay){
			break;
		}
	}
}


function disableStatuses() { for ( var count = 0 ; count < 
document.links.length; count++ ) document.links[count].onmouseover = 
blankStatus ; }
function blankStatus() { window.status = "" ; return true ; }

// Function for show or hide joint owner fields
function showJointOwner(){
	if(document.all.jntOwner.style.display=="none"){
		document.all.jntOwner.style.display="inline";
	} else if(document.all.jntOwner.style.display=="inline"){
		document.all.jntOwner.style.display="none";
	}
	// If some one outside home is unchecked clearing the fields
	if(!document.form1.other_0_1.checked){
		document.form1.firstName_0_1.value="";
		document.form1.lastName_0_1.value="";
		/*document.form1.firstName_0_2.value="";
		document.form1.lastName_0_2.value="";*/
	}
}

//Function to check for mandatory fields - without popping the alerts - validates both enabled and disabled fields
function isData(field) {

	var cd,desc;
	var len;
	if(field.type =="radio" || field.type =="checkbox"){
   	 	if(field.checked == true){
   	 		return true;
   	 	}
   	 	else return false;
   	}
	else
	{
		if(field.type != "select-one"){
			trimSpaces(field);
		}
		var val = field.value;  
		if (val!=null) {
		   	var vallen= val.length;
		   	if(field.type == "select-one"){
		   		len = field.options.length;
		   		for(var m=0;m<len;m++){
		   			cd = field.options[m].value;
					desc = field.options[m].text;
					if( field.options[m].selected == true && ((cd == "" && desc == "") || (cd == "0" && desc == "") || cd == "SEL" )){
						return false;
					}
					return true;
		   		}
		   	}
		   	else
		   	{
				if (vallen <=0) {
		     		return false;
				}
			}
		} 
   		return true;
   	}
}

/*
	Function to throw the validation message in dynasection
*/
function alertMeDynaSection(){
	var args = alertMeDynaSection.arguments;
	var errDynaMsg = getErrorMessageOrSeverity(args[0]);
	var errSeverity = getErrorMessageOrSeverity(args[0],'severity');
	if(errDynaMsg.indexOf("~")>=0){
		var msg = formulateMessage(errDynaMsg, args);
		errMsg = msg;
	}
	if(args[0]==errDynaMsg){		
		//If the call does not contain any Error code or if the error code is not defined.
		var tmp = "Error Code Not Defined "+args[0];
		if(isValidateON){
			validationErrors.push(tmp);		
		}else{
			displayMessages(tmp,"client-side");
		}	
	}
	else{
		extractElementIdFromField(args);
		if(isValidateON){
			validationErrors.push(getImageForMessage(errSeverity,args[0])+errDynaMsg);
		}else{
			displayDynaSectionMessages(getImageForMessage(errSeverity,args[0])+errDynaMsg,"client-side");
		}
	}
	setFocusonMessages();
	return true;
}
/*
	Function to get the message severity for a message
*/
function getErrorMessageOrSeverity(errCode){
	var errArray;
	var desc = errCode;
	var args = getErrorMessageOrSeverity.arguments;
	var temp = errCode.substring(0,2);
	temp = temp.toLowerCase();
	try{
		errArray = eval(temp+"ErrorCodes");
	}catch(e){
		return errCode;
	}
	var len = errArray.length;	
	for(j=0;j<len;j++){
		if(args.length == 2 && args[1] == "severity"){
			if(errArray[j][0]==errCode){
				desc = errArray[j][2];
				break;
			}
		}
		else
		{
			if(errArray[j][0]==errCode){
				desc = errArray[j][1];
				break;
			}
		}
	}
	return desc;
}
//Function to display appropriate error/warning/information image for message display
function getImageForMessage(severity,cde){
	var img = "";
	if(severity == "1"){//Error
		img = errImg;
		return img;
	}else if (severity == "2"){//Warning
		img = warningImg;
		return img;
	}else{//Info
		img = messageImg;
		return img;
	}
}
/*
	Function to get the elementid
*/
function extractElementIdFromField(args){
	var fld;
	var len = args.length;
	for(var i=0;i<len;i++){
		fld = args[i];
		if(fld != null && fld.elementId != null && fld.elementId != "undefined" ){
			errorElementIdArray.push(fld.elementId);
		}
	}
}

//Function used to display the error messages in messageDisplay.jsp
function displayDynaSectionMessages(errorMessage) {
	var prevErrMsg="";
	var header="";
	var newErrorMessage = doTrim(errorMessage);
	if (newErrorMessage == null) {     
		errorMessage =  null;   
	}   
	
	if (errorMessage != null) {    
		var preErrHTML = document.all.errorSpanClient.innerHTML;   
		if(preErrHTML!=null&&preErrHTML!=""){        
			prevErrMsg=preErrHTML+"<BR>";   
		}   
		else
		{    
			prevErrMsg=preErrHTML;   
		}      
		if(errorMessage.indexOf("<BR>") >=0){
			header = "The following errors have occured:";
		}
		else{
			header = "The following error has occured:";
		}
		document.all.errorTableClient.style.display='inline'; 
		document.all.errorHeader.innerHTML = header;
		document.all.errorSpanClient.innerHTML=prevErrMsg+errorMessage;  
	}   
	else 
	{      
		document.all.errorSpanClient.innerHTML="";
		document.all.errorHeader.innerHTML = "";     
		document.all.errorTableClient.style.display='none';     
	} 		
}
// Function to show the message for 'Delete' button click in dynasection
function dynaSectionDelete(deleteFld,sectionCounter,pageAction,validateFlag){
	setFieldValue(document.form1.DYNA_SECTION_DELETE,sectionCounter);
	if(warnOnDelete(document.form1,pageAction,validateFlag)){
		return true;
	}else{
		return false;
	}
	return true;
}
/*
Returns a array of field objects whose names startwith the given String
*/
function getArrayOfFieldsStartingWith(str){
	var num = document.form1.length;
	var len = str.length;
	var field,name;
	var arr = new Array();
	try{
		for(var i = 0; i<num; i++){
			field = form1.elements[i];
			name = field.name;
			if(name.substring(0,len) == str){
				arr.push(field);
			}
		}
	}catch(Exception){}
	return arr;
}

/*
Returns a handle to the field object, given the field name "startswith" string and the key
*/

function getHandleToField(startsWith,key){
	var name = startsWith+"_"+key;
	var fld = document.getElementById(name);
	return fld;
}
/*
Returns the key string, given the field object
*/
function getKeyFromField(field){
	var name = field.name;
	var un = name.indexOf("_");
	var key = name.substring(un+1);
	return key;
}
/*
Populates all the field values to "newValue" 
- whose names start with starts with "startsWith" - and whose current value is "oldValue"
*/
function populateFieldsStartingWith(startsWith,oldValue,newValue){
	var arr = new Array();
	arr = getArrayOfFieldsStartingWith(startsWith);
	var len = arr.length;
	for(var i=0; i<len; i++){
		trimSpaces(arr[i]);	
		if(arr[i].value == oldValue){
			arr[i].value = newValue;
		}
	}	
}

/*
 Function to track the popup windows
*/
function setChildWindowStatus(){
	var currPageId = document.form1.CURRENT_PAGE_ID.value;
	var flag = false;
	if(currPageId == 'ANHNQ' || currPageId == 'ANIHD' || currPageId == 'ANOTH' || currPageId == 'ANFAS')
	{
		flag = true;
	}
	if(flag)
	{
		window.opener.form1.CHILDWIN.value='N';
	}	
}
/*
 Function to display the warning message before close the window.
*/
//ILIES-156662: ABE Warn users when closing browser
//smejiaibarra: Adding/Attaching listeners/events to posibles actions to leave the page
if(document.addEventListener){
	document.addEventListener("DOMContentLoaded", function(e) {
		document.forms[0].addEventListener("submit", function(){canClose = false;}, false);
		var links = document.getElementsByTagName("a");
		for(var i = 0; i < links.length; i++) {
				links[i].addEventListener("click", function(){canClose = false;},false);
		    }
	 	document.addEventListener("keydown",function(me){
			   var key = me.which || me.keyCode;
			    canClose = !(key === 116);
		},false);
	});	
}else
{
	document.attachEvent("onreadystatechange", function (e) {
		document.forms[0].attachEvent("onsubmit", function(){canClose = false;});
		var links = document.getElementsByTagName("a");
		for(var i = 0; i < links.length; i++) {
				links[i].attachEvent("onclick", function(){canClose = false;});
		    }
	 	document.attachEvent("onkeydown",function(me){
			   var key = me.which || me.keyCode;
			    canClose = !(key === 116);
		});
		
	});	
}
//smejiaibarra: Setting methods for onbeforeunload event
window.onbeforeunload = confirmClose;
function confirmClose(e) {
var languageCode = document.getElementById("CurrentLanguageCode");
var currentLngCode = languageCode === null ? "EN" : languageCode.value;
//  if(!isPopup()){
//	   var action = document.getElementById("form1").action;   
//	   myclose=false;
//	   if ((window.event.clientY > -160 && window.event.clientY < 0)  && action != "TIMEOUT") {
//		   	myclose=true;
//		   	var str = "Please make sure you logout of IL ABE before closing the browser.  If you need to logout, please click Stay on this page/Cancel and logout.  If you have already logged out , click OK button.";
//			   str+="  ";
//			 str+="Failure to logout, might keep the session active.";           
//			event.returnValue = str;	
//	    }		
//	}
if(canClose && checkConditions()){
	var str = getErrorMessage("GL049" + currentLngCode);
	canClose = false;
	setTimeout(function() {canClose=true;},300);
	return str;
	}
}
//smejiaibarra: Method to check if is posible open a warning message before close the window.
function checkConditions(){
	var current_page_id = document.getElementById("CURRENT_PAGE_ID");
	var action = document.getElementById("form1").action;
	var id_proofing_page_id = "NONE";
	if(current_page_id.value == "ABHMS"){
		var id_proo_ind = document.getElementById("idproofing");
		if(id_proo_ind.value == "Y"){
			id_proofing_page_id = "ASUID";
		}
	}
	var valid_page = current_page_id !== null && current_page_id.value !== "AGHME" && current_page_id.value !== "LGHME" && current_page_id.value !== "AFFAQ" && current_page_id.value !== "ACONT" && current_page_id.value !== "APRIV" && current_page_id.value !== "AMSCF" && current_page_id.value !== "ABNSO" && id_proofing_page_id == "ASUID" && current_page_id.value !== "ADTHK";
	return !pageSubmit && !isPopup() && action != "TIMEOUT" && !Get_Cookie("PUBLOC") && valid_page;
}
//End of ILIES-156662
/*
 Function to identify whether its a popup window or Normal window
*/
function isPopup(){
	
 	var query = window.location.search.substring(1); 
	var vars = query.split("&"); 
	for (var i=0;i<vars.length;i++) 
	{ 
		var pair = vars[i].split("="); 
		if (pair[0] == "POP_UP") 
		{ 
			return true;
		} 
	} 
	return false;
}


//Function to find the browser and based on browser calling the css
function toChkBrowserAndCallCss(){
	var browser=navigator.appName;
	var b_version=navigator.appVersion;
	var version=parseFloat(b_version);
	var elExists = typeof pagestyle != 'undefined';
	if (browser=="Netscape" && elExists){
	 	pagestyle.href="/access/css/mozila_style.css";
	}
	if(browser=="Opera" && elExists){
		 pagestyle.href="/access/css/mozila_style.css";
	}
}



//Based on browser call the css for RMC ,Work Request ID : BRGUS00200960, added By :Giridhar Gani
function toChkBrowserAndCallRMCCss(){

var browser=navigator.appName;
var b_version=navigator.appVersion;
var version=parseFloat(b_version);
if(browser=="Netscape")
  {
	pagestyle_rmc.href="/access/css/mozila_rmc_Styles.css";
  }
 
  if(browser=="Opera")
  {
   pagestyle_rmc.href="/access/css/mozila_rmc_Styles.css";
  }
   
}

// santosh added for client security at kiosks

var obj = new Object(); 
function showPinPopup(language) {
	if (!detectPopupBlocker(language)){ 
		var url = "/access/accessController?PAGE_ACTION=ASREPLoad&&POP_UP=Y&&PAGE_TIMEOUT=Y";
		popwindow = window.showModalDialog(url,obj, "dialogWidth:800px; dialogHeight:400px; center:yes");
		
		if (obj.returnvalue  == "correct"){
			;
		}
		if(obj.returnvalue  == "wrong"){
			canClose = false;
			window.location="/access/accessLogout?VALID_GET=Y&MyAccessLogout=Y";
		} else {
			if (obj.returnvalue == null || obj.returnvalue == 'undefined'){
				showPinPopup(language);
			}
		}
	} else {
		canClose = false;
		window.location = "/access/accessLogout?VALID_GET=Y&MyAccessLogout=Y";
	}
}

function pageTimedOut() {
	var obj = new Object(); 
	var language = null;
	if (!detectPopupBlocker(language)){ 
		popwindow = window.showModalDialog("/access/accessController?PAGE_ACTION=ASREPLoad&&POP_UP=Y&&PAGE_TIMEOUT=Y",obj, "dialogWidth:840px; dialogHeight:400px; center:yes");
	
		if (obj.returnvalue  == "correct"){
			resetTimer();
		}else if(obj.returnvalue  == "wrong"){
			canClose = false;
			window.location="/access/accessLogout?VALID_GET=Y&MyAccessLogout=Y";
		}else{
			timer = window.setTimeout("pageTimedOut()", 1000);
		}	
	} else {
		canClose = false;
		window.location = "/access/accessLogout?VALID_GET=Y&MyAccessLogout=Y";
	}
}

function resetTimer(){
	if (timer!=null && timer!= "undefined" && timer!=""){
		window.clearTimeout(timer);
	}
	startTimer();
}

function startTimer() {
	var pageTimeout = document.getElementById("pageTimeout").value;
	if (pageTimeout!=null && pageTimeout!="undefined" && pageTimeout != ""){
		pageTimeout = parseInt(pageTimeout);
	}
	timer = window.setTimeout("pageTimedOut()", pageTimeout*60*1000);
}

function checkEnter(e) {
	if (event.keyCode == 13) { 
        validatePin(); 
    } 
}


function validatePin(){
		
		document.getElementById("errorTableClient").style.display = 'none';
		var enteredPin = document.getElementById("securityPinNumber").value;
		var tempPin = enteredPin;
		var sessionpin = document.getElementById("sessionpin").value;
		var pincount = document.getElementById("pinCount").value;
		var obj = window.dialogArguments; 
		if (isInteger(enteredPin)){
			enteredPin = encrypt(enteredPin);
		}
		if (enteredPin == sessionpin)
		{
			obj.returnvalue = "correct";			
			window.close();
		} else { 
			pincount =  parseInt(pincount);
			document.forms[0].securityPinNumber.value='';
			document.getElementById("errorTableClient").style.display = 'block';
			var str = '<IMG SRC="/access/images/icon_error.gif" ALT="Error" WIDTH="17" HEIGHT="17" VSPACE="2" ALIGN="absmiddle">&nbsp;';
			if (tempPin.length == 0){
				str = str + document.forms[0].pinEmptyMsg.value;
			} else {
			 str1 = document.forms[0].pinWrongMsg.value;
			 str = str + str1.replace("~",(3-pincount));
			 pincount = pincount+1;
			 }
			document.forms[0].pinCount.value = pincount;
			document.getElementById("errorSpanClient").innerHTML = str; 
			if(pincount > 3){
				obj.returnvalue = "wrong";
				window.close();
			}
		}
}

function detectPopupBlocker(language) {
  var myTest = window.open("about:blank","","directories=no,height=10,width=10,menubar=no,resizable=no,scrollbars=no,status=no,titlebar=no,top=0,location=no");
  var str = "";
  var str1 = "";
  var str2 = "";
  var str3 = "";
  if (!myTest) {
  	if (language == null || language=='EN') {
	  	 str1 = "We have found your browser is set to block pop-ups.";
	  	 str2 = "This website uses pop-ups. ";
  		 str3 = "You will be logged out now. Please change your browser setting to allow pop-ups and login again.";
  	} else {
  		 str1 = "Hemos encontrado que su navegador esta configurado para bloquear las ventanas autom�ticas.";
	  	 str2 = "Este sitio Web utiliza ventanas emergentes. Su sesi�n ser� terminada ahora.";
  		 str3 = "Favor de cambiar la configuraci�n de su navegador para permitir ventanas emergentes y comience una sesi�n de nuevo.";
  	}
    alert(str1+"\r\n"+str2+"\r\n\r\n"+str3); 
    return true;
  } else {
    myTest.close();
    window.focus();
    return false;
  }
}


function checkForPopupBlocker() {
    var row = document.getElementById("popupMsg");
	var popupWin = window.open("about:blank","","directories=no,height=10,width=10,menubar=no,resizable=no,scrollbars=no,status=no,titlebar=no,top=0,location=no");
	if (!popupWin) {
	   row.style.display = "block";
	   document.forms[0].popupSw.value='Y';
	} else {
	   popupWin.close();
	   var element = document.getElementById("errorTableClient");
	   if (element!=null && element.innerText.indexOf("Please do not use the Forward")!=-1){
   	   	document.getElementById("errorTableClient").style.display = 'none';
   	   }
       row.style.display = "none";
	}
}

function openPopupForWelcomePage() {
	if(document.getElementById("warningMsgDetails") != null && document.getElementById("warningMsgDetails").value == '20031'){
		openPopupWindow('/access/accessController?PAGE_ACTION=LoadOldAppDeleteMsg&CURRENT_PAGE_ID=ABWEL&POP_UP=Y', 
				'Help', 
				'toolbar=no,menubar=no,resizable=yes,scrollbars=yes,WIDTH=750,HEIGHT=200,LEFT=153,TOP=86'); 
		return false;
	}
}

function closeSession() {
	var obj = window.dialogArguments;
	obj.returnvalue = "wrong";
	window.close();
}

function closePDFWindowAndSession() {
	if (window.opener != null) {
		window.close();
		window.opener.location = "/access/accessLogout?VALID_GET=Y&MyAccessLogout=Y";
	} else {
		canClose = false;
		window.location = "/access/accessLogout?VALID_GET=Y&MyAccessLogout=Y";
	}
}

	function encrypt(number){
		  var encrypted, temp;
		  var first, second, third, fourth;
		  
		   temp = number;
		  first=(temp/1000+7)%10;
		  temp=temp%1000;
		  second=(temp/100+7)%10;
		  temp=temp%100;
		  third=(temp/10+7)%10;
		  temp=temp%10;
		  fourth=(temp+7)%10;

		encrypted=Math.floor(third)*1000+Math.floor(fourth)*100+Math.floor(first)*10+Math.floor(second);
		return encrypted;
	}

//Function to submit form if - enter key is pressed and PAGE_ACTION is not 'null or empty'.
function callOnchangeMethod(mthodName){	
	var frm = document.form1;
	var defButton = mthodName;
	var inp = mthodName;
	if (inp!=null){
	   	if (inp != null && inp != "null" && inp != ""){
				var returnValue = setActionFieldAndSubmit(frm,inp,'Y');
	  			if(defButton != null && returnValue == true){
	  				//window.event.returnValue = false;
	  				canClose = false;
	  				pageSubmit = true;
	  				frm.submit();
	  			}
		    }
	}  
 	return false;
}

function submitWithLink(frm, action, validate){
	if (action != null && action != "null" && action != ""){
		var returnValue = setActionFieldAndSubmit(frm,action,validate);
		if(returnValue == true){
			pageSubmit = true;
	  		frm.submit();
	  	}
	}
	return false;
}

function setActionFieldAndSubmitButton(action, validate){
	if (action != null && action != "null" && action != ""){
		
		for (i= 0; i < document.forms.length; i++ )
			var frm = document.forms[i].id;	
		
		var returnValue = setActionFieldAndSubmit(frm,action,validate);
		if(returnValue == true){
			pageSubmit = true;
	  		frm.submit();
	  	}
	}
	return false;
}

/*
 * This function is used to set the values and also to call the modal dialog
 * method to create the correspondence pdf this method is called from the 
 * constructAnchorimage method in FwAbstractListviewFormatter
 */
var obj1 = new Object(); 
function setKeyVal(keys,vals){
	var k,m,ind1,ind2=0;
    var sub1,sub2 = "";        
    var cookie_found=Get_Cookie("PUBLOC");    
	    if(!cookie_found){
					do {
					 	ind1 = keys.indexOf(":");
					 	ind2 = vals.indexOf(":");
					   	if(ind1 == -1){
					   		sub1 = keys.substring(k);
					   	}else{
					   		sub1 = keys.substring(k,ind1);
					   	}
					   	if(ind2 == -1){
					   		sub2 = vals.substring(k);
					   	}else{
					   		sub2 = vals.substring(k,ind2);
					   	}
					   	m = document.getElementById(sub1);					   	
					   	try{
					    	if(opener.document.getElementById(sub1) != null){
					   			m = opener.document.getElementById(sub1);
					   		} 
					   	}catch(e){}
					   	m.value = sub2;
					   	keys = keys.substring(ind1+1);
					   	vals = vals.substring(ind2+1);
					}while (ind1 != -1);	  
				try{    					
					modalWin(m.value);
					if(opener.document.getElementById(sub1) != null){
						window.close();
					} 
				}catch(Exception){}
	    }else{
	    		    	
	    	//var id1='LISTVIEW_DETAILS_'+m.value;	
	    	do {
			 	ind1 = keys.indexOf(":");
			 	ind2 = vals.indexOf(":");
			   	if(ind1 == -1){
			   		sub1 = keys.substring(k);
			   	}else{
			   		sub1 = keys.substring(k,ind1);
			   	}
			   	if(ind2 == -1){
			   		sub2 = vals.substring(k);
			   	}else{
			   		sub2 = vals.substring(k,ind2);
			   	}
			   	m = document.getElementById(sub1);					   	
			   	try{
			    	if(opener.document.getElementById(sub1) != null){
			   			m = opener.document.getElementById(sub1);
			   		} 
			   	}catch(e){}
			   	m.value = sub2;
			   	keys = keys.substring(ind1+1);
			   	vals = vals.substring(ind2+1);
			}while (ind1 != -1);		    	
	    	var value1 = DOMPurify.sanitize(document.getElementById('LISTVIEW_DETAILS_'+m.value).value);	    	
	    	var url1 = "/access/accessController?PAGE_ACTION=ASCOPLoad&&POP_UP=Y&&PAGE_TIMEOUT=Y&&pdfParam="+value1;	    	
	    	window.open(url1,'_blank', 'modal=yes');
	    	return false;
			//popwindow = window.showModalDialog(url1,obj1, "dialogWidth:800px; dialogHeight:400px; center:yes");
	    }
}
/*
 * This method is used to open a modal dialog with the correspondence details pdf 
 */
function modalWin(key) {	
	var id='LISTVIEW_DETAILS_'+key;	
	var value = document.getElementById(id).value;
	if (window.showModalDialog) {
		window.showModalDialog("jsp/access/myAccess/AMCorrespondencePDF.jsp?",value,
	"dialogWidth:850px;dialogHeight:800px;");		
	} else {
		window.open('jsp/access/myAccess/AMCorrespondencePDF.jsp?','_blank',
	'modal=yes');
	}
	} 
	function isEmailChecked(){
	  if ( document.form1.emailNotifySwitch.checked )
		    {
		    	 document.form1.emailID.disabled = false;
		    	 document.form1.reEnteredEmail.disabled = false;
		    	 		   		
		    } else
		    	 {	 				 				
		    	 document.form1.emailID.disabled = true;		    	 
		    	 document.form1.reEnteredEmail.disabled = true;
		    	 
		    	}
			
	}

function isMobileCheckedGroupTag(){
	  if ( document.form1.mobileNotifySwitch.checked )
		    {
		    	 document.form1.phone1mobileNumber.disabled=false;
		    	 document.form1.phone2mobileNumber.disabled=false;
		    	 document.form1.phone3mobileNumber.disabled=false;
		    } else
		    	 {				 
		    	 document.form1.phone1mobileNumber.disabled=true;				 
		    	 document.form1.phone2mobileNumber.disabled=true;				 
		    	 document.form1.phone3mobileNumber.disabled=true;
		    	}
			
	}

function Get_Cookie( check_name ) {
	// first we'll split this cookie up into name/value pairs
	// note: document.cookie only returns name=value, not the other components
	var a_all_cookies = document.cookie.split( ';' );
	var a_temp_cookie = '';
	var cookie_name = '';
	var cookie_value = '';
	var b_cookie_found = false; // set boolean t/f default f
	
	for ( i = 0; i < a_all_cookies.length; i++ )
	{
		// now we'll split apart each name=value pair		
		a_temp_cookie = a_all_cookies[i].split( '=' );		

		// and trim left/right whitespace while we're at it
		
		cookie_name = a_temp_cookie[0].replace(/^\s+|\s+$/g, '');		

		// if the extracted name matches passed check_name
		if ( cookie_name == check_name )
		{			
			b_cookie_found = true;
			// we need to handle case where cookie has no value but exists (no = sign, that is):
			//if ( a_temp_cookie.length > 1 )
			//{
			//	cookie_value = unescape( a_temp_cookie[1].replace(/^\s+|\s+$/g, '') );
			//}
			// note that in cases where cookie is initialized but no value, null is returned
			return true;
			
		}
		a_temp_cookie = null;
		cookie_name = '';
	}
	if ( !b_cookie_found )
	{
		return false;
	}
}	

// Removing the unwanted SCRIPT tags for security
function stripScripts(s) {
	var div = document.createElement('div');
	div.innerText = s;
	var scripts = div.getElementsByTagName('script');
	var i = scripts.length;
   
   while (i--) {
   	scripts[i].parentNode.removeChild(scripts[i]);
   }
   
   return div.innerText;
}
var iterations = 0;
var heartBeatInterval ;
var heartBeatIterations ;
var heartBeatSw = true;
try{
	heartBeatInterval = heartBeatIntervalFromHeader
	heartBeatIterations = heartBeatIterationsFromHeader
}catch(e){
	 heartBeatInterval = 5000;
	 heartBeatIterations = 5;
	 heartBeatSw = false;
}
if(heartBeatInterval == null && heartBeatInterval == null){
	
	heartBeatSw = false;
	 heartBeatInterval = 5000;
	 heartBeatIterations = 5;
}

var is_chrome = navigator.userAgent.toLowerCase().indexOf('chrome') > -1;
if(is_chrome && heartBeatSw){
	heartbeatTimer = setInterval(sendHeartbeat,heartBeatInterval);
}

function sendHeartbeat() {
	
    if (iterations < heartBeatIterations){
		if (window.XMLHttpRequest) this.req = new XMLHttpRequest();
		else if (window.ActiveXObject) this.req =
			new ActiveXObject("Microsoft.XMLHTTP");
		else return;
		var strURL = "/access/jsp/framework/HeartBeat.jsp";
		this.req.open("GET", strURL);
		this.req.send(null);
	}else{
		clearInterval(heartbeatTimer);
	}
    iterations++;
}

//added to fix tab for ABE screens



function clearTabIndex(){
	if (document.forms.length > 0){
		var a = $(document).find("input, select, a, button");
		var b = a.length;
		$(".MenuItemImage2 *").attr("disabled", "disabled");
		for(i=0;i<b;i++){
			try{
				if(a[i].type != null && a[i].tagName != null && 
						(a[i].tagName == "A" || a[i].type == "text" || a[i].type == "button" || a[i].type == "checkbox"||  a[i].type == "select-multiple"|| a[i].type == "select-one" || a[i].type == "submit" ||
						a[i].type == "select" || a[i].type == "radio" || a[i].type == "RADIO" || a[i].type=="image" || a[i].type=="IMAGE" || a[i].type=="password"|| a[i].type=="button" || a[i].type=="file")){
					a[i].tabIndex = null;
					//console.info(a[i].tagName+" -> "+a[i].innerHTML+" -> "+a[i].tabIndex);
				} 
			}catch(Exception){}
		}
	}
}


function addEvent(element, eventName, callback) {
    if (element.addEventListener) {
        element.addEventListener(eventName, callback, false);
    } else if (element.attachEvent) {
        element.attachEvent("on" + eventName, callback);
    }
}

addEvent(window, "load", function(){
		clearTabIndex();
		$("nav.main-nav > div.container > a").each(function(){$(this)[0].tabIndex=1;});
		$("nav.main-nav > div.container > ul.navbar-nav > li").find("a,input,select,button").each(function(){$(this)[0].tabIndex=2});
		$("nav.main-nav > div.container > ul.navbar-nav > div").find("a,input,select,button").each(function(){$(this)[0].tabIndex=3});
		$("nav.main-nav > div.container > div.login").find("a,input,select,button").each(function(){$(this)[0].tabIndex=4});

});

//This "isEmailSpl" is updated by ILIES-222254 in order to make Email validation is same through out ABE.
function isEmailSpl(eMailAddress){
	
	if ((eMailAddress !=null) && (eMailAddress!="undefined")&&(eMailAddress.value !="null") && eMailAddress.value !="")
	{
		var eMail = eMailAddress.value;
		var len   = eMail.length;
		var validChars = ['.','-','_','@'];
		var domainValidChars = ['-', '.'];
		var TLDValidChars = ['.'];
		
		if (len > 125)
			return false;
	
		var i = eMail.indexOf(' ');	
		
		if (i != -1)
			return false;
		
		i = eMail.indexOf('@');

		if (i == -1 || i == 0 )
			return false;

		if (i > (len - 4) ) // @x.y   
			return false;
		
		if (eMail.indexOf('@', i + 1) != -1)
			return false;
	
		var j = eMail.indexOf('\'',i);
		if ( j != -1 )
			return false;
		
		j = eMail.indexOf('.', i + 1);
		if (j == -1 || j == i + 1 || j == len - 1)
			return false;

		//if ( eMail.charAt(i-1) == '.' || eMail.charAt(len-1) == '.')
		//return false;
		
		j = eMail.indexOf('.');
		while( j > -1 && j+1 < len ) 
		{	if ( eMail.charAt(j+1) == '.' ) 
				return false;
		
			j = eMail.indexOf('.', j+1);
		}
		
		if ( eMail.indexOf(',') != -1 )
			return false;
	
		j = eMail.indexOf('"');
		if ( j == len-1 || j == 0 )
			return false;
		
		if(!dynaCheckSpecialChars(eMailAddress,len,validChars,'N'))
			return false;
				
		j= eMail.indexOf("@");
	
		var tempDomainAdd = eMail.substring(j+1);
	
		j =  tempDomainAdd.lastIndexOf(".");
		var  z = tempDomainAdd.substring(j+1);
//		if(eMail.charAt(0) == '.' || eMail.charAt(0) == '-')
//		    	return false;
//		if ( eMail.indexOf('_') != -1  || eMail.indexOf('--') != -1  || eMail.indexOf('.-') != -1 )
//				return false;		
//		if ( eMail.indexOf('-.-') != -1  || eMail.indexOf('-.') != -1 )
//				return false;
//		if ( eMail.indexOf('@-') != -1 || eMail.indexOf('-@') != -1 )
//				return false;
		if(z.length <=1 || z.length > 3 )
				return false;
		if(!isAlphaOnly(tempDomainAdd.substring(j+1)))
			return false;
	}
		
	return true;
}

/*Replacement for the window.showmodaldialog() as it is deprecated in the Chrome*/

function locShowModalDialog(url, arg, opt) {
    var w;
    var h;
    var resizable = "no";
    var scroll = "no";
    var status = "no";

    // get the modal specs
    var mdattrs = opt.split(";");
    for (i = 0; i < mdattrs.length; i++) {
       var mdattr = mdattrs[i].split(":");

       var n = mdattr[0];
       var v = mdattr[1];
       if (n) { n = n.trim().toLowerCase(); }
       if (v) { v = v.trim().toLowerCase(); }

       if (n == "dialogheight") {
          h = v.replace("px", "");
       } else if (n == "dialogwidth") {
          w = v.replace("px", "");
       } else if (n == "resizable") {
          resizable = v;
       } else if (n == "scroll") {
          scroll = v;
       } else if (n == "status") {
          status = v;
       }
    }

    var left = window.screenX + (window.outerWidth / 2) - (w / 2);
    var top = window.screenY + (window.outerHeight / 2) - (h / 2);
    var targetWin = window.open(url, url, 'toolbar=no, location=no, directories=no, status=' + status + ', menubar=no, scrollbars=' + scroll + ', resizable=' + resizable + ', copyhistory=no, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);
    targetWin.focus();
};


function showAlertForRMBApplication(isRmbApplication,earliestOverAllRedeDueDtForRMBPopup,isRmbApplicationLangCd){
	if("Y" == isRmbApplication && "ES" == isRmbApplicationLangCd){
		alert("Usted a�n no ha enviado su redeterminaci�n. Si usted no env�a su redeterminaci�n antes de "+ earliestOverAllRedeDueDtForRMBPopup+" sus beneficios se suspender�n o ser�n cancelados.");	
	}else if("Y" == isRmbApplication){
		alert("You have not submitted this redetermination. If you do not submit your redetermination by "+ earliestOverAllRedeDueDtForRMBPopup+" your benefits will end or will be canceled.");
	}
}


$(document).ready(function () {
    $(document).on("keyup", function (event) {
    	var pageId = document.getElementById('CURRENT_PAGE_ID').value;
        if (event.which == 13 && pageId && pageId !== 'ABAWA') {
            $("#dropdownLogin").trigger('click');
        }
    });
    if( document.getElementById("errorMessageText")!=null)
    {
    	setTimeout(function(){ document.getElementById("errorMessageText").focus(); }, 200);
    }
    
});


//SEC-44 toggle the ssn
function toggleSSN(e1,val) {

	var title = document.getElementById("togglePassword");
		if(title.title=="SSN entered is displayed as DOT"){
	    title.title="SSN is displayed as numbers" }
		else if(title.title=="SSN is displayed as numbers")
		title.title="SSN entered is displayed as DOT"
		else if(title.title=="SSN ingresado se muestra como DOT"){
		title.title="SSN se muestra como n�meros" }
		else if(title.title=="SSN se muestra como n�meros")
		title.title="SSN ingresado se muestra como DOT"
	var ssnId1="ssn1socialSecurity"
	var ssnId2="ssn2socialSecurity"
	var ssnId3="ssn3socialSecurity"
    var ssn1 = document
				.getElementById(ssnId1);
		var ssn2 = document
				.getElementById(ssnId2);
		var ssn3 = document
				.getElementById(ssnId3);
		if(ssn1.type=='password')
			{ssn1.type='text'
				ssn2.type='text'
					ssn3.type='text';
			}
		else if (ssn1.type=='text')
		{ssn1.type='password'
			ssn2.type='password'
				ssn3.type='password';
		}
	
		
}	
//SEC-480 Prev SSN checkbox validation
function toggleSsnNumPrev(e1,val) {
	var title = document.getElementById("toggleSsnPrev");
		if(title.title=="SSN entered is displayed as DOT"){
	    title.title="SSN is displayed as numbers" }
		else if(title.title=="SSN is displayed as numbers")
		title.title="SSN entered is displayed as DOT"
		else if(title.title=="SSN ingresado se muestra como DOT"){
		title.title="SSN se muestra como n�meros" }
		else if(title.title=="SSN se muestra como n�meros")
		title.title="SSN ingresado se muestra como DOT"
	var ssnId1="ssn1socialSecurityPrev"
	var ssnId2="ssn2socialSecurityPrev"
	var ssnId3="ssn3socialSecurityPrev"
    var ssn1 = document
				.getElementById(ssnId1);
		var ssn2 = document
				.getElementById(ssnId2);
		var ssn3 = document
				.getElementById(ssnId3);
		if(ssn1.type=='password')
			{ssn1.type='text'
				ssn2.type='text'
					ssn3.type='text';
			}
		else if (ssn1.type=='text')
		{ssn1.type='password'
			ssn2.type='password'
				ssn3.type='password';
		}
	
		
}

//SEC-480 PEBT benefits screen SSN checkbox validation
function toggleSsnNumChild(e1,val) {
	
	if(val != 'ssn' ){
		var title = document.getElementById("toggleSsnChild"+val);
	}else{
        var title = document.getElementById("toggleSsnChild");
	}
		if(title.title=="SSN entered is displayed as DOT"){
	    title.title="SSN is displayed as numbers" }
		else if(title.title=="SSN is displayed as numbers")
		title.title="SSN entered is displayed as DOT"
		else if(title.title=="SSN ingresado se muestra como DOT"){
		title.title="SSN se muestra como n�meros" }
		else if(title.title=="SSN se muestra como n�meros"){
		title.title="SSN ingresado se muestra como DOT"}
			
		if(val != 'ssn' ){
			var ssn1 = document
			.getElementById("ssn1numberInHouse"+val);
	var ssn2 = document
			.getElementById("ssn2numberInHouse"+val);
	var ssn3 = document
			.getElementById("ssn3numberInHouse"+val);
		}else{
    var ssn1 = document
				.getElementById("ssn1numberInHouse");
		var ssn2 = document
				.getElementById("ssn2numberInHouse");
		var ssn3 = document
				.getElementById("ssn3numberInHouse");
		}
		if(ssn1.type=='password')
			{ssn1.type='text'
				ssn2.type='text'
					ssn3.type='text';
			}
		else if (ssn1.type=='text')
		{ssn1.type='password'
			ssn2.type='password'
				ssn3.type='password';
		}		
}
	
//toggle the  confirm ssn	

	function toggleConfSSN(e1,val) {
		if(val != 'ssn' ){
			var title = document.getElementById("togglePasswordConf"+val);
		}else{
	        var title = document.getElementById("togglePasswordConf");
		} 
	if(title.title=="SSN entered is displayed as DOT"){
     title.title="SSN is displayed as numbers" }
	
	else if(title.title=="SSN is displayed as numbers")
		title.title="SSN entered is displayed as DOT"
	else if(title.title=="SSN ingresado se muestra como DOT"){
	title.title="SSN se muestra como n�meros" }
	else if(title.title=="SSN se muestra como n�meros"){
	title.title="SSN ingresado se muestra como DOT"}
	if(val != 'ssn' ){
			var ssn1 = document
			.getElementById("ssn1confirmSocialSecurity"+val);
	var ssn2 = document
			.getElementById("ssn2confirmSocialSecurity"+val);
	var ssn3 = document
			.getElementById("ssn3confirmSocialSecurity"+val);
		}else{ 
		var ssn1 = document
				.getElementById("ssn1confirmSocialSecurity");
		var ssn2 = document
				.getElementById("ssn2confirmSocialSecurity");
		var ssn3 = document
				.getElementById("ssn3confirmSocialSecurity");
	  } 
		if(ssn1.type=='password')
		{ssn1.type='text'
		ssn2.type='text'
			ssn3.type='text';
		}
	else if (ssn1.type=='text')
	{ssn1.type='password'
		ssn2.type='password'
			ssn3.type='password';
	}
		
	}
	
	//for OKTA on/off switch ILIES-275036
	function redirectToOktalogin(oktaloginURL)
	{
		event.preventDefault();
		console.log("Redirecting to OktaSAML Login ")
		window.location=oktaloginURL;
	}

	function processOktaLoginOrSubmitApplyForBenefits(frm,value,validate,loggedInUser,wid,oktaloginURL){	
		var selectedRadio = getRadioButtonValue();
		if(!validateSession(loggedInUser,wid) && (selectedRadio !="undefined" && (selectedRadio=='continue' || selectedRadio=='status')))
		{
			redirectToOktalogin(oktaloginURL);		
		}else
		{
			setActionFieldAndSubmit(frm,value,validate);
		}
	}

	function getRadioButtonValue()
	{
		var selectedRadio;
		var inputs = document.getElementsByTagName('input');
		for ( var i = 0; i < inputs.length; i++) {
			if (inputs[i].type === 'radio') {
				if (inputs[i].checked) {
					selectedRadio = inputs[i].value;
				}
			}
		}
		return selectedRadio;
	}

	function processOktaLoginOrSubmitCreateAccount(frm,value,validate,oktaloginURL,oktaSignUpURL,requestAccessURL){	
		
		var selectedRadio = getRadioButtonValue();
		if((selectedRadio !="undefined" && selectedRadio=='logIn'))
		{
			redirectToOktalogin(oktaloginURL);		
		}else if(selectedRadio !="undefined" && selectedRadio=='createAcc')
		{
			event.preventDefault();
			console.log("Redirecting to OktaSAML Registration page ")
			var LoginPageURI=oktaSignUpURL;
			window.location=LoginPageURI;		
		}else if(selectedRadio !="undefined" && selectedRadio=='requestAccess')
		{
			event.preventDefault();
			console.log("Redirecting to OktaSAML Registration page ")
			var LoginPageURI=requestAccessURL;
			window.location=LoginPageURI;		
		}
		else{
			setActionFieldAndSubmit(frm,value,validate);
		}
	}
	
	function processOktaLoginOrActionFieldAndSubmit(frm,value,validate,loggedInUser,wid,oktaloginURL){	

		if(validateSession(loggedInUser,wid)){
			setActionFieldAndSubmit(frm,value,validate);
		}else
		{
			redirectToOktalogin(oktaloginURL);
		}
	}

	function validateSession(loggedInUser,wid){
		if(loggedInUser!="" && wid!="" )
			return true;
		else 
			return false;
	}