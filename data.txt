1)
class Parent {
static void print() {
System.out.println("Parent");
}
}
class Child extends Parent {
static void print() {
System.out.println("Child");
}
public static void main(String[] args) {
Parent obj = new Child();
obj.print();
}
}


Wrong Answer

public class Test5 {
public static void main(String[] args) {
int i = 0;
i = i++ + ++i;
System.out.println(i);
}
}

Wrong Answer


public class MapTest {
public static void main(String[] args) {
Map<String, String> map = new HashMap<>();
map.put(null, "One");
map.put(null, "Two");
System.out.println(map.size());
System.out.println(map.get(null));
}
}

Correct 

public class StringTest {
public static void main(String[] args) {
String s = "abc";
s.concat("def");
System.out.println(s);
}
}

Wrong 

@RestController
public class HelloController {

@GetMapping("/hello")
public String hello() {
return null;
}
}

Wrong


What happens if `@Entity` class has no `@Id`?
@Entity
public class Product {
private String name;
}

confused


What’s wrong with this repository?

public interface UserRepo extends JpaRepository<User, Long> {
User findByEmail(String email);
List<User> findByAge(int age);
void deleteByName(String name);
}

very confused

8)
@Configuration
public class AppConfig {
@Bean
public String message() {
return "From Config";
}
}

@RestController
public class HelloController {
@Bean
public String message() {
return "From Controller";
}
}


Q: Will the application start?

confused


hat happens if you configure two data sources but don’t mark any as `@Primary` or use `@Qualifier`?

partially correct



@Entity
public class Book {
@ManyToOne(fetch = FetchType.LAZY)
private Author author;
}



@GetMapping("/book/{id}")
public Book getBook(@PathVariable Long id) {
return bookRepository.findById(id).get();
}


Q: What happens when you call `/book/1`?

Wrong Answer


@Transactional
public void updateUserEmail(Long id) {
User u = userRepository.findById(id).get();
u.setEmail("new@example.com");
}

no save method
Q: Will the email be updated in DB?

Wrong Answer


Given a table `employee(name, salary)`, get 2nd highest salary:
correct answer
 
Find duplicates in a column `email` of `users` table:
correct answer

