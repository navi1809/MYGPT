import javax.xml.bind.*;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;

import java.io.StringWriter;

public class OutboundFFMHelper {

    public String marshallRestAccountData(AccountTransferRequestPayloadType accountTransferRequestPayloadType) throws InterfacesException {
        try {
            // Step 1: Create JAXB Context and Marshaller
            JAXBContext jaxbContext = JAXBContext.newInstance(AccountTransferRequestPayloadType.class);
            Marshaller marshaller = jaxbContext.createMarshaller();
            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);

            // Step 2: Marshal to DOM
            Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
            marshaller.marshal(accountTransferRequestPayloadType, doc);

            // Step 3: Remove nil elements only from RootWrapper
            XmlNilCleaner.removeNilsUnderElement(doc, "RootWrapper");

            // Step 4: Convert DOM to XML string
            Transformer transformer = TransformerFactory.newInstance().newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");

            StringWriter writer = new StringWriter();
            transformer.transform(new DOMSource(doc), new StreamResult(writer));

            return writer.toString();

        } catch (JAXBException | ParserConfigurationException | TransformerException e) {
            throw new InterfacesException("Error marshalling AccountTransferRequestPayloadType", e);
        }
    }
}
