package IVA_Batch;
import egl.core.*;
import CommonMigratedParts.*;
import DataTables.*;
//*** PROGRAM=AIN90A ****
// /*
// COMPONENT NAME: AIN90A
// ===============
// /*
// DESCRIPTION:
// ============
// This application was created to prepare five files for
// Nevada Check Up.
// ***********************
Program AIN90A type basicProgram //VAGen Info - main batch program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes
  }

  // Data Declarations
  AIN90W AIN90W; // record
  AIN90W1 AIN90W1; // record
  AIN90W2 AIN90W2; // record
  AIN90W3 AIN90W3; // record
  AIN90W4 AIN90W4; // record
  AIN90W5 AIN90W5; // record
  AIN90W6 AIN90W6; // record
  CEP01W CEP01W; // record
  H2-2-CMH-PER H2-2-CMH-PER; // record
  H2-2-EVM-EVR H2-2-EVM-EVR; // record
  H2-2-FCH-PSY H2-2-FCH-PSY; // record
  H2-2-MIP-PCO H2-2-MIP-PCO; // record
  H2-AFDC-WRNT H2-AFDC-WRNT; // record
  H2-BUS-INCM-DTLS H2-BUS-INCM-DTLS; // record
  H2-CASE-MEMBER-HST H2-CASE-MEMBER-HST; // record
  H2-EMPLOYER H2-EMPLOYER; // record
  H2-GEN-ASST-INC-DT H2-GEN-ASST-INC-DT; // record
  H2-INSURANCE-CO-CD H2-INSURANCE-CO-CD; // record
  H2-JOB-INCM-DTLS H2-JOB-INCM-DTLS; // record
  H2-LSUM-RSRCE-DTLS H2-LSUM-RSRCE-DTLS; // record
  H2-MASS-CHNG-PARMS H2-MASS-CHNG-PARMS; // record
  H2-MEMBER-REL H2-MEMBER-REL; // record
  H2-OTH-ERND-INC-DT H2-OTH-ERND-INC-DT; // record
  H2-PAY-DTLS H2-PAY-DTLS; // record
  H2-PERSON H2-PERSON; // record
  H2-PERSON-ADRS-HST H2-PERSON-ADRS-HST; // record
  H2-PERSON-HSTRY H2-PERSON-HSTRY; // record
  H2-PRGNCY-DTLS H2-PRGNCY-DTLS; // record
  H2-RM-BRDR-INC-DTL H2-RM-BRDR-INC-DTL; // record
  H2-RNTL-INCM-DTL H2-RNTL-INCM-DTL; // record
  H2-RNTL-MAINT-EXP H2-RNTL-MAINT-EXP; // record
  H2-STDNT-GR-INC-DT H2-STDNT-GR-INC-DT; // record
  H2-UERND-INCM-DTL H2-UERND-INCM-DTL; // record
  H3-2-EVM-EVR H3-2-EVM-EVR; // record
  H3-MEMBER-REL H3-MEMBER-REL; // record
  H3-PERSON-ADRS-HST H3-PERSON-ADRS-HST; // record
  SR-AIN90-ADULT-OUT SR-AIN90-ADULT-OUT; // record
  SR-AIN90-CHILD-OUT SR-AIN90-CHILD-OUT; // record
  SR-AIN90-EMPLR-OUT SR-AIN90-EMPLR-OUT; // record
  SR-AIN90-GUARD-OUT SR-AIN90-GUARD-OUT; // record
  SR-AIN90-OINCM-OUT SR-AIN90-OINCM-OUT; // record
  SR-AIN90-REC-IN SR-AIN90-REC-IN; // record
  VCOMMON VCOMMON; // record
  VCONTROL VCONTROL; // record
  VDBCOMMON VDBCOMMON; // record
  VDBCONTROL VDBCONTROL; // record
  VMESSAGE VMESSAGE; // record
  VSTRREC4 VSTRREC4; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use VDB00T1 {deleteAfterUse = yes}; // table

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    AIN90P9-MAIN: AIN90P9-MAIN();
  end // end main
end // end AIN90A


// INQURY Message Text Data
Function AIN90P9-ADW-Q1()
  /* Perform standard database application initialization*/
  WDB00PI();
  /*  */
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";

  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-AFDC-WRNT";
  VDBCONTROL.UPROC-OBJ = "H2-AFDC-WRNT";
  VDBCONTROL.UPROC-NM = "AIN90P9-ADW-Q1";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  /*  */
  try
    open AIN90P9-ADW-Q1_RSI01
      with #sql{
        select WRNT_AMT
        from TWNAFDC_WRNT T1
        WHERE
             ici          = :ICI
        and  BNFT_YR      = :BNFT-YR
        AND  BNFT_MTH     = :BNFT-MTH
        AND  SSN          = :SSN
        and  WRNT_STS_CD IN ('CH', 'IS')
        FOR FETCH ONLY
         --** INSERT ORDER BY CLAUSE HERE **
      }      
      into WRNT-AMT
      for H2-AFDC-WRNT ;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";

  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-ADW-Q1


// SCAN Retrieved Rows
Function AIN90P9-ADW-QS1()
  /* This process SCANs the retrieved rows from the previous SETINQ.*/
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-AFDC-WRNT";
  VDBCONTROL.UPROC-OBJ = "H2-AFDC-WRNT";
  VDBCONTROL.UPROC-NM = "AIN90P9-ADW-QS1";
  VDBCONTROL.UPROC-OPT = "SCAN";
  /*  */
  try
    get next H2-AFDC-WRNT ;
  end
  /*  */
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";

  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end


  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
end // end AIN90P9-ADW-QS1


// INQURY Message Text Data
Function AIN90P9-BID-Q1()
  /* Perform standard database application initialization*/
  WDB00PI();
  /*  */
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";

  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-BUS-INCM-DTLS";
  VDBCONTROL.UPROC-OBJ = "H2-BUS-INCM-DTLS";
  VDBCONTROL.UPROC-NM = "AIN90P9-BID-Q1";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  /*  */
  try
    open AIN90P9-BID-Q1_RSI01
      with #sql{
        select MTHLY_TIPS_AMT,
            MTHLY_GRS_INC_AMT,
            FREQ_CD,
            BUS_EXP_AMT
        from twnbus_incm_dtls T1
        WHERE
             UPI = :UPI
        AND  PRD_BEG_DT <= :PRD-BEG-DT
        AND  PRD_END_DT >= :PRD-END-DT
        AND  MAINT_CD <> 'D'
        AND  BU_INC_VERF_CD IN('Y', 'C')
        AND  AFDC_CNTBL_IND = 'Y'
        for fetch only
         --** INSERT ORDER BY CLAUSE HERE **
      }      
      into MTHLY-TIPS-AMT,
           MTHLY-GRS-INC-AMT,
           FREQ-CD,
           BUS-EXP-AMT
      for H2-BUS-INCM-DTLS ;
  end
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";

  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-BID-Q1


// SCAN Retrieved Rows
Function AIN90P9-BID-QS1()
  /* This process SCANs the retrieved rows from the previous SETINQ.*/
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-BUS-INCM-DTLS";
  VDBCONTROL.UPROC-OBJ = "H2-BUS-INCM-DTLS";
  VDBCONTROL.UPROC-NM = "AIN90P9-BID-QS1";
  VDBCONTROL.UPROC-OPT = "SCAN";
  /*  */
  try
    get next H2-BUS-INCM-DTLS ;
  end
  /*  */
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";

  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end


  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
end // end AIN90P9-BID-QS1


Function AIN90P9-BLD-CHILD()
  WS-CHILD-INDEX = 1;
  while (WS-CHILD-INDEX <= 25 && AIN90W3.WS-HH-SSN[WS-CHILD-INDEX] > " ")
    SR-AIN90-CHILD-OUT.SR-CHILD = AIN90W3.WS-CHILD[WS-CHILD-INDEX];
    AIN90P9-WRITE-CHD();
    WS-CHILD-INDEX = WS-CHILD-INDEX + 1;
  end
end // end AIN90P9-BLD-CHILD


Function AIN90P9-BLD-EMPL()
  AIN90W.WS-EMPLOYMENT-INDEX = 1;
  while (AIN90W.WS-EMPLOYMENT-INDEX <= 50 && 
  AIN90W4.WS-HH-SSN[WS-EMPLOYMENT-INDEX] > " ")
    SR-AIN90-EMPLR-OUT.SR-EMPLOYMENT = AIN90W4.WS-EMPLOYMENT[WS-EMPLOYMENT-INDEX];
    AIN90P9-WRITE-EMP();
    AIN90W.WS-EMPLOYMENT-INDEX = AIN90W.WS-EMPLOYMENT-INDEX + 1;
  end
end // end AIN90P9-BLD-EMPL


Function AIN90P9-BLD-FILES()
  AIN90P9-BLD-GRDIAN();
  AIN90P9-BLD-CHILD();
  AIN90P9-BLD-OADULT();
  AIN90P9-BLD-EMPL();
  AIN90P9-BLD-OINCM();
end // end AIN90P9-BLD-FILES


Function AIN90P9-BLD-GRDIAN()
  SR-AIN90-GUARD-OUT.SR-GUARDIAN = AIN90W5.WS-GUARDIAN;
  AIN90P9-WRITE-GRD();
end // end AIN90P9-BLD-GRDIAN


Function AIN90P9-BLD-MBR-A()
  /* -----------------------------------------------------------------------*/
  /* This process populates the AIN90W1 Working storage record with*/
  /* information about each member in the case.*/
  /* -----------------------------------------------------------------------*/
  /*  */
  set H2-MEMBER-REL empty;

  H2-MEMBER-REL.PRD-BEG-DT = AIN90W.WS-PREV-BEG-DT;
  H2-MEMBER-REL.PRD-END-DT = AIN90W.WS-PREV-END-DT;
  H2-MEMBER-REL.ICI = H2-2-EVM-EVR.ICI;

  AIN90P9-MRR-Q1(); /* Find HOH UPI*/

  set H2-2-CMH-PER empty;

  H2-2-CMH-PER.PRD-BEG-DT = AIN90W.WS-PREV-BEG-DT;
  H2-2-CMH-PER.PRD-END-DT = AIN90W.WS-PREV-END-DT;
  H2-2-CMH-PER.ICI = H2-2-EVM-EVR.ICI;

  AIN90P9-CMH-PER-Q1(); /* Get all members*/

  AIN90W.WS-MBR-INDEX = 1;

  while (H2-2-CMH-PER not ioError && AIN90W.WS-MBR-INDEX <= 25)
    AIN90P9-CMH-PER-S1(); /* Read the member*/
    if (H2-2-CMH-PER not ioError)

      set H3-MEMBER-REL empty;

      H3-MEMBER-REL.PRD-BEG-DT = AIN90W.WS-PREV-BEG-DT;
      H3-MEMBER-REL.PRD-END-DT = AIN90W.WS-PREV-END-DT;
      H3-MEMBER-REL.ICI = H2-2-EVM-EVR.ICI;
      H3-MEMBER-REL.FROM-UPI = H2-MEMBER-REL.FROM-UPI;
      H3-MEMBER-REL.TO-UPI = H2-2-CMH-PER.UPI;

      AIN90P9-MRR-Q2(); /* Get relationship code*/

      AIN90W1.WS-TANF-CRTKR-IND[WS-MBR-INDEX] = H2-2-CMH-PER.TANF-CRTKR-IND;
      AIN90W1.WS-HH-LEFT-DT[WS-MBR-INDEX] = H2-2-CMH-PER.HH-LEFT-DT;
      AIN90W1.WS-PCN-CD[WS-MBR-INDEX] = H2-2-CMH-PER.PCN-CD;
      AIN90W1.WS-JOIN-HH-DT[WS-MBR-INDEX] = H2-2-CMH-PER.JOIN-HH-DT;
      AIN90W1.WS-FRST-NM[WS-MBR-INDEX] = H2-2-CMH-PER.FRST-NM;
      AIN90W1.WS-LST-NM[WS-MBR-INDEX] = H2-2-CMH-PER.LST-NM;
      AIN90W1.WS-MID-NM[WS-MBR-INDEX] = H2-2-CMH-PER.MID-NM;
      AIN90W1.WS-SEX-CD[WS-MBR-INDEX] = H2-2-CMH-PER.SEX-CD;
      AIN90W1.WS-ETHNC-CD[WS-MBR-INDEX] = H2-2-CMH-PER.ETHNC-CD;
      AIN90W1.WS-SSN[WS-MBR-INDEX] = H2-2-CMH-PER.SSN;
      AIN90W1.WS-DOB[WS-MBR-INDEX] = H2-2-CMH-PER.DOB;
      AIN90W1.WS-UPI[WS-MBR-INDEX] = H2-2-CMH-PER.UPI;
      AIN90W1.WS-AGE-OF-MEMBER[WS-MBR-INDEX] = AIN90W.WS-AGE-OF-MEMBER;
      AIN90W1.WS-RELSH-CD[WS-MBR-INDEX] = H3-MEMBER-REL.RELSH-CD;
      AIN90W1.WS-HM-PHN-NMB[WS-MBR-INDEX] = H2-2-CMH-PER.HM-PHN-NMB;

  /* WI23901 - Add Medicaid Billing Number to file*/
      AIN90W1.WS-MEDIC-BLNG-SQ-NMB[WS-MBR-INDEX] = H2-2-CMH-PER.MEDIC-BLNG-SQ-NMB;

      AIN90W.WS-MBR-INDEX = AIN90W.WS-MBR-INDEX + 1;

    end /* End not err*/
  end /* End not err*/
  /* End of AIN90P9-BLD-MBR-A*/
end // end AIN90P9-BLD-MBR-A


Function AIN90P9-BLD-OADULT()
  AIN90W.WS-OTHER-ADULT-INDEX = 1;
  while (AIN90W.WS-OTHER-ADULT-INDEX <= 25 && 
  AIN90W2.WS-HH-SSN[WS-OTHER-ADULT-INDEX] > " ")
    SR-AIN90-ADULT-OUT.SR-OTHER-ADULT = AIN90W2.WS-OTHER-ADULT[WS-OTHER-ADULT-INDEX];
    AIN90P9-WRITE-ADLT();
    AIN90W.WS-OTHER-ADULT-INDEX = AIN90W.WS-OTHER-ADULT-INDEX + 1;
  end
end // end AIN90P9-BLD-OADULT


Function AIN90P9-BLD-OINCM()
  AIN90W.WS-OINCOME-INDEX = 1;
  while (AIN90W.WS-OINCOME-INDEX <= 225 && 
  AIN90W6.WS-HH-SSN[WS-OINCOME-INDEX] > " ")
    SR-AIN90-OINCM-OUT.SR-OTHER-INCOME = AIN90W6.WS-OTHER-INCOME[WS-OINCOME-INDEX];
    AIN90P9-WRITE-OINC();
    AIN90W.WS-OINCOME-INDEX = AIN90W.WS-OINCOME-INDEX + 1;
  end
end // end AIN90P9-BLD-OINCM


Function AIN90P9-CHILD()
  /* -----------------------------------------------------------------------*/
  /* This process retrieves information about the Child that is needed*/
  /* to populate the Child working storage record.*/
  /* -----------------------------------------------------------------------*/
  /*  */

  AIN90W.WS-CHILD-INDEX = AIN90W.WS-CHILD-INDEX + 1;

  /* ***** Get Nevada Check Up Flag *******/

  set H3-2-EVM-EVR empty;

  H3-2-EVM-EVR.BNFT-MTH = AIN90W.WS-BNFT-MTH;
  H3-2-EVM-EVR.BNFT-YR = AIN90W.WS-BNFT-YR;
  H3-2-EVM-EVR.UPI = AIN90W1.WS-UPI[WS-MBR-INDEX];

  AIN90P9-EVM-EVR-Q2();

  /* ***** Get Child's Citizenship *******/

  set H2-PERSON-HSTRY empty;

  H2-PERSON-HSTRY.PRD-BEG-DT = AIN90W.WS-PREV-BEG-DT;
  H2-PERSON-HSTRY.PRD-END-DT = AIN90W.WS-PREV-END-DT;
  H2-PERSON-HSTRY.UPI = AIN90W1.WS-UPI[WS-MBR-INDEX];

  AIN90P9-PEH-Q1();

  /* ***** Get Insurance Policy Information *******/

  set H2-2-MIP-PCO empty;

  H2-2-MIP-PCO.PRSNS-COVRD-UPI = AIN90W1.WS-UPI[WS-MBR-INDEX];

  AIN90P9-MIP-PCO-Q1(); /* Get all insurance policies*/

  AIN90W3.WS-CH-INS[WS-CHILD-INDEX] = "N";
  AIN90W3.WS-MORE-INSURANCE[WS-CHILD-INDEX] = "N";

  while (H2-2-MIP-PCO not ioError)
    AIN90P9-MIP-PCO-S1(); /* Read the case*/
    if (H2-2-MIP-PCO not ioError)

      if (VDBCONTROL.UROWR == 1) /* Child has insurance flag*/
        AIN90W3.WS-CH-INS[WS-CHILD-INDEX] = "Y";

        /* ** Get Insurance Company Information *******/

        set H2-INSURANCE-CO-CD empty;

        H2-INSURANCE-CO-CD.INSRNC-CD = H2-2-MIP-PCO.INSU-CMPNY-CD;

        AIN90P9-ICO-Q1();

        AIN90P9-MOVE-CHINS(); /* Move child insurance info to outrec*/

      else /* Child has more than 1 insurance*/

        AIN90W3.WS-MORE-INSURANCE[WS-CHILD-INDEX] = "Y";

      end /* End not err*/
    end /* End not err*/
  end /* End While*/

  /* **** Get child inactive info (left household dt) ******/

  if (AIN90W1.WS-HH-LEFT-DT[WS-MBR-INDEX] != "9999-12-31")

    AIN90W3.WS-CH-INACTIVE[WS-CHILD-INDEX] = "Y";

  else

    AIN90W3.WS-CH-INACTIVE[WS-CHILD-INDEX] = "N";

  end

  /* ***** Get PREGNANCY details *******/

  set H2-PRGNCY-DTLS empty;
  AIN90W.WS-PREG-DT = " ";

  if (AIN90W1.WS-SEX-CD[WS-MBR-INDEX] == "F") /* perform if member is female*/

    H2-PRGNCY-DTLS.PRD-BEG-DT = AIN90W.WS-PREV-BEG-DT;
    H2-PRGNCY-DTLS.PRD-END-DT = AIN90W.WS-PREV-END-DT;
    H2-PRGNCY-DTLS.UPI = AIN90W1.WS-UPI[WS-MBR-INDEX];

    AIN90P9-PGD-Q1();

    AIN90W.WS-PREG-DT = H2-PRGNCY-DTLS.DUE-DT;

  end

  AIN90P9-FRMT-CHILD(); /* Format CHILD working storage*/

  AIN90P9-OTHER-INC(); /* Process other income info*/
end // end AIN90P9-CHILD


// Produce member information
Function AIN90P9-CMH-PER-Q1()
  /* Perform standard database application initialization*/
  WDB00PI();
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";
  /*  */
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-2-CMH-PER";
  VDBCONTROL.UPROC-OBJ = "H2-2-CMH-PER";
  VDBCONTROL.UPROC-NM = "AIN90P9-CMH-PER-Q1";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  /*  */
  try
    open AIN90P9-CMH-PER-Q1_RSI01
      with #sql{
        select T1.TANF_CRTKR_IND, T1.HH_LEFT_DT, T1.PCN_CD, T1.JOIN_HH_DT,
              T2.FRST_NM, T2.LST_NM,T2.MID_NM, T2.SEX_CD, T2.ETHNC_CD,
              T2.SSN, T2.DOB, T2.UPI, T2.HM_PHN_NMB, T2.MEDIC_BLNG_SQ_NMB,
              ( DATE(:AIN90W.WS-CALC-DT) - DATE(T2.DOB) )
        from TWNCASE_MEMBER_HST T1,
             TWNPERSON T2
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
             WHERE T1.UPI = T2.UPI
             AND   T1.ICI = :ICI
             AND   T1.PRD_BEG_DT <= :PRD-BEG-DT
             AND   T1.PRD_END_DT >= :PRD-END-DT
             AND   T1.MAINT_CD   <> 'D'
             FOR FETCH ONLY
         --** INSERT ORDER BY CLAUSE HERE **
      }      
      into TANF-CRTKR-IND, HH-LEFT-DT, PCN-CD, JOIN-HH-DT, FRST-NM,
           LST-NM,MID-NM, SEX-CD, ETHNC-CD, SSN, DOB,
           UPI,HM-PHN-NMB,MEDIC-BLNG-SQ-NMB, AIN90W.WS-AGE-OF-MEMBER
      for H2-2-CMH-PER ;
  end
  /*  */
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-CMH-PER-Q1


// SCAN retrieved rows
Function AIN90P9-CMH-PER-S1()
  /* This process SCANs the retrieved rows from the previous SETINQ.*/
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-2-CMH-PER";
  VDBCONTROL.UPROC-OBJ = "H2-2-CMH-PER";
  VDBCONTROL.UPROC-NM = "AIN90P9-CMH-PER-S1";
  VDBCONTROL.UPROC-OPT = "SCAN";
  try
    get next H2-2-CMH-PER ;
  end

  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";

  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end

  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
end // end AIN90P9-CMH-PER-S1


// INQURY Message Text Data
Function AIN90P9-CMH-Q1()
  /* Perform standard database application initialization*/
  WDB00PI();
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";
  /*  */
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-CASE-MEMBER-HST";
  VDBCONTROL.UPROC-OBJ = "H2-CASE-MEMBER-HST";
  VDBCONTROL.UPROC-NM = "AIN90P9-CMH-Q1";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  /*  */
  try
    get H2-CASE-MEMBER-HST singleRow
      with #sql{
        select COUNT(*)
        from TWNCASE_MEMBER_HST T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
             WHERE ICI =  :ICI
             AND   T1.PRD_BEG_DT <= :PRD-BEG-DT
             AND   T1.PRD_END_DT >= :PRD-END-DT
             AND  (T1.HH_LEFT_DT  = '9999-12-31'
             OR   (T1.JOIN_HH_DT <> '9999-12-31'
             AND   T1.HH_LEFT_DT  < T1.JOIN_HH_DT))
             AND NOT EXISTS
                  (SELECT * FROM TWNMEMBER_REL T2
                   WHERE T2.ICI         = T1.ICI
                   AND   T2.TO_UPI      = T1.UPI
                   AND   T2.PRD_BEG_DT <= :PRD-BEG-DT
                   AND   T2.PRD_END_DT >= :PRD-END-DT
                   AND   T2.RELSH_CD    = '13')
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into AIN90W.WS-MBR-COUNT ;
  end
  /*  */
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-CMH-Q1


// INQURY Message Text Data
Function AIN90P9-CMH-Q2()
  /* Perform standard database application initialization*/
  WDB00PI();
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";
  /*  */
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-CASE-MEMBER-HST";
  VDBCONTROL.UPROC-OBJ = "H2-CASE-MEMBER-HST";
  VDBCONTROL.UPROC-NM = "AIN90P9-CMH-Q1";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  /*  */
  try
    open AIN90P9-CMH-Q2_RSI01
      with #sql{
        select ICI
        from TWNCASE_MEMBER_HST T1
        WHERE
            UPI = :UPI
        AND PRD_BEG_DT <= :PRD-BEG-DT
        AND PRD_END_DT >= :PRD-END-DT
        FOR FETCH ONLY
         --** INSERT ORDER BY CLAUSE HERE **
      }      
      into ICI
      for H2-CASE-MEMBER-HST ;
  end
  /*  */
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-CMH-Q2


// SCAN Retrieved Rows
Function AIN90P9-CMH-QS2()
  /* This process SCANs the retrieved rows from the previous SETINQ.*/
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-CASE-MEMBER-HST";
  VDBCONTROL.UPROC-OBJ = "H2-CASE-MEMBER-HST";
  VDBCONTROL.UPROC-NM = "AIN90P9-CMH-QS2";
  VDBCONTROL.UPROC-OPT = "SCAN";
  try
    get next H2-CASE-MEMBER-HST ;
  end
  /*  */
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";

  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end


  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
end // end AIN90P9-CMH-QS2


// CONCAT HOUSE-NO STR-DIR STR-NM
Function AIN90P9-CONCAT-AD1()
  set VSTRREC4 empty;
  VSTRREC4.USTRING = H2-PERSON-ADRS-HST.HOUSE-NMB;
  VSTRREC4.USTRLEN = 8;
  VSTRREC4.UCONCAT = H2-PERSON-ADRS-HST.STR-DIR;
  VSTRREC4.UCONLEN = 2;
  VSTRREC4.UCONCAT2 = H2-PERSON-ADRS-HST.STR-NM;
  VSTRREC4.UCONLEN2 = 25;
  VSTRREC4.UCONCAT3 = H2-PERSON-ADRS-HST.STR-TYPE;
  VSTRREC4.UCONLEN3 = 4;
  call "WST50A" (VSTRREC4);
  if (VSTRREC4.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  AIN90W.WS-ADDRESS1 = VSTRREC4.USTRING;
  set VSTRREC4 empty;
  VSTRREC4.USTRING = AIN90W.WS-ADDRESS1;
  VSTRREC4.USTRLEN = 50;
  VSTRREC4.UCONCAT = H2-PERSON-ADRS-HST.APT-NMB;
  VSTRREC4.UCONLEN = 5;
  call "WST50A" (VSTRREC4);
  if (VSTRREC4.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  AIN90W.WS-ADDRESS1 = VSTRREC4.USTRING;
end // end AIN90P9-CONCAT-AD1


// CONCAT HOUSE-NO STR-DIR STR-NM
Function AIN90P9-CONCAT-AD2()
  set VSTRREC4 empty;
  VSTRREC4.USTRING = H3-PERSON-ADRS-HST.HOUSE-NMB;
  VSTRREC4.USTRLEN = 8;
  VSTRREC4.UCONCAT = H3-PERSON-ADRS-HST.STR-DIR;
  VSTRREC4.UCONLEN = 2;
  VSTRREC4.UCONCAT2 = H3-PERSON-ADRS-HST.STR-NM;
  VSTRREC4.UCONLEN2 = 25;
  VSTRREC4.UCONCAT3 = H3-PERSON-ADRS-HST.STR-TYPE;
  VSTRREC4.UCONLEN3 = 4;
  call "WST50A" (VSTRREC4);
  if (VSTRREC4.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  AIN90W.WS-ADDRESS2 = VSTRREC4.USTRING;
  set VSTRREC4 empty;
  VSTRREC4.USTRING = AIN90W.WS-ADDRESS2;
  VSTRREC4.USTRLEN = 50;
  VSTRREC4.UCONCAT = H3-PERSON-ADRS-HST.APT-NMB;
  VSTRREC4.UCONLEN = 5;
  call "WST50A" (VSTRREC4);
  if (VSTRREC4.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  AIN90W.WS-ADDRESS2 = VSTRREC4.USTRING;
end // end AIN90P9-CONCAT-AD2


// Process Each Person
Function AIN90P9-DO-CASE()
  set AIN90W1 empty; /* Init member array*/

  AIN90P9-BLD-MBR-A(); /* Build member array*/

  AIN90P9-MBR-TYPE(); /* Determine member type*/

  /* End of AIN90P9-DO-CASE*/
end // end AIN90P9-DO-CASE


Function AIN90P9-DO-GRDIAN()
  /* -----------------------------------------------------------------------*/
  /* The following process determines who in the AIN90W1 Array is the*/
  /* Guardian.  Once the Guardian is identified based on the following*/
  /* hiearchy a "G" is moved to their member type field.The process then*/
  /* goes on to build the working storage areas for the guardian,*/
  /* employment and other income.*/
  /* -----------------------------------------------------------------------*/
  /*  */


  if ("N" in AIN90W1.WS-TANF-CRTKR-IND) /* non-needy caretaker (con)*/
    AIN90W1.WS-MEMBER-TYPE[sysVar.arrayIndex] = "G";
  else

    if ("K" in AIN90W1.WS-TANF-CRTKR-IND) /* non-needy caretaker (cok)*/
      AIN90W1.WS-MEMBER-TYPE[sysVar.arrayIndex] = "G";
    else

      if ("C" in AIN90W1.WS-TANF-CRTKR-IND) /* caretaker*/
        AIN90W1.WS-MEMBER-TYPE[sysVar.arrayIndex] = "G";
      else

        if ("1" in AIN90W1.WS-TANF-CRTKR-IND) /* caretaker (sh1)*/
          AIN90W1.WS-MEMBER-TYPE[sysVar.arrayIndex] = "G";
        else

          if ("2" in AIN90W1.WS-TANF-CRTKR-IND) /* caretaker (sh2)*/
            AIN90W1.WS-MEMBER-TYPE[sysVar.arrayIndex] = "G";
          else

            if ("01" in AIN90W1.WS-RELSH-CD &&  /* head of household*/
            AIN90W1.WS-AGE-OF-MEMBER[sysVar.arrayIndex] >= 180000)
              AIN90W1.WS-MEMBER-TYPE[sysVar.arrayIndex] = "G";
            else

              if ("04" in AIN90W1.WS-RELSH-CD) /* parent of applicant*/
                AIN90W1.WS-MEMBER-TYPE[sysVar.arrayIndex] = "G";
              else

                if ("19" in AIN90W1.WS-RELSH-CD) /* othr specfd adult rltve*/
                  AIN90W1.WS-MEMBER-TYPE[sysVar.arrayIndex] = "G";
                else

                  if ("30" in AIN90W1.WS-RELSH-CD) /* step parent*/
                    AIN90W1.WS-MEMBER-TYPE[sysVar.arrayIndex] = "G";
                  else

                    if ("08" in AIN90W1.WS-RELSH-CD &&  /* sibling*/
                    AIN90W1.WS-AGE-OF-MEMBER[sysVar.arrayIndex] >= 180000)
                      AIN90W1.WS-MEMBER-TYPE[sysVar.arrayIndex] = "G";
                    else

                      if ("18" in AIN90W1.WS-RELSH-CD &&  /* step bro/sis*/
                      AIN90W1.WS-AGE-OF-MEMBER[sysVar.arrayIndex] >= 180000)
                        AIN90W1.WS-MEMBER-TYPE[sysVar.arrayIndex] = "G";
                      else

                        if ("09" in AIN90W1.WS-RELSH-CD &&  /* 1st/2nd csn*/
                        AIN90W1.WS-AGE-OF-MEMBER[sysVar.arrayIndex] >= 180000)
                          AIN90W1.WS-MEMBER-TYPE[sysVar.arrayIndex] = "G";
                        else

                          if ("10" in AIN90W1.WS-RELSH-CD &&  /* other reltiv*/
                          AIN90W1.WS-AGE-OF-MEMBER[sysVar.arrayIndex] >= 180000)
                            AIN90W1.WS-MEMBER-TYPE[sysVar.arrayIndex] = "G";
                          else

                            if ("12" in AIN90W1.WS-RELSH-CD &&  /* friend*/
                            AIN90W1.WS-AGE-OF-MEMBER[sysVar.arrayIndex] >= 180000)
                              AIN90W1.WS-MEMBER-TYPE[sysVar.arrayIndex] = "G";
                            else

                              if ("21" in AIN90W1.WS-RELSH-CD && 
                               /* req mbr not hoh*/
                              AIN90W1.WS-AGE-OF-MEMBER[sysVar.arrayIndex] >= 180000)
                                AIN90W1.WS-MEMBER-TYPE[sysVar.arrayIndex] = "G";
                              else

                              end /* end IF '21'*/
                            end /* end IF '12'*/
                          end /* end IF '10'*/
                        end /* end IF '09'*/
                      end /* end IF '18'*/
                    end /* end IF '08'*/
                  end /* end IF '30'*/
                end /* end IF '19'*/
              end /* end IF '04'*/
            end /* end IF '01'*/
          end /* end IF '2'*/
        end /* end IF '1'*/
      end /* end IF 'c'*/
    end /* end IF 'k'*/
  end /* end IF 'n'*/

  /* WI 23901 -This IF was moved here due to if no one is over 18 in the*/
  /* household have the hoh be guardian even if under 18.*/
  if ("G" in AIN90W1.WS-MEMBER-TYPE) /* do nothing*/
  else
    if ("01" in AIN90W1.WS-RELSH-CD) /* head of household*/
      AIN90W1.WS-MEMBER-TYPE[sysVar.arrayIndex] = "G";
    end
  end

  /* Process guardian*/

  if ("G" in AIN90W1.WS-MEMBER-TYPE)
    AIN90W.WS-MBR-INDEX = sysVar.arrayIndex;
  end

  AIN90P9-GUARDIAN(); /* Build guardian record*/

  AIN90P9-EMPLOYMENT(); /* Build employment income records*/

  AIN90P9-OTHER-INC(); /* Build other income records*/
end // end AIN90P9-DO-GRDIAN


// INQURY Message Text Data
Function AIN90P9-EMP-Q1()
  /* Perform standard database application initialization*/
  WDB00PI();
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";
  /*  */
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-EMPLOYER";
  VDBCONTROL.UPROC-OBJ = "H2-EMPLOYER";
  VDBCONTROL.UPROC-NM = "AIN90P9-EMP-Q1";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  /*  */
  try
    get H2-EMPLOYER
      with #sql{
        select EMPLR_NM,
          CITY,
          ST_CD,
          ZIP_CD,
          PHN_NMB,
          PHN_EXT
        from TWNEMPLOYER T1
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE
         EMPLR_ID = :EMPLR-ID
        FOR FETCH ONLY
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into EMPLR-NM,
           CITY,
           ST-CD,
           ZIP-CD,
           PHN-NMB,
           PHN-EXT ;
  end
  /*  */
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-EMP-Q1


// Process Income for ea. month
Function AIN90P9-EMPLOYMENT()
  /* *** Beg comment ****/
  /* Determine the job income from the data entered*/
  /* on 'JINC' screens for the member.*/
  /* *** End comment ****/

  AIN90P9-JOB-INC();
end // end AIN90P9-EMPLOYMENT


// Produce case results
Function AIN90P9-EVM-EVR-Q1()
  /* Perform standard database application initialization*/
  WDB00PI();
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";
  /*  */
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-2-EVM-EVR";
  VDBCONTROL.UPROC-OBJ = "H2-2-EVM-EVR";
  VDBCONTROL.UPROC-NM = "AIN90P9-EVM-EVR-Q1";
  VDBCONTROL.UPROC-OPT = "SETINQ";
  /*  */
  try
    open AIN90P9-EVM-EVR-Q1_RSI01
      with #sql{
        select DISTINCT(T1.ICI)
        from TWNELG_VER_MBR T1,
             TWNELIG_VERSION T2
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE  T1.ICI                = T2.ICI
        AND    T1.BNFT_MTH           = T2.BNFT_MTH
        AND    T1.BNFT_YR            = T2.BNFT_YR
        AND    T1.VER_NMB            = T2.VER_NMB
        AND    T1.PRGM_CASE_TYPE     = T2.PRGM_CASE_TYPE
        AND    T1.NV_CHK_UP          = 'Y'
        AND    T1.BNFT_MTH           = :BNFT-MTH
        AND    T1.BNFT_YR            = :BNFT-YR
        AND    T1.PRGM_CASE_TYPE     = 'AF'
        AND    T2.LST_POSTD_VER_IND  = 'Y'
        AND NOT EXISTS
              (SELECT * FROM TWNELG_VER_MBR T3,
                             TWNELIG_VERSION T4
               WHERE T4.ICI               = T1.ICI
               AND   T4.PRGM_CASE_TYPE    = 'AF'
               AND ((T4.BNFT_YR           = :BNFT-YR
               AND   T4.BNFT_MTH          > :BNFT-MTH)
               OR    T4.BNFT_YR           > :BNFT-YR)
               AND   T4.LST_POSTD_VER_IND = 'Y'
               AND   T3.ICI               = T4.ICI
               AND   T3.PRGM_CASE_TYPE    = 'AF'
               AND   T3.BNFT_YR           = T4.BNFT_YR
               AND   T3.BNFT_MTH          = T4.BNFT_MTH
               AND   T3.VER_NMB           = T4.VER_NMB
               AND   T3.UPI               = T1.UPI
               AND   T3.ELIG_CD IN ('1','5','A','B'))
        FOR FETCH ONLY
         --** INSERT ORDER BY CLAUSE HERE **
      }      
      into ICI
      for H2-2-EVM-EVR ;
  end
  /*  */
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-EVM-EVR-Q1


// INQURY Message Text Data
Function AIN90P9-EVM-EVR-Q2()
  /* Perform standard database application initialization*/
  WDB00PI();
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";
  /*  */
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H3-2-EVM-EVR";
  VDBCONTROL.UPROC-OBJ = "H3-2-EVM-EVR";
  VDBCONTROL.UPROC-NM = "AIN90P9-EVM-EVR-Q2";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  /*  */
  try
    get H3-2-EVM-EVR
      with #sql{
        select T1.NV_CHK_UP
        from TWNELG_VER_MBR T1,
             TWNELIG_VERSION T2
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE  T1.ICI                = T2.ICI
        AND    T1.BNFT_MTH           = T2.BNFT_MTH
        AND    T1.BNFT_YR            = T2.BNFT_YR
        AND    T1.VER_NMB            = T2.VER_NMB
        AND    T1.PRGM_CASE_TYPE     = T2.PRGM_CASE_TYPE
        AND    T1.UPI                = :UPI
        AND    T1.NV_CHK_UP          = 'Y'
        AND    T1.BNFT_MTH           = :BNFT-MTH
        AND    T1.BNFT_YR            = :BNFT-YR
        AND    T1.PRGM_CASE_TYPE     = 'AF'
        AND    T2.LST_POSTD_VER_IND  = 'Y'
        FOR FETCH ONLY
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into NV-CHK-UP ;
  end
  /*  */
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-EVM-EVR-Q2


// SCAN retrieved rows
Function AIN90P9-EVM-EVR-S1()
  /* This process SCANs the retrieved rows from the previous SETINQ.*/
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-2-EVM-EVR";
  VDBCONTROL.UPROC-OBJ = "H2-2-EVM-EVR";
  VDBCONTROL.UPROC-NM = "AIN90P9-EVM-EVR-S1";
  VDBCONTROL.UPROC-OPT = "SCAN";
  try
    get next H2-2-EVM-EVR ;
  end
  /*  */
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
  /* Increment count of rows retrieved*/
  if (sysVar.sqlData.sqlcode == 0)
    VDBCONTROL.UROWR = VDBCONTROL.UROWR + 1;
  end
end // end AIN90P9-EVM-EVR-S1


// INQURY Message Text Data
Function AIN90P9-FCH-PSY-Q1()
  /* Perform standard database application initialization*/
  WDB00PI();
  /* Initialize:*/
  /* UACCTYP - Access type (R=read, W=write)*/
  /* UAPPLNAM - Application name*/
  VDBCONTROL.UACCTYP = "R";
  VDBCOMMON.UAPPLNAM = "AIN90A";
  /*  */
  /* Move name of SQL row record used to common record*/
  VDBCOMMON.USQLREC = "H2-2-FCH-PSY";
  VDBCONTROL.UPROC-OBJ = "H2-2-FCH-PSY";
  VDBCONTROL.UPROC-NM = "AIN90P9-FCH-PSY-Q1";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  /*  */
  try
    get H2-2-FCH-PSY
      with #sql{
        select T1.APPL_UPI, T2.APPL_DT, CURRENT_DATE
        from TWNFAM_CASE_HSTRY T1,
             TWNPRGM_CASE_HSTRY T2
         --** INSERT WHERE, GROUP BY AND HAVING CLAUSES HERE **
        WHERE T1.ICI = T2.ICI
        AND   T1.PRD_BEG_DT <= :PRD-BEG-DT
        AND   T1.PRD_END_DT >= :PRD-END-DT
        AND   T1.ICI         = :ICI
        AND   T2.PRD_BEG_DT <= :PRD-BEG-DT
        AND   T2.PRD_END_DT >= :PRD-END-DT
        FOR FETCH ONLY
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into APPL-UPI, APPL-DT, AIN90W.WS-CURRENT-DT ;
  end
  /*  */
  /* Set error control flags*/
  /* UNRF - No record found flag (Y,N,1)*/
  /* UDUP - Duplicate key flag (Y,N)*/
  VDBCOMMON.UNRF = "Y";
  VDBCOMMON.UDUP = "N";
  /* Perform DBM error processing*/
  WDB00PE-SQLERR();

  if (VDBCONTROL.URC > 104)
    WCM00P2-TO-CEP01A();
  end
  /*  */
end // end AIN90P9-FCH-PSY-Q1


Function AIN90P9-FED-LIMIT()
  /*  */
  /* GET THE FEDERAL POVERTY LEVEL BASED ON THE NEVADA CHECK UP NEEDS*/
  /* MASS CHANGE TYPE C01 CONTAINS THE 100% FEDERAL POVERTY LEVEL*/
  /*  */


  set H2-MASS-CHNG-PARMS empty;

  /*  */
  /* FETCH 100% POVERTY LIMIT  MASS_CHNG_TYPE IS 'C01'*/
  /*  */

  H2-MASS-CHNG-PARMS.MASS-CHNG-TYPE = "C01";
  H2-MASS-CHNG-PARMS.EFF-FR-DT = AIN90W.WS-PREV-BEG-DT;
  H2-MASS-CHNG-PARMS.EFF-TO-DT = AIN90W.WS-PREV-END-DT;
  H2-MASS-CHNG-PARMS.PRGM-TYPE = "CM";
  H2-MASS-CHNG-PARMS.MASS-CHNG-DATA-TYP = "P"; /* P - Production data*/

  if (AIN90W.WS-MBR-COUNT > 8)

    H2-MASS-CHNG-PARMS.RANGE-FR = 8;

  else

    H2-MASS-CHNG-PARMS.RANGE-FR = AIN90W.WS-MBR-COUNT;

  end

  AIN90P9-MCH-Q1();

  if (AIN90W.WS-MBR-COUNT > 8)

    AIN90W.WS-100-PERCENT-POVERTY-LEVEL = H2-MASS-CHNG-PARMS.MASS-CHNG-AMT1     + (H2-MASS-CHNG-PARMS.MASS-CHNG-AMT2     * (AIN90W.WS-MBR-COUNT - 8));

  else

    AIN90W.WS-100-PERCENT-POVERTY-LEVEL = H2-MASS-CHNG-PARMS.MASS-CHNG-AMT1;

  end

  /* Calculate 200% Poverty to be used for Nevada Check Up*/

  AIN90W.WS-200-PERCENT-POVERTY-LEVEL = AIN90W.WS-100-PERCENT-POVERTY-LEVEL * 2;

  /*  */
  /* END OF AIN90P9-FED-LIMIT*/
  /*  */
end // end AIN90P9-FED-LIMIT


Function AIN90P9-FRMT-ADULT()

  AIN90W2.WS-HH-SSN[WS-OTHER-ADULT-INDEX] = AIN90W.WS-HH-SSN;
  AIN90W2.WS-OTH-ADLT-LST-NM[WS-OTHER-ADULT-INDEX] = AIN90W1.WS-LST-NM[WS-MBR-INDEX];
  AIN90W2.WS-OTH-ADLT-FST-NM[WS-OTHER-ADULT-INDEX] = AIN90W1.WS-FRST-NM[WS-MBR-INDEX];
  AIN90W2.WS-OTH-ADLT-MID-IN[WS-OTHER-ADULT-INDEX] = AIN90W1.WS-MID-NM[WS-MBR-INDEX];
  AIN90W2.WS-OTH-ADLT-SSN[WS-OTHER-ADULT-INDEX] = AIN90W1.WS-SSN[WS-MBR-INDEX];
  AIN90W2.WS-OTH-ADLT-CCYY[WS-OTHER-ADULT-INDEX] = AIN90W1.WS-DOB-CCYY[WS-MBR-INDEX];
  AIN90W2.WS-OTH-ADLT-MM[WS-OTHER-ADULT-INDEX] = AIN90W1.WS-DOB-MM[WS-MBR-INDEX];
  AIN90W2.WS-OTH-ADLT-DD[WS-OTHER-ADULT-INDEX] = AIN90W1.WS-DOB-DD[WS-MBR-INDEX];
end // end AIN90P9-FRMT-ADULT


Function AIN90P9-FRMT-CHILD()
  AIN90W3.WS-HH-SSN[WS-CHILD-INDEX] = AIN90W.WS-HH-SSN;
  AIN90W3.WS-CH-LST-NM[WS-CHILD-INDEX] = AIN90W1.WS-LST-NM[WS-MBR-INDEX];
  AIN90W3.WS-CH-FRST-NM[WS-CHILD-INDEX] = AIN90W1.WS-FRST-NM[WS-MBR-INDEX];
  AIN90W3.WS-CH-MID-INIT[WS-CHILD-INDEX] = AIN90W1.WS-MID-NM[WS-MBR-INDEX];
  AIN90W3.WS-CH-SSN[WS-CHILD-INDEX] = AIN90W1.WS-SSN[WS-MBR-INDEX];
  AIN90W3.WS-CH-DOB-CCYY[WS-CHILD-INDEX] = AIN90W1.WS-DOB-CCYY[WS-MBR-INDEX];
  AIN90W3.WS-CH-DOB-MM[WS-CHILD-INDEX] = AIN90W1.WS-DOB-MM[WS-MBR-INDEX];
  AIN90W3.WS-CH-DOB-DD[WS-CHILD-INDEX] = AIN90W1.WS-DOB-DD[WS-MBR-INDEX];
  AIN90W3.WS-CH-GENDER[WS-CHILD-INDEX] = AIN90W1.WS-SEX-CD[WS-MBR-INDEX];
  AIN90W3.WS-CH-ETHNICITY[WS-CHILD-INDEX] = AIN90W1.WS-ETHNC-CD[WS-MBR-INDEX];

  /* Child insurance information has been moved by AIN90P9-MOVE-CHINS*/

  AIN90W3.WS-CH-US-CITIZEN[WS-CHILD-INDEX] = H2-PERSON-HSTRY.US-CTZN-IND;
  if (H3-2-EVM-EVR.NV-CHK-UP == " ")
    AIN90W3.WS-CH-ENROLLED[WS-CHILD-INDEX] = "N";
  else
    AIN90W3.WS-CH-ENROLLED[WS-CHILD-INDEX] = H3-2-EVM-EVR.NV-CHK-UP;
  end

  AIN90W3.WS-CH-SPC-NEED-SVC[WS-CHILD-INDEX] = " ";
  AIN90W3.WS-CH-PREG-CCYY[WS-CHILD-INDEX] = AIN90W.WS-PREG-CCYY;
  AIN90W3.WS-CH-PREG-MM[WS-CHILD-INDEX] = AIN90W.WS-PREG-MM;
  AIN90W3.WS-CH-PREG-DD[WS-CHILD-INDEX] = AIN90W.WS-PREG-DD;
  AIN90W3.WS-PROVIDER-NUMBER[WS-CHILD-INDEX] = AIN90W1.WS-PCN-CD[WS-MBR-INDEX];

  /* WI 23901 - Move medicaid billing no. to child out record*/
  AIN90W3.WS-MEDIC-BLNG-SQ-NMB[WS-CHILD-INDEX] = AIN90W1.WS-MEDIC-BLNG-SQ-NMB[WS-MBR-INDEX];
  /* WI 23901 - End*/
end // end AIN90P9-FRMT-CHILD


Function AIN90P9-FRMT-DATES()

  AIN90W.WS-PREV-BEG-DT = "----------";
  AIN90W.WS-PREV-END-DT = "----------";

  /* format month begin date*/
  AIN90W.WS-PREV-BEG-CCYY = SR-AIN90-REC-IN.PREV-MTH-END-CCYY;
  AIN90W.WS-PREV-BEG-MM = SR-AIN90-REC-IN.PREV-MTH-END-MM;
  AIN90W.WS-PREV-BEG-DD = 01;

  /* format month end date*/
  AIN90W.WS-PREV-END-CCYY = SR-AIN90-REC-IN.PREV-MTH-END-CCYY;
  AIN90W.WS-PREV-END-MM = SR-AIN90-REC-IN.PREV-MTH-END-MM;
  AIN90W.WS-PREV-END-DD = SR-AIN90-REC-IN.PREV-MTH-END-DD;

  AIN90W.WS-BNFT-MTH = AIN90W.WS-PREV-END-MM;
  AIN90W.WS-BNFT-YR = AIN90W.WS-PREV-END-CCYY;
  AIN90W.WS-CALC-DT = AIN90W.WS-PREV-END-DT;

  /* Obtain Weekly multiplication factor and biweekly multiplication*/
  /* factor used for calculation monthly income from weekly and biweekly*/
  /* earnings.*/

  H2-MASS-CHNG-PARMS.MASS-CHNG-TYPE = "C03"; /* Weekly Factor*/
  H2-MASS-CHNG-PARMS.PRGM-TYPE = "CM";
  H2-MASS-CHNG-PARMS.EFF-FR-DT = AIN90W.WS-PREV-END-DT;
  H2-MASS-CHNG-PARMS.EFF-TO-DT = AIN90W.WS-PREV-END-DT;
  H2-MASS-CHNG-PARMS.MASS-CHNG-DATA-TYP = "P";

  AIN90P9-MCH-Q2();

  AIN90W.WS-WEEKLY-FACTOR = H2-MASS-CHNG-PARMS.FACTOR;

  H2-MASS-CHNG-PARMS.MASS-CHNG-TYPE = "C04"; /* Biweekly Factor*/

  AIN90P9-MCH-Q2();

  AIN90W.WS-BIWEEKLY-FACTOR = H2-MASS-CHNG-PARMS.FACTOR;
end // end AIN90P9-FRMT-DATES


Function AIN90P9-FRMT-EMP()
  AIN90W.WS-EMPLOYMENT-INDEX = AIN90W.WS-EMPLOYMENT-INDEX + 1;

  AIN90W4.WS-HH-SSN[WS-EMPLOYMENT-INDEX] = AIN90W.WS-HH-SSN;
  AIN90W4.WS-EMPL-LST-NM[WS-EMPLOYMENT-INDEX] = AIN90W1.WS-LST-NM[WS-MBR-INDEX];
  AIN90W4.WS-EMPL-FRST-NM[WS-EMPLOYMENT-INDEX] = AIN90W1.WS-FRST-NM[WS-MBR-INDEX];
  AIN90W4.WS-EMPL-SSN[WS-EMPLOYMENT-INDEX] = AIN90W1.WS-SSN[WS-MBR-INDEX];
  AIN90W4.WS-EMPL-EMPLR-NAME[WS-EMPLOYMENT-INDEX] = H2-EMPLOYER.EMPLR-NM;
  AIN90W4.WS-EMPL-EMPLR-CITY[WS-EMPLOYMENT-INDEX] = H2-EMPLOYER.CITY;
  AIN90W4.WS-EMPL-EMPLR-ST[WS-EMPLOYMENT-INDEX] = H2-EMPLOYER.ST-CD;
  AIN90W4.WS-EMPL-EMPLR-ZIP[WS-EMPLOYMENT-INDEX] = H2-EMPLOYER.ZIP-CD;
  AIN90W4.WS-EMPL-EMPLR-PHON[WS-EMPLOYMENT-INDEX] = H2-EMPLOYER.PHN-NMB;
  AIN90W4.WS-WORK-EXT[WS-EMPLOYMENT-INDEX] = H2-EMPLOYER.PHN-EXT;
  AIN90W4.WS-ANNUAL-PAY-PRD[WS-EMPLOYMENT-INDEX] = AIN90W.WS-NCU-FREQ;
  AIN90W4.WS-EMPL-PAY-GROSS[WS-EMPLOYMENT-INDEX] = AIN90W.WS-JINC-AMT;
  AIN90W4.WS-EMPL-ANNUAL-INC[WS-EMPLOYMENT-INDEX] = AIN90W.WS-JINC-AMT * 12;
end // end AIN90P9-FRMT-EMP

