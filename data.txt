package gov.illinois.ies.data.oracle.application;
import gov.illinois.fw.business.entities.IValueObject;
import gov.illinois.fw.business.exceptions.TIERSRunTimeException;
import gov.illinois.fw.management.logger.Debug;
import gov.illinois.fw.management.logger.LogLevel;
import gov.illinois.fw.management.logger.Logger;
import gov.illinois.fw.persistence.connection.ConnectionManager;
import gov.illinois.ies.business.entities.application.ArApplicationForAidCargo;
import gov.illinois.ies.utils.SQLQueryUtil;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashSet;

import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.StringUtils;
/**
 *The class <code>ArApplicationForAidDAO</code> provide access to AR_APPLICATION_FOR_AID
 * table for retrieval of data. The class contains methods (finders)
import gov.illinois.ies.business.entities.cases.DcCasesCargo;
import gov.illinois.ies.business.entities.individual.DcIndvCargo;
 /**
 *The class <code>ArApplicationForAidDAO</code> provide access to AR_APPLICATION_FOR_AID
 * table for retrieval of data. The class contains methods (finders)
 * to retrieve data from the table using various search criteria.
 * @author Deloitte
 * @version %Revision%
 */

public class ArApplicationForAidDAO extends ArApplicationForAidGenDAO{

	private static final Logger logger=Logger.getInstance();
	
	private static final String SELECT_SQL_LGCSE_FILTER ="SELECT APP_NUM, OFFICE_NUM, APP_RECVD_DT FROM AR_APPLICATION_FOR_AID";
	private static final String SELECT_SQL_FFMOB_FILTER ="SELECT APP_NUM, CASE_NUM,ASSOCIATED_CASE_NUM FROM AR_APPLICATION_FOR_AID";
	
	/**
	 * Constructor for ArApplicationForAidDAO.
	 */
	public ArApplicationForAidDAO() {
	}
	/**
	 *Constructor for ArApplicationForAidDAO.
	 * @param conn Connection*/
	public ArApplicationForAidDAO(Connection conn) {
		super(conn);
	}
	/**
	 *Method findByAppNum retrieves ArApplicationForAid records from database
	 * for a given application number.
	 * @param maxRows int
	 * @param appNum String
	 * @return IValueObject[]
	 * @throws TIERSRunTimeException
	 */
	public IValueObject[] findByAppNum(int maxRows, String appNum)
	throws TIERSRunTimeException {
		PreparedStatement statement = null;
		Connection conn = null;
		ResultSet rs = null;
		try {
			ArrayList v = new ArrayList();
			conn = getConnection();
			ArApplicationForAidCargo cb = null;
			String clause = " WHERE ( APP_NUM = ?  ) WITH UR";
			statement = conn.prepareStatement(SELECT_SQL + " " + clause);
			statement.setString(1, appNum);
			rs = statement.executeQuery();
			int cnt = 0;
			//			while (rs.next() && cnt++ < maxRows) {
			//			BRGUS00102765 – jampanip – As Per QA Review Prefetch logic Changes
			while (cnt++ < maxRows && rs.next()) {
				cb = new ArApplicationForAidCargo();
				getRowFromResultSet(cb, rs);
				v.add(cb);
			}
			ArApplicationForAidCargo[] cargos = new ArApplicationForAidCargo[v.size()];
			v.toArray(cargos);
			
			return cargos;
		}
		catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		}
		finally {
			try {
				if (rs != null){
					rs.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null){
					statement.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()){
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}
	
	/**
	 *Method findByAppNum retrieves ArApplicationForAid records from database
	 * for a given application number in ArApplicationForAidCargo.
	 * @param maxRows int
	 * @param cargo ArApplicationForAidCargo
	 * @return IValueObject[]
	 * @throws TIERSRunTimeException
	 */
	public IValueObject[] findByAppNum(int maxRows, ArApplicationForAidCargo cargo)
	throws TIERSRunTimeException {
		PreparedStatement statement = null;
		Connection conn = null;
		ResultSet rs = null;
		try {
			ArrayList v = new ArrayList();
			conn = getConnection();
			ArApplicationForAidCargo cb = null;
			String clause = " WHERE APP_NUM = ?  WITH UR";
			statement = conn.prepareStatement(SELECT_SQL + " " + clause);
			statement.setString(1, cargo.getAppNum());
			rs = statement.executeQuery();
			int cnt = 0;
			//			while (rs.next() && cnt++ < maxRows) {
			//			BRGUS00102765 – jampanip – As Per QA Review Prefetch logic Changes
			while (cnt++ < maxRows && rs.next()) {
				cb = new ArApplicationForAidCargo();
				getRowFromResultSet(cb, rs);
				v.add(cb);
			}
			ArApplicationForAidCargo[] cargos = new ArApplicationForAidCargo[v.size()];
			v.toArray(cargos);
			
			return cargos;
		}
		catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		}
		finally {
			try {
				if (rs != null){
					rs.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null){
					statement.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()){
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}

	/**
	 *Method findByAppNum retrieves ArApplicationForAid records from database
	 * for a given application number in ArApplicationForAidCargo.
	 * @param maxRows int
	 * @param cargo ArApplicationForAidCargo
	 * @return IValueObject[]
	 * @throws TIERSRunTimeException
	 */
	public IValueObject[] findByAppNumWithoutUr(int maxRows, ArApplicationForAidCargo cargo) throws TIERSRunTimeException {
		PreparedStatement statement = null;
		Connection conn = null;
		ResultSet rs = null;
		try {
			ArrayList v = new ArrayList();
			conn = getConnection();
			ArApplicationForAidCargo cb = null;
			String clause = " WHERE APP_NUM = ? ";
			statement = conn.prepareStatement(SELECT_SQL + " " + clause);
			statement.setString(1, cargo.getAppNum());
			rs = statement.executeQuery();
			int cnt = 0;
			while (cnt++ < maxRows && rs.next()) {
				cb = new ArApplicationForAidCargo();
				getRowFromResultSet(cb, rs);
				v.add(cb);
			}
			ArApplicationForAidCargo[] cargos = new ArApplicationForAidCargo[v.size()];
			v.toArray(cargos);
			
			return cargos;
		}
		catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		}
		finally {
			try {
				if (rs != null){
					rs.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null){
					statement.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()){
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}

	/**
	 * Created by Munther for Performance team
	 * Method to retrieves ArApplicationForAid records from database
	 * for a given application number in ArApplicationForAidCargo.
	 * @param maxRows int
	 * @param cargo ArApplicationForAidCargo
	 * @return IValueObject[]
	 * @throws TIERSRunTimeException
	 */
	public IValueObject[] findAppTelephoneByAppNum(int maxRows, ArApplicationForAidCargo cargo)
			throws TIERSRunTimeException {
		PreparedStatement statement = null;
		Connection conn = null;
		ResultSet rs = null;
		try {
			ArrayList v = new ArrayList();
			conn = getConnection();
			ArApplicationForAidCargo cb = null;
			statement = conn.prepareStatement("SELECT APP_NUM ,OTHER_PH_NUM ,PH_NUM FROM AR_APPLICATION_FOR_AID WHERE APP_NUM = ? WITH UR");
			statement.setString(1, cargo.getAppNum());
			rs = statement.executeQuery();
			int cnt = 0;
			while (cnt++ < maxRows && rs.next()) {
				cb = new ArApplicationForAidCargo();
				cb.setAppNum(rs.getString("APP_NUM"));
				cb.setOtherPhNum(rs.getString("OTHER_PH_NUM"));
				cb.setPhNum(rs.getString("PH_NUM"));
				v.add(cb);
			}
			ArApplicationForAidCargo[] cargos = new ArApplicationForAidCargo[v.size()];
			v.toArray(cargos);
			
			return cargos;
		} catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		} finally {
			try {
				if (rs != null) {
					rs.close();
				}
				if (statement != null) {
					statement.close();
				}
				if (conn != null && getClose()) {
					conn.close();
				}
			} catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}

	
	/**
	 *
	 * Method request by Ashok R Pulagum
	 * Method findByRetrievePrimaryKey retrieves AR_APPLICATION_FOR_AID_1SQ.NEXTVAL from DUAL to assign it to Individual
	 * @param maxRows int
	 * @param cargo ArApplicationForAidCargo
	 * @return ArApplicationForAidCargo[]
	 * @throws TIERSRunTimeException
	 *
	 */
	public ArApplicationForAidCargo[] findByRetrievePrimaryKey(int maxRows, ArApplicationForAidCargo cargo)
	throws TIERSRunTimeException {

		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		try {
			conn = getConnection();
			statement =
				conn.prepareStatement("SELECT '1'||LPAD(brg_owner.AR_APPLICATION_FOR_AID_1SQ.NEXTVAL,8,'0') FROM DUAL with ur");
			rs = statement.executeQuery();
			int cnt = 0;

			while (cnt++ < maxRows && rs.next()) {
				ArApplicationForAidCargo row = new ArApplicationForAidCargo();
				row.setCaseNum(rs.getLong(1));
				v.add(row);
			}
			ArApplicationForAidCargo colrows[] = new ArApplicationForAidCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		}
		catch (Exception e) {
			//e.printStackTrace();
			throw new TIERSRunTimeException(e.getMessage(), e);
		}
		finally {
			try {
				if (rs != null)
					rs.close();
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null)
					statement.close();
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose())
					conn.close();
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}



	/**
	 *Method findByAppNumFileClearence1 retrieves ArApplicationForAid records from database
	 * for a given application number which has a record in AR_APP_PROGRAM.
	 * @param maxRows int
	 * @param cargo ArApplicationForAidCargo
	 * @return IValueObject[]
	 * @throws TIERSRunTimeException
	 */
	public IValueObject[] findByAppNumFileClearence1(
			int maxRows,
			ArApplicationForAidCargo cargo)
	throws TIERSRunTimeException {
		PreparedStatement statement1 = null;
		PreparedStatement statement2 = null;
		Connection conn = null;
		ResultSet rs = null;
		try {
			ArrayList v = new ArrayList();
			conn = getConnection();
			ArApplicationForAidCargo cb = null;
			String SELECT_SQL1 =
				"select C.APP_NUM AS APP_NUM from ar_app_program c  WHERE  C.app_num = ? WITH UR";
			String SELECT_SQL2 =
				"select a.app_num from  ar_app_indv A, dc_indv B where A.INDV_ID = B.INDV_ID AND B.file_clearance_sw <> 'Y'     AND A.app_num = ? WITH UR";
			statement1 = conn.prepareStatement(SELECT_SQL1);
			statement1.setString(1, cargo.getAppNum());
			rs = statement1.executeQuery();
			int cnt = 0;
			//			while (rs.next() && cnt++ < maxRows) {
			//			BRGUS00102765 – jampanip – As Per QA Review Prefetch logic Changes
			while (cnt++ < maxRows && rs.next()) {
				cb = new ArApplicationForAidCargo();
				cb.setAppNum(rs.getString("APP_NUM"));
				v.add(cb);
			}
			ArApplicationForAidCargo[] cargos = new ArApplicationForAidCargo[v.size()];
			v.toArray(cargos);
			boolean flag = false;
			if (cargos != null && cargos.length > 0) {
				Debug.println(">>>>>>>>>>>>>>>>>>record found with Program " );
				flag = true;
			}
			else {
				Debug.println(">>>>>>>>>>>>>>>>>>record NOT found with Program " );
				cargos = new ArApplicationForAidCargo[1];
			}
			if (flag) {
				v = new ArrayList();
				statement2 = conn.prepareStatement(SELECT_SQL2);
				statement2.setString(1, cargo.getAppNum());
				rs = statement2.executeQuery();
				cnt = 0;
				//				while (rs.next() && cnt++ < maxRows) {
				//				BRGUS00102765 – jampanip – As Per QA Review Prefetch logic Changes
				while (cnt++ < maxRows && rs.next()) {
					cb = new ArApplicationForAidCargo();
					cb.setAppNum(rs.getString("APP_NUM"));
					v.add(cb);
				}
				cargos = new ArApplicationForAidCargo[v.size()];
				v.toArray(cargos);
			}
			
			return cargos;
		}
		catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		}
		finally {
			try {
				if (rs != null){
					rs.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement1 != null){
					statement1.close();
				}
				if (statement2 != null){
					statement2.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()){
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}
	/**
	 *Method findByCaseNum retrieves ArApplicationForAid records from database
	 * for a given case number in ArApplicationForAidCargo.
	 * @param maxRows int
	 * @param cargo ArApplicationForAidCargo
	 * @return IValueObject[]
	 * @throws TIERSRunTimeException
	 */
	public IValueObject[] findByCaseNum(
			int maxRows,
			ArApplicationForAidCargo cargo)
	throws TIERSRunTimeException {
		PreparedStatement statement = null;
		Connection conn = null;
		ResultSet rs = null;
		try {
			ArrayList v = new ArrayList();
			conn = getConnection();
			ArApplicationForAidCargo cb = null;
			String clause = " WHERE CASE_NUM IS NOT NULL AND CASE_NUM = ? WITH UR";
			statement = conn.prepareStatement(SELECT_SQL + " " + clause);
			statement.setLong(1, cargo.getCaseNum());
			rs = statement.executeQuery();
			int cnt = 0;
			while (cnt++ < maxRows && rs.next()) {
				cb = new ArApplicationForAidCargo();
				getRowFromResultSet(cb, rs);
				v.add(cb);
			}
			ArApplicationForAidCargo[] cargos = new ArApplicationForAidCargo[v.size()];
			v.toArray(cargos);
			
			return cargos;
		}
		catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		}
		finally {
			try {
				if (rs != null){
					rs.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null){
					statement.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()){
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}
	
	/**
	 *Method findByCaseNumAndAssoc retrieves ArApplicationForAid records from database
	 * for a given case number in ArApplicationForAidCargo.
	 * @param maxRows int
	 * @param cargo ArApplicationForAidCargo
	 * @return IValueObject[]
	 * @throws TIERSRunTimeException
	 */
	public IValueObject[] findByCaseNumAndAssoc(
			int maxRows,
			ArApplicationForAidCargo cargo)
	throws TIERSRunTimeException {
		PreparedStatement statement = null;
		Connection conn = null;
		ResultSet rs = null;
		try {
			ArrayList v = new ArrayList();
			conn = getConnection();
			StringBuffer sql = new StringBuffer("select CPE.APP_NUM AS APP_NUM From AR_CPE_ELIG_DETAIL CPE ");
			sql.append(" INNER JOIN DC_CASE_INDIVIDUAL DCI ON CPE.INDV_ID = DCI.INDV_ID ");	
			sql.append(" where DCI.CASE_NUM = ? AND DCI.ACTIVE_IN_CASE_SW = 'Y'  AND DCI.EFF_END_DT IS NULL AND CPE.PE_END_DT is NULL WITH UR ");
			statement = conn.prepareStatement(sql.toString());
			statement.setLong(1, cargo.getCaseNum());
			rs = statement.executeQuery();
			while(rs.next()) {
				ArApplicationForAidCargo row = new ArApplicationForAidCargo();
				row.setAppNum(rs.getString("APP_NUM"));
				v.add(row);
			}
			ArApplicationForAidCargo colrows[] = new ArApplicationForAidCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		}
		catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		}
		finally {
			try {
				if (rs != null){
					rs.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null){
					statement.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()){
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}
	
	
	/**
	 *Method findByCaseNumAndAppStatus retrieves ArApplicationForAid records from database
	 * for a given case number and application status code in ArApplicationForAidCargo.
	 * @param maxRows int
	 * @param cargo ArApplicationForAidCargo
	 * @return IValueObject[]
	 * @throws TIERSRunTimeException
	 */
	public IValueObject[] findByCaseNumAndAppStatus(
			int maxRows,
			ArApplicationForAidCargo cargo)
	throws TIERSRunTimeException {
		PreparedStatement statement = null;
		Connection conn = null;
		ResultSet rs = null;
		try {
			ArrayList v = new ArrayList();
			conn = getConnection();
			ArApplicationForAidCargo cb = null;
			String clause = " WHERE (CASE_NUM = ? AND APPLICATION_STATUS_CD = ?  ) WITH UR";
			statement = conn.prepareStatement(SELECT_SQL + " " + clause);
			statement.setLong(1, cargo.getCaseNum());
			statement.setString(2, cargo.getApplicationStatusCd());
			rs = statement.executeQuery();
			int cnt = 0;
			//			while (rs.next() && cnt++ < maxRows) {
			//			BRGUS00102765 – jampanip – As Per QA Review Prefetch logic Changes
			while (cnt++ < maxRows && rs.next()) {
				cb = new ArApplicationForAidCargo();
				getRowFromResultSet(cb, rs);
				v.add(cb);
			}
			ArApplicationForAidCargo[] cargos = new ArApplicationForAidCargo[v.size()];
			v.toArray(cargos);
			
			return cargos;
		}
		catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		}
		finally {
			try {
				if (rs != null){
					rs.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null){
					statement.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()){
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}
	/**
	 *Method findByCaseAndStatus retrieves ArApplicationForAid records from database
	 * for a given case number and all application status codes.
	 * @param maxRows int
	 * @param caseNum long
	 * @param appStatus String[]
	 * @return IValueObject[]
	 * @throws TIERSRunTimeException
	 */
	public IValueObject[] findByCaseAndStatus(
			int maxRows,
			long caseNum,
			String[] appStatus)
	throws TIERSRunTimeException {
		PreparedStatement statement = null;
		Connection conn = null;
		ResultSet rs = null;
		try {
			ArrayList v = new ArrayList();
			conn = getConnection();
			ArApplicationForAidCargo cb = null;
			StringBuffer clause =null;
			clause=new StringBuffer(" WHERE (CASE_NUM = ? AND APPLICATION_STATUS_CD IN(");
			for (int i = 0;
			i < appStatus.length;
			i++) {
				clause.append("'"+appStatus[i]+"'");
				if (!((i + 1) == appStatus.length)){
					clause.append(",");
				}
				else{
					clause.append(")");
					break;
				}
			}
			clause.append("  )");
			clause.append(" WITH UR ");
			statement = conn.prepareStatement(SELECT_SQL + " " + clause.toString());
			statement.setLong(1, caseNum);
			rs = statement.executeQuery();
			int cnt = 0;
			//			while (rs.next() && cnt++ < maxRows) {
			//			BRGUS00102765 – jampanip – As Per QA Review Prefetch logic Changes
			while (cnt++ < maxRows && rs.next()) {
				cb = new ArApplicationForAidCargo();
				getRowFromResultSet(cb, rs);
				v.add(cb);
			}
			ArApplicationForAidCargo[] cargos = new ArApplicationForAidCargo[v.size()];
			v.toArray(cargos);
			
			return cargos;
		}
		catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		}
		finally {
			try {
				if (rs != null){
					rs.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null){
					statement.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()){
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}
	/**
	 *Method findByAppsToBeExtracted retrieves ArApplicationForAid records
	 * from database for a given application status code
	 * and application recieved date is less than given date.
	 * @param maxRows
	 * @param recvdBegDt
	 * @param recvdEndDt
	 * @param aAPStatusCd
	 * @param aACStatusCd
	 * @return IValueObject[]
	 * @throws TIERSRunTimeException
	 */
	public IValueObject[] findByAppsToBeExtracted(
			int maxRows,
			Timestamp recvdBegDt,
			Timestamp recvdEndDt,
			String aAPStatusCd,
			// Def 187074 -- Denial Trigger -- 10/01/04  --  Shan Chockalingam
			// String aDEStatusCd,
			String aACStatusCd)
	throws TIERSRunTimeException {
		PreparedStatement statement = null;
		Connection conn = null;
		ResultSet rs = null;
		ArrayList v = new ArrayList();
		try {

			conn = getConnection();
			ArApplicationForAidCargo cb = null;
			String clause =
				// Def 187074 -- Denial Trigger -- 10/01/04  --  Shan Chockalingam
				// " WHERE (APPLICATION_STATUS_CD=? OR APPLICATION_STATUS_CD=? OR ( APPLICATION_STATUS_CD=? AND  APPLICATION_STATUS_DT >= ?))  AND APP_RECVD_DT <= ? ";
				" WHERE (APPLICATION_STATUS_CD=? OR APPLICATION_STATUS_CD=? )  AND APP_RECVD_DT <= ? WITH UR";
			statement = conn.prepareStatement(SELECT_SQL + " " + clause);
			statement.setString(1, aAPStatusCd);
			statement.setString(2, aACStatusCd);

			/* Def 187074 -- Denial Trigger -- 10/01/04  --  Start -- Shan Chockalingam
			statement.setString(3, aDEStatusCd);
			statement. setTimestamp (4, recvdBegDt);
			statement.setTimestamp(5, recvdEndDt);
			 */
			statement.setTimestamp(3, recvdEndDt);
			//  Def 187074 -- Denial Trigger -- 10/01/04  -- End --  Shan Chockalingam

			rs = statement.executeQuery();
			int cnt = 0;
			//Prefetch Coding(Tiers00040467) -- modified on 09/25/2002
			//while (rs.next() && cnt++ < maxRows) {
			while (cnt++ < maxRows && rs.next()) {
				cb = new ArApplicationForAidCargo();
				getRowFromResultSet(cb, rs);
				v.add(cb);
			}
			ArApplicationForAidCargo[] cargos = new ArApplicationForAidCargo[v.size()];
			v.toArray(cargos);
			
			return cargos;
		}
		catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		}
		finally {
			try {
				//if (rs != null)
				//Prefetch Coding(Tiers00040467) -- modified on 09/25/2002
				if (rs != null && getClose()) {
					rs.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null)
					//statement.close();
					//Prefetch Coding(Tiers00040467) -- modified on 09/25/2002
				{
					closeStatement("findByAppsToBeExtracted", statement,maxRows,v.size());
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose())
					conn.close();
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}

	/**
	 *Method findByAppReceivedDt retrieves ArApplicationForAid records from database
	 * for a given case number and application recieved date less than given date.
	 * @param maxRows int
	 * @param cargo ArApplicationForAidCargo
	 * @return IValueObject[]
	 * @throws TIERSRunTimeException
	 */
	public IValueObject[] findByAppReceivedDt(
			int maxRows,
			ArApplicationForAidCargo cargo)
	throws TIERSRunTimeException {
		PreparedStatement statement = null;
		Connection conn = null;
		ResultSet rs = null;
		try {
			ArrayList v = new ArrayList();
			conn = getConnection();
			ArApplicationForAidCargo cb = null;
			String clause =
				" WHERE ( CASE_NUM = ? AND APP_RECVD_DT <= ?  ) ORDER BY APP_RECVD_DT DESC WITH UR";
			statement = conn.prepareStatement(SELECT_SQL + " " + clause);
			statement.setLong(1, cargo.getCaseNum());
			statement.setTimestamp(2, cargo.getAppRecvdDt());
			rs = statement.executeQuery();
			int cnt = 0;
			//				while (rs.next() && cnt++ < maxRows) {
			//				BRGUS00102765 – jampanip – As Per QA Review Prefetch logic Changes
			while (cnt++ < maxRows && rs.next()) {
				cb = new ArApplicationForAidCargo();
				getRowFromResultSet(cb, rs);
				v.add(cb);
			}
			ArApplicationForAidCargo[] cargos = new ArApplicationForAidCargo[v.size()];
			v.toArray(cargos);
			
			return cargos;
		}
		catch (SQLException e) {
			throw new TIERSRunTimeException(e.getMessage(), e);
		}
		finally {
			try {
				if (rs != null){
					rs.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null){
					statement.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()){
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}
	/**
	 *Method findByArchivalData retrieves ArApplicationForAid records from database
	 * for a given update date .
	 * @param maxRows int
	 * @param cargo ArApplicationForAidCargo
	 * @return ArApplicationForAidCargo[]
	 * @throws TIERSRunTimeException
	 */
	public ArApplicationForAidCargo[] findByArchivalData(
			int maxRows,
			ArApplicationForAidCargo cargo)
	throws TIERSRunTimeException {
		Debug.println("findByArchiveData" + " maxRows= " + maxRows + " cargo=" + cargo);
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		try {
			conn = getConnection();
			String clause =
				" WHERE (UPDATE_DT IS NOT NULL AND UPDATE_DT < ? ) OR (UPDATE_DT IS NULL  AND CREATE_DT < ?) AND ARCHIVE_DT IS NULL WITH UR";
			statement = conn.prepareStatement(SELECT_SQL + clause);
			statement.setTimestamp(1, cargo.getUpdateDt());
			statement.setTimestamp(2, cargo.getUpdateDt());
			rs = statement.executeQuery();
			int cnt = 0;
			//				while (rs.next() && cnt++ < maxRows) {
			//				BRGUS00102765 – jampanip – As Per QA Review Prefetch logic Changes
			while (cnt++ < maxRows && rs.next()) {
				ArApplicationForAidCargo row = new ArApplicationForAidCargo();
				getRowFromResultSet(row, rs);
				v.add(row);
			}

			ArApplicationForAidCargo colrows[] = new ArApplicationForAidCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		}
		catch (Exception e) {
			Debug.println(e);
			throw new TIERSRunTimeException(e.getMessage(), e);
		}
		finally {
			try {
				if (rs != null){
					rs.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null){
					statement.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()){
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}
	/**
	 *Method findByPurgeData retrieves ArApplicationForAid records from database
	 * for a given archive date.
	 * @param maxRows int
	 * @param cargo ArApplicationForAidCargo
	 * @return ArApplicationForAidCargo[]
	 * @throws TIERSRunTimeException
	 */
	public ArApplicationForAidCargo[] findByPurgeData(
			int maxRows,
			ArApplicationForAidCargo cargo)
	throws TIERSRunTimeException {
		Debug.println(
				" findByArchivalData " + " maxRows= " + maxRows + " cargo=" + cargo);
		ArrayList v = new ArrayList();
		Connection conn = null;
		PreparedStatement statement = null;
		ResultSet rs = null;
		try {
			conn = getConnection();
			statement = conn.prepareStatement(SELECT_SQL + " ARCHIVE_DT <=? WITH UR");
			statement.setTimestamp(1, cargo.getArchiveDt());
			rs = statement.executeQuery();
			int cnt = 0;
			//				while (rs.next() && cnt++ < maxRows) {
			//				BRGUS00102765 – jampanip – As Per QA Review Prefetch logic Changes
			while (cnt++ < maxRows && rs.next()) {
				ArApplicationForAidCargo row = new ArApplicationForAidCargo();
				getRowFromResultSet(row, rs);
				v.add(row);
			}
			//RI Changes Begin
			statement.close();
			rs.close();
			statement = conn.prepareStatement(SELECT_SQL_A + " ARCHIVE_DT <=? WITH UR");
			statement.setTimestamp(1, cargo.getArchiveDt());
			rs = statement.executeQuery();
			cnt = 0;
			//				while (rs.next() && cnt++ < maxRows) {
			//				BRGUS00102765 – jampanip – As Per QA Review Prefetch logic Changes
			while (cnt++ < maxRows && rs.next()) {
				ArApplicationForAidCargo row = new ArApplicationForAidCargo();
				getAuditRowFromResultSet(row, rs);
				v.add(row);
			}
			statement.close();
			rs.close();
			//RI Changes End
			ArApplicationForAidCargo colrows[] = new ArApplicationForAidCargo[v.size()];
			v.toArray(colrows);
			return colrows;
		}
		catch (Exception e) {
			Debug.println(e);
			throw new TIERSRunTimeException(e.getMessage(), e);
		}
		finally {
			try {
				if (rs != null){
					rs.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (statement != null){
					statement.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
			try {
				if (conn != null && getClose()){
					conn.close();
				}
			}
			catch (SQLException e) {
				throw new TIERSRunTimeException(e.getClass().getName() + " " + e.getMessage(), e);
			}
		}
	}