package gov.nv.dwss.infc.config;

import gov.nv.dwss.fw.batch.common.AbstractBatchConfiguration;
import gov.nv.dwss.fw.batch.exception.BatchException;
import gov.nv.dwss.fw.batch.exception.BatchRetryRecordException;
import gov.nv.dwss.fw.batch.exception.BatchSkipRecordException;
import gov.nv.dwss.fw.batch.model.BatchFwJob;
import gov.nv.dwss.fw.batch.service.BatchDataService;
import gov.nv.dwss.fw.batch.util.BatchDataTransformerUtil;
import gov.nv.dwss.infc.listener.WriterTrackingStepExecutionListener;
import gov.nv.dwss.infc.model.DeathRegistryRecord;
import gov.nv.dwss.infc.model.DeathRegistryBatchParam;
import gov.nv.dwss.infc.reader.DeathRegistryReader;
import gov.nv.dwss.infc.service.dataservice.DeathRegistryDataService;
import gov.nv.dwss.infc.writer.DeathRegistryWriter;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepScope;
import org.springframework.batch.item.ItemReader;
import org.springframework.batch.item.ItemWriter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;

import java.util.Map;

@Configuration
public class DeathRegistryBatchConfiguration extends AbstractBatchConfiguration {

    private static final Logger logger = LogManager.getLogger(DeathRegistryBatchConfiguration.class);

    @Autowired
    private final BatchDataService batchDataService;
    
    @Autowired
    private final DeathRegistryDataService deathRegistryDataService;
    
    @Autowired
    private final JobBuilderFactory jobBuilderFactory;
    
    @Autowired
    private final StepBuilderFactory stepBuilderFactory;
    
    @Autowired
    private WriterTrackingStepExecutionListener stepExecutionListener;

    @Autowired
    private Environment environment;

    @Value("${jobName}")
    private String jobCode;

    @PostConstruct
    public void loadJobDetail() throws BatchException {
        BatchFwJob job = getJobDetail(jobCode);
        if (job == null) {
            throw new IllegalStateException("BatchFwJob details could not be loaded for jobCode: " + jobCode);
        }
        DeathRegistryBatchParam.setJob(job);
        logger.info("BatchFwJob loaded successfully for DeathRegistryFileGen with jobCode: {}", jobCode);
    }

    @Bean
    public Job deathRegistryJob() {
        return jobBuilderFactory.get("deathRegistryJob")
                .start(generateDeathRegistryFileStep())
                .build();
    }

    @Bean
    public Step generateDeathRegistryFileStep() {
        BatchFwJob job = DeathRegistryBatchParam.getJob();
        if (job == null) {
            throw new IllegalStateException("Job details are missing for DeathRegistryBatchParam.");
        }

        return stepBuilderFactory.get("generateDeathRegistryFileStep")
                .<DeathRegistryRecord, DeathRegistryRecord>chunk(job.getChunkSize())
                .reader(deathRegistryFileGenReader(deathRegistryDataService, null, null, null))
                .writer(deathRegistryFileGenWriter(deathRegistryDataService, environment))
                .faultTolerant()
                .skip(BatchSkipRecordException.class)
                .skipLimit(job.getSkipLimit())
                .retry(BatchRetryRecordException.class)
                .retryLimit(job.getRetryLimit())
                .listener(stepExecutionListener)
                .build();
    }

    private BatchFwJob getJobDetail(String jobCode) throws BatchException {
        Map<String, Object> jobDetail = batchDataService.getJobDetail(jobCode);
        if (jobDetail == null || jobDetail.isEmpty()) {
            return new BatchFwJob();
        }
        return BatchDataTransformerUtil.transformToBatchFW(jobDetail);
    }
}
