public boolean updateDcIndvSecondaryRaceTable(T1006AppInPermdCargo[] t1006AppInPermdCargoArray) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateDcIndvSecondaryRaceTable() ");
	DcIndvSecondaryRaceCargo dcIndvSecRaceCargo = null;
	DcIndvSecondaryRaceCollection dcIndvSecRaceColl = new DcIndvSecondaryRaceCollection(connection);
	T1006AppInPermdCargo t1006AppInPermdCargo = null;
	int currentCargo = -1;
	
	try {
	    
	    if (autoRegT1004CargoArray == null || autoRegT1004CargoArray.length == 0) {
		return false;
	    }
	    if (t1006AppInPermdCargoArray == null || t1006AppInPermdCargoArray.length == 0) {
		if (mSPAppStatus == null) {
		    return false;
		}
	    }
	    
	    boolean raceCount = false;
	    
	    for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
		currentCargo = i;
		t1006AppInPermdCargo = t1006AppInPermdCargoArray[i];
		if (indvMap.containsKey((int) autoRegT1004CargoArray[i].getIndvSeqNum()) && indvMap.get((int) autoRegT1004CargoArray[i].getIndvSeqNum()) == 0L) {
		    boolean raceCehck = false;
		    if (t1006AppInPermdCargo.getAiInd() != '0') {
			raceCehck = true; // "AI";
		    }
		    if (t1006AppInPermdCargo.getBlkInd() != '0') {
			if (raceCehck) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("AA");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getWhtInd() != '0') {
			if (raceCehck) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("WH");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getAsiaInd() != '0') {
			if (raceCehck) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("AS");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getPacIslInd() != '0') {
			if (raceCehck) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("OP");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getNatHawInd() != '0') {
			if (raceCehck) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("NH");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getAsIndnInd() != '0') {
			if (raceCehck) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("AD");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getChiInd() != '0') {
			if (raceCehck) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("CH");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getFilInd() != '0') {
			if (raceCehck) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("FI");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getGuamInd() != '0') {
			if (raceCehck) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("GC");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getJpInd() != '0') {
			if (raceCehck) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("JP");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getKorInd() != '0') {
			if (raceCehck) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("KO");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getSamInd() != '0') {
			if (raceCehck) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("SA");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getVtInd() != '0') {
			if (raceCehck) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("VT");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getEthUnkInd() != '0') {
			if (raceCehck) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("UK");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			}
		    }
		    if (t1006AppInPermdCargo.getAsianAmericanInd() != '0') {
			if (raceCehck) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    dcIndvSecRaceCargo.setSecondaryRaceCd("AM");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			}
		    }
		    if (t1006AppInPermdCargo.getMidEastNorthAfrInd() != '0') {
			if (raceCehck) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    dcIndvSecRaceCargo.setSecondaryRaceCd("ME");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			}
		    }
		    if (t1006AppInPermdCargo.getOtherRaceAloneInd() != '0') {
			if (raceCehck) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    dcIndvSecRaceCargo.setSecondaryRaceCd("RA");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			}
		    }
		    if (t1006AppInPermdCargo.getOther() != '0') {
			if (raceCehck) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    dcIndvSecRaceCargo.setSecondaryRaceCd("OT");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			}
		    }
		    /*if (t1006AppInPermdCargo.getNoRaceSpecifiedInd() != '0') {
			if (raceCehck) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    dcIndvSecRaceCargo.setSecondaryRaceCd("OT");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			}
		    }*/
		    
		    if (raceCount) {
			dcIndvSecRaceColl.insert(dcIndvSecRaceColl);
			dcIndvSecRaceColl.clear();
		    }
		} else {
		    
		    log(7, "AutoRegistrationBO.updateDcIndvSecondaryRaceTable(): Adding race to existing indv--" + autoRegT1004CargoArray[i].getBridgesIndvId());
		    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
		    // PMD_Override - R10 - The casting of this numeric/byte type does not need to be addressed because it will not exceed the int value.
		    PMDRules.markApprovedStatement("R10");
		    dcIndvSecRaceCargo.setIndvId(indvMap.get((int) autoRegT1004CargoArray[i].getIndvSeqNum()));
		    dcIndvSecRaceColl.clear();
		    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
		    DcIndvSecondaryRaceCargo[] dcIndvSecRaceCargoArray = (DcIndvSecondaryRaceCargo[]) dcIndvSecRaceColl.select("findByIndvId");
		    dcIndvSecRaceColl.clear();
		    
		    boolean raceBlkInd = true;
		    boolean raceWhtInd = true;
		    boolean raceAsiaInd = true;
		    boolean racePacIslInd = true;
		    boolean raceNatHawInd = true;
		    boolean raceAsIndnInd = true;
		    boolean raceChiInd = true;
		    boolean raceFilInd = true;
		    boolean raceGuamInd = true;
		    boolean raceJpInd = true;
		    boolean raceKorInd = true;
		    boolean raceSamInd = true;
		    boolean raceVtInd = true;
		    boolean raceUnkInd = true;
		    boolean raceAsianAmericanInd = true;
		    boolean raceMidEastNorthAfricanInd = true;
		    boolean raceOtherRaceInd = true;
		    boolean raceOtherRaceAloneInd = true;
		    
		    if (dcIndvSecRaceCargoArray != null && dcIndvSecRaceCargoArray.length > 0) {
			log(7, "AutoRegistrationBO.updateDcIndvSecondaryRaceTable(): existing indv  Secondary Race count --" + dcIndvSecRaceCargoArray.length);
			for (int j = 0; j < dcIndvSecRaceCargoArray.length; j++) {
			    if ("AA".equals(dcIndvSecRaceCargoArray[j].getSecondaryRaceCd())) {
				raceBlkInd = false;
			    } else if ("WH".equals(dcIndvSecRaceCargoArray[j].getSecondaryRaceCd())) {
				raceWhtInd = false;
			    } else if ("AS".equals(dcIndvSecRaceCargoArray[j].getSecondaryRaceCd())) {
				raceAsiaInd = false;
			    } else if ("OP".equals(dcIndvSecRaceCargoArray[j].getSecondaryRaceCd())) {
				racePacIslInd = false;
			    } else if ("NH".equals(dcIndvSecRaceCargoArray[j].getSecondaryRaceCd())) {
				raceNatHawInd = false;
			    } else if ("AD".equals(dcIndvSecRaceCargoArray[j].getSecondaryRaceCd())) {
				raceAsIndnInd = false;
			    } else if ("CH".equals(dcIndvSecRaceCargoArray[j].getSecondaryRaceCd())) {
				raceChiInd = false;
			    } else if ("FI".equals(dcIndvSecRaceCargoArray[j].getSecondaryRaceCd())) {
				raceFilInd = false;
			    } else if ("GC".equals(dcIndvSecRaceCargoArray[j].getSecondaryRaceCd())) {
				raceGuamInd = false;
			    } else if ("JP".equals(dcIndvSecRaceCargoArray[j].getSecondaryRaceCd())) {
				raceJpInd = false;
			    } else if ("KO".equals(dcIndvSecRaceCargoArray[j].getSecondaryRaceCd())) {
				raceKorInd = false;
			    } else if ("SA".equals(dcIndvSecRaceCargoArray[j].getSecondaryRaceCd())) {
				raceSamInd = false;
			    } else if ("VT".equals(dcIndvSecRaceCargoArray[j].getSecondaryRaceCd())) {
				raceVtInd = false;
			    } else if ("UK".equals(dcIndvSecRaceCargoArray[j].getSecondaryRaceCd())) {
				raceUnkInd = false;
			    } else if ("AM".equalsIgnoreCase(dcIndvSecRaceCargoArray[j].getSecondaryRaceCd())){
			    raceAsianAmericanInd = false;
			    } else if ("ME".equalsIgnoreCase(dcIndvSecRaceCargoArray[j].getSecondaryRaceCd())){
			    raceMidEastNorthAfricanInd = false;
			    } else if ("OT".equalsIgnoreCase(dcIndvSecRaceCargoArray[j].getSecondaryRaceCd())){
			    raceOtherRaceInd = false;
			    }else if ("RA".equalsIgnoreCase(dcIndvSecRaceCargoArray[j].getSecondaryRaceCd())){
			    raceOtherRaceAloneInd = false;
			    }
			}
		    }
		    
		    boolean raceCehck = false;
		    if (t1006AppInPermdCargo.getAiInd() != '0') {
			raceCehck = true; // "AI";
		    }
		    if (t1006AppInPermdCargo.getBlkInd() != '0') {
			if (raceCehck && raceBlkInd) {
			    
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("AA");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getWhtInd() != '0') {
			if (raceCehck && raceWhtInd) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("WH");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getAsiaInd() != '0') {
			if (raceCehck && raceAsiaInd) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("AS");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getPacIslInd() != '0') {
			if (raceCehck && racePacIslInd) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("OP");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getNatHawInd() != '0') {
			if (raceCehck && raceNatHawInd) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("NH");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getAsIndnInd() != '0') {
			if (raceCehck && raceAsIndnInd) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("AD");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getChiInd() != '0') {
			if (raceCehck && raceChiInd) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("CH");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getFilInd() != '0') {
			if (raceCehck && raceFilInd) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("FI");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getGuamInd() != '0') {
			if (raceCehck && raceGuamInd) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("GC");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getJpInd() != '0') {
			if (raceCehck && raceJpInd) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("JP");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getKorInd() != '0') {
			if (raceCehck && raceKorInd) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("KO");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getSamInd() != '0') {
			if (raceCehck && raceSamInd) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("SA");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getVtInd() != '0') {
			if (raceCehck && raceVtInd) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("VT");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			} else {
			    raceCehck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getEthUnkInd() != '0') {
			if (raceCehck && raceUnkInd) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    
			    dcIndvSecRaceCargo.setSecondaryRaceCd("UK");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			}
		    }
		    if (t1006AppInPermdCargo.getAsianAmericanInd() != '0') {
			if (raceCehck && raceAsianAmericanInd) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    dcIndvSecRaceCargo.setSecondaryRaceCd("AM");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			}
		    }
		    if (t1006AppInPermdCargo.getMidEastNorthAfrInd() != '0') {
			if (raceCehck && raceMidEastNorthAfricanInd) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    dcIndvSecRaceCargo.setSecondaryRaceCd("ME");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			}
		    }
		    if (t1006AppInPermdCargo.getOther() != '0') {
			if (raceCehck && raceOtherRaceInd) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    dcIndvSecRaceCargo.setSecondaryRaceCd("OT");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			}
		    }
		    if (t1006AppInPermdCargo.getOtherRaceAloneInd() != '0') {
			if (raceCehck && raceOtherRaceAloneInd) {
			    dcIndvSecRaceCargo = new DcIndvSecondaryRaceCargo();
			    dcIndvSecRaceCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvSecRaceCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvSecRaceCargo.setCreateDt(currentTime);
			    dcIndvSecRaceCargo.setSecondaryRaceCd("RA");
			    dcIndvSecRaceColl.add(dcIndvSecRaceCargo);
			    raceCount = true;
			}
		    }
		    
		    if (raceCount) {
			dcIndvSecRaceColl.insert(dcIndvSecRaceColl);
			dcIndvSecRaceColl.clear();
		    }
		    
		}
		
	    }
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateDcIndvSecondaryRaceTable(): " + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    dcIndvSecRaceCargo = null;
	    dcIndvSecRaceColl = null;
	    t1006AppInPermdCargo = null;
	}
    }
    
    public boolean updateDcIndvEthnicityTable(T1006AppInPermdCargo[] t1006AppInPermdCargoArray) throws Exception {
	
	log(7, "Begin AutoRegistrationBO.updateDcIndvEthnicityTable() ");
	DcIndvEthnicityCargo dcIndvEthnicityCargo = null;
	DcIndvEthnicityCollection dcIndvEthnicityColl = new DcIndvEthnicityCollection(connection);
	T1006AppInPermdCargo t1006AppInPermdCargo = null;
	int currentCargo = -1;
	
	try {
	    
	    if (autoRegT1004CargoArray == null || autoRegT1004CargoArray.length == 0) {
		return false;
	    }
	    if (t1006AppInPermdCargoArray == null || t1006AppInPermdCargoArray.length == 0) {
		if (mSPAppStatus == null) {
		    return false;
		}
	    }
	    
	    boolean ethnicityCount = false;
	    
	    for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
		currentCargo = i;
		t1006AppInPermdCargo = t1006AppInPermdCargoArray[i];
		if (indvMap.containsKey((int) autoRegT1004CargoArray[i].getIndvSeqNum()) && indvMap.get((int) autoRegT1004CargoArray[i].getIndvSeqNum()) == 0L) {
		    
		    log(7, "AutoRegistrationBO.updateDcIndvEthnicityTable() :: Before inserting Ethnicity details : New Indv " + autoRegT1004CargoArray[i].getBridgesIndvId());
		    
		    boolean ethnicityCheck = false;
		    if (t1006AppInPermdCargo.getPrInd() != '0') {
			ethnicityCheck = true; // "PR";
		    }
		    if (t1006AppInPermdCargo.getMexInd() != '0') {
			if (ethnicityCheck) {
			    dcIndvEthnicityCargo = new DcIndvEthnicityCargo();
			    dcIndvEthnicityCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvEthnicityCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvEthnicityCargo.setCreateDt(currentTime);
			    dcIndvEthnicityCargo.setEthnicityCd("MX");
			    dcIndvEthnicityColl.add(dcIndvEthnicityCargo);
			    ethnicityCount = true;
			} else {
			    ethnicityCheck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getCubInd() != '0') {
			if (ethnicityCheck) {
			    dcIndvEthnicityCargo = new DcIndvEthnicityCargo();
			    dcIndvEthnicityCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvEthnicityCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvEthnicityCargo.setCreateDt(currentTime);
			    dcIndvEthnicityCargo.setEthnicityCd("CU");
			    dcIndvEthnicityColl.add(dcIndvEthnicityCargo);
			    ethnicityCount = true;
			} else {
			    ethnicityCheck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getHspcInd() != '0') {
			if (ethnicityCheck) {
			    dcIndvEthnicityCargo = new DcIndvEthnicityCargo();
			    dcIndvEthnicityCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvEthnicityCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvEthnicityCargo.setCreateDt(currentTime);
			    dcIndvEthnicityCargo.setEthnicityCd("HS");
			    dcIndvEthnicityColl.add(dcIndvEthnicityCargo);
			    ethnicityCount = true;
			} else {
			    ethnicityCheck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getNonHspcInd() != null && t1006AppInPermdCargo.getNonHspcInd().equals("N")) {
			if (ethnicityCheck) {
			    dcIndvEthnicityCargo = new DcIndvEthnicityCargo();
			    dcIndvEthnicityCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvEthnicityCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvEthnicityCargo.setCreateDt(currentTime);
			    dcIndvEthnicityCargo.setEthnicityCd("NH");
			    dcIndvEthnicityColl.add(dcIndvEthnicityCargo);
			    ethnicityCount = true;
			}
		    }
		    if (t1006AppInPermdCargo.getOtherEthnicityInd() != '0'){
	    	if (ethnicityCheck){
	    		dcIndvEthnicityCargo = new DcIndvEthnicityCargo();
			    dcIndvEthnicityCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvEthnicityCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvEthnicityCargo.setCreateDt(currentTime);
			    dcIndvEthnicityCargo.setEthnicityCd("OC");
			    dcIndvEthnicityColl.add(dcIndvEthnicityCargo);
			    ethnicityCount = true;
	    	}
		    }
		    if (t1006AppInPermdCargo.getPreferNotAnswerInd() != '0'){
	    	if (ethnicityCheck){
	    		dcIndvEthnicityCargo = new DcIndvEthnicityCargo();
			    dcIndvEthnicityCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvEthnicityCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvEthnicityCargo.setCreateDt(currentTime);
			    dcIndvEthnicityCargo.setEthnicityCd("PN");
			    dcIndvEthnicityColl.add(dcIndvEthnicityCargo);
			    ethnicityCount = true;
	    	}
		    }
		    
		    if (ethnicityCount) {
			dcIndvEthnicityColl.insert(dcIndvEthnicityColl);
			dcIndvEthnicityColl.clear();
			log(7, "AutoRegistrationBO.updateDcIndvEthnicityTable() :: Inserted Ethnicity details : New Indv " + autoRegT1004CargoArray[i].getBridgesIndvId());
		    }
		} else {
		    
		    log(7, "AutoRegistrationBO.updateDcIndvEthnicityTable(): Adding Ethnicity to existing indv--" + autoRegT1004CargoArray[i].getBridgesIndvId());
		    dcIndvEthnicityCargo = new DcIndvEthnicityCargo();
		    // PMD_Override - R10 - The casting of this numeric/byte type does not need to be addressed because it will not exceed the int value.
		    PMDRules.markApprovedStatement("R10");
		    dcIndvEthnicityCargo.setIndvId(indvMap.get((int) autoRegT1004CargoArray[i].getIndvSeqNum()));
		    dcIndvEthnicityColl.clear();
		    dcIndvEthnicityColl.add(dcIndvEthnicityCargo);
		    DcIndvEthnicityCargo[] dcIndvEthnicityCargoArray = (DcIndvEthnicityCargo[]) dcIndvEthnicityColl.select("findByIndvId");
		    dcIndvEthnicityColl.clear();
		    
		    boolean EthMexInd = true;
		    boolean EthCubInd = true;
		    boolean EthHspcInd = true;
		    boolean EthNonHspcInd = true;
		    boolean EthOtherInd = true;
		    boolean EthPreferNotToAnswerInd = true;
		    
		    if (dcIndvEthnicityCargoArray != null && dcIndvEthnicityCargoArray.length > 0) {
			log(7, "AutoRegistrationBO.updateDcIndvEthnicityTable(): existing indv  Secondary Ethnicity count --" + dcIndvEthnicityCargoArray.length);
			for (int j = 0; j < dcIndvEthnicityCargoArray.length; j++) {
			    if ("MX".equals(dcIndvEthnicityCargoArray[j].getEthnicityCd())) {
				EthMexInd = false;
			    } else if ("CU".equals(dcIndvEthnicityCargoArray[j].getEthnicityCd())) {
				EthCubInd = false;
			    } else if ("HS".equals(dcIndvEthnicityCargoArray[j].getEthnicityCd())) {
				EthHspcInd = false;
			    } else if ("NH".equals(dcIndvEthnicityCargoArray[j].getEthnicityCd())) {
				EthNonHspcInd = false;
			    } else if ("OC".equalsIgnoreCase(dcIndvEthnicityCargoArray[j].getEthnicityCd())){
			    EthOtherInd = false;
			    } else if ("PN".equalsIgnoreCase(dcIndvEthnicityCargoArray[j].getEthnicityCd())){
			    EthPreferNotToAnswerInd = false;
			    }
			}
		    }
		    
		    boolean ethnicityCheck = false;
		    if (t1006AppInPermdCargo.getPrInd() != '0') {
			ethnicityCheck = true; // "PR";
		    }
		    if (t1006AppInPermdCargo.getMexInd() != '0') {
			if (ethnicityCheck && EthMexInd) {
			    dcIndvEthnicityCargo = new DcIndvEthnicityCargo();
			    dcIndvEthnicityCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvEthnicityCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvEthnicityCargo.setCreateDt(currentTime);
			    dcIndvEthnicityCargo.setEthnicityCd("MX");
			    dcIndvEthnicityColl.add(dcIndvEthnicityCargo);
			    ethnicityCount = true;
			} else {
			    ethnicityCheck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getCubInd() != '0') {
			if (ethnicityCheck && EthCubInd) {
			    dcIndvEthnicityCargo = new DcIndvEthnicityCargo();
			    dcIndvEthnicityCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvEthnicityCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvEthnicityCargo.setCreateDt(currentTime);
			    dcIndvEthnicityCargo.setEthnicityCd("CU");
			    dcIndvEthnicityColl.add(dcIndvEthnicityCargo);
			    ethnicityCount = true;
			} else {
			    ethnicityCheck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getHspcInd() != '0') {
			if (ethnicityCheck && EthHspcInd) {
			    dcIndvEthnicityCargo = new DcIndvEthnicityCargo();
			    dcIndvEthnicityCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvEthnicityCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvEthnicityCargo.setCreateDt(currentTime);
			    dcIndvEthnicityCargo.setEthnicityCd("HS");
			    dcIndvEthnicityColl.add(dcIndvEthnicityCargo);
			    ethnicityCount = true;
			} else {
			    ethnicityCheck = true;
			}
		    }
		    if (t1006AppInPermdCargo.getNonHspcInd() != null && t1006AppInPermdCargo.getNonHspcInd().equals("N")) {
			if (ethnicityCheck && EthNonHspcInd) {
			    dcIndvEthnicityCargo = new DcIndvEthnicityCargo();
			    dcIndvEthnicityCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvEthnicityCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvEthnicityCargo.setCreateDt(currentTime);
			    dcIndvEthnicityCargo.setEthnicityCd("NH");
			    dcIndvEthnicityColl.add(dcIndvEthnicityCargo);
			    ethnicityCount = true;
			}
		    }
		    if (t1006AppInPermdCargo.getOtherEthnicityInd() != '0') {
			if (ethnicityCheck && EthOtherInd) {
			    dcIndvEthnicityCargo = new DcIndvEthnicityCargo();
			    dcIndvEthnicityCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvEthnicityCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvEthnicityCargo.setCreateDt(currentTime);
			    dcIndvEthnicityCargo.setEthnicityCd("OC");
			    dcIndvEthnicityColl.add(dcIndvEthnicityCargo);
			    ethnicityCount = true;
			}
		    }
		    if (t1006AppInPermdCargo.getPreferNotAnswerInd() != '0') {
			if (ethnicityCheck && EthPreferNotToAnswerInd) {
			    dcIndvEthnicityCargo = new DcIndvEthnicityCargo();
			    dcIndvEthnicityCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvEthnicityCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvEthnicityCargo.setCreateDt(currentTime);
			    dcIndvEthnicityCargo.setEthnicityCd("PN");
			    dcIndvEthnicityColl.add(dcIndvEthnicityCargo);
			    ethnicityCount = true;
			}
		    }
		    
		    if (ethnicityCount) {
			dcIndvEthnicityColl.insert(dcIndvEthnicityColl);
			dcIndvEthnicityColl.clear();
			log(7, "AutoRegistrationBO.updateDcIndvEthnicityTable() :: Inserted Ethnicity details : existing Indv " + autoRegT1004CargoArray[i].getBridgesIndvId());
		    }
		    
		}
		
	    }
	    
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateDcIndvEthnicityTable(): " + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    dcIndvEthnicityCargo = null;
	    dcIndvEthnicityColl = null;
	    t1006AppInPermdCargo = null;
	}
    }
    
    public boolean updateDcIndvLanguageTable(T1006AppInPermdCargo[] t1006AppInPermdCargoArray) throws Exception {
	
	log(7, "Begin AutoRegistrationBO.updateDcIndvLanguageTable ()");
	DcIndvLanguageCargo dcIndvLangCargo = null;
	DcIndvLanguageCollection dcIndvLangColl = new DcIndvLanguageCollection(connection);
	T1006AppInPermdCargo t1006AppInPermdCargo = null;
	int currentCargo = -1;
	
	try {
	    if (t1006AppInPermdCargoArray == null || t1006AppInPermdCargoArray.length == 0) {
		return false;
	    }
	    
	    for (int i = 0; i < t1006AppInPermdCargoArray.length; i++) {
		currentCargo = i;
		t1006AppInPermdCargo = t1006AppInPermdCargoArray[i];
		
		if (indvMap.containsKey((int) autoRegT1004CargoArray[i].getIndvSeqNum()) && indvMap.get((int) autoRegT1004CargoArray[i].getIndvSeqNum()) == 0L) {
		    
		    log(7, "AutoRegistrationBO.updateDcIndvLanguageTable() : Inserting Language details for new indv-" + autoRegT1004CargoArray[i].getBridgesIndvId());
		    
		    if (t1006AppInPermdCargo.getIndvSeqNum() == autoRegT1004CargoArray[i].getIndvSeqNum()) {
			dcIndvLangCargo = new DcIndvLanguageCargo();
			
			dcIndvLangCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			dcIndvLangCargo.setCreateDt(currentTime);
			dcIndvLangCargo.setEffBeginDt(currentTime);
			dcIndvLangCargo.setPrimaryLanguageSw('Y');
			dcIndvLangCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			dcIndvLangCargo.setLanguageCd(t1006AppInPermdCargo.getLangCd());
			dcIndvLangColl.clear();
			dcIndvLangColl.add(dcIndvLangCargo);
		    }
		    dcIndvLangColl.insert(dcIndvLangColl);
		    dcIndvLangColl.clear();
		} else {
		    // PMD_Override - R10 - The casting of this numeric/byte type does not need to be addressed because it will not exceed the int value.
		    PMDRules.markApprovedStatement("R10");
		    log(7, "AutoRegistrationBO.updateDcIndvLanguageTable() : Existing indv-" + indvMap.get((int) autoRegT1004CargoArray[i].getIndvSeqNum()));
		    dcIndvLangCargo = new DcIndvLanguageCargo();
		    // PMD_Override - R10 - The casting of this numeric/byte type does not need to be addressed because it will not exceed the int value.
		    PMDRules.markApprovedStatement("R10");
		    dcIndvLangCargo.setIndvId(indvMap.get((int) autoRegT1004CargoArray[i].getIndvSeqNum()));
		    dcIndvLangColl.clear();
		    dcIndvLangColl.add(dcIndvLangCargo);
		    DcIndvLanguageCargo[] dcIndvLangCargoArray = (DcIndvLanguageCargo[]) dcIndvLangColl.select("findByIndvId");
		    if (dcIndvLangCargoArray != null && dcIndvLangCargoArray.length > 0) {
			boolean extLang = false;
			log(7, "AutoRegistrationBO.updateDcIndvLanguageTable() : Existing indv --dcIndvLangCargoArray.length-" + dcIndvLangCargoArray.length);
			for (int j = 0; j < dcIndvLangCargoArray.length; j++) {
			    dcIndvLangCargo = new DcIndvLanguageCargo();
			    dcIndvLangCargo = dcIndvLangCargoArray[j];
			    log(7, "AutoRegistrationBO.updateDcIndvLanguageTable() : Existing indv --dcIndvLangCargo.getLangCd()-" + dcIndvLangCargo.getLanguageCd());
			    log(7, "AutoRegistrationBO.updateDcIndvLanguageTable() : Existing indv --dcIndvLangCargo.getPrimaryLanguageSw()-" + dcIndvLangCargo.getPrimaryLanguageSw());
			    if (dcIndvLangCargo.getLanguageCd().equals(t1006AppInPermdCargo.getLangCd().trim())) {
				extLang = true;
				if (dcIndvLangCargo.getPrimaryLanguageSw() != 'Y') {
				    log(7, "AutoRegistrationBO.updateDcIndvLanguageTable() : Existing indv :: Updating Language switch to Y --" + dcIndvLangCargo.getLanguageCd());
				    dcIndvLangCargo.setPrimaryLanguageSw('Y');
				    dcIndvLangCargo.setEffBeginDt(currentTime);
				    dcIndvLangCargo.setUpdateUserId(AppRegConstants.AUTO_REG_BATCH);
				    dcIndvLangCargo.setUpdateDt(currentTime);
				    
				    dcIndvLangColl.clear();
				    dcIndvLangColl.add(dcIndvLangCargo);
				    dcIndvLangColl.update(dcIndvLangColl);
				    
				}
			    }
			}
			
			if (!extLang) {
			    
			    log(7, "AutoRegistrationBO.updateDcIndvLanguageTable() : Existing indv requested new language -" + t1006AppInPermdCargo.getLangCd());
			    dcIndvLangCargo = new DcIndvLanguageCargo();
			    
			    dcIndvLangCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
			    dcIndvLangCargo.setCreateDt(currentTime);
			    dcIndvLangCargo.setEffBeginDt(currentTime);
			    dcIndvLangCargo.setPrimaryLanguageSw('Y');
			    dcIndvLangCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
			    dcIndvLangCargo.setLanguageCd(t1006AppInPermdCargo.getLangCd());
			    
			    dcIndvLangColl.clear();
			    dcIndvLangColl.add(dcIndvLangCargo);
			    dcIndvLangColl.insert(dcIndvLangColl);
			    
			}
			
			for (int j = 0; j < dcIndvLangCargoArray.length; j++) {
			    dcIndvLangCargo = new DcIndvLanguageCargo();
			    dcIndvLangCargo = dcIndvLangCargoArray[j];
			    if (!dcIndvLangCargo.getLanguageCd().equals(t1006AppInPermdCargo.getLangCd().trim())) {
				if (dcIndvLangCargo.getPrimaryLanguageSw() == 'Y') {
				    log(7, "AutoRegistrationBO.updateDcIndvLanguageTable() :: Existing indv :: updating Primary Language Sw to 'N' -" + dcIndvLangCargo.getLanguageCd());
				    dcIndvLangCargo.setPrimaryLanguageSw('N');
				    dcIndvLangCargo.setEffBeginDt(currentTime);
				    dcIndvLangCargo.setUpdateUserId(AppRegConstants.AUTO_REG_BATCH);
				    dcIndvLangCargo.setUpdateDt(currentTime);
				    
				    dcIndvLangColl.clear();
				    dcIndvLangColl.add(dcIndvLangCargo);
				    dcIndvLangColl.update(dcIndvLangColl);
				    
				}
			    }
			}
			
		    }
		    
		    log(7, "AutoRegistrationBO.updateDcIndvLanguageTable() : End");
		}
	    }
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateDcIndvLanguageTable(): " + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    dcIndvLangCargo = null;
	    dcIndvLangColl = null;
	    t1006AppInPermdCargo = null;
	}
    }
    
    public boolean updateArExpScreenRespTable(String appNum) throws Exception {
	
	log(7, "Begin AutoRegistrationBO.updateArExpScreenRespTable()");
	ArExpScreenRespCargo arExpScreenRespCargo = null;
	ArExpScreenRespCollection arExpScreenRespColl = new ArExpScreenRespCollection(connection);
	
	T1003AppPrirSrvCargo t1003AppPrirSrvCargo = new T1003AppPrirSrvCargo();
	T1003AppPrirSrvCollection t1003AppPrirSrvColl = new T1003AppPrirSrvCollection(connection);
	T1003AppPrirSrvCargo[] t1003CargoArray = null;
	try {
	    
	    Object appNumArgs1[] = { appNum };
	    t1003CargoArray = (T1003AppPrirSrvCargo[]) t1003AppPrirSrvColl.select("findPrirSrvByAppNum", appNumArgs1);
	    if (t1003CargoArray == null || t1003CargoArray.length == 0) {
		return false;
	    }
	    createArExpScreenRespMAP(t1003AppPrirSrvCargo);
	    t1003AppPrirSrvCargo = t1003CargoArray[0];
	    
	    HashMap hashMap = createArExpScreenRespMAP(t1003AppPrirSrvCargo);
	    
	    if (hashMap != null && !hashMap.isEmpty()) {
		Iterator hashMapKeyItr = hashMap.keySet().iterator();
		Iterator hashMapValueItr = hashMap.values().iterator();
		while (hashMapKeyItr.hasNext()) {
		    arExpScreenRespCargo = new ArExpScreenRespCargo();
		    arExpScreenRespCargo.setAppNum(appNum);
		    arExpScreenRespCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    arExpScreenRespCargo.setCreateDt(currentTime);
		    
		    arExpScreenRespCargo.setQuestCd((String) hashMapKeyItr.next());
		    arExpScreenRespCargo.setResponse(String.valueOf(hashMapValueItr.next()));
		    
		    arExpScreenRespColl.add(arExpScreenRespCargo);
		}
		arExpScreenRespColl.insert(arExpScreenRespColl);
	    }
	    
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArExpScreenRespTable(): " + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    arExpScreenRespCargo = null;
	    arExpScreenRespColl = null;
	    t1003AppPrirSrvCargo = null;
	    t1003AppPrirSrvColl = null;
	    t1003CargoArray = null;
	}
    }
    
    public java.util.HashMap createArExpScreenRespMAP(T1003AppPrirSrvCargo t1003AppPrirSrvCargo) throws Exception {
	
	log(7, "Begin AutoRegistrationBO.createArExpScreenRespMAP() ");
	HashMap hashMap = new HashMap();
	try {
	    // DT_INCM_SAME_GRWR
	    hashMap.put("EV", t1003AppPrirSrvCargo.getDtIncmSameGrwr());
	    
	    // LQD_ASET_AMT
	    hashMap.put("EH", t1003AppPrirSrvCargo.getLqdAsetAmt());
	    
	    // MO_GR_INCM_AMT
	    hashMap.put("EC", t1003AppPrirSrvCargo.getMoGrIncmAmt());
	    
	    // MO_RENT_MRTG_AMT
	    hashMap.put("ER", t1003AppPrirSrvCargo.getMoRentMrtgAmt());
	    
	    // AMT_SAME_GRWR
	    hashMap.put("EK", t1003AppPrirSrvCargo.getAmtSameGrwr());
	    
	    // DT_FINAL_PAY_CHK
	    hashMap.put("EO", t1003AppPrirSrvCargo.getDtFinalPayChk());
	    
	    // INCM_CRNT_MNTH_SW
	    hashMap.put("EE", t1003AppPrirSrvCargo.getIncmCrntMnthSw());
	    
	    // AMT_CRNT_MNTH
	    hashMap.put("EA", t1003AppPrirSrvCargo.getAmtCrntMnth());
	    
	    // DT_INCM_CRNT_MNTH
	    hashMap.put("EN", t1003AppPrirSrvCargo.getDtIncmCrntMnth());
	    
	    // INCM_SAME_GRWR_SW
	    hashMap.put("EJ", t1003AppPrirSrvCargo.getIncmSameGrwrSw());
	    
	    // HEAT_UTILITY_EXP
	    hashMap.put("HT", t1003AppPrirSrvCargo.getHeatUtilityExp());
	    
	    // NON_HEAT_ELE_EXP
	    hashMap.put("HN", t1003AppPrirSrvCargo.getNonHeatEleExp());
	    
	    // COOK_FUEL_EXP
	    hashMap.put("HF", t1003AppPrirSrvCargo.getCookFuelExp());
	    
	    // WATSEW_EXP
	    hashMap.put("HW", t1003AppPrirSrvCargo.getWatsewExp());
	    
	    // MIG_FARM_WRKR_SW
	    hashMap.put("EM", t1003AppPrirSrvCargo.getMigFarmWrkrSw());
	    
	    // INCM_STOP_SW
	    hashMap.put("EX", t1003AppPrirSrvCargo.getIncmStopSw());
	    
	    // AMT_TRVL_ADVC
	    hashMap.put("EQ", t1003AppPrirSrvCargo.getAmtTrvlAdvc());
	    
	    // TELE_EXP
	    hashMap.put("HP", t1003AppPrirSrvCargo.getTeleExp());
	    
	    // CHILD_SPRT_AMT
	    hashMap.put("CS", t1003AppPrirSrvCargo.getChildSprtAmt());
	    
	    // TRASH_REMOVAL_EXP
	    hashMap.put("HG", t1003AppPrirSrvCargo.getTrashRemovalExp());
	    
	    // SEPTIC_INSTL_RESP
	    hashMap.put("HS", t1003AppPrirSrvCargo.getSepticInstlResp());
	    
	    // UTIL_INSTL_RESP
	    hashMap.put("HU", t1003AppPrirSrvCargo.getUtilInstlResp());
	    // LIHEAP_RECEIVE_SW
	    hashMap.put("LH", t1003AppPrirSrvCargo.getLiheapReceiveSw());
	    return hashMap;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.createArExpScreenRespMAP(): " + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	}
    }
    
	public boolean updateArAppAddrTable(String appNum) throws Exception {
		log(7, "Begin AutoRegistrationBO.updateArAppAddrTable() ");
		ArAppAddrCollection arAppAddrColl = new ArAppAddrCollection(connection);

		try {
			if (arAppAddrCargo == null) {
				return false;
			}
			if (arAppAddrCargo != null) {
				arAppAddrCargo.setAppNum(appNum);
				arAppAddrCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
				arAppAddrCargo.setCreateDt(currentTime);
				// ILIES-185675
				arAppAddrCargo.setAddrCountyCd(String.valueOf(autoRegT1001Cargo.getCntyNum()));

				arAppAddrColl.add(arAppAddrCargo);
			}
			if (arAppMailAddrCargo != null) {
				arAppMailAddrCargo.setAppNum(appNum);
				arAppMailAddrCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
				arAppMailAddrCargo.setCreateDt(currentTime);
				arAppMailAddrCargo.setAddrCountyCd(String.valueOf(autoRegT1001Cargo.getCntyNum()));
				arAppAddrColl.add(arAppMailAddrCargo);

			}
			arAppAddrColl.insert(arAppAddrColl);

			Object[] objects = new Object[2];
			objects[0] = "AMMAD";
			objects[1] = appNum;

			SsBrgConflictStatusCollection ssBrgConflictStatusColl = new SsBrgConflictStatusCollection(connection);
			SsBrgConflictStatusCargo[] ssBrgConflictStatusArr = (SsBrgConflictStatusCargo[]) ssBrgConflictStatusColl.select("findByPageIdAppNum", objects);
			if (ssBrgConflictStatusArr != null && ssBrgConflictStatusArr.length > 0) {
				ssBrgConflictStatusArr[0].setStatusInd("PC");
				ssBrgConflictStatusColl.add(ssBrgConflictStatusArr[0]);
				ssBrgConflictStatusColl.update(ssBrgConflictStatusColl);
			}

			return true;
		} catch (Exception e) {
			log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArAppAddrTable(): " + "\n" + e.getMessage() + "\n", e);
			hasExceptionOccurred = true;
			throw e;
		} finally {
			arAppAddrColl = null;
		}
	}
    
    public boolean updateArAppIndvTable(String appNum) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateArAppIndvTable() ");
	ArAppIndvCargo arAppIndvCargo = null;
	ArAppIndvCollection arAppIndvColl = new ArAppIndvCollection(connection);
	
	try {
	    
	    if (autoRegT1004CargoArray == null || autoRegT1004CargoArray.length == 0) {
		return false;
	    }
	    
	    for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
		
		arAppIndvCargo = new ArAppIndvCargo();
		arAppIndvCargo.setAppNum(appNum);
		arAppIndvCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		arAppIndvCargo.setCreateDt(currentTime);
		arAppIndvCargo.setEmployeeSw('N');
		arAppIndvCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
		arAppIndvCargo.setHeadOfHouseholdSw(autoRegT1004CargoArray[i].getPrimPrsnSw());
		
		arAppIndvColl.add(arAppIndvCargo);
	    }
	    arAppIndvColl.insert(arAppIndvColl);
	    
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArAppIndvTable(): " + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    arAppIndvCargo = null;
	    arAppIndvColl = null;
	}
    }
    
    public boolean updateArAppProgramTable(String appNum) throws Exception {
	
	log(7, "Begin AutoRegistrationBO.updateArAppProgramTable () ");
	ArAppProgramCargo arAppProgCargo = null;
	ArAppProgramCollection arAppProgColl = new ArAppProgramCollection(connection);
	java.sql.Timestamp defaultProgStatusDt = getCurrentMonthFirstDate(autoRegT1001Cargo.getAppRcvDt(), 0);
	T1004AppIndvCargo t1004Cargo = null;
	try {
	    boolean fsCheck = false;
	    boolean cashCheck = false;
	    boolean maCheck = false;
	    boolean mcCheck = false;
	    boolean fpCheck = false;
	    
	    for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
		if (fsCheck && cashCheck && maCheck && mcCheck && fpCheck) {
		    break;
		}
		t1004Cargo = autoRegT1004CargoArray[i];
		if (fsCheck == false && t1004Cargo.getFsRqstSw() == 'Y') {
		    fsCheck = true;
		}
		if (cashCheck == false && t1004Cargo.getBcRqstSw() == 'Y') {
		    cashCheck = true;
		}
		if (maCheck == false && t1004Cargo.getMaRqstSw() == 'Y') {
		    maCheck = true;
		}
		if (mcCheck == false && t1004Cargo.getMcRqstSw() == 'Y') {
		    mcCheck = true;
		}
			if(fpCheck == false && t1004Cargo.getFppRqstSw() == 'Y')
				fpCheck = true;
	    }
	    
	    if (autoRegT1002Cargo.getFsRqstSw() == 'Y' && fsCheck) {
		arAppProgCargo = new ArAppProgramCargo();
		arAppProgCargo.setAppNum(appNum);
		arAppProgCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		arAppProgCargo.setCreateDt(currentTime);
		arAppProgCargo.setProgStatusCd("PE");
		arAppProgCargo.setExpScreenDt(autoRegT1001Cargo.getAppRcvDt());
		arAppProgCargo.setProgStatusDt(ALSOPUtil.truncate(defaultProgStatusDt));
		arAppProgCargo.setRequestDt(ALSOPUtil.truncate(autoRegT1001Cargo.getAppRcvDt()));
		arAppProgCargo.setExpeditedSw(autoRegT1001Cargo.getExpeditedFapSw());
		arAppProgCargo.setPriorMedicaidCd("P0");
		arAppProgCargo.setProgramCd("FS");
		arAppProgColl.add(arAppProgCargo);
	    }
	    if (autoRegT1002Cargo.getCashRqstSw() == 'Y' && cashCheck) {
		arAppProgCargo = new ArAppProgramCargo();
		arAppProgCargo.setAppNum(appNum);
		arAppProgCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		arAppProgCargo.setCreateDt(currentTime);
		arAppProgCargo.setProgStatusCd("PE");
		arAppProgCargo.setExpScreenDt(autoRegT1001Cargo.getAppRcvDt());
		arAppProgCargo.setProgStatusDt(ALSOPUtil.truncate(defaultProgStatusDt));
		arAppProgCargo.setRequestDt(ALSOPUtil.truncate(autoRegT1001Cargo.getAppRcvDt()));
		arAppProgCargo.setExpeditedSw(autoRegT1001Cargo.getExpeditedFapSw());
		arAppProgCargo.setPriorMedicaidCd("P0");
		arAppProgCargo.setProgramCd("TF");
		
		arAppProgColl.add(arAppProgCargo);
	    }
	    if (autoRegT1002Cargo.getMaRqstSw() == 'Y' && maCheck || autoRegT1002Cargo.getFppRqstSw() == 'Y' && fpCheck) {
		arAppProgCargo = new ArAppProgramCargo();
		arAppProgCargo.setAppNum(appNum);
		arAppProgCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		arAppProgCargo.setCreateDt(currentTime);
		arAppProgCargo.setProgStatusCd("PE");
		arAppProgCargo.setExpScreenDt(autoRegT1001Cargo.getAppRcvDt());
		arAppProgCargo.setProgStatusDt(ALSOPUtil.truncate(defaultProgStatusDt));
		arAppProgCargo.setRequestDt(ALSOPUtil.truncate(autoRegT1001Cargo.getAppRcvDt()));
		arAppProgCargo.setExpeditedSw(autoRegT1001Cargo.getExpeditedFapSw());
		arAppProgCargo.setProgramCd(AppIndividualBO.calculatePrgCd(maCheck, fpCheck));
		arAppProgCargo.setPriorMedicaidCd("P0");
		
		arAppProgColl.add(arAppProgCargo);
		
		if (autoRegT1002Cargo.getMaBackdtMo1Ind() == 1L) {
		    arAppProgCargo = new ArAppProgramCargo();
		    arAppProgCargo.setAppNum(appNum);
		    arAppProgCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    arAppProgCargo.setCreateDt(currentTime);
		    arAppProgCargo.setProgStatusCd("PE");
		    arAppProgCargo.setExpScreenDt(autoRegT1001Cargo.getAppRcvDt());
		    java.sql.Timestamp date = ALSOPUtil.truncate(getCurrentMonthFirstDate(autoRegT1001Cargo.getAppRcvDt(), -1));
		    arAppProgCargo.setProgStatusDt(date);
		    arAppProgCargo.setRequestDt(date);
		    arAppProgCargo.setExpeditedSw(autoRegT1001Cargo.getExpeditedFapSw());
		    arAppProgCargo.setProgramCd(AppIndividualBO.calculatePrgCd(maCheck, fpCheck));
		    arAppProgCargo.setPriorMedicaidCd("P1");
		    
		    arAppProgColl.add(arAppProgCargo);
		    
		}
		if (autoRegT1002Cargo.getMaBackdtMo2Ind() == 1L) {
		    arAppProgCargo = new ArAppProgramCargo();
		    arAppProgCargo.setAppNum(appNum);
		    arAppProgCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    arAppProgCargo.setCreateDt(currentTime);
		    arAppProgCargo.setProgStatusCd("PE");
		    arAppProgCargo.setExpScreenDt(autoRegT1001Cargo.getAppRcvDt());
		    java.sql.Timestamp date = ALSOPUtil.truncate(getCurrentMonthFirstDate(autoRegT1001Cargo.getAppRcvDt(), -2));
		    arAppProgCargo.setProgStatusDt(date);
		    arAppProgCargo.setRequestDt(date);
		    arAppProgCargo.setExpeditedSw(autoRegT1001Cargo.getExpeditedFapSw());
		    arAppProgCargo.setProgramCd(AppIndividualBO.calculatePrgCd(maCheck, fpCheck));
		    arAppProgCargo.setPriorMedicaidCd("P2");
		    
		    arAppProgColl.add(arAppProgCargo);
		    
		}
		if (autoRegT1002Cargo.getMaBackdtMo3Ind() == 1L) {
		    arAppProgCargo = new ArAppProgramCargo();
		    arAppProgCargo.setAppNum(appNum);
		    arAppProgCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    arAppProgCargo.setCreateDt(currentTime);
		    arAppProgCargo.setProgStatusCd("PE");
		    arAppProgCargo.setExpScreenDt(autoRegT1001Cargo.getAppRcvDt());
		    java.sql.Timestamp date = ALSOPUtil.truncate(getCurrentMonthFirstDate(autoRegT1001Cargo.getAppRcvDt(), -3));
		    arAppProgCargo.setProgStatusDt(date);
		    arAppProgCargo.setRequestDt(date);
		    arAppProgCargo.setExpeditedSw(autoRegT1001Cargo.getExpeditedFapSw());
		    arAppProgCargo.setProgramCd(AppIndividualBO.calculatePrgCd(maCheck, fpCheck));
		    arAppProgCargo.setPriorMedicaidCd("P3");
		    
		    arAppProgColl.add(arAppProgCargo);
		}
		
	    }
	    if (autoRegT1002Cargo.getMcRqstSw() == 'Y' && mcCheck) {
		arAppProgCargo = new ArAppProgramCargo();
		arAppProgCargo.setAppNum(appNum);
		arAppProgCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		arAppProgCargo.setCreateDt(currentTime);
		arAppProgCargo.setProgStatusCd("PE");
		arAppProgCargo.setExpScreenDt(autoRegT1001Cargo.getAppRcvDt());
		arAppProgCargo.setProgStatusDt(ALSOPUtil.truncate(defaultProgStatusDt));
		arAppProgCargo.setRequestDt(ALSOPUtil.truncate(autoRegT1001Cargo.getAppRcvDt()));
		arAppProgCargo.setExpeditedSw(autoRegT1001Cargo.getExpeditedFapSw());
		arAppProgCargo.setPriorMedicaidCd("P0");
		arAppProgCargo.setProgramCd("MC");
		
		arAppProgColl.add(arAppProgCargo);
	    }
	    
	    for (ArAppProgramCargo cargo : arAppProgColl.getResults())
		{
	    	cargo.setProgNrCd("Y");
		}
	    
	    arAppProgColl.insert(arAppProgColl);
	    
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArAppProgramTable() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    arAppProgCargo = null;
	    arAppProgColl = null;
	}
    }