public void calculateServiceAverages() {
    // Q06
    if (wsSHhTot != 0) {
        wsSAvgHh = round(wsSEligNumTot / wsSHhTot, wsSAvgHh);
    }

    // Q16
    if (wsSCaseMedxCnt != 0) {
        wsSAvgMedx = round(wsSMedxAmt / wsSCaseMedxCnt, wsSAvgMedx);
    }

    // Q21
    if (wsSCaseWIncCnt != 0) {
        wsSAvgGrsInc = round(wsSTotGrsInc / wsSCaseWIncCnt, wsSAvgGrsInc);
    }

    // Q22
    if (wsSQ22PaCnt != 0) {
        wsSAvgQ22Pa = round(wsSTotPaInc / wsSQ22PaCnt, wsSAvgQ22Pa);
    }
    if (wsSQ22NaCnt != 0) {
        wsSAvgQ22Na = round(wsSTotNaInc / wsSQ22NaCnt, wsSAvgQ22Na);
    }

    // Q22 All
    if (wsSQ04PaCnt != 0) {
        wsSAvgAllPa = round(wsSTotPaInc / wsSQ04PaCnt, wsSAvgAllPa);
    }
    if (wsSQ04NaCnt != 0) {
        wsSAvgAllNa = round(wsSTotNaInc / wsSQ04NaCnt, wsSAvgAllNa);
    }

    // Q23
    if (wsSDisIncCnt != 0) {
        wsSAvgDisInc = round(wsSTotDisInc / wsSDisIncCnt, wsSAvgDisInc);
    }
    if (wsSDisAllCnt != 0) {
        wsSAvgDsaInc = round(wsSTotDsaInc / wsSDisAllCnt, wsSAvgDsaInc);
    }

    // Q24
    if (wsSCaseErIncCnt != 0) {
        wsSAvgErInc = round(wsSTotErInc / wsSCaseErIncCnt, wsSAvgErInc);
    }
    if (wsSCaseUninIncCnt != 0) {
        wsSAvgUninInc = round(wsSTotUninInc / wsSCaseUninIncCnt, wsSAvgUninInc);
    }
    if (wsSUninGagaCnt != 0) {
        wsSUninGagaAvg = round(wsSUninGagaTot / wsSUninGagaCnt, wsSUninGagaAvg);
    }
    if (wsSUninTanfCnt != 0) {
        wsSUninTanfAvg = round(wsSUninTanfTot / wsSUninTanfCnt, wsSUninTanfAvg);
    }
    if (wsSUninEdinCnt != 0) {
        wsSUninEdinAvg = round(wsSUninEdinTot / wsSUninEdinCnt, wsSUninEdinAvg);
    }

    // Q25
    if (wsSCaseRMCnt != 0) {
        wsSAvgRmAmt = round(wsSTotRmAmt / wsSCaseRMCnt, wsSAvgRmAmt);
    }

    // Q29
    if (wsSDepCnt != 0) {
        wsSAvgDcexAmt = round(wsSTotDcexAmt / wsSDepCnt, wsSAvgDcexAmt);
    }

    // Q31
    if (wsSCaseUtilCnt != 0) {
        wsSAvgUtilAmt = round(wsSTotUtilAmt / wsSCaseUtilCnt, wsSAvgUtilAmt);
    }

    // Q32
    if (wsSCseWSl != 0) {
        wsSAvgShel = round(wsSTotShel / wsSCseWSl, wsSAvgShel);
    }

    // Q34
    if (wsSBnftCnt != 0) {
        wsSAvgBnftAmt = round(wsSTotBnft / wsSBnftCnt, wsSAvgBnftAmt);
    }
    if (wsSQ04PaCnt != 0) {
        wsSPaAvgBnft = round(wsSTotPaBnft / wsSQ04PaCnt, wsSPaAvgBnft);
    }
    if (wsSQ04NaCnt != 0) {
        wsSNaAvgBnft = round(wsSTotNaBnft / wsSQ04NaCnt, wsSNaAvgBnft);
    }

    // Q35
    if (wsSHh1 != 0) wsSHh1AvgBnft = round(wsSTotHh1 / wsSHh1, wsSHh1AvgBnft);
    if (wsSHh2 != 0) wsSHh2AvgBnft = round(wsSTotHh2 / wsSHh2, wsSHh2AvgBnft);
    if (wsSHh3 != 0) wsSHh3AvgBnft = round(wsSTotHh3 / wsSHh3, wsSHh3AvgBnft);
    if (wsSHh4 != 0) wsSHh4AvgBnft = round(wsSTotHh4 / wsSHh4, wsSHh4AvgBnft);
    if (wsSHh5 != 0) wsSHh5AvgBnft = round(wsSTotHh5 / wsSHh5, wsSHh5AvgBnft);
    if (wsSHh6 != 0) wsSHh6AvgBnft = round(wsSTotHh6 / wsSHh6, wsSHh6AvgBnft);
    if (wsSHh7 != 0) wsSHh7AvgBnft = round(wsSTotHh7 / wsSHh7, wsSHh7AvgBnft);

    // Q36
    wsSTotQdetFreq = wsS1Mo + wsS2Mo + wsS3Mo + wsS4Mo + wsS5Mo + wsS6Mo +
                     wsS7Mo + wsS8Mo + wsS9Mo + wsS10Mo + wsS11Mo + wsS12Mo + wsS24Mo;

    wsSSumQdetFreq = (wsS1Mo * 1) + (wsS2Mo * 2) + (wsS3Mo * 3) + (wsS4Mo * 4) +
                     (wsS5Mo * 5) + (wsS6Mo * 6) + (wsS7Mo * 7) + (wsS8Mo * 8) +
                     (wsS9Mo * 9) + (wsS10Mo * 10) + (wsS11Mo * 11) +
                     (wsS12Mo * 12) + (wsS24Mo * 24);

    if (wsSTotQdetFreq != 0) {
        wsSAvgCert = round(wsSSumQdetFreq / wsSTotQdetFreq, wsSAvgCert);
    }

    // Q40
    if (wsSIciCCnt != 0) {
        wsSAvgcertTm = round(wsSDffCDays / wsSIciCCnt, wsSAvgcertTm);
    }

    // Q43
    if (wsSIciACnt != 0) {
        wsSAvgaprTm = round(wsSDffADays / wsSIciACnt, wsSAvgaprTm);
    }

    // Q44
    if (wsSIciDCnt != 0) {
        wsSAvgdnlTm = round(wsSDffDDays / wsSIciDCnt, wsSAvgdnlTm);
    }

    // Q45
    if (wsSIciAdCnt != 0) {
        wsSAvgappTm = round(wsSDffDays / wsSIciAdCnt, wsSAvgappTm);
    }
}


private double round(double value, double reference) {
    int scale = getDecimalPlaces(reference);
    return Math.round(value * Math.pow(10, scale)) / Math.pow(10, scale);
}

// Extracts decimal places from a reference value
private int getDecimalPlaces(double number) {
    String text = Double.toString(number);
    int index = text.indexOf(".");
    return (index < 0) ? 0 : text.length() - index - 1;
}
