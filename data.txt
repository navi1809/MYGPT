public EdEligibilityCargo[] checkForPastMSP(DcCasesCargo[] dcCaseTempArray,long indvId) throws Exception {
	
	    EdEligibilityCollection edEligColl = new EdEligibilityCollection(connection);
	    EdEligibilityCargo[] edEligCargoArray = null;
	   
	    log(7,"Start AutoRegistrationBO.checkForPastMSP() indvId:"+ indvId);
	    try{
		Object[] methodArgs = new Object[2];
		List argumentsList = new ArrayList();
		StringBuffer caseNumBuf = new StringBuffer();
		for (DcCasesCargo cargo : dcCaseTempArray) {
			caseNumBuf = caseNumBuf.append(",").append(cargo.getCaseNum());
		}
		String caseNumbers = caseNumBuf.toString();
		if (caseNumbers.length() > 0) {
			caseNumbers = caseNumbers.substring(1);
		}
		methodArgs[0] = caseNumbers;
		methodArgs[1] = indvId;
		
		log(7,"AutoRegistrationBO.checkForPastMSP() :: Case Numbers that are associated to indv - "+ caseNumbers);
		edEligCargoArray = (EdEligibilityCargo[]) edEligColl.select("findCasesHavingPastMSP", methodArgs);
		
	    }catch(Exception e) {
		hasExceptionOccurred = true;
		log(ILog.ERROR, "Exception in AutoRegistrationBO.checkForPastMSP() indvId: " + indvId + "\n" + e.getMessage() + "\n", e);
		throw e;
	    }
	    return edEligCargoArray;
	}

    public EdEligibilityCargo[] getEligibilityForIndvCase(Object[] methodArgs) throws Exception {
	    EdEligibilityCollection edEligColl = new EdEligibilityCollection(connection);
	    EdEligibilityCargo[] edEligCargoArray = null;
	    log(7,"Start AutoRegistrationBO.getEligibilityForIndvCase() case and Indv ::"+ methodArgs);
	    System.out.println("Start AutoRegistrationBO.getEligibilityForIndvCase() case and Indv ::"+ methodArgs);
	    try{
		log(7,"AutoRegistrationBO.getEligibilityForIndvCase() :: Case Numbers that are associated to indv - "+ methodArgs[0]);
		System.out.println("AutoRegistrationBO.getEligibilityForIndvCase() :: Case Numbers that are associated to indv - "+ methodArgs[0]);
		edEligCargoArray = (EdEligibilityCargo[]) edEligColl.select("findCasesByIndvIdMSP", methodArgs);
		
	    }catch(Exception e) {
			log(ILog.ERROR, "Exception in AutoRegistrationBO.getEligibilityForIndvCase() methodArgs: " + methodArgs + "\n" + e.getMessage() + "\n", e);
			hasExceptionOccurred = true;
			throw e;
	    }
	    
	    return edEligCargoArray;
	}
	
	public DcCaseProgramCargo[] getdcCasePrgForIndvCase(DcCasesCargo[] dcCaseTempArray, long indvId,String autoRegStatus) throws Exception {
	    EdEligibilityCollection edEligColl = new EdEligibilityCollection(connection);
	    EdEligibilityCargo[] edEligCargoArray = null;
	    DcCaseProgramCollection dcCaseProgramColl = new DcCaseProgramCollection(connection);
	    DcCaseProgramCargo[] dcCaseProgramCargo = null;
	    log(7,"Start AutoRegistrationBO.getdcCasePrgForIndvCase() indvId:"+ indvId);
	    try{
		//Object[] methodArgs = new Object[3];
		List argumentsList = new ArrayList();
		StringBuffer caseNumBuf = new StringBuffer();
		for (DcCasesCargo cargo : dcCaseTempArray) {
			caseNumBuf = caseNumBuf.append(",").append(cargo.getCaseNum());
		}
		String caseNumbers = caseNumBuf.toString();
		if (caseNumbers.length() > 0) {
			caseNumbers = caseNumbers.substring(1);
		}
		
		log(7,"AutoRegistrationBO.getdcCasePrgForIndvCase() :: Case Numbers that are associated to indv - "+ caseNumbers);
		System.out.println("AutoRegistrationBO.getdcCasePrgForIndvCase() :: Case Numbers that are associated to indv - "+ caseNumbers);
		
		if(AppRegConstants.AUTO_REG_PROCESS_AC.equalsIgnoreCase(autoRegStatus)){
			
			Object[] objArgs = new Object[3];
		    objArgs[0] = caseNumbers;
		    objArgs[1] = indvId;
		    objArgs[2] = "AP";
		    dcCaseProgramCargo = (DcCaseProgramCargo[]) dcCaseProgramColl.select("findByIndvAndCaseMSPPendingOnApprovedCase", objArgs);
		    if(dcCaseProgramCargo != null && dcCaseProgramCargo.length >0 ){
			for(DcCaseProgramCargo dcCargo :dcCaseProgramCargo){
				 dcCargo.setProgRescindCd("EA");
				 if("MC".equalsIgnoreCase(dcCargo.getProgCd())){
						DcCaseProgramCargo[] dcCaseProgramCargos = getMspStartDt(dcCargo.getCaseNum(),"PE");
						if(dcCaseProgramCargos != null && dcCaseProgramCargos.length > 0 && dcCaseProgramCargos[0].getRequestDt() != null)
						{
							dcCargo.setProgStatusDt(dcCaseProgramCargos[0].getRequestDt());
						}
					}

			}
			return dcCaseProgramCargo;
		    }
		    objArgs = new Object[3];
		    objArgs[0] = caseNumbers;
		    objArgs[1] = indvId;
		    objArgs[2] = "AP";
		    edEligCargoArray = getEligibilityForIndvCase(objArgs);
		    if(edEligCargoArray != null && edEligCargoArray.length > 0 ){
			dcCaseProgramCargo = new DcCaseProgramCargo[edEligCargoArray.length];
			for(int i=0 ;i< edEligCargoArray.length ; i++){
			    dcCaseProgramCargo[i] = new DcCaseProgramCargo();
			    dcCaseProgramCargo[i].setCaseNum(edEligCargoArray[i].getCaseNum());
			    dcCaseProgramCargo[i].setProgCd(edEligCargoArray[i].getProgramCd());
			    dcCaseProgramCargo[i].setProgStatusCd(edEligCargoArray[i].getCgStatusCd());
			    dcCaseProgramCargo[i].setProgActionCd(edEligCargoArray[i].getTypeOfAssistanceCd());//to get the Type of Assistance 
			    dcCaseProgramCargo[i].setProgRescindCd(edEligCargoArray[i].getEdgName());//Part Status Cd
			    dcCaseProgramCargo[i].setProgStatusDt(edEligCargoArray[i].getEligibilityBegDt());
			    if("MC".equalsIgnoreCase(edEligCargoArray[i].getProgramCd())){
					DcCaseProgramCargo[] dcCaseProgramCargos = getMspStartDt(edEligCargoArray[i].getCaseNum(),"AP");
					if(dcCaseProgramCargos != null && dcCaseProgramCargos.length > 0 && dcCaseProgramCargos[0].getRequestDt() != null)
					{
						dcCaseProgramCargo[i].setProgStatusDt(dcCaseProgramCargos[0].getRequestDt());
					}
				}
			}
			
		    }
		}
		else if(AppRegConstants.AUTO_REG_PROCESS_PC.equalsIgnoreCase(autoRegStatus)){
		    Object[] methodArgs = new Object[3];
		    methodArgs[0] = caseNumbers;
		    methodArgs[1] = indvId;
		    methodArgs[2] = "PE";
		    dcCaseProgramCargo = (DcCaseProgramCargo[]) dcCaseProgramColl.select("findByIndvAndCase", methodArgs);
		    if(dcCaseProgramCargo != null && dcCaseProgramCargo.length >0 ){
			for(DcCaseProgramCargo dcCargo :dcCaseProgramCargo){
				dcCargo.setProgRescindCd("EA");
				if("MC".equalsIgnoreCase(dcCargo.getProgCd())){
					DcCaseProgramCargo[] dcCaseProgramCargos = getMspStartDt(dcCargo.getCaseNum(),"PE");
					if(dcCaseProgramCargos != null && dcCaseProgramCargos.length > 0 && dcCaseProgramCargos[0].getRequestDt() != null)
					{
						dcCargo.setProgStatusDt(dcCaseProgramCargos[0].getRequestDt());
					}
				}
			    }
		    }
		}
		
	    }catch(Exception e) {
		hasExceptionOccurred = true;
		log(ILog.ERROR, "Exception in AutoRegistrationBO.getdcCasePrgForIndvCase() indvId: " + indvId + "\n" + e.getMessage() + "\n", e);
		throw e;
	    }
	    
	    return dcCaseProgramCargo;
	}
	
	public boolean checkPendingMSPCase(DcCasesCargo dcCaseTempArray, long indvId){
	    	List argumentsList = new ArrayList();
		DcCaseProgramCollection dcCaseProgramColl = new DcCaseProgramCollection(connection);
		DcCaseProgramCargo[] dcCaseProgramCargo = null;
		log(7,"Start AutoRegistrationBO.getdcCasePrgForIndvCase() indvId:"+ indvId);
		//String caseNumbers = caseNumBuf.toString(); 
		String caseNumbers = String.valueOf(dcCaseTempArray.getCaseNum());
		/*if (caseNumbers.length() > 0) {
			caseNumbers = caseNumbers.substring(1);
		}*/
		log(7,"AutoRegistrationBO.checkPendingMSPCase() :: Case Numbers that are associated to indv - "+ caseNumbers);
		System.out.println("AutoRegistrationBO.checkPendingMSPCase() :: Case Numbers that are associated to indv - "+ caseNumbers);
		Object[] methodArgs = new Object[3];
		try {
		    methodArgs[0] = caseNumbers;
		    methodArgs[1] = indvId;
		    methodArgs[2] = "PE";
		    
		    dcCaseProgramCargo = (DcCaseProgramCargo[]) dcCaseProgramColl.select("findByIndvAndCase", methodArgs);
		    
		    if(dcCaseProgramCargo != null && dcCaseProgramCargo.length >0 ){
			for(DcCaseProgramCargo dcCargo :dcCaseProgramCargo){
				dcCargo.setProgRescindCd("EA");
				if("MC".equalsIgnoreCase(dcCargo.getProgCd())){
					return true;
				}
			    }
		    }
		    
		} catch (ApplicationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		    } catch (FrameworkException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		    }
		return false;
	}
	
	private DcCaseProgramCargo[] getMspStartDt(long caseNum,String status)
	{

		DcCaseProgramCargo dcCargo = new DcCaseProgramCargo();
		DcCaseProgramCollection dcProgColl = new DcCaseProgramCollection(connection);
		DcCaseProgramCargo[] dcProgramArray = null;
		Object[] objLst = new Object[2];		
		objLst[0] = caseNum;
		objLst[1] = status;
    
		try{
			dcProgramArray = (DcCaseProgramCargo[]) dcProgColl.select("findEarliestRequestDtForCaseNum",objLst);			
		}catch(Exception e){
			log(ILog.ERROR, "Exception in AutoRegistrationBO.getMspStartDt caseNum: " + caseNum + "\n" + e.getMessage() + "\n", e);
			e.printStackTrace();
		}
	return dcProgramArray;
	
	}

	public EdEligibilityCargo[] getEligibilityForIndvCase(DcCasesCargo[] dcCaseTempArray, long indvId) throws Exception {
	    EdEligibilityCollection edEligColl = new EdEligibilityCollection(connection);
	    EdEligibilityCargo[] edEligCargoArray = null;
	    log(7,"Start AutoRegistrationBO.getEligibilityForIndvCase() indvId:"+ indvId);
	    try{
		Object[] methodArgs = new Object[2];
		List argumentsList = new ArrayList();
		StringBuffer caseNumBuf = new StringBuffer();
		for (DcCasesCargo cargo : dcCaseTempArray) {
			caseNumBuf = caseNumBuf.append(",").append(cargo.getCaseNum());
		}
		String caseNumbers = caseNumBuf.toString();
		if (caseNumbers.length() > 0) {
			caseNumbers = caseNumbers.substring(1);
		}
		methodArgs[0] = caseNumbers;
		methodArgs[1] = indvId;
		log(7,"AutoRegistrationBO.getEligibilityForIndvCase() :: Case Numbers that are associated to indv - "+ caseNumbers);
		System.out.println("AutoRegistrationBO.getEligibilityForIndvCase() :: Case Numbers that are associated to indv - "+ caseNumbers);
		edEligCargoArray = (EdEligibilityCargo[]) edEligColl.select("findCasesByIndvIdMSP", methodArgs);
	    }catch(Exception e) {
		hasExceptionOccurred = true;
		log(ILog.ERROR, "Exception in AutoRegistrationBO.getEligibilityForIndvCase() indvId: " + indvId + "\n" + e.getMessage() + "\n", e);
		throw e;
	    }
	    
	    return edEligCargoArray;
	}

	public boolean checkDocsForCase(EdVerificationChecklistCargo[] verCargoArray,Timestamp closureDate) throws ApplicationException, FrameworkException {
	    log(7,"AutoRegistrationBO.checkDocsForCase() :: Check if any doc submitted after closure date- "+ closureDate);
	    boolean docPresent = false;
	    DmDocCollection coll = new DmDocCollection(connection);
	    DmDocCargo extCargo = new DmDocCargo();
	    try {
        	    extCargo.setCaseNum(verCargoArray[0].getCaseNum());
        	  //  coll.clear();
        	    //coll.setCargo(extCargo);
        	    Object[] parmArgs = new Object[2];
        	    parmArgs[0] = extCargo;
        	    parmArgs[1] = new long[0];
        	    DmDocExtendCargo[] dmDocCargos = (DmDocExtendCargo[]) coll.select("findAllByCaseNumberECR", parmArgs);
        		
        	    //DmDocExtendCargo[] dmDocCargos = (DmDocExtendCargo[])coll.select("findByCaseNumberAll");
		if(dmDocCargos != null && dmDocCargos.length >0){
		    for(DmDocExtendCargo cargo : dmDocCargos){
				if(closureDate.compareTo(cargo.getReceivedDt()) <0){//TO DO
				    System.out.println("AutoRegistrationBO.checkDocsForCase() :: Doc submitted on date - "+ cargo.getReceivedDt());
				    log(7,"AutoRegistrationBO.checkDocsForCase() :: Doc submitted on date - "+ cargo.getReceivedDt());
				    docPresent = true;
				    break;
				}
			}
		}
	    } catch (ApplicationException e) {
		hasExceptionOccurred = true;
		log(ILog.ERROR, "Exception [ApplicationException] in AutoRegistrationBO.checkDocsForCase(): " + "\n" + e.getMessage() + "\n", e);
		throw e;
	    } catch (FrameworkException e) {
		hasExceptionOccurred = true;
		log(ILog.ERROR, "Exception [FrameworkException] in AutoRegistrationBO.checkDocsForCase(): " + "\n" + e.getMessage() + "\n", e);
		throw e;
	    }
	    
	    return docPresent;
	}
	
	public void associationPgmAdd(String appNum,String assoicatedappNum ,long caseNum ) throws Exception{
	    try {
		log(7,"AutoRegistrationBO.associationPgmAdd() :: Start logic for programAdd appNum  - "+ appNum);
		log(7,"AutoRegistrationBO.associationPgmAdd() :: Assoicated application Num  - "+ assoicatedappNum);
		log(7,"AutoRegistrationBO.associationPgmAdd() :: Assoicated case Num  - "+ caseNum);
		System.out.println("AutoRegistrationBO.associationPgmAdd() :: Assoicated application Num  - "+ assoicatedappNum);
		System.out.println("AutoRegistrationBO.associationPgmAdd() :: Assoicated case Num  - "+ caseNum);
		
		ArApplicationForAidCargo aidCargo = insertArApplicationForAid(appNum, assoicatedappNum, caseNum, ARConstants.ASSOCIATION_TYPE_PROGRAM_ADD);
		System.out.println("AutoRegistrationBO.associationPgmAdd() :: After inserting into ArApplicationForAidCargo . "+aidCargo);
                log(7,"AutoRegistrationBO.associationPgmAdd() :: After inserting into ArApplicationForAidCargo . "+aidCargo);
		long groupSeqNum = getGroupSeqNum(appNum);
		log(7,"AutoRegistrationBO.associationPgmAdd() :: Before insertArApplicationAssociation  with groupSeqNum: "+groupSeqNum);
		System.out.println("AutoRegistrationBO.associationPgmAdd() :: Before insertArApplicationAssociation  with groupSeqNum: "+groupSeqNum);
		
		insertArApplicationAssociation(appNum, assoicatedappNum, caseNum,ARConstants.ASSOCIATION_TYPE_PROGRAM_ADD,String.valueOf(groupSeqNum) );//groupSeqNum
		updateFFMInbound(appNum,caseNum);
		log(7,"AutoRegistrationBO.associationPgmAdd() :: After insertArApplicationAssociation   ");
		boolean displayAddtionalIndvs = false;
		if (assoicatedappNum != null && !assoicatedappNum.equals("")) {
		    log(7,"AutoRegistrationBO.associationPgmAdd() :: Before syncArData for assoicatedappNum  - "+assoicatedappNum);
		    System.out.println("AutoRegistrationBO.associationPgmAdd() :: Before syncArData for assoicatedappNum  - "+assoicatedappNum);
		    syncArData(appNum, assoicatedappNum,ARConstants.ASSOCIATION_TYPE_PROGRAM_ADD,false,null);
		} else if (caseNum != 0) {
		    log(7,"AutoRegistrationBO.associationPgmAdd() :: Before syncArData for caseNum  - "+caseNum);
		    System.out.println("AutoRegistrationBO.associationPgmAdd() :: Before syncArData for caseNum  - "+caseNum);
		    displayAddtionalIndvs = syncDcData(appNum, caseNum,false,null);
		}
	    } catch (Exception e) {
		hasExceptionOccurred = true;
		log(ILog.ERROR, "Exception in AutoRegistrationBO.associationPgmAdd() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
		throw e;
	    }
	}

	public void lisMSPAppDuplicate(String appNum,String assoicatedappNum ,long caseNum , String autoRegStatus ) throws Exception{
	    try {
		log(7,"AutoRegistrationBO.lisMSPAppDuplicate() :: Start logic for duplicate appNum  - "+ appNum);
		log(7,"AutoRegistrationBO.lisMSPAppDuplicate() :: Assoicated application Num  - "+ assoicatedappNum);
		log(7,"AutoRegistrationBO.lisMSPAppDuplicate() :: Assoicated case Num  - "+ caseNum);
		System.out.println("AutoRegistrationBO.lisMSPAppDuplicate() :: Assoicated application Num  - "+ assoicatedappNum);
		System.out.println("AutoRegistrationBO.lisMSPAppDuplicate() :: Assoicated case Num  - "+ caseNum);
		ArApplicationForAidCargo aidCargo = insertArApplicationForAid(appNum, assoicatedappNum, caseNum, ARConstants.ASSOCIATION_TYPE_DUPLICATE_APPLICATION);
		log(7,"AutoRegistrationBO.lisMSPAppDuplicate() :: After inserting into ArApplicationForAidCargo . ");
			
		long groupSeqNum = getGroupSeqNum(appNum);
		log(7,"AutoRegistrationBO.lisMSPAppDuplicate() :: Before insertArApplicationAssociation with groupSeqNum: "+groupSeqNum);
		System.out.println("AutoRegistrationBO.lisMSPAppDuplicate() :: Before insertArApplicationAssociation with groupSeqNum: "+groupSeqNum);
			
		insertArApplicationAssociation(appNum, assoicatedappNum, caseNum,ARConstants.ASSOCIATION_TYPE_DUPLICATE_APPLICATION,String.valueOf(groupSeqNum) );//groupSeqNum
		updateFFMInbound(appNum,caseNum);
		log(7,"AutoRegistrationBO.lisMSPAppDuplicate() :: After insertArApplicationAssociation  - ");
			
		boolean displayAddtionalIndvs = false;
		if (assoicatedappNum != null && !assoicatedappNum.equals("")) {
		    log(7,"AutoRegistrationBO.lisMSPAppDuplicate() :: Before syncArData for assoicatedappNum  - "+assoicatedappNum);
		    System.out.println("AutoRegistrationBO.lisMSPAppDuplicate() :: Before syncArData for assoicatedappNum  - "+ assoicatedappNum);
		    syncArData(appNum, assoicatedappNum,ARConstants.ASSOCIATION_TYPE_DUPLICATE_APPLICATION,true ,autoRegStatus);
		} else if (caseNum != 0) {
		    log(7,"AutoRegistrationBO.lisMSPAppDuplicate() :: Before syncArData for caseNum  - "+caseNum);
		    System.out.println("AutoRegistrationBO.lisMSPAppDuplicate() :: Before syncArData for caseNum  - - "+ caseNum);
		    displayAddtionalIndvs = syncDcData(appNum, caseNum,true,autoRegStatus);
		}
		log(7,"AutoRegistrationBO.lisMSPAppDuplicate() :: Start logic for DOC_ID_FXX463 Trigger  for appNum  - "+ appNum);
		System.out.println("AutoRegistrationBO.lisMSPAppDuplicate() :: Start logic for DOC_ID_FXX463 Trigger  for appNum  - "+ appNum);
		generateCorrespondance(appNum,DIConstants.DOC_ID_FXX463, "", this.con);
		log(7,"AutoRegistrationBO.lisMSPAppDuplicate() :: After DOC_ID_FXX463 Trigger  for appNum  - "+ appNum);
	    } catch (Exception e) {
			hasExceptionOccurred = true;
			log(ILog.ERROR, "Exception in AutoRegistrationBO.lisMSPAppDuplicate() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
			throw e;
	    }
	}
	
	public long selectCaseMSPAdd(long indvId,EdEligibilityCargo[] edEligCargoArray) {
		HashMap casePgmMap = new HashMap();
		Set<Long> caselst = new HashSet<Long>();
		String prgms = "";
		StringBuffer prgmBuff = null;
		long alertCaseNum = 0;
		long snapCaseNum = 0;
		long tanfCaseNum = 0;
		long maCaseNum = 0;
		long mspCaseNum = 0;
		long meCaseNum = 0;
		long fpCaseNum = 0;
		HashMap casePgmMap1 = new HashMap();
		log(7,"AutoRegistrationBO.selectCaseMSPAdd() :: For multipe case association find the case for indv  - "+ indvId);
		// gov.illinois.ies.business.services.iq.IVRCallCenterNewServiceEJBBean.getIndividualIdNEW(IndividualLookupRequestVO)
		for (EdEligibilityCargo cargo : edEligCargoArray) {
		    casePgmMap1.put(cargo.getCaseNum(),cargo.getProgramCd());
			if (casePgmMap.containsKey(cargo.getCaseNum())) {
				prgmBuff = new StringBuffer();
				prgms = casePgmMap.get(cargo.getCaseNum()).toString();
				prgmBuff.append(prgms);
				if (!prgms.contains(cargo.getProgramCd())) {
					prgmBuff.append(",");
					prgmBuff.append(cargo.getProgramCd());
				}
				casePgmMap.put(cargo.getCaseNum(), prgmBuff.toString());
			} else {
				caselst.add(cargo.getCaseNum());
				casePgmMap.put(cargo.getCaseNum(), cargo.getProgramCd());
			}
		}
		log(7,"AutoRegistrationBO.selectCaseMSPAdd() :: Program Case map: "+ casePgmMap);
		System.out.println("AutoRegistrationBO.selectCaseMSPAdd() :: Program Case map: "+ casePgmMap);
		if (caselst != null && caselst.size() > 0 && casePgmMap != null
				&& casePgmMap.size() > 0) {
			for (Long caseList : caselst) {
				Long caseNumber = caseList;
				String value = casePgmMap.get(caseNumber).toString();
				long caseNum = (Long) caseNumber;
				ArrayList pgmList = new ArrayList(Arrays.asList(value.split(",")));
				
				if (pgmList.contains("MC")) {// If MSP Program is present
					mspCaseNum = caseNumber;
					lisMSPAppDuplicate = true;
					break;
				} else if (pgmList.contains("MA")) {
					maCaseNum = caseNumber;
				}else if (pgmList.contains("ME")) {
					meCaseNum = caseNumber;
				} else if (pgmList.contains("FP")) {
					fpCaseNum = caseNumber;
				}  else if (pgmList.contains("TF")) {
					tanfCaseNum = caseNumber;
				} else if (pgmList.contains("FS")) {
					snapCaseNum = caseNumber;
				}
			}
			if (mspCaseNum > 0) {
				alertCaseNum = mspCaseNum;
			} else if (maCaseNum > 0) {
				alertCaseNum = maCaseNum;
			} else if (meCaseNum > 0) {
				alertCaseNum = meCaseNum;
			} else if (fpCaseNum > 0) {
				alertCaseNum = fpCaseNum;
			} else if (tanfCaseNum > 0) {
				alertCaseNum = tanfCaseNum;
			}else if (snapCaseNum > 0) {
				alertCaseNum = snapCaseNum;
			}
		}
		return alertCaseNum;
	}
	
	
	public long selectCaseMSPAdd(long indvId,DcCaseProgramCargo[] dcCasePgmCargoArray) {
		HashMap casePgmMap = new HashMap();
		HashMap pgmStartDtMap = new HashMap();
		Set<Long> caselst = new HashSet<Long>();
		String prgms = "";
		StringBuffer prgmBuff = null;
		long alertCaseNum = 0;
		long snapCaseNum = 0;
		long tanfCaseNum = 0;
		long maCaseNum = 0;
		long mspCaseNum = 0;
		long meCaseNum = 0;
		long fpCaseNum = 0;
		HashMap casePgmMap1 = new HashMap();
		mspPgmStatrtDt = new Timestamp(cal.getTimeInMillis());
		log(7,"AutoRegistrationBO.selectCaseMSPAdd() :: For multipe case association find the case for indv  - "+ indvId);
		// gov.illinois.ies.business.services.iq.IVRCallCenterNewServiceEJBBean.getIndividualIdNEW(IndividualLookupRequestVO)
		for (DcCaseProgramCargo cargo : dcCasePgmCargoArray) {
		    if("EA".equalsIgnoreCase(cargo.getProgRescindCd())){
			casePgmMap1.put(cargo.getCaseNum(),cargo.getProgCd());
			if (casePgmMap.containsKey(cargo.getCaseNum())) {
				prgmBuff = new StringBuffer();
				prgms = casePgmMap.get(cargo.getCaseNum()).toString();
				prgmBuff.append(prgms);
				if (!prgms.contains(cargo.getProgCd())) {
					prgmBuff.append(",");
					prgmBuff.append(cargo.getProgCd());
				}
				casePgmMap.put(cargo.getCaseNum(), prgmBuff.toString());
			} else {
				caselst.add(cargo.getCaseNum());
				casePgmMap.put(cargo.getCaseNum(), cargo.getProgCd());
			}
			if("MC".equalsIgnoreCase(cargo.getProgCd())){
				pgmStartDtMap.put(cargo.getCaseNum(), cargo.getProgStatusDt());
			}
			
		    }else if (caselst.isEmpty() ){
			if("OA".equalsIgnoreCase(cargo.getProgRescindCd()) && (!"TP0N".equalsIgnoreCase(cargo.getProgActionCd()) || !"TP0S".equalsIgnoreCase(cargo.getProgActionCd()) )){
				casePgmMap1.put(cargo.getCaseNum(),cargo.getProgCd());
				if (casePgmMap.containsKey(cargo.getCaseNum())) {
					prgmBuff = new StringBuffer();
					prgms = casePgmMap.get(cargo.getCaseNum()).toString();
					prgmBuff.append(prgms);
					if (!prgms.contains(cargo.getProgCd())) {
						prgmBuff.append(",");
						prgmBuff.append(cargo.getProgCd());
					}
					casePgmMap.put(cargo.getCaseNum(), prgmBuff.toString());
				} else {
					caselst.add(cargo.getCaseNum());
					casePgmMap.put(cargo.getCaseNum(), cargo.getProgCd());
				}
				if("MC".equalsIgnoreCase(cargo.getProgCd())){
					pgmStartDtMap.put(cargo.getCaseNum(), cargo.getProgStatusDt());
				}
			    }
		    }
		    
		}
		log(7,"AutoRegistrationBO.selectCaseMSPAdd() :: Program Case map: "+ casePgmMap);
		System.out.println("AutoRegistrationBO.selectCaseMSPAdd() :: Program Case map: "+ casePgmMap);
		if (caselst != null && caselst.size() > 0 && casePgmMap != null
				&& casePgmMap.size() > 0) {
			for (Long caseList : caselst) {
				Long caseNumber = caseList;
				String value = casePgmMap.get(caseNumber).toString();
				long caseNum = (Long) caseNumber;
				ArrayList pgmList = new ArrayList(Arrays.asList(value.split(",")));
				
				if (pgmList.contains("MC")) {// If MSP Program is present
					mspCaseNum = caseNumber;
					lisMSPAppDuplicate = true;
					break;
				} else if (pgmList.contains("MA")) {
					maCaseNum = caseNumber;
				}else if (pgmList.contains("ME")) {
					meCaseNum = caseNumber;
				} else if (pgmList.contains("FP")) {
					fpCaseNum = caseNumber;
				}  else if (pgmList.contains("TF")) {
					tanfCaseNum = caseNumber;
				} else if (pgmList.contains("FS")) {
					snapCaseNum = caseNumber;
				}
			}
			if (mspCaseNum > 0) {
				alertCaseNum = mspCaseNum;
			} else if (maCaseNum > 0) {
				alertCaseNum = maCaseNum;
			} else if (meCaseNum > 0) {
				alertCaseNum = meCaseNum;
			} else if (fpCaseNum > 0) {
				alertCaseNum = fpCaseNum;
			} else if (tanfCaseNum > 0) {
				alertCaseNum = tanfCaseNum;
			}else if (snapCaseNum > 0) {
				alertCaseNum = snapCaseNum;
			}
		}
		
		if(lisMSPAppDuplicate && !pgmStartDtMap.isEmpty() && pgmStartDtMap.containsKey(alertCaseNum) ){
		    mspPgmStatrtDt = (Timestamp) pgmStartDtMap.get(alertCaseNum);
		}
		return alertCaseNum;
	}
	
	
	public ArAppProgramIndvCargo[] getArAppProgramIndvAllCargos(String indvId) {
		ArAppProgramIndvCargo arAppProgIndvCargo = new ArAppProgramIndvCargo();
		ArAppProgramIndvCollection arAppProgramIndvColl = new ArAppProgramIndvCollection(connection);
		ArAppProgramIndvCargo[] arAppProgramIndvCargoArray = null;
		Object[] objLst = new Object[1];		
		objLst[0] = indvId;// indvList
    
		try{
			arAppProgramIndvCargoArray = (ArAppProgramIndvCargo[]) arAppProgramIndvColl.select("findByIndvsMSP",objLst);			
		}catch(Exception e){
			log(ILog.ERROR, "Exception in AutoRegistrationBO.getArAppProgramIndvAllCargos() indvId: " + indvId + "\n" + e.getMessage() + "\n", e);
			e.printStackTrace();
		}
	return arAppProgramIndvCargoArray;
	}
	
	public long getGroupSeqNum(String appNum) throws Exception{
		String docId = null;
		log(7,"AutoRegistrationBO.getGroupSeqNum() :: Start logic for finding the groupseqNum for appNum  - "+ appNum);
		DMDocTaskUpdateBO taskBo = new DMDocTaskUpdateBO(docId, connection);
		Object docIdforFileNet = taskBo.getDocIdFromDmDocForSubmit(appNum);
		long groupSeqNum = 0;
		//try {
			if (docIdforFileNet != null) {
			docId = (String) docIdforFileNet;
			log(7,"AutoRegistrationBO.getGroupSeqNum() :: docId - "+ docId);
			}
			if (docId != null) {
				taskBo = new DMDocTaskUpdateBO(docId, connection);
				DmDocCargo[] dmDocCargo = taskBo.getDocSeqNum();
				if (dmDocCargo != null && dmDocCargo.length > 0) {
					groupSeqNum = dmDocCargo[0].getGroupSeqNum();
				}
			}
			return groupSeqNum;
		/*/}/*catch{
			hasExceptionOccurred = true;
			throw e;
		}*/
	}
	
	public ArApplicationForAidCargo insertArApplicationForAid(String sourceAppNum, String associatedAppNum, long associatedCaseNum, String associationType) throws Exception {
	    log(7,"AutoRegistrationBO.insertArApplicationForAid :: Start logic for inserting ArApplicationForAidCargo for appNum  - "+ sourceAppNum);
	    System.out.println("AutoRegistrationBO.insertArApplicationForAid :: Start logic for inserting ArApplicationForAidCargo for appNum  - "+ sourceAppNum);
	    ArApplicationForAidCollection arApplicationForAidColl = new ArApplicationForAidCollection(connection);
		ArApplicationForAidCargo arApplicationForAidCargo = new ArApplicationForAidCargo();
		arApplicationForAidCargo.setAppNum(sourceAppNum);
		arApplicationForAidColl.setCargo(arApplicationForAidCargo);
		ArApplicationForAidCargo[] arCargoArr  = (ArApplicationForAidCargo[]) arApplicationForAidColl.select("findByAppNum");
		arApplicationForAidColl.clear();
		if (arCargoArr != null && arCargoArr.length > 0) {
			arApplicationForAidCargo = arCargoArr[0];
		}
		if(ARConstants.ASSOCIATION_TYPE_PROGRAM_ADD.equals(associationType)){
		    arApplicationForAidCargo.setApplicationStatusCd("CA");  
		}else{
		    arApplicationForAidCargo.setApplicationStatusCd("DE");
		}
		arApplicationForAidCargo.setScheduledSw('N');
		arApplicationForAidCargo.setPriorSnapSw('N');
		arApplicationForAidCargo.setPriorSnapSw('N');
		arApplicationForAidCargo.setAppMpeSw('N');
		arApplicationForAidCargo.setAuthRepSw('N');
		arApplicationForAidCargo.setAuthRepInd('N');
		arApplicationForAidCargo.setAppForaidSw('Y');
		arApplicationForAidCargo.setAssociationSw('Y');
		arApplicationForAidCargo.setCaseNum(0);
		arApplicationForAidCargo.setCreateUserId(ARConstants.APPLICATION_ASSOCIATION);
		arApplicationForAidCargo.setCreateDt(BiUtils.getToday());
		arApplicationForAidCargo.setApplicationSubDt(BiUtils.getToday());
		arApplicationForAidCargo.setAssociatedCaseNum(associatedCaseNum);
		arApplicationForAidCargo.setAssociatedAppNum(associatedAppNum);
		arApplicationForAidCargo.setAssociationType(associationType);

		T1001AppRqstCollection t1001AppRqstColl = new T1001AppRqstCollection(connection);
		T1001AppRqstCargo t1001AppRqstCargo = new T1001AppRqstCargo();
		t1001AppRqstCargo.setAppNum(sourceAppNum);
		t1001AppRqstColl.setCargo(t1001AppRqstCargo);
		T1001AppRqstCargo[] t1001AppRqstCargoArr = (T1001AppRqstCargo[]) t1001AppRqstColl.select("findByAppNum");
		if (t1001AppRqstCargoArr != null && t1001AppRqstCargoArr.length > 0) {
			T1001AppRqstCargo t1001Cargo = t1001AppRqstCargoArr[0];
			
			//setAppType(t1001Cargo.getAppTyp());
			arApplicationForAidCargo.setApplicationStatusDt(t1001Cargo.getAppRcvDt());
			arApplicationForAidCargo.setAppModeCd(t1001Cargo.getAppMode());
			arApplicationForAidCargo.setAppNum(t1001Cargo.getAppNum());
			arApplicationForAidCargo.setAppRecvdDt(t1001Cargo.getAppRcvDt());
			arApplicationForAidCargo.setAppTypeCd(t1001Cargo.getAppMode());
			arApplicationForAidCargo.setEmpId(retrieveIntakeVirtualWkrId(t1001Cargo.getOfcNum()));
			arApplicationForAidCargo.setExpeditedSw(t1001Cargo.getExpeditedFapSw());
			if (t1001Cargo.getOfcNum()==0) {
				arApplicationForAidCargo.setOfficeNum(10);
			} else {
			arApplicationForAidCargo.setOfficeNum(t1001Cargo.getOfcNum());
			}
			arApplicationForAidCargo.setProviderNumber(t1001Cargo.getProviderId());
			arApplicationForAidCargo.setLanguageCd(t1001Cargo.getLangCd() != null && !t1001Cargo.getLangCd().trim().equals("") ? t1001Cargo.getLangCd() : "0" );
		}

		T1002AppDtlCollection t1002AppDtlColl = new T1002AppDtlCollection(connection);
		T1002AppDtlCargo[] t1002AppDtlCargoArr = (T1002AppDtlCargo[]) t1002AppDtlColl.select("findAppDtlByAppNum", new Object[] { sourceAppNum });
		if (t1002AppDtlCargoArr != null && t1002AppDtlCargoArr.length > 0) {
			T1002AppDtlCargo t1002Cargo = t1002AppDtlCargoArr[0];

			arApplicationForAidCargo.setApplicantHomelessSw(t1002Cargo.getHlessSw());
			arApplicationForAidCargo.setPhnNumTyp(t1002Cargo.getPhnNumTyp().charAt(0));
			arApplicationForAidCargo.setPhNum(t1002Cargo.getHshlPhnNum().trim());
			/*PMD_Override - R10 - Casting from long to short for this particular element will not cause to lose data */
			PMDRules.markApprovedStatement("R10");
			arApplicationForAidCargo.setPrefCntcInd((short) t1002Cargo.getPrefCntcInd());
			arApplicationForAidCargo.setPrefCntcTmTxt(t1002Cargo.getPrefCntcTmTxt());
			arApplicationForAidCargo.setMsgPhnNum(t1002Cargo.getMsgPhnNum().trim());
			arApplicationForAidCargo.setEmail(t1002Cargo.getHshlEmailAdr().trim());
			arApplicationForAidCargo.setWorkPhNum(t1002Cargo.getHshlWorkPhnNum());
			arApplicationForAidCargo.setOtherPhNum(t1002Cargo.getHshlCellPhnNum());
			arApplicationForAidCargo.setVulnerableSw(t1002Cargo.getVulnerableSw());
		    System.out.print("VunlnerableSW in insertArApplicationForAid autoRegBO "+arApplicationForAidCargo.getVulnerableSw() +"Vul sw= " + t1002Cargo.getVulnerableSw());

			arApplicationForAidCargo.setWorkPhNumExt(t1002Cargo.getWorkPhnExtnNum() != null && !t1002Cargo.getWorkPhnExtnNum().trim().equals("") ? Long.parseLong(t1002Cargo.getWorkPhnExtnNum().trim()) : 0);
		}

		T2040AppAuthRepCollection t2040AppAuthRepColl = new T2040AppAuthRepCollection(connection);
		T2040AppAuthRepCargo t2040AppAuthRepCargo = new T2040AppAuthRepCargo();
		t2040AppAuthRepCargo.setAppNum(sourceAppNum);
		t2040AppAuthRepColl.setCargo(t2040AppAuthRepCargo);
		T2040AppAuthRepCargo[] t2040AppAuthRepCargoArr = (T2040AppAuthRepCargo[]) t2040AppAuthRepColl.select("findAuthRepInfoByByAppNum");
		if (t2040AppAuthRepCargoArr != null && t2040AppAuthRepCargoArr.length > 0) {
			T2040AppAuthRepCargo t2040Cargo = t2040AppAuthRepCargoArr[0];

			if (t2040Cargo.getAuthRepCd() != null && !t2040Cargo.getAuthRepCd().trim().equals("") && !t2040Cargo.getAuthRepCd().trim().equals("0")) {
				arApplicationForAidCargo.setAuthRepSw('Y');
				arApplicationForAidCargo.setAuthRepInd('Y');
			}
		}

		T1006AppInPermdCollection t1006AppInPermdColl = new T1006AppInPermdCollection(connection);
		T1006AppInPermdCargo t1006AppInPermdCargo = new T1006AppInPermdCargo();
		t1006AppInPermdCargo.setAppNum(sourceAppNum);
		t1006AppInPermdColl.add(t1006AppInPermdCargo);
		T1006AppInPermdCargo[] t1006AppInPermdCargoArr = (T1006AppInPermdCargo[]) t1006AppInPermdColl.select("findByAppNumInboundFFMApps");
		if (t1006AppInPermdCargoArr != null && t1006AppInPermdCargoArr.length > 0) {
			T1006AppInPermdCargo t1006Cargo = t1006AppInPermdCargoArr[0];

			arApplicationForAidCargo.setSpokenLanguageTypeCd(t1006Cargo.getLangCd());
		}

		arApplicationForAidColl.setCargo(arApplicationForAidCargo);
		arApplicationForAidColl.update(arApplicationForAidColl);
		log(7,"AutoRegistrationBO.insertArApplicationForAid :: End ArApplicationForAidCargo insert for appNum  - "+ sourceAppNum);
		return arApplicationForAidCargo;
	}
	
	public void insertArApplicationAssociation(String sourceAppNum, String associatedAppNum, long associatedCaseNum, String typeCd, String groupSeqNum) throws Exception {
	    log(7,"AutoRegistrationBO.insertArApplicationAssociation :: Start ArApplicationForAidCargo insert for Source appNum  - "+ sourceAppNum);
	    ArApplicationAssociationCollection arApplicationAssociationColl = new ArApplicationAssociationCollection(connection);
		ArApplicationAssociationCargo arApplicationAssociationCargo = new ArApplicationAssociationCargo();

		arApplicationAssociationCargo.setSourceAppNum(sourceAppNum);
		if (associatedAppNum != null && !associatedAppNum.equals("")) {
			arApplicationAssociationCargo.setAssociatedAppNum(associatedAppNum);
		} else if (associatedCaseNum != 0) {
			arApplicationAssociationCargo.setAssociatedCaseNum(associatedCaseNum);
		}
		arApplicationAssociationCargo.setType(typeCd);
		arApplicationAssociationCargo.setGroupSeqNum(Long.valueOf(groupSeqNum));
		arApplicationAssociationCargo.setCreateUserId(ARConstants.APPLICATION_ASSOCIATION);
		arApplicationAssociationCargo.setCreateDt(BiUtils.getToday());
		arApplicationAssociationCargo.setAssociationDt(BiUtils.getToday());

		arApplicationAssociationColl.setCargo(arApplicationAssociationCargo);
		arApplicationAssociationColl.insert(arApplicationAssociationColl);
	}
	
	public void syncArData(String sourceAppNum, String associateAppNum, String associationType,boolean isduplicateAppAssociation ,String autoRegStatus) throws Exception {
		// Sync addresses from AR to AR
	    log(7,"AutoRegistrationBO.syncArData() :: Start syncArData insert for Associated appNum  - "+ associateAppNum);
	    System.out.println("AutoRegistrationBO.syncArData() :: Start syncArData insert for Associated appNum  - "+ associateAppNum);
		ArAppAddrCollection arAppAddrColl = new ArAppAddrCollection(connection);
		ArAppAddrCargo arAppAddrCargo = new ArAppAddrCargo();
		log(7,"AutoRegistrationBO.syncArData() :: Get Address for the   appNum- "+ sourceAppNum);
		getAddressForApp(sourceAppNum);
		System.out.println("AutoRegistrationBO.syncArData() :: Start syncArData insert into AR_APP_ADDRESS tables  for appnum  - "+ sourceAppNum);
	    	updateArAppAddrTable(sourceAppNum);
		
		// Sync indvs from AR to AR
		ArAppIndvCollection arAppIndvColl = new ArAppIndvCollection(connection);
		ArAppIndvCargo arAppIndvCargo = new ArAppIndvCargo();
		
		//deleteRecord(sourceAppNum);
		arAppIndvColl = new ArAppIndvCollection(connection);
		log(7,"AutoRegistrationBO.syncArData() :: Insert into ArAppIndv "+ sourceAppNum);
		System.out.println("AutoRegistrationBO.syncArData() :: Insert into ArAppIndv "+ sourceAppNum);
		updateArAppIndvCargoForMSP( sourceAppNum);
		
		
		if(associationType != null && associationType.equals("DA")){
			ArAppProgramCollection arAppProgColl = new ArAppProgramCollection(connection);
			ArAppProgramCargo arAppProgCargo = new ArAppProgramCargo();
			log(7,"AutoRegistrationBO.syncArData() :: Insert into ArAppProgram "+ sourceAppNum);
			System.out.println("AutoRegistrationBO.syncArData() :: Insert into ArAppProgram "+ sourceAppNum);
			arAppProgCargo = getArAppProgramCargoCopyFrom( sourceAppNum,isduplicateAppAssociation,autoRegStatus);
			arAppProgColl.add(arAppProgCargo);
			
			arAppProgColl.insert(arAppProgColl);
			log(7,"AutoRegistrationBO.syncArData() :: Insert into ArAppProgramIndv "+ sourceAppNum);
			System.out.println("AutoRegistrationBO.syncArData() :: Insert into ArAppProgramIndv "+ sourceAppNum);
			updateArAppProgramIndvTable(sourceAppNum);
		}
		System.out.println("AutoRegistrationBO.syncArData() ::  syncArData insert for Associated appNum  - "+ associateAppNum);
	}

	public boolean syncDcData(String sourceAppNum, long associateCaseNum,boolean isduplicateAppAssociation,String autoRegStatus) throws Exception {
		// Sync addresses from DC to AR
	    log(7,"AutoRegistrationBO.syncArData() :: Start syncArData insert for Associated CaseNum  - "+ associateCaseNum);
	    
	    HashMap<Integer, String> ssaValidationSwMap = new HashMap();
	    T1006AppInPermdCollection t1006AppInPermdColl = null;
	    T1006AppInPermdCargo t1006AppInPermdCargo = null;
	    T1006AppInPermdCargo[] t1006AppInPermdCargoArray = null;

	    boolean displayAddtionalIndvs = false;
	    HashMap<Integer, String> legacyIndvMap = new HashMap();
	    AppIndividualBO appIndividualBO = new AppIndividualBO(connection);
	    T1004AppIndvCargo t1004Cargo = new T1004AppIndvCargo();
	    try{	    
	    for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
	    	int key = (int) autoRegT1004CargoArray[i].getIndvSeqNum();
	    	if (indvMap.containsKey(key)) {
	    		    if (indvMap.get(key) != 0) {
	    			autoRegT1004CargoArray[i].setBridgesIndvId((Long) indvMap.get(key));
	    			t1004Cargo = autoRegT1004CargoArray[i];
	    			updateT1004AppIndvTable(t1004Cargo);
	    		    } else {
	    			autoRegT1004CargoArray[i].setBridgesIndvId(generateIndvId());
	    			String legacyIndvId = appIndividualBO.generateRIN(0L);
	    			legacyIndvMap.put(key, legacyIndvId);
	    			t1004Cargo = autoRegT1004CargoArray[i];
	    			updateT1004AppIndvTable(t1004Cargo);
	    		    }
	    	}
	    }

	      t1006AppInPermdColl = new T1006AppInPermdCollection(connection);
	      t1006AppInPermdCargo = new T1006AppInPermdCargo();
	      t1006AppInPermdCargo.setAppNum(sourceAppNum);
	      t1006AppInPermdColl.add(t1006AppInPermdCargo);
	      t1006AppInPermdCargoArray = (T1006AppInPermdCargo[]) t1006AppInPermdColl.select("findByAppNumInboundFFMApps");

	      for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
	    		// PMD_Override - R10 - The casting of this numeric/byte type does not need to be addressed because it will not exceed the int value.
	    		PMDRules.markApprovedStatement("R10");
	    		ssaValidationSwMap.put((int) autoRegT1004CargoArray[i].getIndvSeqNum(), "N");
	      }

    	      if (!updateDcIndvTable(ssaValidationSwMap, legacyIndvMap, t1006AppInPermdCargoArray)) {
    	    		if (this.con != null) {
    	    		    this.con.rollback();
    	    		}
    	    		return false;
    	       }
	       log(7,"AutoRegistrationBO.syncArData() :: Start syncArData insert into AR_APP_INDV tables  for appnum  - "+ sourceAppNum);
    	       updateArAppIndvTable(sourceAppNum);
    	       log(7,"AutoRegistrationBO.syncArData() :: Start syncArData insert into AR_APP_PROGRAM tables  for appnum  - "+ sourceAppNum);
    	       System.out.println("AutoRegistrationBO.syncArData() :: Start syncArData insert into AR_APP_PROGRAM tables  for appnum  - "+ sourceAppNum);
    	       updateArAppProgramTableMSP(sourceAppNum,isduplicateAppAssociation,autoRegStatus);
    	       System.out.println("AutoRegistrationBO.syncArData() :: Start syncArData insert into AR_APP_ADDRESS tables  for appnum  - "+ sourceAppNum);
    	       getAddressForApp(sourceAppNum);
    	      // updateArAppAddrTable(sourceAppNum);
    	       updateArAppProgramIndvTable(sourceAppNum);
    	       updateMoEmployeeAppsTable();
    	       System.out.println("AutoRegistrationBO.syncArData() :: Start syncArData insert into AR_APP_ADDRESS tables  for appnum  - "+ sourceAppNum);
    	       updateArAppAddrTable(sourceAppNum);
		
		DcCaseAddressesCollection dcCaseAddressesColl = new DcCaseAddressesCollection(connection);
		DcCaseAddressesCargo dcCaseAddressesCargo = new DcCaseAddressesCargo();
		dcCaseAddressesCargo.setCaseNum(associateCaseNum);
		dcCaseAddressesColl.setCargo(dcCaseAddressesCargo);
		DcCaseAddressesCargo[] dcCaseAddressesCargoArr = (DcCaseAddressesCargo[]) dcCaseAddressesColl.select("findCurrentHomeAddressesByAddressType");

		ArAppAddrCollection arAppAddrColl = new ArAppAddrCollection(connection);
		ArAppAddrCargo arAppAddrCargo = null;
		for (int i = 0; i < dcCaseAddressesCargoArr.length; i++) {
			arAppAddrCargo = getArAppAddrCargoFromDcCaseAddressesCargo(dcCaseAddressesCargoArr[i], sourceAppNum);
			arAppAddrColl.add(arAppAddrCargo);
		}
		//arAppAddrColl.insert(arAppAddrColl); As AR_APP_ADDR table will only have data wrt the MSP App and no case individuals should be inserted.

		// Sync indvs from DC to AR
		DcCaseIndividualCollection dcCaseIndividualColl = new DcCaseIndividualCollection(connection);
		DcCaseIndividualCargo dcCaseIndividualCargo = new DcCaseIndividualCargo();
		dcCaseIndividualCargo.setCaseNum(associateCaseNum);
		dcCaseIndividualColl.setCargo(dcCaseIndividualCargo);
		DcCaseIndividualCargo[] dcCaseIndividualCargoArr = (DcCaseIndividualCargo[]) dcCaseIndividualColl.select("findByCaseNumber");

		ArAppIndvCollection arAppIndvColl = new ArAppIndvCollection(connection);
		ArAppIndvCargo arAppIndvCargo = null;
		//deleteRecord(sourceAppNum);
		T1004AppIndvCollection t1004AppColl = new T1004AppIndvCollection(connection);
		T1004AppIndvCargo[] tAppIndvs = (T1004AppIndvCargo[]) t1004AppColl.select("findByAppNum", new Object[] {sourceAppNum});
		Map<Long,T1004AppIndvCargo> result = verifyIfIndvsExist(sourceAppNum, tAppIndvs);
		
		if(tAppIndvs != null && tAppIndvs.length > 0 && tAppIndvs.length > dcCaseIndividualCargoArr.length){
			displayAddtionalIndvs = true;
		}
		for (int i = 0; i < dcCaseIndividualCargoArr.length; i++) {
			arAppIndvCargo = getArAppAddrCargoFromDcCaseIndividualCargo(dcCaseIndividualCargoArr[i], sourceAppNum);
			arAppIndvColl.add(arAppIndvCargo);
			if(result.containsKey(arAppIndvCargo.getIndvId())){
				//updateT1004AppIndv(result.get(arAppIndvCargo.getIndvId()));//As the update method is called earlier 
			} else{
				displayAddtionalIndvs = true;
			}
		}
		//arAppIndvColl.insert(arAppIndvColl); //As AR_APP_INDV table will only have data wrt the MSP App and no case individuals should be inserted.
	    }catch (Exception e) {
		    if (this.con != null) {
			this.con.rollback();
		    }
			log(ILog.ERROR, "Exception in AutoRegistrationBO.syncDcData() sourceAppNum: " + sourceAppNum + " associateCaseNum: " + associateCaseNum + "\n" + e.getMessage() + "\n", e);
		    hasExceptionOccurred = true;
		    
		    throw e;
		}
		return displayAddtionalIndvs;
	}
	
	private void getAddressForApp(String appNum) throws Exception {
	    HashMap paramHashMap = null;
	    ApplicationBO appBo = new ApplicationBO(connection);
	    T1002AppDtlCargo t1002Cargo = new T1002AppDtlCargo();
	    ArAppAddrCargo paramArAppAddrCargo = new ArAppAddrCargo();
	    ArAppAddrCargo arAppAddrTempCargo = null;
	    String countyCd = null;
	    System.out.println("AutoRegistrationBO.getAddressForApp() :: Start syncArData  for appnum  - "+ appNum);
	    t1002Cargo = autoRegT1002Cargo;
	    paramArAppAddrCargo.setAddrStNm(t1002Cargo.getHshlStAdr());
	    paramArAppAddrCargo.setAddrLine(t1002Cargo.getHshlL2Adr());
	    paramArAppAddrCargo.setAddrCity(t1002Cargo.getHshlCityAdr());
	    paramArAppAddrCargo.setAddrStateCd(t1002Cargo.getHshlStaAdr());
	    paramArAppAddrCargo.setAddrZip5(t1002Cargo.getHshlZipAdr());
	    try{
	    if ("IL".equals(paramArAppAddrCargo.getAddrStateCd())) {
	    	log(7, "AutoRegistrationBO.getAddressForApp() :: Calling ValidateAddress interface for Physical Address-" + appNum);
	    	System.out.println("AutoRegistrationBO.getAddressForApp() :: Calling ValidateAddress interface for Physical Address- "+ appNum);
	    	
	    	    arAppAddrTempCargo = (ArAppAddrCargo) appBo.validateAddressIq8MSP(paramArAppAddrCargo, paramHashMap);
	    }

	    if(arAppAddrTempCargo != null){
	    	arAppAddrTempCargo.setValidationSw('Y');
	    	arAppAddrTempCargo.setAddrTypeCd("PA");
	    	countyCd = arAppAddrTempCargo.getAddrCountyCd();
	    		    	
	    }
	    if (arAppAddrTempCargo != null && arAppAddrTempCargo.getAddrStTypeCd() != null && !arAppAddrTempCargo.getAddrStTypeCd().trim().equals("")) {
	    	RefTableData streetType = new RefTableData();
	    	streetType = ReferenceTableManager.getValueForDescription("STREETTYPE", arAppAddrTempCargo.getAddrStTypeCd());
	    	if (streetType != null) {
	        arAppAddrTempCargo.setAddrStTypeCd(streetType.getRefrTableCode());
	    	}
	    }
	    		    
	    arAppAddrCargo = arAppAddrTempCargo;
	    
	} catch (Exception e) {
	    if (this.con != null) {
		this.con.rollback();
	    }
		log(ILog.ERROR, "Exception in AutoRegistrationBO.getAddressForApp() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    //updateAutoRegExcpTable(appNum, autoRegExpCode, AppRegConstants.AUTO_REG_EXCP_STATUS_EX);
	    
	    if (this.con != null) {
		this.con.commit();
	    }
	    
	    throw e;
	} finally {
	    t1002Cargo = null;
	    paramArAppAddrCargo = null;
	    arAppAddrTempCargo = null;
	}
	    
	}