package gov.illinois.ies.business.batch.in;

import gov.illinois.framework.management.util.FwConstants;
import gov.illinois.framework.management.util.FwPropertyLoader;
import gov.illinois.fw.business.exceptions.ApplicationException;
import gov.illinois.fw.business.exceptions.FrameworkException;
import gov.illinois.fw.management.logger.Debug;
import gov.illinois.ies.business.entities.interfaces.IesServicesAuthTokenCargo;
import gov.illinois.ies.business.entities.interfaces.IesServicesAuthTokenCollection;
import gov.illinois.ies.business.rules.in.InterfacesException;
import gov.illinois.ies.business.rules.mo.util.StringUtils;

import java.sql.Connection;
import java.sql.Timestamp;
import java.util.concurrent.TimeUnit;

public class TokenServiceHelper
{

	private static volatile TokenServiceHelper	instance						= null;
	private static final String					CMS								= "CMS";
	private static final String					EQUIFAX							= "EQUIFAX";
	private static final String					IDOT							= "IDOT";
	private static final String					RETURNING_TOKEN_STRING			= "Returning Token:";
	private static final String					FOR_SERVICE_TYPE_STRING			= " For Service type:";
	private static final String					FIND_LATEST_TOKEN_RECORD_STRING	= "findLatestTokenRecord";
	private static final String					PROPERTIES_FILE_NAME			= "TIERS";
	public static Connection					conn							= null;
	private static volatile String              cmsToken                        = null;
    private static volatile Timestamp           cmsLastTokenGeneratedTime       = null;
    private static volatile String              idotToken                       = null;
    private static volatile Timestamp           idotLastTokenGeneratedTime      = null;

	private TokenServiceHelper()
	{

	}

	public static TokenServiceHelper getInstance()
	{
		if (instance == null)
		{
			synchronized (TokenServiceHelper.class)
			{
				if (instance == null)
				{
					instance = new TokenServiceHelper();
				}
			}
		}
		return instance;
	}

	/**
	 * This method will retrieves the Token Id from the Database.
	 * 
	 * @param serviceType
	 * @return
	 * @throws FrameworkException
	 * @throws ApplicationException
	 */
	public static synchronized String retrieveToken(String serviceType) throws ApplicationException, FrameworkException
 {
		Debug.println("Start of TokenServiceHelper.retrieveToken().. and Service Type is " + serviceType);
		Timestamp currTimets = new Timestamp(System.currentTimeMillis());
		if (cmsToken != null) 
		{
			Debug.println(" Last Token Generated Time:" + cmsLastTokenGeneratedTime);
			if (cmsLastTokenGeneratedTime != null) 
			{
				long cmsRunInterval = 15;
				if (CMS.equalsIgnoreCase(serviceType)) 
				{
					String batchInterval = FwPropertyLoader.getProperties(PROPERTIES_FILE_NAME).getProperty("CMS_BATCH_RUN_INTERVAL");
					cmsRunInterval = Long.parseLong(batchInterval);
				}
				long timeDiffinMinutes = TokenServiceHelper.getTimeDiffinMinutes(currTimets.getTime(),cmsLastTokenGeneratedTime.getTime(),TimeUnit.MINUTES);
				Debug.println("timeDiffinMinutes between Tokens: "+ timeDiffinMinutes);
				if (timeDiffinMinutes > cmsRunInterval) 
				{
					Debug.println("Re-intializing Token and cmsLastTokenGeneratedTime to null...");
					cmsToken = null;
					cmsLastTokenGeneratedTime = null;
				} 
				else 
				{
					Debug.println(RETURNING_TOKEN_STRING + cmsToken + FOR_SERVICE_TYPE_STRING + serviceType);
					return cmsToken;
				}
			}
		} 
		else if (idotToken != null) 
		{
			Debug.println(" Last Token Generated Time:" + idotLastTokenGeneratedTime);
			if (idotLastTokenGeneratedTime != null) 
			{
				long idotRunInterval = 15;
				if (IDOT.equalsIgnoreCase(serviceType)) 
				{
					String batchInterval = FwPropertyLoader.getProperties(PROPERTIES_FILE_NAME).getProperty("IDOT_BATCH_RUN_INTERVAL");
					idotRunInterval = Long.parseLong(batchInterval);
				}
				long timeDiffinMinutes = TokenServiceHelper.getTimeDiffinMinutes(currTimets.getTime(),idotLastTokenGeneratedTime.getTime(),TimeUnit.MINUTES);
				Debug.println("timeDiffinMinutes between Tokens: " + timeDiffinMinutes);
				if (timeDiffinMinutes > idotRunInterval) 
				{
					Debug.println("Re-intializing Token and idotLastTokenGeneratedTime to null...");
					idotToken = null;
					idotLastTokenGeneratedTime = null;
				}
			} 
			else 
			{
				Debug.println(RETURNING_TOKEN_STRING + idotToken + FOR_SERVICE_TYPE_STRING + serviceType);
				return idotToken;
			}
		}
		IesServicesAuthTokenCargo cargo = retrieveTokenCargo(serviceType);
		if (cargo != null) 
		{
			if (CMS.equalsIgnoreCase(serviceType)) 
			{
				cmsToken = cargo.getTokenId();
				cmsLastTokenGeneratedTime = cargo.getEffBeginDt();
				Debug.println(RETURNING_TOKEN_STRING + cmsToken + FOR_SERVICE_TYPE_STRING + serviceType);
				return cmsToken;
			} 
			else if (IDOT.equalsIgnoreCase(serviceType)) 
			{
				idotToken = cargo.getTokenId();
				idotLastTokenGeneratedTime = cargo.getEffBeginDt();
				Debug.println(RETURNING_TOKEN_STRING + idotToken + FOR_SERVICE_TYPE_STRING + serviceType);
				return idotToken;
			}
		}
		Debug.println("End of TokenServiceHelper.retrieveToken()..Returning null");
		return null;
	}

	/**
	 * This method will invoke the Web Service based on the service provider type and returns the token from it.
	 * 
	 * @param serviceType
	 * @return
	 * @throws FrameworkException
	 * @throws ApplicationException
	 * @throws Exception
	 */
	public static synchronized String invokeTokenService(String serviceType, String oldToken) throws Exception
	{
		try
		{
			Debug.println("Start of TokenServiceHelper.invokeTokenService().. and Service Type is " + serviceType + " and old Token is:" + oldToken);
			if (serviceType == null)
			{
				return null;
			}
			boolean invokeTokenService = false;
			long runInterval = 15;
			if (CMS.equalsIgnoreCase(serviceType))
			{
				String batchInterval = FwPropertyLoader.getProperties(PROPERTIES_FILE_NAME).getProperty("CMS_BATCH_RUN_INTERVAL");
				runInterval = Long.parseLong(batchInterval);
			}
			else if (IDOT.equalsIgnoreCase(serviceType))
			{
				String batchInterval = FwPropertyLoader.getProperties(PROPERTIES_FILE_NAME).getProperty("IDOT_BATCH_RUN_INTERVAL");
				runInterval = Long.parseLong(batchInterval);
			}
			else if (EQUIFAX.equalsIgnoreCase(serviceType))
			{
				String batchInterval = FwPropertyLoader.getProperties(PROPERTIES_FILE_NAME).getProperty("EQUIFAX_BATCH_RUN_INTERVAL");
				runInterval = Long.parseLong(batchInterval);
			}
			Debug.println("Run interval for service:" + serviceType + " is:" + runInterval);
			IesServicesAuthTokenCargo tokenCargo = retrieveTokenCargo(serviceType);
			if (tokenCargo == null)
			{
				Debug.println("Token cargos from DB is null, making invokeTokenService as true");
				invokeTokenService = true;
			}
			else
			{
				String tokenId = tokenCargo.getTokenId();
				if (oldToken.equalsIgnoreCase(tokenId))
				{
					Debug.println("oldToken and Token fetched from DB are same, making invokeTokenService as true");
					invokeTokenService = true;
				}
				else 
				{
						Timestamp tokenCreateDt = tokenCargo.getCreateDt();
						Timestamp currTimets = new Timestamp(System.currentTimeMillis());
						long timeDiffinMinutes = TokenServiceHelper.getTimeDiffinMinutes(currTimets.getTime(), tokenCreateDt.getTime(), TimeUnit.MINUTES);
						Debug.println("timeDiffinMinutes from db and old Token: " + timeDiffinMinutes);
						if (timeDiffinMinutes <= runInterval)
						{
							if (FwConstants.CMS_SERVICE.equalsIgnoreCase(serviceType))
							{
								cmsToken = tokenId;
								Debug.println("Token fetched from DB is within Batch interval, returning DB token:" + cmsToken);
								return cmsToken;
							}
							else if (FwConstants.IDOT_SERVICE.equalsIgnoreCase(serviceType))
							{
								idotToken = tokenId;
								Debug.println("Token fetched from DB is within Batch interval, returning DB token:" + idotToken);
								return idotToken;
							}
						}
						else
						{
							Debug.println("Token fetched from DB is not within Batch interval, making invokeTokenService as true");
							invokeTokenService = true;
						}
				}
			}
			Debug.println("invokeTokenService flag:" + invokeTokenService);
			// Ideally this if Block should never execute
			if (!invokeTokenService)
			{
				Debug.println("Couldn't find Token and invokeTokenService is false");
				return null;
			}
			if (FwConstants.CMS_SERVICE.equalsIgnoreCase(serviceType))
			{
				String accessTokenUrl = FwPropertyLoader.getProperties(PROPERTIES_FILE_NAME).getProperty("ACCESS_TOKEN_URL");
				String timeOut = FwPropertyLoader.getPropertyOf(FwConstants.APPLICATION_PROPERTY_FILE, "WEB_SERIVICES_IES_TIMEOUT");
				String cmsTokenSslEnableSw = FwPropertyLoader.getProperties(PROPERTIES_FILE_NAME).getProperty("CMS_TOKEN_SSL_ENABLE_SW");

				if (StringUtils.isEmpty(timeOut))
				{
					timeOut = "14000";
				}

				if (StringUtils.isEmpty(accessTokenUrl) || StringUtils.isEmpty(cmsTokenSslEnableSw))
				{
					return null;
				}
				CMSTokenServiceBO cmsTokenServiceBO;
				if(conn == null)
				{
					 cmsTokenServiceBO = new CMSTokenServiceBO(accessTokenUrl, cmsTokenSslEnableSw, timeOut);
				}
				else
				{
					 cmsTokenServiceBO = new CMSTokenServiceBO(accessTokenUrl, cmsTokenSslEnableSw, timeOut,conn);

				}
				String newToken = cmsTokenServiceBO.retrieveCMSToken();
				Debug.println("New Token:" + cmsToken + FOR_SERVICE_TYPE_STRING + serviceType);
				// Valid token from CMS Service
				if (newToken != null)
				{
					boolean flag = true;
					if(conn == null)
					{
						flag = false;
					}
					cmsTokenServiceBO.persistCMSToken(newToken, serviceType, flag);
					cmsToken = newToken;
	                return cmsToken;
				}
			}
			else if (FwConstants.IDOT_SERVICE.equalsIgnoreCase(serviceType))
			{
				String accessTokenUrl = FwPropertyLoader.getProperties(PROPERTIES_FILE_NAME).getProperty("IDOT_ACCESS_TOKEN_URL");
				String timeOut = FwPropertyLoader.getPropertyOf(FwConstants.APPLICATION_PROPERTY_FILE, "WEB_SERIVICES_IES_TIMEOUT");
				String idotTokenSslEnableSw = FwPropertyLoader.getProperties(PROPERTIES_FILE_NAME).getProperty("IDOT_TOKEN_SSL_ENABLE_SW");

				if (StringUtils.isEmpty(timeOut))
				{
					timeOut = "14000";
				}

				if (StringUtils.isEmpty(accessTokenUrl) || StringUtils.isEmpty(idotTokenSslEnableSw))
				{
					return null;
				}
				IDOTTokenServiceBO idotTokenServiceBO;
				if(conn == null)
				{
					idotTokenServiceBO = new IDOTTokenServiceBO(accessTokenUrl, idotTokenSslEnableSw, timeOut);
				}
				else
				{
					idotTokenServiceBO = new IDOTTokenServiceBO(accessTokenUrl, idotTokenSslEnableSw, timeOut,conn);

				}
				String newToken = idotTokenServiceBO.retrieveIDOTToken();
				Debug.println("New Token:" + idotToken + FOR_SERVICE_TYPE_STRING + serviceType);
				// Valid token from IDOT Service
				if (newToken != null)
				{
					boolean flag = true;
					if(conn == null)
					{
						flag = false;
					}
					idotTokenServiceBO.persistIDOTToken(newToken, serviceType, flag);
					idotToken = newToken;
	                return idotToken;
				}
			}
			else
			{
				// TODO: EQUIFAX
				return null;
			}
		}
		catch (Exception e)
		{
			throw new InterfacesException("TokenServiceHelper.invokeTokenService() : " + e.getMessage(), e);
		}
		Debug.println("End of TokenServiceHelper.invokeTokenService()..Returning null");
		return null;
	}

	/**
	 * This method will retrieves the Token Id from the Database.
	 * 
	 * @param serviceType
	 * @return
	 * @throws FrameworkException
	 * @throws ApplicationException
	 */
	private static synchronized IesServicesAuthTokenCargo retrieveTokenCargo(String serviceType) throws ApplicationException, FrameworkException
	{
		Debug.println("Start of TokenServiceHelper.retrieveTokenCargo().. and Service Type is " + serviceType);
		IesServicesAuthTokenCollection authColl;
		if(conn == null)
		{
			authColl = new IesServicesAuthTokenCollection();
		}
		else
		{
			authColl = new IesServicesAuthTokenCollection(conn);
		}
		Object params[] = new Object[1];
		params[0] = serviceType;

		IesServicesAuthTokenCargo[] cargos = (IesServicesAuthTokenCargo[]) authColl.select(FIND_LATEST_TOKEN_RECORD_STRING, params);
		// Retrieving token from DB
		if (cargos != null && cargos.length > 0)
		{
			for (IesServicesAuthTokenCargo cargo : cargos)
			{
				return cargo;
			}
		}
		Debug.println("End of TokenServiceHelper.retrieveTokenCargo()..");
		return null;
	}

	private static long getTimeDiffinMinutes(long timeNow, long timeUpdate, TimeUnit timeUnit)
	{
		long diffInMillies = Math.abs(timeNow - timeUpdate);
		return timeUnit.convert(diffInMillies, TimeUnit.MILLISECONDS);
	}
}