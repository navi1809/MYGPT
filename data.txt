/**
     * Returns information on whether a file or stream to persist has been
     * opened 
     * @return boolean returns true or false
     */
    public boolean getFilePersitence() {
        return gfilePersistence;
    }

    /**
     * Gets Output File adapter in stream format given a logical file 
     * @param aOutLogicalFileName
     * @return BatchFile
     * @throws TIERSBatchException
     */
    public BatchFile getOutputFileStream(String aOutLogicalFileName)
            throws TIERSBatchException {
        int irunNum = 0;
        String sAsOfDate = null;
        BufferedOutputStream bw = null;
        BatchFile batFile = new BatchFile();
        String soutputFileName = null;
        String sFileName = null;
        gfilePersistence = true;

        try {
            insertFileControlRecord(jobId, aOutLogicalFileName);
        } catch (Exception e) {
            throw new TIERSBatchException(
                    "Error in inserting the o/p file information into file control table."
                            + e.getMessage(), e);
        }
        try {
            if (isParallelRunProgram()) {
                irunNum = getParallelRunNum();
            } else {
                irunNum = getAdjustedMaximumRunNo();
            }
            sAsOfDate = getAsOfDate();
            sFileName = bfcDAO.getPhysicalFileName(
                    getTIERSBatchControllerConnection(), jobId,
                    aOutLogicalFileName);
            if (sFileName == null) {
                soutputFileName = fa.getOutputFileNames(jobId,
                        aOutLogicalFileName, overWriteFlag, irunNum, sAsOfDate,
                        env);
            } else {
                soutputFileName = fa.getOutputFileNames(jobId, sFileName,
                        overWriteFlag, irunNum, sAsOfDate, env);
            }
        } catch (Exception ex) {
            throw new TIERSBatchException(
                    "Error in getting the File Name or File Run Num: "+ex.getMessage(), ex);
        }

        if (soutputFileName == null) {
            throw new TIERSBatchException(
                    "Input File Name cannot be constructed");
        } else {
            try {
                bw = exp.openOutputStream(soutputFileName,
                        (isRestartProgram() || isParallelRunProgram())); //if
                                                                         // it
                                                                         // is
                                                                         // restart
                                                                         // or
                                                                         // parallel
                                                                         // the
                                                                         // file
                                                                         // will
                                                                         // be
                                                                         // opened
                                                                         // in
                                                                         // append
                                                                         // mode
            } catch (Exception ex) {
                throw new TIERSBatchException(ex.getMessage(), ex);
            }
            try {
                batFile.setTIERSBatchControllerHandle(this);
                batFile.setRunNum(irunNum);
                batFile.setJobId(jobId);
                batFile.setAsOfDt(sAsOfDate);
                batFile.setPhysicalFileName(soutputFileName);
                batFile.setLogicalFileName(aOutLogicalFileName);
                batFile.setBufferedOutputStream(bw);
            } catch (Exception ex) {
                throw new TIERSBatchException(
                        "Not able to return Batch File Adapter: "+ex.getMessage(), ex);
            }
            batchOutputFileCollection
                    .put(batFile.getLogicalFileName(), batFile);
            return batFile;
        }
    }

    /**
     * Gets Output File for Parallel Jobs 
     * @param aOutLogicalFileName
     * @return BatchFile
     * @throws TIERSBatchException
     */
    public BatchFile getOutPutFilenameForParllelJobs(String aOutLogicalFileName)
            throws TIERSBatchException {
        int  irunNum = 0;
        String sAsOfDate = null;
        BufferedWriter bw = null;
        BatchFile batFile = new BatchFile();
        String soutputFileName = null;
        String sFileName = null;
        gfilePersistence = true;
        try {
            insertFileControlRecordForParllelRun(jobId, aOutLogicalFileName);
        } catch (Exception e) {
            throw new TIERSBatchException(
                    "Error in inserting the o/p file information into file control table."
                            + e.getMessage(), e);
        }
        try {
            if (isParallelRunProgram() && !getParallelStream()) {
               // irunNum = getParallelRunNum();
                irunNum = Integer.parseInt(brcDAO.getParallelRunNum());
            } else {
                irunNum = getAdjustedMaximumRunNo();
                irunNum = brcDAO.getMaximumRunNoParallelJobInt(
                        getTIERSBatchControllerConnection(), jobId, asOfDate);
                irunNum++;
            }
            sAsOfDate = getAsOfDate();
            sFileName = bfcDAO.getPhysicalFileName(
                    getTIERSBatchControllerConnection(), jobId,
                    aOutLogicalFileName);
            if (sFileName == null) {
                soutputFileName = fa.getOutputFileNames(jobId,
                        aOutLogicalFileName, overWriteFlag, irunNum, sAsOfDate,
                        env);
            } else {
                soutputFileName = fa.getOutputFileNames(jobId, sFileName,
                        overWriteFlag, irunNum, sAsOfDate, env);
            }
        } catch (Exception ex) {
            throw new TIERSBatchException(
                    "Error in getting the File Name or File Run Num: "+ex.getMessage(), ex);
        }
        if (soutputFileName == null) {
            throw new TIERSBatchException(
                    "Input File Name cannot be constructed");
        } else {
            try {
                bw = exp.openOutputFile(soutputFileName,
                        (isRestartProgram() || isParallelRunProgram())); //if
                                                                         // it
                                                                         // is
                                                                         // restart
                                                                         // or
                                                                         // parallel
                                                                         // the
                                                                         // file
                                                                         // will
                                                                         // be
                                                                         // opened
                                                                         // in
                                                                         // append
                                                                         // mode
            } catch (Exception ex) {
                throw new TIERSBatchException(ex.getMessage(), ex);
            }
            try {
                batFile.setTIERSBatchControllerHandle(this);
                batFile.setRunNum(irunNum);
                batFile.setJobId(jobId);
                batFile.setAsOfDt(sAsOfDate);
                batFile.setPhysicalFileName(soutputFileName);
                batFile.setLogicalFileName(aOutLogicalFileName);
                batFile.setBufferedWriter(bw);
            } catch (Exception ex) {
                throw new TIERSBatchException(
                        "Not able to return Batch File Adapter: "+ex.getMessage(), ex);
            }
            batchOutputFileCollection
                    .put(batFile.getLogicalFileName(), batFile);
            return batFile;
        }
    }

    /**
     * Gets Output File in writer format given a logical file name 
     * @param aOutLogicalFileName 
     * @return BatchFile 
     * @throws TIERSBatchException
     */
    public BatchFile getOutputFileName(String aOutLogicalFileName)
            throws TIERSBatchException {
        int irunNum = 0;
        String sAsOfDate = null;
        BufferedWriter bw = null;
        BatchFile batFile = new BatchFile();
        String soutputFileName = null;
        String sFileName = null;
        gfilePersistence = true;
        try {
            insertFileControlRecord(jobId, aOutLogicalFileName);
        } catch (Exception e) {
            throw new TIERSBatchException(
                    "Error in inserting the o/p file information into file control table."
                            + e.getMessage(), e);
        }
        try {
            if (isParallelRunProgram() && !getParallelStream()) {
                irunNum = getParallelRunNum();
            } else {
                irunNum = getAdjustedMaximumRunNo();
            }
            sAsOfDate = getAsOfDate();
            sFileName = bfcDAO.getPhysicalFileName(
                    getTIERSBatchControllerConnection(), jobId,
                    aOutLogicalFileName);
            if (sFileName == null) {
                soutputFileName = fa.getOutputFileNames(jobId,
                        aOutLogicalFileName, overWriteFlag, irunNum, sAsOfDate,
                        env);
            } else {
                soutputFileName = fa.getOutputFileNames(jobId, sFileName,
                        overWriteFlag, irunNum, sAsOfDate, env);
            }
        } catch (Exception ex) {
            throw new TIERSBatchException(
                    "Error in getting the File Name or File Run Num: "+ex.getMessage(), ex);
        }
        if (soutputFileName == null) {
            throw new TIERSBatchException(
                    "Input File Name cannot be constructed");
        } else {
            try {
                bw = exp.openOutputFile(soutputFileName,
                        (isRestartProgram() || isParallelRunProgram())); //if
                                                                         // it
                                                                         // is
                                                                         // restart
                                                                         // or
                                                                         // parallel
                                                                         // the
                                                                         // file
                                                                         // will
                                                                         // be
                                                                         // opened
                                                                         // in
                                                                         // append
                                                                         // mode
            } catch (Exception ex) {
                throw new TIERSBatchException(ex.getMessage(), ex);
            }
            try {
                batFile.setTIERSBatchControllerHandle(this);
                batFile.setRunNum(irunNum);
                batFile.setJobId(jobId);
                batFile.setAsOfDt(sAsOfDate);
                batFile.setPhysicalFileName(soutputFileName);
                batFile.setLogicalFileName(aOutLogicalFileName);
                batFile.setBufferedWriter(bw);
            } catch (Exception ex) {
                throw new TIERSBatchException(
                        "Not able to return Batch File Adapter: "+ex.getMessage(), ex);
            }
            batchOutputFileCollection
                    .put(batFile.getLogicalFileName(), batFile);
            return batFile;
        }
    }
  //ILIES-197052 
    /**
     * Gets Output File in writer format given a logical file name 
     * @param aOutLogicalFileName , parentJobId
     * @return BatchFile 
     * @throws TIERSBatchException
     */
    public BatchFile getOutputFileNameInterfaceJobSplit(String aOutLogicalFileName,String parentJobId)
    throws TIERSBatchException {
		int irunNum = 0;
		String sAsOfDate = null;
		BufferedWriter bw = null;
		BatchFile batFile = new BatchFile();
		String soutputFileName = null;
		String sFileName = null;
		gfilePersistence = true;
		try {
		    insertFileControlRecord(jobId, aOutLogicalFileName);
		} catch (Exception e) {
		    throw new TIERSBatchException(
		            "Error in inserting the o/p file information into file control table."
		                    + e.getMessage(), e);
		}
		try {
		    if (isParallelRunProgram() && !getParallelStream()) {
		        irunNum = getParallelRunNum();
		    } else {
		        irunNum = getAdjustedMaximumRunNo();
		    }
		    sAsOfDate = getAsOfDate();
		    sFileName = bfcDAO.getPhysicalFileName(
		            getTIERSBatchControllerConnection(), jobId,
		            aOutLogicalFileName);
		    if (sFileName == null) {
		        soutputFileName = fa.getOutputFileNames(parentJobId,
		                aOutLogicalFileName, overWriteFlag, irunNum, sAsOfDate,
		                env);
		    } else {
		        soutputFileName = fa.getOutputFileNames(parentJobId, sFileName,
		                overWriteFlag, irunNum, sAsOfDate, env);
		    }
		} catch (Exception ex) {
		    throw new TIERSBatchException(
		            "Error in getting the File Name or File Run Num: "+ex.getMessage(), ex);
		}
		if (soutputFileName == null) {
		    throw new TIERSBatchException(
		            "Input File Name cannot be constructed");
		} else {
		    try {
		        bw = exp.openOutputFile(soutputFileName,
		                (isRestartProgram() || isParallelRunProgram())); //if
		                                                                 // it
		                                                                 // is
		                                                                 // restart
		                                                                 // or
		                                                                 // parallel
		                                                                 // the
		                                                                 // file
		                                                                 // will
		                                                                 // be
		                                                                 // opened
		                                                                 // in
		                                                                 // append
		                                                                 // mode
		    } catch (Exception ex) {
		        throw new TIERSBatchException(ex.getMessage(), ex);
		    }
		    try {
		        batFile.setTIERSBatchControllerHandle(this);
		        batFile.setRunNum(irunNum);
		        batFile.setJobId(jobId);
		        batFile.setAsOfDt(sAsOfDate);
		        batFile.setPhysicalFileName(soutputFileName);
		        batFile.setLogicalFileName(aOutLogicalFileName);
		        batFile.setBufferedWriter(bw);
		    } catch (Exception ex) {
		        throw new TIERSBatchException(
		                "Not able to return Batch File Adapter: "+ex.getMessage(), ex);
		    }
		    batchOutputFileCollection
		            .put(batFile.getLogicalFileName(), batFile);
		    return batFile;
		}
	}
	//ILIES-180619  Batch Run is taking prior month of DOB  
    /**
     * Gets Output File in writer format given a logical file name 
     * @param aOutLogicalFileName 
     * @return BatchFile 
     * @throws TIERSBatchException
     */
    public BatchFile getOutputFileName(String aOutLogicalFileName, String cutOffDate)
            throws TIERSBatchException {
        int irunNum = 0;
        String sAsOfDate = null;
        BufferedWriter bw = null;
        BatchFile batFile = new BatchFile();
        String soutputFileName = null;
        String sFileName = null;
        gfilePersistence = true;
        try {
            insertFileControlRecord(jobId, aOutLogicalFileName);
        } catch (Exception e) {
            throw new TIERSBatchException(
                    "Error in inserting the o/p file information into file control table."
                            + e.getMessage(), e);
        }
        try {
            if (isParallelRunProgram() && !getParallelStream()) {
                irunNum = getParallelRunNum();
            } else {
                irunNum = getAdjustedMaximumRunNo();
            }
            sAsOfDate = cutOffDate;
            sFileName = bfcDAO.getPhysicalFileName(
                    getTIERSBatchControllerConnection(), jobId,
                    aOutLogicalFileName);
            if (sFileName == null) {
                soutputFileName = fa.getOutputFileNames(jobId,
                        aOutLogicalFileName, overWriteFlag, irunNum, sAsOfDate,
                        env);
            } else {
                soutputFileName = fa.getOutputFileNames(jobId, sFileName,
                        overWriteFlag, irunNum, sAsOfDate, env);
            }
        } catch (Exception ex) {
            throw new TIERSBatchException(
                    "Error in getting the File Name or File Run Num: "+ex.getMessage(), ex);
        }
        if (soutputFileName == null) {
            throw new TIERSBatchException(
                    "Input File Name cannot be constructed");
        } else {
            try {
                bw = exp.openOutputFile(soutputFileName,
                        (isRestartProgram() || isParallelRunProgram())); //if
                                                                         // it
                                                                         // is
                                                                         // restart
                                                                         // or
                                                                         // parallel
                                                                         // the
                                                                         // file
                                                                         // will
                                                                         // be
                                                                         // opened
                                                                         // in
                                                                         // append
                                                                         // mode
            } catch (Exception ex) {
                throw new TIERSBatchException(ex.getMessage(), ex);
            }
            try {
                batFile.setTIERSBatchControllerHandle(this);
                batFile.setRunNum(irunNum);
                batFile.setJobId(jobId);
                batFile.setAsOfDt(sAsOfDate);
                batFile.setPhysicalFileName(soutputFileName);
                batFile.setLogicalFileName(aOutLogicalFileName);
                batFile.setBufferedWriter(bw);
            } catch (Exception ex) {
                throw new TIERSBatchException(
                        "Not able to return Batch File Adapter: "+ex.getMessage(), ex);
            }
            batchOutputFileCollection
                    .put(batFile.getLogicalFileName(), batFile);
            return batFile;
        }
    }

    /**
     * @deprecated since <unknown>
     * @return BufferedWriter
     * @throws TIERSBatchException
     */
    public BufferedWriter getSummaryReportFileHandle()
            throws TIERSBatchException {
        int irunNum = 0;
        String sAsOfDate = null;
        String soutputFileName = null;
        String sOutLogicalFileName = BatchConstants.SUMMARY_REPORT;

        try {
            irunNum = getAdjustedMaximumRunNo();
            sAsOfDate = getAsOfDate();
            soutputFileName = fa.getOutputFileNames(jobId, sOutLogicalFileName,
                    overWriteFlag, irunNum, sAsOfDate, env);
        } catch (Exception ex) {
            throw new TIERSBatchException(
                    "Error in getting the File Name or File Run Num: "+ex.getMessage(), ex);
        }

        if (soutputFileName == null) {
            throw new TIERSBatchException(
                    "Summary Report cannot be constructed");
        } else {
            try {
                return exp.openOutputFile(soutputFileName, true); //open in the
                                                                  // append mode
            } catch (Exception ex) {
                throw new TIERSBatchException(ex.getMessage(), ex);
            }
        }

    }

    /**
     * Gets Input File for a file name and AsOfDate
     * @param aInpLogicalFileName
     * @param aAsOfDt Has the as of date of the job
     * @return BatchFile returns batchfile Name
     *  @throws TIERSBatchException
     */
    public BatchFile getInputFileName(String aInpLogicalFileName, String aAsOfDt)
            throws TIERSBatchException {
        long irunNum = 0;
        String sJobId = null;
        long lrecordCount = 0;
        FwBatchFileControlCargo fwbatFileCargo = null;
        BufferedReader br = null;
        BatchFile batFile = new BatchFile();

        try {
            fwbatFileCargo = bfcDAO.getMaxRunNumOfAsOfDate(
                    getTIERSBatchControllerConnection(), jobId,
                    aInpLogicalFileName, aAsOfDt, true);
            if (fwbatFileCargo != null) {
                irunNum =  fwbatFileCargo.getRunNum();
                sJobId = fwbatFileCargo.getJobId();
                lrecordCount = fwbatFileCargo.getRecordCount();
            } else {
                throw new FileNotFoundException(
                        "No entry found in FW_BATCH_FILE_CONTROL for file: "
                                + aInpLogicalFileName + " for date: " + aAsOfDt);
            }
        } catch (FileNotFoundException fnfEx) {
            throw fnfEx;
        } catch (Exception ex) {
            throw new TIERSBatchException(
                    "Error in executing getMaxRunNumOfAsOfDate while getting the Input File Name : "
                            + ex.getMessage(), ex);
        }

        String sinputFileName = fa.getInputFileName(sJobId,
                aInpLogicalFileName, aAsOfDt, env, irunNum);

        if (sinputFileName == null) {
            throw new FileNotFoundException(
                    "Input File Name cannot be constructed");
        } else {
            try {
                br = exp.openInputFile(sinputFileName);
            } catch (Exception ex) {
                throw new FileNotFoundException(ex.getMessage(), ex);
            }
            try {
                batFile.setTIERSBatchControllerHandle(this);
                batFile.setRunNum(Integer.parseInt(String.valueOf(irunNum)));
                batFile.setJobId(sJobId);
                batFile.setAsOfDt(aAsOfDt);
                batFile.setRecordCount(lrecordCount);
                batFile.setPhysicalFileName(sinputFileName);
                batFile.setLogicalFileName(aInpLogicalFileName);
                batFile.setBufferedReader(br);
                if (BatchConstants.FILE_BEING_PROCESSED_STATUS_CD == fwbatFileCargo
                        .getStatusCd()) {
                    System.err.println("WARNING: File " + aInpLogicalFileName
                            + " for asOfDate " + aAsOfDt
                            + " is still being written to.");
                }
            } catch (Exception ex) {
                throw new TIERSBatchException(
                        "Not able to return Batch File Adapter: "+ex.getMessage(), ex);
            }
            batchInputFileCollection.put(batFile.getLogicalFileName(), batFile);
            return batFile;
        }
    }

    /**
     * Gets max Input File given the file name and a range of dates
     * @param aInpLogicalFileName inputlogical file name 
     * @param abeginAsOfDt Has the begin asOfDate
     * @param aendAsOfDt Has the end asOfDate
     * @return BatchFile returns batch fileName
     * @throws TIERSBatchException  
     */
    public BatchFile getInputFileName(String aInpLogicalFileName,
            String abeginAsOfDt, String aendAsOfDt) throws TIERSBatchException {
        int irunNum = 0;
        String sJobId = null;
        String asOfDateLocal = null;
        long lrecordCount = 0;
        FwBatchFileControlCargo fwbatFileCargo = null;
        BufferedReader br = null;
        BatchFile batFile = new BatchFile();

        try {
            fwbatFileCargo = bfcDAO.getMaxRunNumOfAsOfDateRange(
                    getTIERSBatchControllerConnection(), jobId,
                    aInpLogicalFileName, abeginAsOfDt, aendAsOfDt);
            if (fwbatFileCargo != null) {
				// PMD_Override - R10 - The casting of this numeric/byte type
				// does not need to be addressed because - max daily runs for a
				// batch will not surpass the int limits.
            	PMDRules.markApprovedStatement("R10");
                irunNum = (int) fwbatFileCargo.getRunNum();
                sJobId = fwbatFileCargo.getJobId();
                lrecordCount = fwbatFileCargo.getRecordCount();
                asOfDateLocal = fwbatFileCargo.getAsOfDt().toString();
                asOfDateLocal = formatDate(asOfDateLocal.substring(0, 10),
                        "yyyy-mm-dd", "mm-dd-yyyy");
            } else {
                throw new FileNotFoundException(
                        "No entry found in FW_BATCH_FILE_CONTROL for file: "
                                + aInpLogicalFileName + " for date between: "
                                + aendAsOfDt + "---" + abeginAsOfDt);
            }
        } catch (FileNotFoundException fnfEx) {
            throw fnfEx;
        } catch (Exception ex) {
            throw new TIERSBatchException(
                    "Error in executing getMaxRunNumOfAsOfDate while getting the Input File Name : "
                            + ex.getMessage(), ex);
        }
        String sinputFileName = fa.getInputFileName(sJobId,
                aInpLogicalFileName, asOfDateLocal, env, irunNum);
        if (sinputFileName == null) {
            throw new FileNotFoundException(
                    "Input File Name cannot be constructed");
        } else {
            try {
                br = exp.openInputFile(sinputFileName);
            } catch (Exception ex) {
                throw new FileNotFoundException(ex.getMessage(), ex);
            }
            try {
                batFile.setTIERSBatchControllerHandle(this);
                batFile.setRunNum(irunNum);
                batFile.setJobId(sJobId);
                batFile.setAsOfDt(asOfDateLocal);
                batFile.setRecordCount(lrecordCount);
                batFile.setPhysicalFileName(sinputFileName);
                batFile.setLogicalFileName(aInpLogicalFileName);
                batFile.setBufferedReader(br);
                if (BatchConstants.FILE_BEING_PROCESSED_STATUS_CD == fwbatFileCargo
                        .getStatusCd()) {
                    System.err.println("WARNING: File " + aInpLogicalFileName
                            + " for asOfDate " + asOfDateLocal
                            + " is still being written to.");
                }
            } catch (Exception ex) {
                throw new TIERSBatchException(
                        "Not able to return Batch File Adapter: "+ex.getMessage(), ex);
            }
            batchInputFileCollection.put(batFile.getLogicalFileName(), batFile);
            return batFile;
        }
    }

    /**
     * This method returns an array of output file names. 
     * @deprecated
     * @param aOutLogicalFileNames 
     * @return String[]
     * @throws TIERSBatchException
     */
    public String[] getOutputFileNames(String[] aOutLogicalFileNames)
            throws TIERSBatchException {
        StringBuffer[] outFileNamesBuffer = null;
        try {
            outFileNamesBuffer = fa.getOutputFileNames(jobId,
                    aOutLogicalFileNames, overWriteFlag, env, this);
        } catch (Exception ex) {
            throw new TIERSBatchException(
                    "Error in getting the Output file name from File Assembler: "+ex.getMessage(), ex);
        }
        if (outFileNamesBuffer == null) {
            throw new TIERSBatchException("Output File Names Araay is NULL");
        } else {
            String[] outFileNames = new String[outFileNamesBuffer.length];
            int length = outFileNamesBuffer.length;
            for (int i = 0; i < length; i++) {
                outFileNames[i] = outFileNamesBuffer[i].toString();
            }
            return outFileNames;
        }
    }

    /**
     * This method sets the jobId
     * @param aJobId The identifier for the job
     */
    public void setJobId(String aJobId) {
        this.jobId = aJobId;
        StringTokenizer stk = new StringTokenizer(jobId, "-");
        StringBuffer sbf = new StringBuffer();
        while (stk.hasMoreTokens()) {
            sbf.append(stk.nextToken());
        }
        createUpdateUserId = sbf.toString();
        batchConnManager.setJobID(jobId);
        createContext(createUpdateUserId);
        thresholdValue = getThresholdValue(jobId);
        System.setProperty(FwConstants.BATCH_JOB_ID, jobId);
    }

    /**
     * Sets Parallel Run Id 
     * @param aparallelRunId Has the run Id of the parallel run
     */
    public void setParallelRunId(String aparallelRunId) {
        this.parallelRunId = aparallelRunId;
        parallelRunProgram = BatchConstants.YES;
    }

    /**
     * Gets Parallel Run Id
     * @return String returns parallel runId
     */
    public String getParallelRunId() {
        if (this.parallelRunId == null) {
            return this.jobId;
        } else {
            return this.parallelRunId;
        }
    }

    /**
     * Gets Parallel Run Num 
     * @return int returns parallel runNum
     * @throws TIERSBatchException 
     */
    public int getParallelRunNum() throws TIERSBatchException {
        return brcDAO.getParallelRunNo(getTIERSBatchControllerConnection(),
                jobId, getParallelRunId(), getAsOfDate());
    }

    /**
     * Gets Curent Run Num 
     * @return int
     * @throws TIERSBatchException
     */
    public int getCurrentRunNum() throws TIERSBatchException {
        if (!currentRunNoSet) {
            currentRunNo = brcDAO.getMaximumRunNoInt(getTIERSBatchControllerConnection(), jobId, getAsOfDate());
            currentRunNo++;
            currentRunNoSet = true;
        }
        return currentRunNo;
    }

    /**
     * Gets Jobid 
     * @return String returns jobId
     */
    public String getJobId() {
        return this.jobId;
    }

    /**
     * Sets Program Name 
     * @param aProgramName 
     */
    public void setProgramName(String aProgramName) {
        this.programName = aProgramName;
    }

    /**
     * Sets overwrite flag 
     * @param aOverWriteFlag 
     */
    public void setOverWriteFlag(boolean aOverWriteFlag) {
        this.overWriteFlag = aOverWriteFlag;
    }

    /**
     * Gets Parameters 
     * @return BatchParameter
     * @throws TIERSBatchException
     */
    public BatchParameter getParameters() throws TIERSBatchException {
        BatchParameter bParms = null;
        try {
            bParms = bpcDAO.findParameters(getTIERSBatchControllerConnection(),
                    jobId, "OverLoadedDummyOperation");
            if (bParms != null) {
                asOfDate = bParms.getAsOfDate();
            }
        } catch (Exception ex) {
            throw new TIERSBatchException("Error in finding the parameter: "+ex.getMessage(), ex);
        }

        if (bParms == null) {
            throw new TIERSBatchException("Parameter vector is NULL");
        } else {
            return bParms;
        }
    }

    /**  
     * @param aJobId The identifier for the job
     * @param aProgramName
     * @param aoverWriteFlag 
     * @return Vector
     * @throws TIERSBatchException
     */
    public Vector getParameters(String aJobId, String aProgramName,
            boolean aoverWriteFlag) throws TIERSBatchException {

        overWriteFlag = aoverWriteFlag;
        jobId = aJobId;
        StringTokenizer stk = new StringTokenizer(jobId, "-");
        StringBuffer sbf = new StringBuffer();
        while (stk.hasMoreTokens()) {
            sbf.append(stk.nextToken());
        }
        createUpdateUserId = sbf.toString();
        programName = aProgramName;

        //Get the Job Name from FW_BATCH_PARAMETER Table using job id

        try {
            parms = bpcDAO.findParameters(getTIERSBatchControllerConnection(),
                    jobId);
        } catch (Exception ex) {
            throw new TIERSBatchException("Error in finding the parameter: "+ex.getMessage(), ex);
        }

        if (parms == null) {
            throw new TIERSBatchException("Parameter vector is NULL");
        } else {
            return parms;
        }
    }