import java.io.*;
import java.util.*;
import java.util.regex.*;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

public class JspParserEnhanced {
    private static final Pattern ELEMENT_PATTERN = Pattern.compile(
            "<(input|select|textarea|button|label).*?(name|id|for)?=\\\"(.*?)\\\".*?(type=\\\"(.*?)\\\")?.*?(placeholder=\\\"(.*?)\\\")?.*?(required)?",
            Pattern.DOTALL | Pattern.CASE_INSENSITIVE);

    private static final Pattern SELECT_PATTERN = Pattern.compile(
            "<select.*?name=\\\"(.*?)\\\".*?>(.*?)</select>", Pattern.DOTALL | Pattern.CASE_INSENSITIVE);

    private static final Pattern OPTION_PATTERN = Pattern.compile(
            "<option.*?value=\\\"(.*?)\\\".*?>(.*?)</option>", Pattern.DOTALL | Pattern.CASE_INSENSITIVE);

    public static void main(String[] args) throws IOException {
        File sourceFolder = new File("C:/path/to/jsp/folder");  // ✅ Update the JSP folder path
        File outputFile = new File("C:/path/to/output/jsp_metadata.json");  // ✅ Update output path

        List<JspData> jspDataList = new ArrayList<>();
        processJspFiles(sourceFolder, jspDataList);
        writeDataToJson(jspDataList, outputFile);

        System.out.println("✅ JSP metadata extraction complete. JSON saved at: " + outputFile.getAbsolutePath());
    }

    private static void processJspFiles(File folder, List<JspData> jspDataList) throws IOException {
        for (File file : Objects.requireNonNull(folder.listFiles())) {
            if (file.isDirectory()) {
                processJspFiles(file, jspDataList); // ✅ Recursive call for subdirectories
            } else if (file.getName().endsWith(".jsp")) {
                jspDataList.add(parseJsp(file));
            }
        }
    }

    private static JspData parseJsp(File jspFile) throws IOException {
        String content = new String(java.nio.file.Files.readAllBytes(jspFile.toPath()));
        List<ElementData> elements = new ArrayList<>();

        Matcher matcher = ELEMENT_PATTERN.matcher(content);
        while (matcher.find()) {
            elements.add(new ElementData(
                matcher.group(1),  // Type (input, select, textarea, etc.)
                matcher.group(3),  // Name or ID
                matcher.group(5),  // Input Type (text, password, checkbox, etc.)
                matcher.group(7),  // Placeholder
                matcher.group(8) != null  // Required Field
            ));
        }

        // ✅ Extract Select Dropdown Options
        Matcher selectMatcher = SELECT_PATTERN.matcher(content);
        while (selectMatcher.find()) {
            String selectName = selectMatcher.group(1);
            String optionsHtml = selectMatcher.group(2);
            List<String> options = new ArrayList<>();

            Matcher optionMatcher = OPTION_PATTERN.matcher(optionsHtml);
            while (optionMatcher.find()) {
                options.add(optionMatcher.group(2)); // Extract Option Text
            }

            elements.add(new ElementData("select", selectName, null, null, false, options));
        }

        return new JspData(jspFile.getName(), jspFile.getAbsolutePath(), elements);
    }

    private static void writeDataToJson(List<JspData> jspDataList, File outputFile) throws IOException {
        Gson gson = new GsonBuilder().setPrettyPrinting().create();
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))) {
            writer.write(gson.toJson(jspDataList));
        }
    }

    static class JspData {
        String filename;
        String path;
        List<ElementData> elements;

        JspData(String filename, String path, List<ElementData> elements) {
            this.filename = filename;
            this.path = path;
            this.elements = elements;
        }
    }

    static class ElementData {
        String type;
        String name;
        String inputType;
        String placeholder;
        boolean required;
        List<String> options = new ArrayList<>();

        ElementData(String type, String name, String inputType, String placeholder, boolean required) {
            this.type = type;
            this.name = name;
            this.inputType = inputType;
            this.placeholder = placeholder;
            this.required = required;
        }

        ElementData(String type, String name, String inputType, String placeholder, boolean required, List<String> options) {
            this.type = type;
            this.name = name;
            this.inputType = inputType;
            this.placeholder = placeholder;
            this.required = required;
            this.options = options;
        }
    }
}
