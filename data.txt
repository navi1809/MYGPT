package IVA_Batch;
import egl.core.*;
import CommonMigratedParts.*;
import DataTables.*;
//*** PROGRAM=AIF52A ****
// COMPONENT NAME: AIF52A DCFS Tanf Kinship file WI328
// 
// 
// DESCRIPTION:
// ============
// THIS IS A monthly batch program that creates a flat file
// for DCFS to use. SR-AIF52A-OUT-REC
// ***********************
Program AIF52A type basicProgram //VAGen Info - main batch program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes
  }

  // Data Declarations
  AIF52W AIF52W; // record
  AIF52W1 AIF52W1; // record
  BDATEREC BDATEREC; // record
  CEP01W CEP01W; // record
  FORMATW FORMATW; // record
  GDW GDW; // record
  H2-3-EVM-EVR-PER H2-3-EVM-EVR-PER; // record
  H2-ELIG-VERSION H2-ELIG-VERSION; // record
  H2-FAM-CASE H2-FAM-CASE; // record
  REP-COMMON REP-COMMON; // record
  REP-EOFNOF REP-EOFNOF; // record
  SR-AIF52A-OUT-REC SR-AIF52A-OUT-REC; // record
  VDBCOMMON VDBCOMMON; // record
  VDBCONTROL VDBCONTROL; // record
  VMESSAGE VMESSAGE; // record
  VSTRREC4 VSTRREC4; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use VDB00T1 {deleteAfterUse = yes}; // table

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    AIF52P9-MAIN: AIF52P9-MAIN();
  end // end main
end // end AIF52A


// Build OUTFILE
Function AIF52P9-BUILD-FILE()
  /* **********************************************************/
  /* setinq for H2-ELIG-VERSION program-type 'CW'*/
  /* **********************************************************/

  set H2-ELIG-VERSION empty;

  H2-ELIG-VERSION.BNFT-YR = AIF52W.WS-BENEFIT-CCYY-NUM;
  H2-ELIG-VERSION.BNFT-MTH = AIF52W.WS-BENEFIT-MM-NUM;
  H2-ELIG-VERSION.PRGM-CASE-TYPE = "CW";

  AIF52P9-EVR-CW-INQ();

  if (sysVar.sqlData.sqlcode == 0)

  /* **********************************************************/
  /* SCAN FIRST CW H2-ELIG-VERSION RECORD*/
  /* **********************************************************/

    AIF52P9-EVR-CW-SCN();

	AIF52W.WS-LOCAL-SQLCODE = sysVar.sqlData.sqlcode;

    while (VDBCONTROL.URC == 0)

      AIF52W.WS-WRITE-REC = "N";

      set SR-AIF52A-OUT-REC empty;
      set AIF52W1 empty;

      AIF52W1.WS-DCFS-ICI = H2-ELIG-VERSION.ICI;
      AIF52W1.WS-BNFT-YR = AIF52W.WS-BENEFIT-CCYY-NUM;
      AIF52W1.WS-BNFT-MTH = AIF52W.WS-BENEFIT-MM-NUM;

  /* **********************************************************/
  /* GET H2-FAM-CASE.IVE-CASE-ID*/
  /* H2-FAM-CASE.HOH-UPI*/
  /* **********************************************************/

      set H2-FAM-CASE empty;

      H2-FAM-CASE.ICI = AIF52W1.WS-DCFS-ICI;

      AIF52P9-FAM-CASE();

      if (sysVar.sqlData.sqlcode == 0)

        AIF52W.WS-UPI = H2-FAM-CASE.HOH-UPI;
        AIF52W1.WS-IVE-CASE-ID = H2-FAM-CASE.IVE-CASE-ID;

  /* **********************************************************/
  /* GET H2-3-EVM-EVR-PER.ICI (TANF-ICI)*/
  /* H2-3-EVM-EVR-PER.SSN*/
  /* H2-3-EVM-EVR-PER.LST-NM*/
  /* H2-3-EVM-EVR-PER.FRST-NM*/
  /* H2-3-EVM-EVR-PER.MID-NM*/
  /* H2-3-EVM-EVR-PER.MODFR*/
  /* H2-3-EVM-EVR-PER.MEDIC-BLNG-SQ-NMB*/
  /* H2-3-EVM-EVR-PER.MTD-ENTLM-AMT*/
  /* H2-3-EVM-EVR-PER.AID-CD*/
  /* H2-3-EVM-EVR-PER.POSTD-DT*/
  /* H2-3-EVM-EVR-PER.BNFT-TYPE*/
  /* H2-3-EVM-EVR-PER.*/
  /* **********************************************************/

        set H2-3-EVM-EVR-PER empty;

        H2-3-EVM-EVR-PER.BNFT-YR = AIF52W.WS-BENEFIT-CCYY-NUM;
        H2-3-EVM-EVR-PER.BNFT-MTH = AIF52W.WS-BENEFIT-MM-NUM;
        H2-3-EVM-EVR-PER.UPI = H2-FAM-CASE.HOH-UPI;

        AIF52P9-EVREVM-PER();

        if (sysVar.sqlData.sqlcode == 0)

          AIF52W1.WS-TANF-ICI = H2-3-EVM-EVR-PER.ICI;
          AIF52W1.WS-CHILD-SSN = H2-3-EVM-EVR-PER.SSN;
          AIF52W1.WS-LAST-NAME = H2-3-EVM-EVR-PER.LST-NM;
          AIF52W1.WS-FIRST-NAME = H2-3-EVM-EVR-PER.FRST-NM;
          AIF52W1.WS-MIDDLE-NAME = H2-3-EVM-EVR-PER.MID-NM;
          AIF52W1.WS-MODFR = H2-3-EVM-EVR-PER.MODFR;
          AIF52W1.WS-MEDIC-BLNG-SQ-NMB = H2-3-EVM-EVR-PER.MEDIC-BLNG-SQ-NMB;

          AIF52W1.WS-MTD-ENTLM-AMT = H2-3-EVM-EVR-PER.MTD-ENTLM-AMT;

          AIF52W1.WS-AID-CD = H2-3-EVM-EVR-PER.AID-CD;
          AIF52W1.WS-BNFT-TYPE = H2-3-EVM-EVR-PER.BNFT-TYPE;

          if (H2-3-EVM-EVR-PER.POSTD-DT > AIF52W.WS-DATE)
            AIF52W1.WS-DATE-TANF-PAID = H2-3-EVM-EVR-PER.POSTD-DT;
          else
            AIF52W1.WS-DATE-TANF-PAID = AIF52W.WS-DATE;
          end

          AIF52W.WS-WRITE-REC = "Y";

        end

        if (AIF52W.WS-WRITE-REC == "Y")

  /* **********************************************************/
  /* * WRITE A RECORD TO THE FLAT FILE ***/
  /* **********************************************************/

          AIF52P9-WRITE-FILE();

        end
      end

      AIF52P9-EVR-CW-SCN();

    end /* end of while*/
  end

  /* END OF MAIN PROCESS*/
end // end AIF52P9-BUILD-FILE


// SETINQ CW H2-ELIG-VERSION
Function AIF52P9-EVR-CW-INQ()
  /*  */
  WDB00PI();
  VDBCONTROL.UPROC-NM = "AIF52P9-EVR-CW-INQ";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  VDBCONTROL.UPROC-OBJ = "H2-ELIG-VERSION";

  VDBCONTROL.UACCTYP = "R";
  try
    open AIF52P9-EVR-CW-INQ_RSI01
      with #sql{
        select ICI
        from TWNELIG_VERSION T1
        WHERE PRGM_CASE_TYPE    = :PRGM-CASE-TYPE
          AND BNFT_YR           = :BNFT-YR
          AND BNFT_MTH          = :BNFT-MTH
          AND CASE_RSLT_CD      = 'E'
          AND LST_POSTD_VER_IND = 'Y'
        WITH UR
         --** INSERT ORDER BY CLAUSE HERE **
      }      
      into ICI
      for H2-ELIG-VERSION ;
  end

  if (sysVar.sqlData.sqlcode != 0)
    REPP9-SQL-CHKERR();
  end

  /*  */
end // end AIF52P9-EVR-CW-INQ


// SCAN CW H2-ELIG-VERSION
Function AIF52P9-EVR-CW-SCN()
  /*  */

  WDB00PI();
  VDBCONTROL.UPROC-NM = "AIF52P9-EVR-CW-SCN";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  VDBCONTROL.UPROC-OBJ = "H2-ELIG-VERSION";

  VDBCONTROL.UACCTYP = "R";
  try
    get next H2-ELIG-VERSION ;
  end

  if (sysVar.sqlData.sqlcode != 0)
    REPP9-SQL-CHKERR();
  end

  /*  */
end // end AIF52P9-EVR-CW-SCN


// Inquire H2-3-EVM-EVR-PER
Function AIF52P9-EVREVM-PER()
  /*  */

  WDB00PI();
  VDBCONTROL.UPROC-NM = "AIF52P9-EVREVM-PER";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  VDBCONTROL.UPROC-OBJ = "H2-3-EVM-EVR-PER";

  VDBCONTROL.UACCTYP = "R";
  try
    get H2-3-EVM-EVR-PER
      with #sql{
        select t2.ICI,
          t2.BNFT_MTH,
          t2.BNFT_YR,
          t3.LST_NM,
          t3.FRST_NM,
          t3.MID_NM,
          t3.MODFR,
          t2.MTD_ENTLM_AMT,
          t1.AID_CD,
          t2.POSTD_DT,
          t2.BNFT_TYPE,
          t3.SSN,
          t3.MEDIC_BLNG_SQ_NMB
        from twnelg_ver_mbr T1,
             twnelig_version T2,
             twnperson T3
        WHERE   T1.BNFT_YR            = :BNFT-YR
            AND T1.BNFT_MTH           = :BNFT-MTH
            AND T1.PRGM_CASE_TYPE    IN ('TN','TL','TP','SG','TC')
            AND T1.ELIG_CD            =  '1'
            AND T1.UPI                = :UPI
            AND T2.ICI                = T1.ICI
            AND T2.BNFT_YR            = T1.BNFT_YR
            AND T2.BNFT_MTH           = T1.BNFT_MTH
            AND T2.VER_NMB            = T1.VER_NMB
         --** Next line added in for WI2057         **
         --** to ensure that we are pointing to the **
         --** proper record in TWNELIG_VERSION      **
            AND T2.PRGM_CASE_TYPE     = T1.PRGM_CASE_TYPE
            AND T2.LST_POSTD_VER_IND  = 'Y'
            AND T3.UPI                = T1.UPI
        FOR FETCH ONLY WITH UR
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into ICI,
           BNFT-MTH,
           BNFT-YR,
           LST-NM,
           FRST-NM,
           MID-NM,
           MODFR,
           MTD-ENTLM-AMT,
           AID-CD,
           POSTD-DT,
           BNFT-TYPE,
           SSN,
           MEDIC-BLNG-SQ-NMB ;
  end

  if (sysVar.sqlData.sqlcode == 0 || 
  sysVar.sqlData.sqlcode == 100)
  else
    REPP9-SQL-CHKERR();
  end

  /*  */
end // end AIF52P9-EVREVM-PER


// INQUIRY H2-FAM-CASE
Function AIF52P9-FAM-CASE()
  /*  */

  WDB00PI();
  VDBCONTROL.UPROC-NM = "AIF52P9-FAM-CASE";
  VDBCONTROL.UPROC-OPT = "INQUIRY";
  VDBCONTROL.UPROC-OBJ = "H2-FAM-CASE";

  VDBCONTROL.UACCTYP = "R";
  try
    get H2-FAM-CASE
      with #sql{
        select HOH_UPI,
          IVE_CASE_ID
        from TWNFAM_CASE T1
        WHERE ICI               = :ICI
          AND IVE_CASE_ID      <> ' '
        WITH UR
         --** INSERT ORDER BY CLAUSE HERE **
      }
      into HOH-UPI,
           IVE-CASE-ID ;
  end

  if (sysVar.sqlData.sqlcode != 0)
    REPP9-SQL-CHKERR();
  end

  /*  */
end // end AIF52P9-FAM-CASE


// GETTING THE PROCESS DATE
Function AIF52P9-FETCHBDTS()
  /* -------------------------------------------------------------*/
  /* SCAN & GETTING PROCESS DATE*/
  /* --------------------------------------------------------------*/
  VGVar.handleHardIOErrors = 1;
  try
    get next BDATEREC ;
  end

  if (BDATEREC is ioError || 
  BDATEREC is endOfFile)

    WDB00PI();
    VDBCONTROL.UPROC-NM = "AIF52P9-FETCHBDTS";
    VDBCONTROL.UPROC-OBJ = "BDATEREC";
    VDBCONTROL.UPROC-OPT = "SCAN";
    VMESSAGE.UMSGINS[2] = "AIF52A";
    VDBCONTROL.UMSQLCODE = 0;
    AIF52W.WS-ERR-CD = sysVar.errorCode;
    VMESSAGE.UMSGINS[1] = AIF52W.WS-ERR-LAST-FOUR;
    VDBCONTROL.UEZESQRRM = "INPUT PARAMETER FILE - I/O ERROR";
    WCM00P2-TO-CEP01A();

  end
  /* --------------------------------------------------------------*/
  /* move PROCESS-DATE to BENEFIT-DATE*/
  /* --------------------------------------------------------------*/

  AIF52W.WS-BDATE = BDATEREC.BDATE-PROCESS-DATE;
  AIF52W.WS-BENEFIT-CCYY = AIF52W.WS-BDATE-CCYY;
  AIF52W.WS-BENEFIT-MM = AIF52W.WS-BDATE-MM;

  if (AIF52W.WS-BENEFIT-MM-NUM == 01)
    AIF52W.WS-BENEFIT-MM-NUM = 12;
    AIF52W.WS-BENEFIT-CCYY-NUM = AIF52W.WS-BENEFIT-CCYY-NUM - 1;
  else
    AIF52W.WS-BENEFIT-MM-NUM = AIF52W.WS-BENEFIT-MM-NUM - 1;
  end

  AIF52W.WS-DATE-CCYY = AIF52W.WS-BENEFIT-CCYY;
  AIF52W.WS-DATE-MM = AIF52W.WS-BENEFIT-MM;
  AIF52W.WS-DATE-DD = "01";
  AIF52W.WS-DATE-DASH = "-";
  AIF52W.WS-DATE-DASH1 = "-";

  /*  */
end // end AIF52P9-FETCHBDTS


// MAIN PROCESS
Function AIF52P9-MAIN()
  /* **********************************************************/
  /* * INITIALIZE RECORDS ***/
  /* **********************************************************/

  set VMESSAGE empty;
  set CEP01W empty;
  set VDBCONTROL empty;
  set VDBCOMMON empty;
  set AIF52W empty;

  /* **********************************************************/
  /* GET CURRENT PROCESS DATE FROM BDATE*/
  /* SET WS-BENEFIT-MM-NUM*/
  /* WS-BENEFIT-CCYY-NUM*/
  /* TO BDATE PROCESS DATE MINUS ONE MONTH*/
  /*  */
  /* SET WS-DATE TO FIRST DAY OF PREVIOUS MONTH*/
  /*  */
  /* **********************************************************/

  AIF52P9-FETCHBDTS();

  /* **********************************************************/
  /* * Build DCFS OUTFILE (SR-AIF52A-OUT-REC)*/
  /* **********************************************************/

  AIF52P9-BUILD-FILE();

  /* *************************************************/
  /* close the application*/
  /* *************************************************/

  exit program;

  /* END OF MAIN PROCESS*/
end // end AIF52P9-MAIN


// WRITE OUTPUT FILE
Function AIF52P9-WRITE-FILE()
  /* ATNS START */
  SR-AIF52A-OUT-REC.WRITE-RECORD = AIF52W1.WS-WRITE-RECORD;
  try
    add SR-AIF52A-OUT-REC ;
  end

  /* check if any i/o error has occured*/
  if (SR-AIF52A-OUT-REC is ioError)
    WDB00PI();
    VDBCONTROL.UPROC-NM = "AIF52P9-WRITE-FILE";
    VDBCONTROL.UPROC-OPT = "ADD";
    VDBCONTROL.UPROC-OBJ = "SR-AIF52A-OUT-REC";
    /* return error code to indicate abnormal ending*/
    VMESSAGE.WS-ERR-CD = sysVar.errorCode;
    VMESSAGE.UMSGINS[1] = VMESSAGE.WS-ERR-LAST-FOUR;
    VMESSAGE.UMSGINS[2] = sysVar.transferName;
    VDBCONTROL.UMSQLCODE = 0;
    WCM00P2-TO-CEP01A();
  end
end // end AIF52P9-WRITE-FILE


Record AIF52W type basicRecord
  10 WS-SSN char(9) ; 
  10 WS-UPI int ; 
  10 WS-BIN-ICI int ; 
  10 WS-NUM-ICI num(9) ; 
  10 WS-ERR-CD char(8) ; 
    15 WS-ERR-FIRST-FOUR char(4) ; 
    15 WS-ERR-LAST-FOUR char(4) ; 
  10 WS-BDATE char(8) ; 
    15 WS-BDATE-CCYY char(4) ; 
    15 WS-BDATE-MM char(2) ; 
    15 WS-BDATE-DD char(2) ; 
  10 WS-DATE char(10) ; 
    15 WS-DATE-CCYY char(4) ; 
    15 WS-DATE-DASH char(1) ; 
    15 WS-DATE-MM char(2) ; 
    15 WS-DATE-DASH1 char(1) ; 
    15 WS-DATE-DD char(2) ; 
  10 WS-BENEFIT-CCYY char(4) ; 
    15 WS-BENEFIT-CCYY-NUM num(4) ; 
  10 WS-BENEFIT-MM char(2) ; 
    15 WS-BENEFIT-MM-NUM num(2) ; 
  10 WS-WRITE-REC char(1) ; 
  10 WS-LOCAL-SQLCODE  int ; 
end // end AIF52W


Record AIF52W1 type serialRecord  {
  fileName = "OUTFILE"
  }
  10 WS-WRITE-RECORD char(150) ; 
    15 WS-BNFT-MTH num(4) ; 
    15 WS-BNFT-YR num(4) ; 
    15 WS-CHILD-SSN char(9) ; 
    15 WS-LAST-NAME char(19) ; 
    15 WS-FIRST-NAME char(12) ; 
    15 WS-MIDDLE-NAME char(1) ; 
    15 WS-MODFR char(3) ; 
    15 WS-MEDIC-BLNG-SQ-NMB num(11) ; 
    15 WS-DCFS-ICI num(9) ; 
    15 WS-TANF-ICI num(9) ; 
    15 WS-DATE-TANF-PAID char(10) ; 
      25 WS-DATE-TANF-PAID-CCYY char(4) ; 
      25 WS-DASH-1 char(1) ; 
      25 WS-DATE-TANF-PAID-MM char(2) ; 
      25 WS-DASH-2 char(1) ; 
      25 WS-DATE-TANF-PAID-DD char(2) ; 
    15 WS-IVE-CASE-ID char(9) ; 
    15 WS-AID-CD char(3) ; 
    15 WS-BNFT-TYPE char(2) ; 
    15 WS-MTD-ENTLM-AMT num(9,2) ; 
    15 WS-FILLER char(36) ; 
end // end AIF52W1

