package gov.nv.dwss.md.processor;

import java.text.ParseException;
import java.util.Arrays;

import org.apache.commons.lang3.SerializationUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import gov.nv.dwss.domain.record.sor.EligVersionSorRecord;
import gov.nv.dwss.fw.batch.common.AbstractBatchStepComponent;
import gov.nv.dwss.fw.batch.enums.BatchExceptionType;
import gov.nv.dwss.fw.batch.exception.BatchException;
import gov.nv.dwss.fw.batch.exception.BatchSkipRecordException;
import gov.nv.dwss.fw.batch.model.BatchSummaryBO;
import gov.nv.dwss.fw.batch.model.SkippedRecord;
import gov.nv.dwss.fw.batch.model.SkippedRecordValue;
import gov.nv.dwss.fw.batch.util.ExceptionUtil;
import gov.nv.dwss.md.constants.CarryForwardConstants;
import gov.nv.dwss.md.dto.EligVersionDto;
import gov.nv.dwss.md.model.CarryForwardCaseRecord;
import gov.nv.dwss.md.service.CarryForwardDataService;
import gov.nv.dwss.md.service.EPRcarryForwardDataService;
import gov.nv.dwss.md.util.CarryForwardUtils;

@Component
public class EPRcarryForwardCaseProcessor  extends AbstractBatchStepComponent implements ItemProcessor<CarryForwardCaseRecord, EligVersionDto> {

	private static final Logger LOG = LoggerFactory.getLogger(EPRcarryForwardCaseProcessor.class);
	@Autowired
	CarryForwardDataService carryForwardDataService;
	@Autowired
	EPRcarryForwardDataService ePRcarryForwardDataService;

	@Autowired
	private BatchSummaryBO batchSummaryBO;
	
	@Override
	public EligVersionDto process(final CarryForwardCaseRecord carryForwardCaseRecord) throws Exception {
		LOG.info("Processing Case Record for ici : -> " + carryForwardCaseRecord.getIci());
		final EligVersionDto evDto = new EligVersionDto();

		/* check if the case is terminated get next rec T12C59P-CHECK-CASE-STS-P1() */
		try {
			
			this.ePRcarryForwardDataService.checkCasestatus(carryForwardCaseRecord, evDto);
			if (evDto.isExparteCaseTerminated()) {
				// T12C59P-ECD-U-P2()
				evDto.setFailedcaseLogSorRecord(ePRcarryForwardDataService.populateFailedClog(carryForwardCaseRecord,CarryForwardConstants.F_CL_ACTVY_DESC1_T));
				batchSummaryBO.addNonExceptionProcessSkipCount(getStepExecution().getStepName(),batchSummaryBO.getNonExceptionProcessCount(getStepExecution().getStepName())+1);
				return evDto;

			}
			/* check if rrd compeled move to next rec T12C59P-CHECK-REDT-CMPLTD */
			this.ePRcarryForwardDataService.checkRedtComplTd(carryForwardCaseRecord, evDto);
			if (evDto.isRrdCompleted()) {
				evDto.setFailedcaseLogSorRecord(ePRcarryForwardDataService.populateFailedClog(carryForwardCaseRecord,CarryForwardConstants.F_CL_ACTVY_DESC1_REDT));
				batchSummaryBO.addNonExceptionProcessSkipCount(getStepExecution().getStepName(),batchSummaryBO.getNonExceptionProcessCount(getStepExecution().getStepName())+1);
				return evDto;
			}
			
		

			/* Check if un posted present then delete and insert bgtxn */
			unpostedRecordCheck(carryForwardCaseRecord, evDto);

			/*
			 * get the latest POSTED elig version that has a carry forward from source month
			 */
			final EligVersionSorRecord postedEligVersionSrcRecord = this.carryForwardDataService.getLatestEligVrsnCf(carryForwardCaseRecord);
			if (postedEligVersionSrcRecord != null) {
				
				final EligVersionSorRecord newEligVersionSorRecord = SerializationUtils.clone(postedEligVersionSrcRecord);

				/* populate TWNELIG_VERSION for target month */
				evDto.setEligVersionSorRecord(this.ePRcarryForwardDataService.populateEPREligVersionRecord(newEligVersionSorRecord));

				/* populate TWNELG_VER_MBR for target month */
				evDto.setEligVersionMemberSorRecords(this.ePRcarryForwardDataService.getEPReligVrsnMbrCf(carryForwardCaseRecord,
						postedEligVersionSrcRecord, evDto));

				/* populate TWNELG_VERSION_DTL for target month */
				evDto.setEligVersionDetailSorRecord(this.carryForwardDataService.getEligVrsnDtl(carryForwardCaseRecord, postedEligVersionSrcRecord));

				/* populate TWNELG _BDGT_UNIT for target month */
				evDto.setEligBudgetUnitSorRecord(this.ePRcarryForwardDataService.getEPReligBudgtUnit(carryForwardCaseRecord,
						postedEligVersionSrcRecord));

				/* populate TWNELG _BDGT MBR for target month */
				evDto.setEligBudgetMemberSorRecords(this.ePRcarryForwardDataService.getEPReligBudgtUnitMbr(carryForwardCaseRecord,
						postedEligVersionSrcRecord));

				/* populate TWNELG_CASE_TSRSLT for target month */
				evDto.setEligCaseTestResultSorRecord(this.carryForwardDataService.getEligCaseTestRslts(carryForwardCaseRecord,
						postedEligVersionSrcRecord));

				/* populate TWNELG _MBR_TSRSLT for target month */
				evDto.setEligMemberTestResultSorRecord(this.ePRcarryForwardDataService.getEPReligMbrTestRst(carryForwardCaseRecord,
						postedEligVersionSrcRecord));

				/* partial exparte changes */
				aidCodePopulation(carryForwardCaseRecord, evDto, newEligVersionSorRecord);

				if (carryForwardCaseRecord.getProgram().equals(CarryForwardConstants.FMC)) {
					/* populate TWNASST_UNIT for target month */
					evDto.setAssistanceUnitSorRecord(this.carryForwardDataService.getAssistanceUnit(carryForwardCaseRecord,
							postedEligVersionSrcRecord));

					/* populate TWNASST_UNIT_MBR for target month */
					evDto.setAssistanceUnitMemberRecord(this.carryForwardDataService.getAssistanceUnitMbr(carryForwardCaseRecord,
							postedEligVersionSrcRecord));

					/* populate TWNASST_UNIT_BDGT for target month */
					evDto.setAssistanceUnitBudgetSorRecord(this.carryForwardDataService.getAssistanceUnitBudgt(carryForwardCaseRecord,
							postedEligVersionSrcRecord));

				}
				/* populate TWNREDET_RCRT_DTLS */
				// T12C59P-PROC-RRD()
				evDto.setRedeterminationDetailRecord(this.ePRcarryForwardDataService.populateRrdDtls(carryForwardCaseRecord));
				
				/* populate TWNMMIS_TRIGGER */
				evDto.setMmisTriggerSorRecord(this.ePRcarryForwardDataService.populateMMISCase(carryForwardCaseRecord));
				/* populate TWNCASE_LOG */
				evDto.setCaseLogSorRecord(this.ePRcarryForwardDataService.createSuccessClog(carryForwardCaseRecord));
				evDto.setAutoRenewalStatusCode(carryForwardCaseRecord.getAutoRenewalStatusCode());
			} else {/* no posted version present for source month */
				evDto.setSkipRecord(true);
			}
			return evDto;
		} catch (final BatchException ex) {
			final String applicationMessage = "Case cannot be carry forward for ICI->  " + carryForwardCaseRecord.getIci();
			final String errorMessage = applicationMessage + " Exception: " + ex.getMessage();
			LOG.error(applicationMessage + " " + errorMessage);
			final SkippedRecord skippedRecord = new SkippedRecord(CarryForwardConstants.Carry_FW_BATCH);
            skippedRecord.setSkippedRecordValues(Arrays.asList(new SkippedRecordValue("ICI", carryForwardCaseRecord.getIci()),new SkippedRecordValue("PROGRAM", CarryForwardCaseRecord.getPrgmCaseType()),new SkippedRecordValue("BENEFITMONTH", CarryForwardCaseRecord.getSourceMonth()),new SkippedRecordValue("BENEFITYEAR", CarryForwardCaseRecord.getSourceYear())));
			throw ExceptionUtil.batchSkipRecordException(BatchExceptionType.SYSTEM_EXCEPTION, errorMessage, carryForwardCaseRecord.getIci(),
					null, CarryForwardConstants.Carry_FW_BATCH, ex,skippedRecord);

		}

	}

	private void aidCodePopulation(final CarryForwardCaseRecord carryForwardCaseRecord, final EligVersionDto evDto,
			final EligVersionSorRecord newEligVersionSorRecord) throws BatchSkipRecordException, ParseException {
		if (carryForwardCaseRecord.getChildInEligCount() > 0) {
			final int eligChlD = newEligVersionSorRecord.getNumberOfEligibleChildren() - carryForwardCaseRecord.getChildInEligCount();
			newEligVersionSorRecord.setNumberOfEligibleChildren(eligChlD > 0 ? eligChlD : 0);

		}
		if (carryForwardCaseRecord.getMemBrInEligCount() > 0) {
			final int eligMemb = newEligVersionSorRecord.getNumberOfEligiblePersons() - carryForwardCaseRecord.getMemBrInEligCount();
			newEligVersionSorRecord.setNumberOfEligiblePersons(eligMemb > 0 ? eligMemb : 0);
		}
		if (carryForwardCaseRecord.getProgram().equalsIgnoreCase(CarryForwardConstants.FMC)) {
			if (null != carryForwardCaseRecord.getCaseLvlAidCd()) {
				newEligVersionSorRecord.setCaseLevelAidCode(carryForwardCaseRecord.getCaseLvlAidCd());

			}
			if (null != carryForwardCaseRecord.getCaseLvlEligCd()) {
				newEligVersionSorRecord.setCaseLevelEligCode(carryForwardCaseRecord.getCaseLvlEligCd());
			}
		
		if ((carryForwardCaseRecord.getCaseLvlAidCd() != null) && carryForwardCaseRecord.getCaseLvlAidCd().equalsIgnoreCase(CarryForwardConstants.TR)) {
			this.carryForwardDataService.populateProgramCaseHistory(carryForwardCaseRecord, evDto);
		}
	}
	}

	private void unpostedRecordCheck(final CarryForwardCaseRecord carryForwardCaseRecord, final EligVersionDto evDto) throws BatchSkipRecordException {
		final EligVersionSorRecord unpostedEligs = this.carryForwardDataService.getUnPostedEligVrsnCf(carryForwardCaseRecord);
		if (unpostedEligs != null) {
			/* creating bg txn rec */
			evDto.setBackgroundTransactionSorRecord(CarryForwardUtils.populateBgTxnRec(carryForwardCaseRecord));
			evDto.setDeleteRec(true);
		}
	}

}
