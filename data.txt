package IVA_Batch;
import egl.core.*;
import CommonMigratedParts.*;
import DataTables.*;
//*** PROGRAM=AIF54A ****
// COMPONENT NAME: AIF54A
// ======================
// Death Registry Match Report
//
// DESCRIPTION:
// ============
// Looks for matches in NOMADS with Vital Statistics Death
// Registry records. Inserts rows into TWNVTL_STAT_DOD 
// table for Crystal Report. For strong matches (on SSN and DOB), 
// create CLOG entries for all ICIs.
// ====================================
// WI 1860: Death Registry Match Report 
// March 2014, C. Boedenauer 
// AUGUST 2014 EHR, WI 2476: REVISED DEATH REGISTRY INPUT
// 
// ************************************

program AIF54A type BasicProgram {
	includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
	throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
	I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes
	}
	// Data Declarations
	AIF54W AIF54W; // record
	CEP01W CEP01W; // record
	GDW GDW; // record
	H2-CASE-LOG H2-CASE-LOG; // record
	H2-CASE-MEMBER H2-CASE-MEMBER; // record	
	H2-PERSON H2-PERSON; // record
	H2-VTL-STAT-DOD H2-VTL-STAT-DOD; // SQL record
	SR-AIF54-INREC SR-AIF54-INREC; // Serial record (input file)
  	VDBCOMMON VDBCOMMON; // record
  	VDBCONTROL VDBCONTROL; // record
  	VMESSAGE VMESSAGE; // record
	
	// VAGen Info - items needed for migration
  	VAGen_EZESYS char(8);
  	VAGen_EZEREPLY num(1);
  	VAGen_EZE_WAIT_TIME bin(9,2);
 	VAGen_EZE_ITEMLEN int;
	
	// Use Declarations
	use VDB00T1 {deleteAfterUse = yes}; // table

	function main()
    	VAGen_EZESYS = VGLib.getVAGSysType();
    	AIF54P9-MAIN: AIF54P9-MAIN();
	end // end main	

	// Read input file and process records
	function AIF54P9-MAIN()
		AIF54P9-INIT-PROC();
		AIF54Q-READ-IP();	
		if (SR-AIF54-INREC is endOfFile)
    		sysVar.returnCode = 8;
    		VMESSAGE.UMSGCODE-JCL-ERR = 0;
    		AIF54W.WS-ERR-CD = sysVar.errorCode;
    		VMESSAGE.UMSGINS[1] = AIF54W.WS-ERR-LAST-FOUR;
    		WCM00P2-TO-CEP01A();
  		end  	
  		while (SR-AIF54-INREC not endOfFile)
    		AIF54P9-APPLSPEC();
    		AIF54Q-READ-IP();
  		end 		
		AIF54Q-CLOSE-SR();
		exit program;
	end // end AIF54P9-MAIN

	function AIF54P9-INIT-PROC()
		set AIF54W empty; // Initialize working storage
		// Retrieve and format system date
		call "DATEAPP" (GDW, VDBCONTROL, VMESSAGE) {isNoRefresh = yes};
		AIF54W.WS-FIL1 = "-";
		AIF54W.WS-FIL2 = "-";	
		AIF54W.WS-DATE1 = GDW.DTL;
		AIF54W.WS-YY = AIF54W.WS-YY1;
		AIF54W.WS-MM = AIF54W.WS-MM1;
		AIF54W.WS-DD = AIF54W.WS-DD1;
		set H2-CASE-LOG empty;	
		// Set values for invariable CLOG information
		H2-CASE-LOG.ACTVY-DT = WS-CURRENT-DATE;
		H2-CASE-LOG.PRGM-CASE-TYPE = "";
		H2-CASE-LOG.WRKR-ID = "VITSTATS";
		H2-CASE-LOG.LOG-ENTRY-TYPE = "";
		H2-CASE-LOG.LOG-ENTRY-DESC = "VITAL STATISTICS DEATH MATCH";
		WS-CLOGDESC1 = "PER SSN/DOB MATCH WITH VITAL STATISTICS DEATH REGISTRY,      CLIENT (UPI ";
		WS-CLOGDESC2 = ") IS DECEASED AS OF ";
	end // end AIF54P9-INIT-PROC
	
	// Read Vital Statistics Death Registry Input File
	function AIF54Q-READ-IP()
		WDB00PI();
		VDBCONTROL.UPROC-NM = "AIF54PQ-READ-IP";
    	VDBCONTROL.UPROC-OBJ = "SR-AIF54-INREC";
    	VDBCONTROL.UPROC-OPT = "SCAN";
    	VMESSAGE.UMSGINS[2] = "AIF54A";
  		try
    		get next SR-AIF54-INREC;
  		end
  		if (SR-AIF54-INREC is ioError && SR-AIF54-INREC not endOfFile)  
  			VMESSAGE.UMSGCODE-JCL-ERR = 0;   	
    		AIF54W.WS-ERR-CD = sysVar.errorCode;
    		VMESSAGE.UMSGINS[1] = AIF54W.WS-ERR-LAST-FOUR;
    		WCM00P2-TO-CEP01A();
  		end // end if
	end // end AIF54Q-READ-IP

	// Look for match--first on SSN/DOB
	function AIF54P9-APPLSPEC()
		WS-SSNFLG = "N";
		WS-INPUT-DT = SR-AIF54-INREC.DCSD-DOB;
		AIF54P9-VALID-DATE(); // Validate and reformat DOB
		WS-DOB = WS-OUTPUT-DT;
		// Process if DOB valid, otherwise skip record
		if (WS-DOB != "0001-01-01")
			// If non-blank and numeric SSN provided in Vital Stats file:		
			if ((SR-AIF54-INREC.DCSD-SSN != " ") and (SR-AIF54-INREC.DCSD-SSN is numeric))		
				WS-SSN = SR-AIF54-INREC.DCSD-SSN;
				AIF54Q-READ-PER(); // Try match on SSN and DOB
				if (VDBCONTROL.URC == 0)
					WS-SSNFLG = "Y";
					AIF54W.WS-UPI = H2-PERSON.UPI;
					AIF54P9-SSN-MATCH();
				end // end if
			end // end if	
			// If a numeric, non-blank SSN was not provided,
			// or a match was tried but not found on SSN/DOB:
			if (WS-SSNFLG == "N")
				WS-MATCH-CNT = 0;
				WS-LST-NM = SR-AIF54-INREC.DCSD-LAST-NM;
				AIF54Q-GETCOUNT(); // Get match count on LST_NM/DOB
				if (AIF54W.WS-MATCH-CNT > 0) // TWNPERSON record(s) found
					AIF54Q-SETINQ-PER(); // 
					if (VDBCONTROL.URC == 0) 
						AIF54P9-LSTNM-MATCH(); // Process LST_NM/DOB matches
					end // end if
				end	// end if
			end // end if SSN flag = "N"
		end // end if DOB valid	
	end // end AIF54P9-APPLSPEC

	function AIF54Q-GETCOUNT()
		WDB00PI();
  		VDBCONTROL.UPROC-NM = "AIF54Q-GETCOUNT";
  		VDBCONTROL.UPROC-OPT = "SETINQ";
  		VDBCONTROL.UPROC-OBJ = "H2-PERSON";
  		VDBCOMMON.USQLREC = "H2-PERSON";
  		try
  			get H2-PERSON singleRow
  			with #sql{
  				select count(*)
  				from	TWNPERSON
  				where	LST_NM = :AIF54W.WS-LST-NM
  				and		DOB = :AIF54W.WS-DOB
  			}
  			into AIF54W.WS-MATCH-CNT;
		end
		AIF54Q-SQLERR-RD();
	end // end AIF54Q-GETCOUNT

	// For match on SSN/DOB, routine to write to TWN_VTL_STAT_DOD 
	// table and create CLOG entry for case(s).
	function AIF54P9-SSN-MATCH()							
		set H2-VTL-STAT-DOD empty;
		H2-VTL-STAT-DOD.SEQ-CNT = 1;
		H2-VTL-STAT-DOD.MATCH-CNT = 1;
		H2-VTL-STAT-DOD.MATCH-TYP = "SSN";
		H2-VTL-STAT-DOD.UPI = WS-UPI;
		H2-VTL-STAT-DOD.SSN = WS-SSN;
		AIF54W.WS-INPUT-DT = SR-AIF54-INREC.DCSD-DOD;
		AIF54P9-VALID-DATE();
		WS-DOD = WS-OUTPUT-DT; 
		AIF54P9-MOVEDATA();
		AIF54Q-ADD-VSD();		
	
		// If duplicate key, increment seq. # and try again
		while (WS-DUPFLG == "Y")
	  		H2-VTL-STAT-DOD.SEQ-CNT = H2-VTL-STAT-DOD.SEQ-CNT + 1;
	  		AIF54Q-ADD-VSD();
	  	end	
  	
		// Create CLOG entries for each ICI
		AIF54Q-SETINQ-CM();
		AIF54Q-SCAN-CM();
		
		if (VDBCONTROL.URC == 0)
			// Set up CLOG values that will 
			// remain the same for all ICIs
			WS-CLOGUPI = WS-UPI;
			if (WS-DOD == "0001-01-01")
				WS-CLOGDOD = "UNKNOWN DT";
			else
				CL-DODHYPH1 = "/";
				CL-DODHYPH2 = "/";
				CL-DODMM = WS-DOD-MM;
				CL-DODDD = WS-DOD-DD;
				CL-DODYYYY = WS-DOD-YYYY;			
			end
			H2-CASE-LOG.CL-ACTVY-DESC = WS-CLOG-STRING;
		end
		
	  	while (VDBCONTROL.URC == 0)	
			H2-CASE-LOG.ICI = H2-CASE-MEMBER.ICI;
			AIF54Q-ADD-CLOG();
	  		AIF54Q-SCAN-CM();
	  	end // end while
	end // end AIF54P9-SSN-MATCH

	// For match on LST_NM/DOB, routine to scan cursor for 
	// possible multiple matches and write to TWN_VTL_STAT_DOD
	// table, writing match count to each record.
	function AIF54P9-LSTNM-MATCH()
		AIF54Q-SCAN-PER();
		if (VDBCONTROL.URC == 0)
			set H2-VTL-STAT-DOD empty;
			H2-VTL-STAT-DOD.MATCH-CNT = WS-MATCH-CNT;
			H2-VTL-STAT-DOD.MATCH-TYP = "LNM";
			AIF54W.WS-INPUT-DT = SR-AIF54-INREC.DCSD-DOD;
			AIF54P9-VALID-DATE(); // validate Date of Death
			WS-DOD = WS-OUTPUT-DT;			
			AIF54P9-MOVEDATA();
		end
		while (VDBCONTROL.URC == 0)
			H2-VTL-STAT-DOD.SEQ-CNT = 1;
			H2-VTL-STAT-DOD.UPI = H2-PERSON.UPI;
			H2-VTL-STAT-DOD.SSN = H2-PERSON.SSN;
			AIF54Q-ADD-VSD();
			// If duplicate key, increment seq. # and try again
			while (WS-DUPFLG == "Y")
	  			H2-VTL-STAT-DOD.SEQ-CNT = H2-VTL-STAT-DOD.SEQ-CNT + 1;
	  			AIF54Q-ADD-VSD();
	  		end // end while		
			AIF54Q-SCAN-PER();
		end // end while	 	
	end	// end AIF54P9-LSTNM-MATCH

	function AIF54P9-VALID-DATE()
		// Initializations
		WS-OUTPUT-DT = " ";
		WS-VALID-DT-FLG = "N";
		if (WS-INPUT-DT is numeric)
			if ((WS-INPUT-MM == "01" || WS-INPUT-MM == "03" || WS-INPUT-MM == "05" || 
				WS-INPUT-MM == "07" || WS-INPUT-MM == "08" || WS-INPUT-MM == "10" ||
				WS-INPUT-MM == "12") &&
				(WS-INPUT-DD >= "01" && WS-INPUT-DD <= "31"))
				WS-VALID-DT-FLG = "Y";
			else
				if ((WS-INPUT-MM == "04" || WS-INPUT-MM == "06" ||
					WS-INPUT-MM == "09" || WS-INPUT-MM == "11") &&
					(WS-INPUT-DD >= "01" && WS-INPUT-DD <= "30"))
					WS-VALID-DT-FLG = "Y";
				else
					// Leap year determination
					if (WS-INPUT-MM == "02")
						WS-LEAP-FLG = "N";
						WS-TEMP-INT = WS-INPUT-YYYY; // Cast string to integer
						WS-INT-YYYY = WS-TEMP-INT % 4;
        				if ((WS-INT-YYYY == 0))
          					WS-TEMP-INT = WS-INT-YYYY % 100;
          					if (WS-TEMP-INT != 0)
            					WS-LEAP-FLG = "Y";
          					else
            					WS-TEMP-INT = WS-INT-YYYY % 400;
            					if (WS-TEMP-INT == 0)
              						WS-LEAP-FLG = "Y";
            					end
          					end
        				end
        				if ((WS-LEAP-FLG == "Y" && WS-INPUT-DD <= "29") || 
  							(WS-LEAP-FLG == "N" && WS-INPUT-DD <= "28"))
  							WS-VALID-DT-FLG = "Y";	
  						end  							
					end // End leap year determination
				end
			end							
		end // end if date is numeric
		if (WS-VALID-DT-FLG == "Y")
			WS-OUTPUT-MM = WS-INPUT-MM;
			WS-OUTPUT-DD = WS-INPUT-DD;
			WS-OUTPUT-YYYY = WS-INPUT-YYYY;
			WS-OUTPUT-FIL1 = "-";
			WS-OUTPUT-FIL2 = "-";
		else
			WS-OUTPUT-DT = "0001-01-01";
		end // end if date valid		
	end // end AIF54P9-VALID-DATE	

	function AIF54Q-CLOSE-SR()
	  	VGVar.handleHardIOErrors = 1;
	  	try
	    	close SR-AIF54-INREC ;
	  	end
	  	if (SR-AIF54-INREC is ioError)
	    	VDBCONTROL.UPROC-NM = "AIF54Q-CLOSE-SR";
	    	VDBCONTROL.UPROC-OBJ = "SR-AIF54-INREC";
	    	VDBCONTROL.UPROC-OPT = "CLOSE";
	    	AIF54W.WS-ERR-CD = sysVar.errorCode;
	    	VMESSAGE.UMSGINS[1] = AIF54W.WS-ERR-LAST-FOUR;
	    	VMESSAGE.UMSGINS[2] = "AIF54A";
	    	if (SR-AIF54-INREC is fileNotAvailable)
	      		VDBCONTROL.UEZESQRRM = "FILE IS NOT AVAILABLE";
	    	else
	      		if (SR-AIF54-INREC is fileNotFound)
	        		VDBCONTROL.UEZESQRRM = "FILE NOT FOUND";
	      		else
	        		if (SR-AIF54-INREC is invalidFormat)
	          			VDBCONTROL.UEZESQRRM = "FILE FORMAT MISMATCH";
	        		end
	    		end
	    	end
	    	WCM00P2-TO-CEP01A();
	  	end	
	end // end AIF54Q-CLOSE-SR

	// Move data from serial file to DB table record
	// (fields not affected by multiple ICIs or matches)
	function AIF54P9-MOVEDATA()	
	  	H2-VTL-STAT-DOD.RCVD-YR = AIF54W.WS-YY;
	  	H2-VTL-STAT-DOD.RCVD-MTH = AIF54W.WS-MM;
	  	if (SR-AIF54-INREC.DCSD-SSN is numeric)
			H2-VTL-STAT-DOD.VST-SSN = SR-AIF54-INREC.DCSD-SSN;
		else
			H2-VTL-STAT-DOD.VST-SSN = " ";
		end	
		H2-VTL-STAT-DOD.LST-NM = SR-AIF54-INREC.DCSD-LAST-NM;
		H2-VTL-STAT-DOD.FRST-NM = SR-AIF54-INREC.DCSD-FIRST-NM;
		H2-VTL-STAT-DOD.MID-NM = SR-AIF54-INREC.DCSD-MIDDLE-NM;
		H2-VTL-STAT-DOD.MODFR = SR-AIF54-INREC.DCSD-SUFX;
		H2-VTL-STAT-DOD.DOB = WS-DOB; // date already validated	
		H2-VTL-STAT-DOD.DOD = WS-DOD; // date already validated	
		H2-VTL-STAT-DOD.BIRTH-ST = SR-AIF54-INREC.DCSD-BIRTH-ST;
		H2-VTL-STAT-DOD.BIRTH-CNTRY = SR-AIF54-INREC.DCSD-BIRTH-CNTRY;
		H2-VTL-STAT-DOD.RES-ADDR = SR-AIF54-INREC.DCSD-RES-ADDR;
		H2-VTL-STAT-DOD.RES-APT-NMBR = SR-AIF54-INREC.DCSD-RES-APT-NMB;
		H2-VTL-STAT-DOD.RES-CITY = SR-AIF54-INREC.DCSD-RES-CITY;
		H2-VTL-STAT-DOD.RES-ST-NCHS = SR-AIF54-INREC.DCSD-RES-ST-NCHS;
		H2-VTL-STAT-DOD.RES-CNTRY-NCHS = SR-AIF54-INREC.DCSD-RES-CNTRY-NCHS;
		H2-VTL-STAT-DOD.RES-ZIPCD = SR-AIF54-INREC.DCSD-RES-ZIPCD;
		H2-VTL-STAT-DOD.PLACE-DEATH = SR-AIF54-INREC.DCSD-PLACE-DEATH;	
		H2-VTL-STAT-DOD.PATRNL-LST-NM = SR-AIF54-INREC.FA-LAST-NM;
		H2-VTL-STAT-DOD.PATRNL-FRST-NM = SR-AIF54-INREC.FA-FIRST-NM;
		H2-VTL-STAT-DOD.PATRNL-MID-NM = SR-AIF54-INREC.FA-MIDDLE-NM;
		H2-VTL-STAT-DOD.PATRNL-MODFR = SR-AIF54-INREC.FA-SUFX;
		H2-VTL-STAT-DOD.MATRNL-LST-NM = SR-AIF54-INREC.MO-LAST-NM;
		H2-VTL-STAT-DOD.MATRNL-FRST-NM = SR-AIF54-INREC.MO-FIRST-NM;
		H2-VTL-STAT-DOD.MATRNL-MID-NM = SR-AIF54-INREC.MO-MIDDLE-NM;
		H2-VTL-STAT-DOD.MATRNL-MODFR = SR-AIF54-INREC.MO-SUFX;
		H2-VTL-STAT-DOD.PLACE-DEATH = SR-AIF54-INREC.DCSD-PLACE-DEATH;	
	  	H2-VTL-STAT-DOD.RCVD-DT = AIF54W.WS-CURRENT-DATE;
	end // end AIF54P9-MOVEDATA

	// Look for exact match on SSN and DOB
	function AIF54Q-READ-PER()
		WDB00PI();
	  	VDBCONTROL.UPROC-NM = "AIF54Q-READ-PER";
	  	VDBCONTROL.UPROC-OPT = "INQUIRY";
	  	VDBCONTROL.UPROC-OBJ = "H2-PERSON";
	  	VDBCOMMON.USQLREC = "H2-PERSON";
	  	try
	    	get H2-PERSON singlerow into UPI, SSN
	      	with #sql{
	        	select 	UPI, SSN   
	        	from	TWNPERSON
	        	where 	SSN = :AIF54W.WS-SSN
	        	and		DOB = :AIF54W.WS-DOB
	      	}               
	      	;
	  	end
	  	AIF54Q-SQLERR-RD();
	end // end AIF54Q-READ-PER

	// Look for match(es) on LST_NM and DOB when blank or 
	// non-numeric SSN provided in input record or record  
	// not found on SSN and DOB in AIF54Q-READ-PER.
	function AIF54Q-SETINQ-PER()
		WDB00PI();
	  	VDBCONTROL.UPROC-NM = "AIF54Q-SETINQ-PER";
	  	VDBCONTROL.UPROC-OPT = "SETINQ";
	  	VDBCONTROL.UPROC-OBJ = "H2-PERSON";
	  	VDBCOMMON.USQLREC = "H2-PERSON";
	  	/*  */
	  	try
	  		open AIF54Q-SETINQ-PER_RSI01
	  		with #sql{
	  			select	T1.UPI, T1.SSN
	  			from	TWNPERSON T1
	  			where	T1.DOB = :AIF54W.WS-DOB
	  			and		T1.LST_NM = :AIF54W.WS-LST-NM
	  		}
	  		into UPI, SSN
	  		for H2-PERSON;
	  	end
	  	AIF54Q-SQLERR-RD();
	end // end AIF54Q-SETINQ-PER

	// For strong (SSN/DOB) match, get ICIs for CLOG entries
	function AIF54Q-SETINQ-CM()
		WDB00PI();
	  	VDBCONTROL.UPROC-NM = "AIF54Q-SETINQ-CM";
	  	VDBCONTROL.UPROC-OPT = "SETINQ";
	  	VDBCONTROL.UPROC-OBJ = "H2-CASE-MEMBER";
	  	VDBCOMMON.USQLREC = "H2-CASE-MEMBER";
	  	/*  */
	  	try
	  		open AIF54Q-SETINQ-CM_RSI01
	      	with #sql{
	        	select 	ICI
	        	from	TWNCASE_MEMBER
	        	where	UPI = :AIF54W.WS-UPI
	      	}
	      	into 	ICI
	      	for H2-CASE-MEMBER;
	  	end
	  	AIF54Q-SQLERR-RD();
	end // end AIF54Q-SETINQ-CM

	// Scan H2-PERSON cursor
	function AIF54Q-SCAN-PER()
		WDB00PI();
		VDBCONTROL.UPROC-NM = "AIF54Q-SCAN-PER";
	  	VDBCONTROL.UPROC-OPT = "SCAN";
	  	VDBCONTROL.UPROC-OBJ = "H2-PERSON";
	  	VDBCOMMON.USQLREC = "H2-PERSON";
	  	try
	    	get next H2-PERSON ;
	  	end
	  	AIF54Q-SQLERR-RD();
	end // end AIF54Q-SCAN-PER

	// 	Scan H2-CASE-MEMBER cursor
	function AIF54Q-SCAN-CM()
		WDB00PI();
		VDBCONTROL.UPROC-NM = "AIF54Q-SCAN-CM";
	  	VDBCONTROL.UPROC-OPT = "SCAN";
	  	VDBCONTROL.UPROC-OBJ = "H2-CASE-MEMBER";
	  	VDBCOMMON.USQLREC = "H2-CASE-MEMBER";
	  	try
	    	get next H2-CASE-MEMBER;
	  	end
	  	AIF54Q-SQLERR-RD();
	end // end AIF54PQ-SCAN-CM
	
	// Insert row into TWNCASE_LOG
	function AIF54Q-ADD-CLOG()
		WDB00PI();
		VDBCOMMON.USQLREC = "H2-CASE-LOG";
		VDBCONTROL.UPROC-OBJ = "H2-CASE-LOG";
		VDBCONTROL.UPROC-NM = "AIF54Q-ADD-CLOG";
		VDBCONTROL.UPROC-OPT = "ADD";
		try
			add H2-CASE-LOG
			with #sql{
	        insert into TWNCASE_LOG
	        (ICI, ACTVY_DT, LOG_CRN_TS, PRGM_CASE_TYPE, ACTVY_TM, 
	        WRKR_ID, LOG_ENTRY_DESC, LOG_ENTRY_TYPE, CL_ACTVY_DESC)
	        values (:ICI, :ACTVY-DT, CURRENT TIMESTAMP, :PRGM-CASE-TYPE, CURRENT TIME, 
	        :WRKR-ID, :LOG-ENTRY-DESC, :LOG-ENTRY-TYPE, :CL-ACTVY-DESC)
	      } ;
		end
		AIF54Q-SQLERR-WR();
	end // end AIF54Q-ADD-CLOG
	
	function AIF54Q-ADD-VSD()
		WDB00PI();
		VDBCOMMON.USQLREC = "H2-VTL-STAT-DOD";
		VDBCONTROL.UPROC-OBJ = "H2-VTL-STAT-DOD";
		VDBCONTROL.UPROC-NM = "AIF54Q-ADD-VSD";
		VDBCONTROL.UPROC-OPT = "ADD";
		try
			add H2-VTL-STAT-DOD
			with #sql{
	        	insert into TWNVTL_STAT_DOD
	        	(RCVD_YR, RCVD_MTH, UPI, SEQ_CNT, SSN, MATCH_TYP, MATCH_CNT, VST_SSN, 
	        	LST_NM, FRST_NM, MID_NM, MODFR, DOB, DOD, BIRTH_ST, BIRTH_CNTRY,
	        	RES_ADDR, RES_APT_NMBR, RES_CITY, RES_ST_NCHS, RES_CNTRY_NCHS, RES_ZIPCD,
	        	PATRNL_LST_NM, PATRNL_FRST_NM, PATRNL_MID_NM, PATRNL_MODFR,
	        	MATRNL_LST_NM, MATRNL_FRST_NM, MATRNL_MID_NM, MATRNL_MODFR,
	        	PLACE_DEATH, RCVD_DT)
	        	values (:RCVD-YR, :RCVD-MTH, :UPI, :SEQ-CNT, :SSN, :MATCH-TYP, :MATCH-CNT, :VST-SSN,
	        	:LST-NM, :FRST-NM, :MID-NM, :MODFR, :DOB, :DOD, :BIRTH-ST, :BIRTH-CNTRY,
	        	:RES-ADDR, :RES-APT-NMBR, :RES-CITY, :RES-ST-NCHS, :RES-CNTRY-NCHS, :RES-ZIPCD,
	        	:PATRNL-LST-NM, :PATRNL-FRST-NM, :PATRNL-MID-NM, :PATRNL-MODFR,
	        	:MATRNL-LST-NM, :MATRNL-FRST-NM, :MATRNL-MID-NM, :MATRNL-MODFR,
	        	:PLACE-DEATH, :RCVD-DT)
	      	};
		end
		AIF54Q-SQLERR-WR(); 
	end // end AIF54Q-ADD-VSD

	// PROCESS SQL READ ERRORS
	function AIF54Q-SQLERR-RD()
	  VDBCONTROL.UACCTYP = "R";
	  VDBCOMMON.UAPPLNAM = "AIF54A";
	  VDBCOMMON.UNRF = "Y";
	  VDBCOMMON.UDUP = "N";
	  WDB00PE-SQLERR();
	  if (VDBCONTROL.URC >= 104)
	    WCM00P2-TO-CEP01A();
	  end
	end // end AIF54Q-SQLERR-RD

	// PROCESS SQL WRITE ERRORS 
	function AIF54Q-SQLERR-WR()
		WS-DUPFLG = "N";
	  	VDBCONTROL.UACCTYP = "W";
	  	VDBCOMMON.UAPPLNAM = "AIF54A";
	  	VDBCOMMON.UNRF = "Y";
	  	VDBCOMMON.UDUP = "Y";
	  	WDB00PE-SQLERR();
	  	if (VDBCONTROL.URC > 0)
	  		if (VDBCONTROL.URC == 104)
	  			WS-DUPFLG = "Y";
	  		else
	  			VDBCONTROL.UROLLBACK = "Y";
	    		WCM00P2-TO-CEP01A();
	  		end
	  	end
	end // end AIF54Q-SQLERR-WR
	
end // end AIF54A

Record AIF54W type basicRecord
  10 WS-INPUT-DT char(8); // MMDDYYYY
  	15 WS-INPUT-MM char(2);
  	15 WS-INPUT-DD char(2);
  	15 WS-INPUT-YYYY char(4);
  10 WS-OUTPUT-DT char(10); // YYYY-DD-MM
  	15 WS-OUTPUT-YYYY char(4);
  	15 WS-OUTPUT-FIL1 char(1);
  	15 WS-OUTPUT-MM char(2);
  	15 WS-OUTPUT-FIL2 char(1);
  	15 WS-OUTPUT-DD char(2);
  10 WS-INT-YYYY smallint;
  10 WS-TEMP-INT smallint;	
  10 WS-LST-NM char(21); 
  10 WS-SSN char(9); 
  10 WS-UPI int;
  10 WS-DOB char(10);
  10 WS-DOD char(10);
  	15 WS-DOD-YYYY char(4);
  	15 WS-DOD-FIL1 char(1);
  	15 WS-DOD-MM char(2);
  	15 WS-DOD-FIL2 char(1);
  	15 WS-DOD-DD char(2); 
  10 WS-VALID-DT-FLG char(1);
  10 WS-LEAP-FLG char(1); 
  10 WS-SSNFLG char(1); // "Y" if TWNPERSON record found on SSN/DOB query
  10 WS-DUPFLG char(1); // "Y" if attempt to write death match record finds duplicate key
  10 WS-ERR-CD char(8); 
    15 WS-ERR-FIRST-FOUR char(4); 
    15 WS-ERR-LAST-FOUR char(4);
  10 WS-CURRENT-DATE char(10); 
    15 WS-YY char(4); 
    15 WS-FIL1 char(1); 
    15 WS-MM char(2); 
    15 WS-FIL2 char(1); 
    15 WS-DD char(2); 
  10 WS-DATE1 char(8); // Date as retrieved from system
    15 WS-YY1 char(4); 
    15 WS-MM1 char(2); 
    15 WS-DD1 char(2); 
  10 WS-CLOG-STRING char(112); // Format string for CL_ACTVY_DESC (CASE LOG)
  	15 WS-CLOGDESC1 char(73);
  	15 WS-CLOGUPI char(9);
  	15 WS-CLOGDESC2 char(20);
 	15 WS-CLOGDOD char(10);		
  		20 CL-DODMM char(2);	
  		20 CL-DODHYPH1 char(1); 
  		20 CL-DODDD char(2);	
  		20 CL-DODHYPH2 char(1);	
  		20 CL-DODYYYY char(4);	
  10 WS-MATCH-CNT smallint;
  10 WS-SEQ-CNT smallint;
end // AIF54W

