function cp_spec_conflict() {
	return gulp.src(jspSrcCP+'/caseprocessing/spec/conflict/*.jsp')
	.pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
          .pipe(dom(function(){
            var scripts = this.querySelectorAll('script'), 
                    result  = '',
                    i       = scripts.length;
                while (i--) {
                              result += scripts[i].innerHTML;               
                }
                return result;
            }, false))
             .pipe(ext_replace('.js'))
            .pipe(clip())
            .pipe(uglify())
           .pipe(gulp.dest(Jsdestination+'/caseprocessingweb/caseprocessing/spec/conflict/'));

    return gulp.src(jspSrcCP+'/caseprocessing/spec/conflict/*.jsp')
      .pipe(flatmap(function(stream, file){
        var  filename= path.parse(file.path).name;
        var fileexist=fileExists.sync(Jsdestination+'/caseprocessingweb/caseprocessing/spec/conflict/'+filename+'.js');
        return stream
                 .pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
                 .pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseprocessingweb/caseprocessing/spec/conflict/' + filename + '.js"></script>'))))
                 .pipe((gulpif(fileexist,removeEmptyLines())))
                 .pipe(gulp.dest(jspDestCP+'/caseprocessing/spec/conflict'));  
           
        }));
}

function cp_spec_conflict_authorizedRepresentative_minify(end) {
    return gulp.src(jspSrcCP+'/caseprocessing/spec/conflict/authorizedRepresentative/*.jsp')
        .pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
          .pipe(dom(function(){
            var scripts = this.querySelectorAll('script'), 
                    result  = '',
                    i       = scripts.length;
                while (i--) {
                              result += scripts[i].innerHTML;               
                }
                return result;
            }, false))
           .pipe(ext_replace('.js'))
            .pipe(clip())
            .pipe(uglify())
           .pipe(gulp.dest(Jsdestination+'/caseprocessingweb/caseprocessing/spec/conflict/authorizedRepresentative/'))
           .on('end',end);
}
function cp_spec_conflict_authorizedRepresentative() {
    return gulp.src(jspSrcCP+'/caseprocessing/spec/conflict/authorizedRepresentative/*.jsp')
       .pipe(flatmap(function(stream, file){
        var  filename= path.parse(file.path).name;
        var fileexist=fileExists.sync(Jsdestination+'/caseprocessingweb/caseprocessing/spec/conflict/authorizedRepresentative/'+filename+'.js');
        return stream
                 .pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
                 .pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseprocessingweb/caseprocessing/spec/conflict/authorizedRepresentative/' + filename + '.js"></script>'))))
                 .pipe((gulpif(fileexist,removeEmptyLines())))
             .pipe(gulp.dest(jspDestCP + '/caseprocessing/spec/conflict/authorizedRepresentative/'));
        }));
}

function cp_tax_copy() {
	return gulp.src([ jspSrcCP+'/caseprocessing/tax/taxconstructs.jsp'])
	.pipe(gulp.dest(jspDestCP+'/caseprocessing/tax/')); 
}

function cp_tax_minify(end) {
    return gulp.src([jspSrcCP+'/caseprocessing/tax/*.jsp', '!'+jspSrcCP+'/caseprocessing/tax/taxconstructs.jsp'])
	.pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
    .pipe(dom(function(){
      var scripts = this.querySelectorAll('script'),
              result  = '',
              i       = scripts.length;
          while (i--) {
                        result += scripts[i].innerHTML;               
          }
          return result;
      }, false))
      .pipe(ext_replace('.js'))
            .pipe(clip())
            .pipe(uglify())
     .pipe(gulp.dest(Jsdestination+'/caseprocessingweb/caseprocessing/tax/'))
     .on('end',end);
}
function cp_tax() {
	return gulp.src([jspSrcCP+'/caseprocessing/tax/*.jsp','!'+jspSrcCP+'/caseprocessing/tax/taxconstructs.jsp'])
	.pipe(flatmap(function(stream, file){
        var  filename= path.parse(file.path).name;
        var fileexist=fileExists.sync(Jsdestination+'/caseprocessingweb/caseprocessing/tax/'+filename+'.js');
        return stream
            .pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
            .pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseprocessingweb/caseprocessing/tax/' + filename + '.js"></script>'))))
            .pipe((gulpif(fileexist,removeEmptyLines())))
            .pipe(gulp.dest(jspDestCP+'/caseprocessing/tax/'));
        }));  
}

function cp_tax_conflict() {
	return gulp.src(jspSrcCP+'/caseprocessing/tax/conflict/*.jsp')
            .pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
              .pipe(dom(function(){
                var scripts = this.querySelectorAll('script'), 
                        result  = '',
                        i       = scripts.length;
                    while (i--) {
                                  result += scripts[i].innerHTML;               
                    }
                    return result;
                }, false))
               .pipe(ext_replace('.js'))
                     .pipe(clip())
                     .pipe(uglify())
               .pipe(gulp.dest(Jsdestination+'/caseprocessingweb/caseprocessing/tax/conflict/'));

        return gulp.src(jspSrcCP+'/caseprocessing/tax/conflict/*.jsp')
             .pipe(flatmap(function(stream, file){
              var  filename= path.parse(file.path).name;
              var fileexist=fileExists.sync(Jsdestination+'/caseprocessingweb/caseprocessing/tax/conflict/'+filename+'.js');
              return stream
                 .pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
                 .pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseprocessingweb/caseprocessing/tax/conflict/' + filename + '.js"></script>'))))
                 .pipe((gulpif(fileexist,removeEmptyLines())))
              .pipe(gulp.dest(jspDestCP + '/caseprocessing/tax/conflict/'));
           
        }));      
}

      
function cp_tax_conflict_taxinfo_minify(end) {
    return gulp.src(jspSrcCP+'/caseprocessing/tax/conflict/taxinfo/*.jsp')
          .pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
          .pipe(dom(function(){
            var scripts = this.querySelectorAll('script'), 
                    result  = '',
                    i       = scripts.length;
                while (i--) {
                              result += scripts[i].innerHTML;               
                }
                return result;
            }, false))
             .pipe(ext_replace('.js'))
            .pipe(clip())
            .pipe(uglify())
           .pipe(gulp.dest(Jsdestination+'/caseprocessingweb/caseprocessing/tax/conflict/taxinfo/'))
           .on('end',end);
}
function cp_tax_conflict_taxinfo() {
    return gulp.src(jspSrcCP+'/caseprocessing/tax/conflict/taxinfo/*.jsp')
        .pipe(flatmap(function(stream, file){
              var  filename= path.parse(file.path).name;
              var fileexist=fileExists.sync(Jsdestination+'/caseprocessingweb/caseprocessing/tax/conflict/taxinfo/'+filename+'.js');
              return stream
                 .pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
                 .pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseprocessingweb/caseprocessing/tax/conflict/taxinfo/' + filename + '.js"></script>'))))
                 .pipe((gulpif(fileexist,removeEmptyLines())))
                .pipe(gulp.dest(jspDestCP + '/caseprocessing/tax/conflict/taxinfo/'));
        }));   
}

function cp_tax_conflict_taxmbro_minify(end) {
    return gulp.src(jspSrcCP+'/caseprocessing/tax/conflict/taxmbro/*.jsp')
          .pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
          .pipe(dom(function(){
            var scripts = this.querySelectorAll('script'), 
                    result  = '',
                    i       = scripts.length;
                while (i--) {
                              result += scripts[i].innerHTML;               
                }
                return result;
            }, false))
              .pipe(ext_replace('.js'))
            .pipe(clip())
            .pipe(uglify())
           .pipe(gulp.dest(Jsdestination+'/caseprocessingweb/caseprocessing/tax/conflict/taxmbro/'))
           .on('end',end);
}
function cp_tax_conflict_taxmbro() {
    return gulp.src(jspSrcCP+'/caseprocessing/tax/conflict/taxmbro/*.jsp')
      .pipe(flatmap(function(stream, file){
              var  filename= path.parse(file.path).name;
              var fileexist=fileExists.sync(Jsdestination+'/caseprocessingweb/caseprocessing/tax/conflict/taxinfo/'+filename+'.js');
              return stream
                 .pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
                 .pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseprocessingweb/caseprocessing/tax/conflict/taxmbro/' + filename + '.js"></script>'))))
                 .pipe((gulpif(fileexist,removeEmptyLines())))
                .pipe(gulp.dest(jspDestCP + '/caseprocessing/tax/conflict/taxmbro/'));
        }));
}

function cp_spousal_copy() {
	return gulp.src([jspSrcCP + '/caseprocessing/spousal/spousalconstructs.jsp'])
	.pipe(gulp.dest(jspDestCP+'/caseprocessing/spousal/'));
}
function cp_spousal_minify(end) {
	return gulp.src([jspSrcCP+'/caseprocessing/spousal/*.jsp','!' +jspSrcCP + '/caseprocessing/spousal/spousalconstructs.jsp'])
	.pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
    .pipe(dom(function(){
      var scripts = this.querySelectorAll('script'),
              result  = '',
              i       = scripts.length;
          while (i--) {
                        result += scripts[i].innerHTML;               
          }
          return result;
      }, false))
     .pipe(ext_replace('.js'))
      .pipe(clip())
      .pipe(uglify())
     .pipe(gulp.dest(Jsdestination+'/caseprocessingweb/caseprocessing/spousal/'))
     .on('end',end);
}

function cp_spousal() {
    return gulp.src([jspSrcCP+'/caseprocessing/spousal/*.jsp','!' +jspSrcCP + '/caseprocessing/spousal/spousalconstructs.jsp'])
	.pipe(map(function (file, cb) {
        var  filename= path.parse(file.path).name;
        var fileexist=fileExists.sync(Jsdestination+'/caseprocessingweb/caseprocessing/spousal/'+filename+'.js');
        return gulp.src(jspSrcCP + '/caseprocessing/spousal/'+filename+'.jsp')
           .pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
           .pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseprocessingweb/caseprocessing/spousal/' + filename + '.js"></script>'))))
           .pipe((gulpif(fileexist,removeEmptyLines())))
           .pipe(gulp.dest(jspDestCP+'/caseprocessing/spousal/'));
      }));
}

function cp_telephoneapplication_copy() {
	return gulp.src([jspSrcCP + '/caseprocessing/telephoneapplication/telephoneApplication.jsp'])
       .pipe(gulp.dest(jspDestCP+'/caseprocessing/telephoneapplication/'));
}

function cp_telephoneapplication_minify(end) {
	return gulp.src([jspSrcCP+'/caseprocessing/telephoneapplication/*.jsp', '!' +jspSrcCP + '/caseprocessing/telephoneapplication/telephoneApplication.jsp'])
    .pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
    .pipe(dom(function(){
      var scripts = this.querySelectorAll('script'),
              result  = '',
              i       = scripts.length;
          while (i--) {
                        result += scripts[i].innerHTML;               
          }
          return result;
      }, false))
       .pipe(ext_replace('.js'))
      .pipe(clip())
      .pipe(uglify())
     .pipe(gulp.dest(Jsdestination+'/caseprocessingweb/caseprocessing/telephoneapplication/'))
     .on('end',end);
}
function cp_telephoneapplication() {          
	return gulp.src([jspSrcCP+'/caseprocessing/telephoneapplication/*.jsp', '!' +jspSrcCP + '/caseprocessing/telephoneapplication/telephoneApplication.jsp'])
    .pipe(flatmap(function(stream, file){
      var  filename= path.parse(file.path).name;
      var fileexist=fileExists.sync(Jsdestination+'/caseprocessingweb/caseprocessing/telephoneapplication/'+filename+'.js');
      return stream
         .pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
         .pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseprocessingweb/caseprocessing/telephoneapplication/' + filename + '.js"></script>'))))
         .pipe((gulpif(fileexist,removeEmptyLines())))
         .pipe(gulp.dest(jspDestCP+'/caseprocessing/telephoneapplication/'));
	 }));
}

function cp_trel_copy() {
	return gulp.src([jspSrcCP +'/caseprocessing/trel/trelconstruts.jsp'])
      .pipe(gulp.dest(jspDestCP+'/caseprocessing/trel/'));
}
function cp_trel_minify(end) {
	return gulp.src([jspSrcCP+'/caseprocessing/trel/*.jsp', '!' + jspSrcCP +'/caseprocessing/trel/trelconstruts.jsp'])
	.pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
	.pipe(dom(function(){
		var scripts = this.querySelectorAll('script'),
		result  = '',
		i       = scripts.length;
		while (i--) {
			result += scripts[i].innerHTML;               
		}
		return result;
	}, false))
	.pipe(ext_replace('.js'))
	.pipe(clip())
	.pipe(uglify())
	.pipe(gulp.dest(Jsdestination+'/caseprocessingweb/caseprocessing/trel/'))
	.on('end', end);
}

function cp_trel() { 
	return gulp.src([jspSrcCP+'/caseprocessing/trel/*.jsp','!' + jspSrcCP +'/caseprocessing/trel/trelconstruts.jsp'])
	.pipe(map(function (file, cb) {
        var filename= path.parse(file.path).name; 
        var fileexist=fileExists.sync(Jsdestination+'/caseprocessingweb/caseprocessing/trel/'+filename+'.js');
        gulp.src(jspSrcCP+'/caseprocessing/trel/'+filename+'.jsp')
       .pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
       .pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseprocessingweb/caseprocessing/trel/' + filename + '.js"></script>'))))
       .pipe((gulpif(fileexist,removeEmptyLines())))
       .pipe(gulp.dest(jspDestCP+'/caseprocessing/trel/'));
   }));
}

function cp_interfaces_minify(end) {
	return gulp.src([jspSrcCP+'/caseprocessing/interfaces/*.jsp','!' +jspSrcCP+'/caseprocessing/interfaces/interfacesConstructs.jsp'])
	.pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
	.pipe(dom(function(){
		var scripts = this.querySelectorAll('script'),
		result  = '',
		i       = scripts.length;
		while (i--) {
			result += scripts[i].innerHTML;               
		}
		return result;
	}, false))
	.pipe(ext_replace('.js'))
	.pipe(clip())
	.pipe(uglify())
	.pipe(gulp.dest(Jsdestination+'/caseprocessingweb/caseprocessing/interfaces/'))
	.on('end', end);
}

function cp_interfaces() {
	return gulp.src([jspSrcCP+'/caseprocessing/interfaces/*.jsp','!' +jspSrcCP+'/caseprocessing/interfaces/interfacesConstructs.jsp'])
	.pipe(map(function (file, cb) {
		var filename= path.parse(file.path).name; 
		var fileexist=fileExists.sync(Jsdestination + '/caseprocessingweb/caseprocessing/interfaces/'+filename+'.js');
		return gulp.src(jspSrcCP + '/caseprocessing/interfaces/'+filename+'.jsp')
     .pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
     .pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseprocessingweb/caseprocessing/interfaces/' + filename + '.js"></script>'))))
     .pipe((gulpif(fileexist,removeEmptyLines())))
     .pipe(gulp.dest(jspDestCP + '/caseprocessing/interfaces/'));
	}));
}


function ce_jsp_copy() {
	return gulp.src([jspSrcCE + '/baseHeader.jsp'])
	.pipe(gulp.dest(jspDestCE ));
}

function ce_jsp() {
	return gulp.src([jspSrcCE +'/*.jsp','!' + jspSrcCE + '/baseHeader.jsp'])
       .pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
       .pipe(dom(function(){
		   var scripts = this.querySelectorAll('script'),
		   result  = '',
		   i       = scripts.length;
		   while (i--) {
			   result += scripts[i].innerHTML;
		   }
		return result;
		}, false))
          .pipe(ext_replace('.js'))
		  .pipe(debug({tile:'Minifying:'}))
            .pipe(clip())
            .pipe(uglify({format:{comments:false}}))
        .pipe(gulp.dest(Jsdestination+'/caseeligibilityweb/'));
	
	return gulp.src([jspSrcCE +'/*.jsp','!' + jspSrcCE + '/baseHeader.jsp'])
       .pipe(flatmap(function(stream, file){
              var  filename= path.parse(file.path).name;
              var fileexist=fileExists.sync(Jsdestination+'/caseeligibilityweb/'+filename+'.js');
              return stream
              .pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
              .pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseeligibilityweb/' + filename + '.js"></script>'))))
              .pipe((gulpif(fileexist,removeEmptyLines())))
              .pipe(gulp.dest(jspDestCE ));
      }));	
}

function ce_eligibility_copy() {
	return gulp.src([jspSrcCE + '/eligibility/eligibilityconstructs.jsp'])
      .pipe(gulp.dest(jspDestCE + '/eligibility'));
}

function ce_eligibility() {
	return gulp.src([jspSrcCE +'/eligibility/*.jsp','!' + jspSrcCE + '/eligibility/eligibilityconstructs.jsp'])
	.pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
       .pipe(dom(function(){
         var scripts = this.querySelectorAll('script'),
                 result  = '',
                 i       = scripts.length;

             while (i--) {
                           result += scripts[i].innerHTML;               
        }
             return result;
         }, false))
          .pipe(ext_replace('.js'))
            .pipe(clip())
            .pipe(uglify())
        .pipe(gulp.dest(Jsdestination+'/caseeligibilityweb/eligibility/'));
	
	return gulp.src([jspSrcCE +'/eligibility/*.jsp','!' + jspSrcCE + '/eligibility/eligibilityconstructs.jsp'])
      .pipe(flatmap(function(stream, file){
		  var  filename= path.parse(file.path).name;
		  var fileexist=fileExists.sync(Jsdestination+'/caseeligibilityweb/eligibility/'+filename+'.js');
		  return stream
                 .pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
                 .pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseeligibilityweb/eligibility/' + filename + '.js"></script>'))))
                 .pipe((gulpif(fileexist,removeEmptyLines())))
                 .pipe(gulp.dest(jspDestCE + '/eligibility'));
      }));
}

function ce_eligibility_ao() {
	return gulp.src(jspSrcCE +'/eligibility/ao/*.jsp')
	.pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
	.pipe(dom(function(){
		var scripts = this.querySelectorAll('script'),
		result  = '',
		i       = scripts.length;
		while (i--) {
			result += scripts[i].innerHTML;               
        }
		return result;
	}, false))
	.pipe(ext_replace('.js'))
	.pipe(clip())
	.pipe(uglify())
	.pipe(gulp.dest(Jsdestination+'/caseeligibilityweb/eligibility/ao/'));
	
	return gulp.src(jspSrcCE +'/eligibility/ao/*.jsp')
	.pipe(flatmap(function(stream, file){
		var  filename= path.parse(file.path).name;
		var fileexist=fileExists.sync(Jsdestination+'/caseeligibilityweb/eligibility/ao/'+filename+'.js');
		return stream
		.pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
		.pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseeligibilityweb/eligibility/ao/' + filename + '.js"></script>'))))
		.pipe((gulpif(fileexist,removeEmptyLines())))
		.pipe(gulp.dest(jspDestCE + '/eligibility/ao'));
	}));
}

function ce_eligibility_ccpa() {
	return gulp.src(jspSrcCE +'/eligibility/ccpa/*.jsp')
      .pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
	  .pipe(dom(function(){
		  var scripts = this.querySelectorAll('script'),
		  result  = '',
		  i       = scripts.length;
		  while (i--) {
			  result += scripts[i].innerHTML;
		  }
		  return result;
	}, false))
	.pipe(ext_replace('.js'))
	.pipe(clip())
	.pipe(uglify())
	.pipe(gulp.dest(Jsdestination+'/caseeligibilityweb/eligibility/ccpa/'));
	
	return gulp.src(jspSrcCE +'/eligibility/ccpa/*.jsp')
	.pipe(flatmap(function(stream, file){
		var  filename= path.parse(file.path).name;
		var fileexist=fileExists.sync(Jsdestination+'/caseeligibilityweb/eligibility/ccpa/'+filename+'.js');
		return stream
		.pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
		.pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseeligibilityweb/eligibility/ccpa/' + filename + '.js"></script>'))))
		.pipe((gulpif(fileexist,removeEmptyLines())))
		.pipe(gulp.dest(jspDestCE + '/eligibility/ccpa'));
      }));
}

function ce_eligibility_fmc_minify(end) {
	return gulp.src(jspSrcCE +'/eligibility/fmc/*.jsp')
       .pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
       .pipe(dom(function(){
         var scripts = this.querySelectorAll('script'),
                 result  = '',
                 i       = scripts.length;

             while (i--) {
                           result += scripts[i].innerHTML;               
        }
         return result;
         }, false))
         .pipe(ext_replace('.js'))
            .pipe(clip())
            .pipe(uglify())
        .pipe(gulp.dest(Jsdestination+'/caseeligibilityweb/eligibility/fmc/'))
		.on('end', end);
}
function ce_eligibility_fmc() {
	return gulp.src(jspSrcCE +'/eligibility/fmc/*.jsp')
	.pipe(map(function (file, cb) {
		var filename= path.parse(file.path).name;
		var fileexist=fileExists.sync(Jsdestination+'/caseeligibilityweb/eligibility/fmc/'+filename+'.js');
		
		return gulp.src(jspSrcCE +'/eligibility/fmc/'+filename+'.jsp')
		.pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
		.pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseeligibilityweb/eligibility/fmc/' + filename + '.js"></script>'))))
		.pipe((gulpif(fileexist,removeEmptyLines())))
		.pipe(gulp.dest(jspDestCE + '/eligibility/fmc'));
	}));	  
}

function ce_eligibility_maabd() {
	return gulp.src(jspSrcCE +'/eligibility/maabd/*.jsp')
      .pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
       .pipe(dom(function(){
         var scripts = this.querySelectorAll('script'),
		 result  = '',
		 i       = scripts.length;
		 while (i--) {
			 result += scripts[i].innerHTML;               
        }
             return result;
         }, false))
          .pipe(ext_replace('.js'))
            .pipe(clip())
            .pipe(uglify())
        .pipe(gulp.dest(Jsdestination+'/caseeligibilityweb/eligibility/maabd/'));
		
	return gulp.src(jspSrcCE +'/eligibility/maabd/*.jsp')
   .pipe(flatmap(function(stream, file){
	   var  filename= path.parse(file.path).name;
	   var fileexist=fileExists.sync(Jsdestination+'/caseeligibilityweb/eligibility/maabd/'+filename+'.js');
	   return stream
	   .pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
		.pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseeligibilityweb/eligibility/maabd/' + filename + '.js"></script>'))))
		.pipe((gulpif(fileexist,removeEmptyLines())))
		.pipe(gulp.dest(jspDestCE + '/eligibility/maabd'));
    }));
}

function ce_eligibility_mcb() {
	return gulp.src(jspSrcCE +'/eligibility/mcb/*.jsp')
      .pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
       .pipe(dom(function(){
         var scripts = this.querySelectorAll('script'),
                 result  = '',
                 i       = scripts.length;

             while (i--) {
                           result += scripts[i].innerHTML;               
        }
             return result;
         }, false))
         .pipe(ext_replace('.js'))
            .pipe(clip())
            .pipe(uglify())
        .pipe(gulp.dest(Jsdestination+'/caseeligibilityweb/eligibility/mcb/'));
	
	return gulp.src(jspSrcCE +'/eligibility/mcb/*.jsp')
	.pipe(flatmap(function(stream, file){
		var  filename= path.parse(file.path).name;
		var fileexist=fileExists.sync(Jsdestination+'/caseeligibilityweb/eligibility/mcb/'+filename+'.js');
		return stream
		.pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
		.pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseeligibilityweb/eligibility/mcb/' + filename + '.js"></script>'))))
		.pipe((gulpif(fileexist,removeEmptyLines())))
		.pipe(gulp.dest(jspDestCE + '/eligibility/mcb'));
    }));
}

function ce_eligibility_pe_minify(end) {
	return gulp.src(jspSrcCE +'/eligibility/pe/*.jsp')
       .pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
       .pipe(dom(function(){
        var scripts = this.querySelectorAll('script'),
		result  = '',
		i       = scripts.length;
		while (i--) {
			 result += scripts[i].innerHTML;               
		}
             return result;
         }, false))
         .pipe(ext_replace('.js'))
            .pipe(clip())
            .pipe(uglify())
        .pipe(gulp.dest(Jsdestination+'/caseeligibilityweb/eligibility/pe/'))
		.on('end', end);
}
function ce_eligibility_pe() {
	return gulp.src(jspSrcCE +'/eligibility/pe/*.jsp')
	.pipe(map(function (file, cb) {
		var filename= path.parse(file.path).name;
		var fileexist=fileExists.sync(Jsdestination+'/caseeligibilityweb/eligibility/pe/'+filename+'.js');
		return gulp.src(jspSrcCE +'/eligibility/pe/'+filename+'.jsp')
             .pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
             .pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseeligibilityweb/eligibility/pe/' + filename + '.js"></script>'))))
             .pipe((gulpif(fileexist,removeEmptyLines())))
             .pipe(gulp.dest(jspDestCE + '/eligibility/pe'));
	}));
}

function ce_eligibility_sna_copy() {
	return gulp.src([jspSrcCE+'/eligibility/snap/snapEligibilityVersions.jsp'])
	.pipe(gulp.dest(jspDestCE + '/eligibility/snap'));
}

function ce_eligibility_snap_minify(end) {
	return gulp.src([jspSrcCE +'/eligibility/snap/*.jsp','!'+jspSrcCE+'/eligibility/snap/snapEligibilityVersions.jsp'])
	.pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
	.pipe(dom(function(){
		var scripts = this.querySelectorAll('script'),
		result  = '',
		i       = scripts.length;
		while (i--) {
			result += scripts[i].innerHTML;               
		}
		return result;
	}, false))
	.pipe(ext_replace('.js'))
	.pipe(clip())
	.pipe(uglify())
	.pipe(gulp.dest(Jsdestination+'/caseeligibilityweb/eligibility/snap/'))
	.on('end',end);
}
function ce_eligibility_snap() {
	return gulp.src([jspSrcCE +'/eligibility/snap/*.jsp','!'+jspSrcCE+'/eligibility/snap/snapEligibilityVersions.jsp'])
	.pipe(flatmap(function(stream, file){
		var  filename= path.parse(file.path).name;
		var fileexist=fileExists.sync(Jsdestination+'/caseeligibilityweb/eligibility/snap/'+filename+'.js');
		return stream
		.pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
		.pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseeligibilityweb/eligibility/snap/' + filename + '.js"></script>'))))
		.pipe((gulpif(fileexist,removeEmptyLines())))
		.pipe(gulp.dest(jspDestCE + '/eligibility/snap'));
	}));
}

function ce_eligibility_tanf_copy() {
	return gulp.src([jspSrcCE+'/eligibility/tanf/neonEligibilityVersions.jsp'])
	.pipe(gulp.dest(jspDestCE + '/eligibility/tanf'));
}

function ce_eligibility_tanf() {
	return gulp.src([jspSrcCE +'/eligibility/tanf/*.jsp','!'+jspSrcCE+'/eligibility/tanf/neonEligibilityVersions.jsp'])
      .pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
       .pipe(dom(function(){
         var scripts = this.querySelectorAll('script'),
                 result  = '',
                 i       = scripts.length;
             while (i--) {
				 result += scripts[i].innerHTML;
		}
             return result;
         }, false))
         .pipe(ext_replace('.js'))
            .pipe(clip())
            .pipe(uglify())
        .pipe(gulp.dest(Jsdestination+'/caseeligibilityweb/eligibility/tanf/'));
		
	return gulp.src([jspSrcCE +'/eligibility/tanf/*.jsp','!'+jspSrcCE+'/eligibility/tanf/neonEligibilityVersions.jsp'])
      .pipe(flatmap(function(stream, file){
		  var  filename= path.parse(file.path).name;
		  var fileexist=fileExists.sync(Jsdestination+'/caseeligibilityweb/eligibility/tanf/'+filename+'.js');
		  return stream
		  .pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
           .pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseeligibilityweb/eligibility/tanf/' + filename + '.js"></script>'))))
           .pipe((gulpif(fileexist,removeEmptyLines())))
           .pipe(gulp.dest(jspDestCE + '/eligibility/tanf'));
    }));
}

//In Old Gulp,PR Minification is not happening
function pr_jsp() {
	return gulp.src(jspSrcPR+'/*.jsp') 
        .pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
         .pipe(dom(function(){
           var scripts = this.querySelectorAll('script'), 
		   result  = '',
		   i       = scripts.length;
		   while (i--) {
			   result += scripts[i].innerHTML;
		}
		return result;
           }, false))
           .pipe(ext_replace('.js'))
            .pipe(clip())
            .pipe(uglify())
          .pipe(gulp.dest(Jsdestination+'/personresolutionclient/'));

    return gulp.src(jspSrcPR+'/*.jsp')
	.pipe(flatmap(function(stream, file){
		var  filename= path.parse(file.path).name;
		var fileexist=fileExists.sync(Jsdestination+'/personresolutionclient/'+filename+'.js');
		return stream
		.pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
		.pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/personresolutionclient/' + filename + '.js"></script>'))))
		.pipe((gulpif(fileexist,removeEmptyLines())))
		.pipe(gulp.dest(jspDestPR));
	}));
}

function pr_common() {
	return gulp.src(jspSrcPR+'/common/*.jsp') 
	.pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
	.pipe(dom(function(){
		var scripts = this.querySelectorAll('script'), 
		result  = '',
		i       = scripts.length;
		while (i--) {
			result += scripts[i].innerHTML;               
		}
		return result;
	}, false))
	.pipe(ext_replace('.js'))
	.pipe(clip())
	.pipe(uglify())
	.pipe(gulp.dest(Jsdestination+'/personresolutionclient/common/'));

    return gulp.src(jspSrcPR+'/common/*.jsp')
	.pipe(flatmap(function(stream, file){
		var  filename= path.parse(file.path).name;
		var fileexist=fileExists.sync(Jsdestination+'/personresolutionclient/common/'+filename+'.js');
		return stream
		.pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
		.pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/personresolutionclient/common/' + filename + '.js"></script>'))))
		.pipe((gulpif(fileexist,removeEmptyLines())))
		.pipe(gulp.dest(jspDestPR+'/common/'));
    }));      
}

function pr_prism_copy() {
	return gulp.src([jspSrcPR+'/prism/CreatePersonResults.jsp',jspSrcPR+'/prism/FameCase.jsp',
	jspSrcPR+'/prism/PersonSearchResolutonResults.jsp',jspSrcPR+'/prism/PrismConstructs.jsp'])
	.pipe(gulp.dest(jspDestPR+'/prism/'));
}

  // gulp.task('pr_prism',['pr_prism_copy'],
function pr_prism() {
	return gulp.src(['!'+jspSrcPR+'/prism/CreatePersonResults.jsp','!'+jspSrcPR+'/prism/FameCase.jsp',
	'!'+jspSrcPR+'/prism/PersonSearchResolutonResults.jsp','!'+jspSrcPR+'/prism/PrismConstructs.jsp',
	jspSrcPR+'/prism/*.jsp'])
	.pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
	.pipe(dom(function(){
		var scripts = this.querySelectorAll('script'), 
		result  = '',
		i       = scripts.length;
		while (i--) {
			result += scripts[i].innerHTML;               
		}
		return result;
	}, false))
	.pipe(ext_replace('.js'))
	.pipe(clip())
	.pipe(uglify())
	.pipe(gulp.dest(Jsdestination+'/personresolutionclient/prism/'));

    return gulp.src(['!'+jspSrcPR+'/prism/CreatePersonResults.jsp','!'+jspSrcPR+'/prism/FameCase.jsp',
	'!'+jspSrcPR+'/prism/PersonSearchResolutonResults.jsp','!'+jspSrcPR+'/prism/PrismConstructs.jsp',
	jspSrcPR+'/prism/*.jsp'])
	.pipe(flatmap(function(stream, file){
		var  filename= path.parse(file.path).name;
		var fileexist=fileExists.sync(Jsdestination+'/personresolutionclient/prism/'+filename+'.js');
		return stream
		.pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
		.pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/personresolutionclient/prism/' + filename + '.js"></script>'))))
		.pipe((gulpif(fileexist,removeEmptyLines())))
		.pipe(gulp.dest(jspDestPR+'/prism/'));
	}));
}

function cs_jsp_copy() {
	gulp.src([jspSrcCS+'/baseHeader.jsp'])
	.pipe(gulp.dest(jspDestCS));
}

function cs_jsp() {
	return gulp.src([jspSrcCS+'/*.jsp','!'+jspSrcCS+'/baseHeader.jsp'])
	.pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
	.pipe(dom(function(){
		var scripts = this.querySelectorAll('script'), 
		result  = '',
		i       = scripts.length;
		while (i--) {
			result += scripts[i].innerHTML;               
        }
		return result;
	}, false))
	.pipe(ext_replace('.js'))
	.pipe(clip())
	.pipe(uglify())
	.pipe(gulp.dest(Jsdestination+'/casesearchweb/'));
	
	return gulp.src([ '!'+jspSrcCS+'/baseHeader.jsp',jspSrcCS+'/*.jsp'])
	.pipe(flatmap(function(stream, file){
		var  filename= path.parse(file.path).name;
		var fileexist=fileExists.sync(Jsdestination+'/casesearchweb/'+filename+'.js');
		return stream
		.pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
		.pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/casesearchweb/' + filename + '.js"></script>'))))
		.pipe((gulpif(fileexist,removeEmptyLines())))
		.pipe(gulp.dest(jspDestCS));
	}));
}

function cs_casesearch_copy() {
	return gulp.src([jspSrcCS+'/casesearch/searchhome.jsp'])
	.pipe(gulp.dest(jspDestCS+'/casesearch/'));
}

function cs_casesearch() {
	return gulp.src([jspSrcCS+'/casesearch/*.jsp','!'+jspSrcCS+'/casesearch/searchhome.jsp'])
       .pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
       .pipe(dom(function(){
		   var scripts = this.querySelectorAll('script'),
		   result  = '',
		   i       = scripts.length;
		   while (i--) {
			   result += scripts[i].innerHTML;
		}
		return result;
	}, false))
	.pipe(ext_replace('.js'))
	.pipe(clip())
	.pipe(uglify())
	.pipe(gulp.dest(Jsdestination+'/casesearchweb/casesearch'));
	
	return gulp.src([jspSrcCS+'/casesearch/*.jsp','!'+jspSrcCS+'/casesearch/searchhome.jsp',jspSrcCS+'/casesearch/*.jsp'])
	.pipe(flatmap(function(stream, file){
              var  filename= path.parse(file.path).name;
              var fileexist=fileExists.sync(Jsdestination+'/casesearchweb/casesearch/'+filename+'.js');
                 return stream
                 .pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
                 .pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/casesearchweb/casesearch/' + filename + '.js"></script>'))))
                 .pipe((gulpif(fileexist,removeEmptyLines())))
                 .pipe(gulp.dest(jspDestCS+'/casesearch/'));
        }));
}

function ct_jsp_copy() {
	return gulp.src([jspSrcCT+'/baseHeader.jsp'])
	.pipe(gulp.dest(jspDestCT));
}

function ct_jsp() {
	return gulp.src([jspSrcCT+'/*.jsp','!'+jspSrcCT+'/baseHeader.jsp'])
	.pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
	.pipe(dom(function(){
		var scripts = this.querySelectorAll('script'), 
		result  = '',
		i       = scripts.length;
		while (i--) {
			result += scripts[i].innerHTML;               
		}
		return result;
	}, false))
	.pipe(ext_replace('.js'))
	.pipe(clip())
	.pipe(uglify())
	.pipe(gulp.dest(Jsdestination+'/casetaskweb/'));
	
	return gulp.src([jspSrcCT+'/*.jsp', '!'+jspSrcCT+'/baseHeader.jsp'])
	.pipe(flatmap(function(stream, file){
              var  filename= path.parse(file.path).name;
              var fileexist=fileExists.sync(Jsdestination+'/casetaskweb/'+filename+'.js');
        return stream
        .pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
        .pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/casetaskweb/' + filename + '.js"></script>'))))
        .pipe((gulpif(fileexist,removeEmptyLines())))
        .pipe(gulp.dest(jspDestCT));
	}));
}

function ct_casetask_copy() {
	return gulp.src([jspSrcCT+'/casetask/home.jsp',jspSrcCT+'/casetask/mytasks.jsp'])
	.pipe(gulp.dest(jspDestCT+'/casetask/')); 
}

function ct_casetask_minify(end) {
	return gulp.src([jspSrcCT+'/casetask/*.jsp','!'+jspSrcCT+'/casetask/home.jsp','!'+jspSrcCT+'/casetask/mytasks.jsp'])
	.pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
	.pipe(dom(function(){
		var scripts = this.querySelectorAll('script'),
		result  = '',
		i       = scripts.length;
		while (i--) {
			result += scripts[i].innerHTML;               
		}
		return result;
	}, false))
	.pipe(debug({tile:'Minifying:'}))
	.pipe(ext_replace('.js'))
	.pipe(clip())
	.pipe(uglify())
	.pipe(gulp.dest(Jsdestination+'/casetaskweb/casetask/'))
	.on('end', end);
}
function ct_casetask() {
	return gulp.src([jspSrcCT+'/casetask/*.jsp','!'+jspSrcCT+'/casetask/home.jsp','!'+jspSrcCT+'/casetask/mytasks.jsp'])
	.pipe(map(function (file, cb) {
		var filename= path.parse(file.path).name; 
		var fileexist=fileExists.sync(Jsdestination+'/casetaskweb/casetask/'+filename+'.js');
		return gulp.src(jspSrcCT+'/casetask/'+filename+'.jsp')
		.pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
		.pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/casetaskweb/casetask/' + filename + '.js"></script>'))))
		.pipe((gulpif(fileexist,removeEmptyLines())))
		.pipe(gulp.dest(jspDestCT+'/casetask/')); 
	}));		
}

function ct_casetask_common() {
	return gulp.src(jspSrcCT+'/casetask/common/*.jsp')
	.pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
	.pipe(dom(function(){
		var scripts = this.querySelectorAll('script'), 
		result  = '',
		i       = scripts.length;
		while (i--) {
			result += scripts[i].innerHTML;               
		}
		return result;
	}, false))
	.pipe(ext_replace('.js'))
	.pipe(clip())
	.pipe(uglify())
	.pipe(gulp.dest(Jsdestination+'/casetaskweb/casetask/common/'));
	
	return gulp.src(jspSrcCT+'/casetask/common/*.jsp')
	.pipe(flatmap(function(stream, file){
		var  filename= path.parse(file.path).name;
		var fileexist=fileExists.sync(Jsdestination+'/casetaskweb/casetask/common/'+filename+'.js');
		return stream
		.pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
		.pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/casetaskweb/casetask/common/' + filename + '.js"></script>'))))
		.pipe((gulpif(fileexist,removeEmptyLines())))
		.pipe(gulp.dest(jspDestCT+'/casetask/common/'));
	}));
}

function ct_casetask_search_minify(end) {
    return gulp.src(jspSrcCT+'/casetask/search/*.jsp')
    .pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
     .pipe(dom(function(){
       var scripts = this.querySelectorAll('script'), 
	   result  = '',
               i       = scripts.length;

           while (i--) {
                         result += scripts[i].innerHTML;               
      }
           return result;
       }, false))
        .pipe(ext_replace('.js'))
      .pipe(clip())
      .pipe(uglify())
      .pipe(gulp.dest(Jsdestination+'/casetaskweb/casetask/search/'))
      .on('end',end);
}
function ct_casetask_search() {
	return gulp.src(jspSrcCT+'/casetask/search/*.jsp')
	.pipe(flatmap(function(stream, file){
		var  filename= path.parse(file.path).name;
		var fileexist=fileExists.sync(Jsdestination+'/casetaskweb/casetask/search/'+filename+'.js');
		return stream
		.pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
		.pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/casetaskweb/casetask/search/' + filename + '.js"></script>'))))
		.pipe((gulpif(fileexist,removeEmptyLines())))
		.pipe(gulp.dest(jspDestCT+'/casetask/search/'));
	}));
}


function cr_jsp_copy() {
	return gulp.src([jspSrcCR+'/baseHeader.jsp'])
	.pipe(gulp.dest(jspDestCR));
}

function cr_jsp() {
	return gulp.src([ '!'+jspSrcCR+'/baseHeader.jsp',jspSrcCR+'/*.jsp'])
	.pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
	.pipe(dom(function(){
		var scripts = this.querySelectorAll('script'), 
		result  = '',
		i       = scripts.length;
		while (i--) {
			result += scripts[i].innerHTML;               
		}
		return result;
	}, false))
	.pipe(ext_replace('.js'))
	.pipe(clip())
	.pipe(uglify())
	.pipe(gulp.dest(Jsdestination+'/caseregistrationweb/'));
	
	return gulp.src([ '!'+jspSrcCR+'/baseHeader.jsp',jspSrcCR+'/*.jsp'])
	.pipe(flatmap(function(stream, file){
		var  filename= path.parse(file.path).name;
		var fileexist=fileExists.sync(Jsdestination+'/caseregistrationweb/'+filename+'.js');
		return stream
		.pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
		.pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseregistrationweb/' + filename + '.js"></script>'))))
		.pipe((gulpif(fileexist,removeEmptyLines())))
			.pipe(gulp.dest(jspDestCR));
	}));  
}

function cr_jsp_copy() {
	return gulp.src([jspSrcCR+'/casereg/caseRegHouseHoldMemberInfo.jsp',jspSrcCR+'/casereg/caseRegistrationHome.jsp'])
	.pipe(gulp.dest(jspDestCR+'/casereg/'));   
}

function cr_casereg_minify(end) {
	return gulp.src([jspSrcCR+'/casereg/*.jsp','!'+jspSrcCR+'/casereg/caseRegHouseHoldMemberInfo.jsp','!'+jspSrcCR+'/casereg/caseRegistrationHome.jsp'])
	.pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
	.pipe(dom(function(){
		var scripts = this.querySelectorAll('script'),
		result  = '',
		i       = scripts.length;
		while (i--) {
			result += scripts[i].innerHTML;               
		}
		return result;
	}, false))
	.pipe(ext_replace('.js'))
	.pipe(clip())
	.pipe(uglify())
	.pipe(gulp.dest(Jsdestination+'/caseregistrationweb/casereg/'))
	.on('end', end);
}

function cr_casereg() {
	return gulp.src([jspSrcCR+'/casereg/*.jsp','!'+jspSrcCR+'/casereg/caseRegHouseHoldMemberInfo.jsp','!'+jspSrcCR+'/casereg/caseRegistrationHome.jsp'])
	.pipe(map(function (file, cb) {
		var filename= path.parse(file.path).name; 
		var fileexist=fileExists.sync(Jsdestination+'/caseregistrationweb/casereg/'+filename+'.js');
		return gulp.src(jspSrcCR+'/casereg/'+filename+'.jsp')
		.pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
		.pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseregistrationweb/casereg/' + filename + '.js"></script>'))))
		.pipe((gulpif(fileexist,removeEmptyLines())))
		.pipe(gulp.dest(jspDestCR+'/casereg/'));   
    }));
}

function cr_common_minify(end) {
	return gulp.src(jspSrcCR+'/common/*.jsp') 
	.pipe(deleteLines({'filters': [/<script\s+type=["']text\/javascript["']\s+src=/i]}))
	.pipe(dom(function(){
		var scripts = this.querySelectorAll('script'),
		result  = '',
		i       = scripts.length;
		while (i--) {
			result += scripts[i].innerHTML;               
		}
		return result;
	}, false))
	.pipe(ext_replace('.js'))
	.pipe(clip())
	.pipe(uglify())
	.pipe(gulp.dest(Jsdestination+'/caseregistrationweb/common/'))
	.on('end',end);
}
function cr_common() {
	return gulp.src(jspSrcCR+'/common/*.jsp')
	.pipe(flatmap(function(stream, file){
		var  filename= path.parse(file.path).name;
		var fileexist=fileExists.sync(Jsdestination+'/caseregistrationweb/common/'+filename+'.js');
		return stream
		.pipe(gulpif(fileexist,replace(/<script(?!.*(src=)).([\s\S]*?)<\/script>/g, '')))
		.pipe((gulpif(fileexist,inject.append('\n<script type="text/javascript" src="/AMPSStaticWeb/static/js/caseregistrationweb/common/' + filename + '.js"></script>'))))
		.pipe((gulpif(fileexist,removeEmptyLines())))
		.pipe(gulp.dest(jspDestCR+'/common/'));
	}));
}

function watch() {
  // gulp.watch(paths.scripts.src, scripts);
  gulp.watch(paths.styles.src, cssCopy);
  gulp.watch(jspSrcAWT+'/baseHeader.jsp', adminweb);
  gulp.watch(jspDestCP, cp_jsp);
}

/*
 * Specify if tasks run in series or parallel using `gulp.series` and `gulp.parallel`
 */
// aw_mcp,
var build = gulp.series(gulp.parallel(cssCopy,jsCopy,adminweb,aw_acctmgmt,aw_acnvmessages,aw_adsd,aw_alertcode,aw_announcement,aw_applmgmt,aw_codemaintain,aw_dashboard,aw_errorhandling,aw_casetransfer,aw_pebt,aw_qc,aw_securitymenu,cp_jsp,cp_casestatus,cp_caseinfo,cp_casesummary,cp_dependent,cp_sche,cp_fedhub,cp_income,cp_medical,cp_member,cp_memberdemographics,cp_parent,cp_rd,cp_resource,cp_shelterexpense,cp_spec,cp_tax,cp_spousal,cp_telephoneapplication,cp_trel,cp_interfaces,ce_jsp,ce_eligibility,ce_eligibility_ao,ce_eligibility_ccpa,ce_eligibility_fmc,ce_eligibility_maabd,ce_eligibility_mcb,ce_eligibility_pe,ce_eligibility_snap,ce_eligibility_tanf,cs_jsp,cs_casesearch,ct_jsp,ct_casetask,ct_casetask_common,ct_casetask_search,cr_casereg,cr_casereg));

/*
 * You can use CommonJS `exports` module notation to declare tasks
 */
exports.cssCopy = cssCopy;
exports.jsCopy = jsCopy;
exports.adminweb = gulp.series(adminweb_copy,adminweb_minify,adminweb);
exports.cp_jsp = gulp.series(cp_jsp_copy,cp_jsp);
exports.cp_casestatus = gulp.series(cp_casestatus_minify,cp_casestatus);
exports.cp_caseinfo = gulp.series(cp_caseinfo_minify,cp_caseinfo);
exports.cp_casesummary = gulp.series(cp_casesummary_copy,cp_casesummary_minify,cp_casesummary);
exports.cp_sche = gulp.series(cp_sche_minify,cp_sche);
exports.cp_dependent = gulp.series(cp_dependent_copy,cp_dependent_conflict,cp_dependent_conflict_careExpense_minify,cp_dependent_conflict_careExpense,cp_dependent_minify,cp_dependent);
exports.cp_fedhub = gulp.series(cp_fedhub_minify,cp_fedhub);
exports.cp_income = gulp.series(cp_income_copy,cp_income_conflict,cp_income_generalAssistance_minify,cp_income_generalAssistance,cp_income_jobIncome_minify,cp_income_jobIncome,cp_income_rentalIncome_minify,cp_income_rentalIncome,cp_income_roomBoardIncome_minify,cp_income_roomBoardIncome,cp_income_unearnedIncome_minify,cp_income_unearnedIncome,cp_income_otherEarnedIncome_minify,cp_income_otherEarnedIncome,cp_income_minify,cp_income);
exports.cp_medical = gulp.series(cp_medical_copy,cp_medical_conflict,cp_medical_conflict_groupLivingArrangement_minify,cp_medical_conflict_groupLivingArrangement,cp_medical_conflict_medicalInsurance_minify,cp_medical_conflict_medicalInsurance,cp_medical_conflict_medicalExpense_minify,cp_medical_conflict_medicalExpense,cp_medical_minify,cp_medical);
exports.cp_member = gulp.series(cp_member_copy,cp_member_conflict_minify,cp_member_conflict,cp_member_minify,cp_member);
exports.cp_memberdemographics = gulp.series(cp_memberdemographics_copy,cp_memberdemographics_conflict,cp_memberdemographics_conflict_alienRefugee_minify,cp_memberdemographics_conflict_alienRefugee,cp_memberdemographics_minify,cp_memberdemographics);
exports.cp_parent = gulp.series(cp_parent_copy,cp_parent_conflict,cp_parent_minify,cp_parent);
exports.cp_rd = gulp.series(cp_rd_minify,cp_rd);
exports.cp_resource = gulp.series(cp_resource_copy,cp_resource_conflict,cp_resource_conflict_financialResource_minify,cp_resource_conflict_financialResource,cp_resource_conflict_lifeBurialResource_minify,cp_resource_conflict_lifeBurialResource,cp_resource_conflict_otherResourceDetail_minify,cp_resource_conflict_otherResourceDetail,cp_resource_conflict_propertyResource_minify,cp_resource_conflict_propertyResource,cp_resource_conflict_transferred_minify,cp_resource_conflict_transferred,cp_resource_conflict_vehicleResource_minify,cp_resource_conflict_vehicleResource,cp_resource_minify,cp_resource);
exports.cp_shelterexpense = gulp.series(cp_shelterexpense_copy,cp_shelterexpense_conflict,cp_shelterexpense_conflict_homeOwnerExpense_minify,cp_shelterexpense_conflict_homeOwnerExpense,cp_shelterexpense_conflict_rentalExpense_minify,cp_shelterexpense_conflict_rentalExpense,cp_shelterexpense_conflict_utilityExpense_minify,cp_shelterexpense_conflict_utilityExpense,cp_shelterexpense_minify,cp_shelterexpense);
exports.cp_spec = gulp.series(cp_spec_copy,cp_spec_conflict,cp_spec_conflict_authorizedRepresentative_minify,cp_spec_conflict_authorizedRepresentative,cp_spec_minify,cp_spec);
exports.cp_tax = gulp.series(cp_tax_copy,cp_tax_conflict,cp_tax_conflict_taxinfo_minify,cp_tax_conflict_taxinfo,cp_tax_conflict_taxmbro_minify,cp_tax_conflict_taxmbro,cp_tax_minify,cp_tax);
exports.cp_spousal = gulp.series(cp_spousal_copy,cp_spousal_minify,cp_spousal);
exports.cp_telephoneapplication = gulp.series(cp_telephoneapplication_copy,cp_telephoneapplication_minify,cp_telephoneapplication);
exports.cp_trel = gulp.series(cp_trel_copy,cp_trel_minify,cp_trel);
exports.cp_interfaces = gulp.series(cp_interfaces_minify,cp_interfaces);

exports.ce_jsp = gulp.series(ce_jsp_copy,ce_jsp);
exports.ce_eligibility = gulp.series(ce_eligibility_copy,ce_eligibility);
exports.ce_eligibility_ao = ce_eligibility_ao;
exports.ce_eligibility_ccpa = ce_eligibility_ccpa;
exports.ce_eligibility_fmc = gulp.series(ce_eligibility_fmc_minify,ce_eligibility_fmc);
exports.ce_eligibility_maabd = ce_eligibility_maabd;
exports.ce_eligibility_mcb = ce_eligibility_mcb;
exports.ce_eligibility_pe = gulp.series(ce_eligibility_pe_minify,ce_eligibility_pe);
exports.ce_eligibility_snap = gulp.series(ce_eligibility_sna_copy,ce_eligibility_snap_minify,ce_eligibility_snap);
exports.ce_eligibility_tanf = gulp.series(ce_eligibility_tanf_copy,ce_eligibility_tanf);

exports.cs_jsp = gulp.series(cs_jsp_copy,cs_jsp);
exports.cs_casesearch = gulp.series(cs_casesearch_copy,cs_casesearch);

exports.ct_jsp = gulp.series(ct_jsp_copy,ct_jsp);
exports.ct_casetask = gulp.series(ct_casetask_copy,ct_casetask_minify,ct_casetask);
exports.ct_casetask_common = ct_casetask_common;
exports.ct_casetask_search = gulp.series(ct_casetask_search_minify,ct_casetask_search);

// exports.cr_jsp = gulp.series(cr_jsp_copy,cr_jsp);
exports.cr_casereg = gulp.series(cr_jsp_copy,cr_casereg_minify,cr_casereg);
exports.cr_common = gulp.series(cr_common_minify,cr_common);
exports.aw_acctmgmt = gulp.series(aw_acctmgmt_minify,aw_acctmgmt);
exports.aw_acnvmessages = gulp.series(aw_acnvmessages_minify,aw_acnvmessages);
exports.aw_adsd = gulp.series(aw_adsd_minify,aw_adsd);
exports.aw_alertcode = gulp.series(aw_alertcode_minify,aw_alertcode);
exports.aw_announcement = gulp.series(aw_announcement_minify,aw_announcement);
exports.aw_applmgmt = gulp.series(aw_applmgmt_minify,aw_applmgmt);
exports.aw_codemaintain = gulp.series(aw_codemaintain_minify,aw_codemaintain);
exports.aw_dashboard = gulp.series(aw_dashboard_minify,aw_dashboard);
exports.aw_errorhandling = gulp.series(aw_errorhandling_minify,aw_errorhandling);
// exports.aw_mcp = gulp.series(aw_mcp_minify,aw_mcp);
exports.aw_casetransfer = gulp.series(aw_casetransfer_minify,aw_casetransfer);
exports.aw_pebt = gulp.series(aw_pebt_minify,aw_pebt);
exports.aw_qc = gulp.series(aw_qc_minify,aw_qc);
exports.aw_securitymenu = gulp.series(aw_securitymenu_minify,aw_securitymenu);
exports.watch = watch;
exports.build = build;
/*
 * Define default task that can be called by just running `gulp` from cli
 */
exports.default = build;