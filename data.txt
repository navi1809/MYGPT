package gov.nv.dwss.casemanagement;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;



import gov.nv.dwss.domain.record.SorRecord;
import gov.nv.dwss.domain.record.sor.BenefitsCaseProgramHistorySorRecord;

@Configuration
public class StubBeanInitializer {

	// method name sould be as json filename,+ given pojo/target class you wanna load the json into


	@Autowired
	TestConfig reader;
//	@Bean("name that you wanna use in when method as mock bean ")
	@SuppressWarnings("unchecked")
	@Bean("cmJobDetails")
	public Map<String,Object> cmJobDetails() throws Exception {
		
		return TestConfig.getStubJsonData(new Object() {}.getClass().getEnclosingMethod().getName(), Map.class);
//		return reader.read(new Object() {}.getClass().getEnclosingMethod().getName(), Map.class);
	}
	
	
	@SuppressWarnings("unchecked")
	@Bean("globalJobDetails")
	public Map<String,Object> globalJobDetails() throws Exception {
		
		return TestConfig.getStubJsonData(new Object() {}.getClass().getEnclosingMethod().getName(), Map.class);
	}
	
	@SuppressWarnings("unchecked")
	@Bean("cmJobParam")
	public List<Map<String,Object>> cmJobParam() throws Exception {
		
		return TestConfig.getStubJsonData(new Object() {}.getClass().getEnclosingMethod().getName(), List.class);
	}
	
//	----------Table data as Bean------------
	

	@SuppressWarnings("unchecked")
	@Bean("eligVersionMemberAndEligVersion")
	public Map<String,List<Map<String,Object>>> eligVersionMemberAndEligVersion() throws Exception { // each object represent one row
		
		return TestConfig.mapStubJsonToObject(new Object() {}.getClass().getEnclosingMethod().getName(), Map.class);
	}

	@Bean("input")
	public List<Long> input() throws Exception {
		
		return TestConfig.mapStubJsonToObject(new Object() {}.getClass().getEnclosingMethod().getName(), List.class);
	}
	
	
	@Bean("testDataForReader_iterator")
	public List<BenefitsCaseProgramHistorySorRecord> testDataForReader_iterator() throws Exception {		
		List<BenefitsCaseProgramHistorySorRecord> stubJsonDataAsList = TestConfig.mapStubJsonToObjectList(new Object() {}.getClass().getEnclosingMethod().getName(), BenefitsCaseProgramHistorySorRecord[].class);
		return stubJsonDataAsList;
	}
	
//	----Writer-----Get All the Expected Data[as bean...this will be to to compare/assert]
	
//	---------------------ALl intermediate read----------

	@Bean("agedOutFstrCare")
	public Map<String,Map<String,String>> agedOutFstrCare() throws Exception {
		
		return TestConfig.mapStubJsonToObject(new Object() {}.getClass().getEnclosingMethod().getName(), Map.class);
	}
	

	@Bean("getDtls")
	public Map<String,Map<String,Object>> getDtls() throws Exception {
		
		return TestConfig.mapStubJsonToObject(new Object() {}.getClass().getEnclosingMethod().getName(), Map.class);
	}

	@Bean("getPersonAgeCalculated")
	public Map<String,Map<String,Object>> getPersonAgeCalculated() throws Exception {
		
		return TestConfig.mapStubJsonToObject(new Object() {}.getClass().getEnclosingMethod().getName(), Map.class);
	}
	@Bean("expectedBgTran")
	public Map<String,Map<String,Object>> expectedBgTran() throws Exception {
		
		return TestConfig.mapStubJsonToObject(new Object() {}.getClass().getEnclosingMethod().getName(), Map.class);
	}
	
	@Bean("expected")
	public Map<String,Map<String,Object>> expected() throws Exception {
		
		return TestConfig.mapStubJsonToObject(new Object() {}.getClass().getEnclosingMethod().getName(), Map.class);
	}
}
