import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.io.FileUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class JspParserEnhanced {

	private static final Pattern FORM_FIELD_PATTERN = Pattern.compile("<(input|select|textarea).*?(name\\s*=\\s*[\"'](.*?)[\"']).*?(type\\s*=\\s*[\"'](.*?)[\"'])?.*?>", Pattern.DOTALL | Pattern.CASE_INSENSITIVE);
	private static final Pattern MODEL_PATTERN = Pattern.compile("<%@\\s*page\\s+.*?import\\s*=\\s*[\"'](.*?)[\"'].*?%>", Pattern.DOTALL | Pattern.CASE_INSENSITIVE);
	private static final Pattern DISPLAY_CONDITION_PATTERN = Pattern.compile("<c:if\\s+test\\s*=\\s*[\"'](.*?)[\"'].*?>(.*?)</c:if>", Pattern.DOTALL | Pattern.CASE_INSENSITIVE);


    public static JspData parse(File jspFile) throws IOException {
        String jspContent = FileUtils.readFileToString(jspFile, "UTF-8");
        return parse(jspContent);
    }

    public static JspData parse(String jspContent) {
        List<FormField> formFields = new ArrayList<>();
        Matcher formFieldMatcher = FORM_FIELD_PATTERN.matcher(jspContent);

        while (formFieldMatcher.find()) {
            String name = formFieldMatcher.group(3);
            String type = formFieldMatcher.group(5);
            if (type == null) {
                if (formFieldMatcher.group(1).equalsIgnoreCase("textarea")) {
                    type = "textarea";
                } else if (formFieldMatcher.group(1).equalsIgnoreCase("select")) {
                    type = "select";
                }
            }

            String displayCondition = extractDisplayCondition(jspContent, formFieldMatcher.start(), formFieldMatcher.end());
            formFields.add(new FormField(type, name, displayCondition));
        }

        List<String> models = new ArrayList<>();
        Matcher modelMatcher = MODEL_PATTERN.matcher(jspContent);
        while (modelMatcher.find()) {
            String[] imports = modelMatcher.group(1).split(",");
            for (String importStr : imports) {
                models.add(importStr.trim());
            }
        }

        return new JspData(formFields, models);
    }

    private static String extractDisplayCondition(String jspContent, int start, int end) {
        Matcher displayConditionMatcher = DISPLAY_CONDITION_PATTERN.matcher(jspContent);
        while (displayConditionMatcher.find()) {
            if (displayConditionMatcher.start() < end && displayConditionMatcher.end() > start) {
                return displayConditionMatcher.group(1);
            }
        }
        return null;
    }


    public static void processJspFiles(File sourceFolder, File outputFolder) throws IOException {
        if (!sourceFolder.isDirectory()) {
            throw new IllegalArgumentException("Source folder must be a directory.");
        }
        if (!outputFolder.exists()) {
            outputFolder.mkdirs();
        }

        File[] jspFiles = sourceFolder.listFiles((dir, name) -> name.endsWith(".jsp"));
        if (jspFiles == null) return;

        for (File jspFile : jspFiles) {
            JspData jspData = parse(jspFile);
            writeDataToExcel(jspData, new File(outputFolder, jspFile.getName().replace(".jsp", ".xlsx")));
        }
    }


    private static void writeDataToExcel(JspData jspData, File outputFile) throws IOException {
        try (Workbook workbook = new XSSFWorkbook(); FileOutputStream outputStream = new FileOutputStream(outputFile)) {
            Sheet formFieldsSheet = workbook.createSheet("Form Fields");
            createHeaderRow(formFieldsSheet, new String[]{"Type", "Name", "Display Condition"});
            int rowNum = 1;
            for (FormField formField : jspData.getFormFields()) {
                Row row = formFieldsSheet.createRow(rowNum++);
                row.createCell(0).setCellValue(formField.getType());
                row.createCell(1).setCellValue(formField.getName());
                row.createCell(2).setCellValue(formField.getDisplayCondition());
            }

            Sheet modelsSheet = workbook.createSheet("Models");
            createHeaderRow(modelsSheet, new String[]{"Model"});
            rowNum = 1;
            for (String model : jspData.getModels()) {
                Row row = modelsSheet.createRow(rowNum++);
                row.createCell(0).setCellValue(model);
            }
            workbook.write(outputStream);
        }
    }

    private static void createHeaderRow(Sheet sheet, String[] headers) {
        Row headerRow = sheet.createRow(0);
        CellStyle style = sheet.getWorkbook().createCellStyle();
        Font font = sheet.getWorkbook().createFont();
        font.setBold(true);
        style.setFont(font);

        for (int i = 0; i < headers.length; i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(headers[i]);
            cell.setCellStyle(style);
            sheet.autoSizeColumn(i);
        }
    }

    public static class JspData {
        private final List<FormField> formFields;
        private final List<String> models;

        public JspData(List<FormField> formFields, List<String> models) {
            this.formFields = formFields;
            this.models = models;
        }

        public List<FormField> getFormFields() { return formFields; }
        public List<String> getModels() { return models; }
    }

    public static class FormField {
        private final String type;
        private final String name;
        private final String displayCondition;

        public FormField(String type, String name, String displayCondition) {
            this.type = type;
            this.name = name;
            this.displayCondition = displayCondition;
        }

        public String getType() { return type; }
        public String getName() { return name; }
        public String getDisplayCondition() { return displayCondition; }
    }




    public static void main(String[] args) throws IOException {
        File sourceFolder = new File("C:/Users/namaddireddy/workspace/AMPS-Modernization-latest/CaseTaskWeb/src/main/webapp/jsp/casetask/common"); // Replace with your source folder
        File outputFolder = new File("C:/Users/namaddireddy/outputGen"); // Replace with your output folder

        processJspFiles(sourceFolder, outputFolder);

        System.out.println("JSP processing complete.  Excel files created in: " + outputFolder.getAbsolutePath());
    }
}
