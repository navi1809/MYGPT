package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.partitioner;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.SnapCharacteristicInputParam;
import gov.nv.dwss.domain.record.sor.CodeTableSorRecord;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.batch.core.partition.support.Partitioner;
import org.springframework.batch.item.ExecutionContext;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;

import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.service.SnapCharacteristicDataService;

@Component
public class SnapCharacteristicPartitioner implements Partitioner {
	
	private static final Logger LOG = LogManager.getLogger(SnapCharacteristicPartitioner.class);

	@Autowired SnapCharacteristicDataService dataService;
	@Value("${ofc-list}") String ofcList;
	
	@Override
	public Map<String, ExecutionContext> partition(int gridSize) {
		loadCodeTableData();

		Map<String, String> offices;
		if (StringUtils.isNotBlank(ofcList)) {
			String officeCodes = Arrays.stream(ofcList.split(",")).map(e -> "'" + e + "'").collect(Collectors.joining(","));
			offices = this.dataService.getOfcDataByOfcCodes(officeCodes);
		} else {
			offices = this.dataService.getOfficeCodes();
		}
		LOG.info("Loaded offices: {}", offices);

		Map<String, ExecutionContext> partitionMap = new HashMap<>();
		if (!CollectionUtils.isEmpty(offices)) {
			for (Map.Entry<String, String> officeMap : offices.entrySet()) {
				ExecutionContext context = new ExecutionContext();
				context.putString("officeCode", officeMap.getKey());
				context.putString("officeName", officeMap.getValue());
				partitionMap.put("partition_" + officeMap.getKey(), context);
			}
		}

		return partitionMap;
	}

	private void loadCodeTableData() {
		List<CodeTableSorRecord> ethnicityCodeTable = this.dataService.getEthnicityCodetable();
		List<CodeTableSorRecord> ipvDisCodeTable = this.dataService.getIPVDISCodetable();
		List<CodeTableSorRecord> uninCodeTable = this.dataService.getUNINCodetable();
		SnapCharacteristicInputParam.setEthnicityCodeTable(ethnicityCodeTable);
		SnapCharacteristicInputParam.setIpvDisCodeTable(ipvDisCodeTable);
		SnapCharacteristicInputParam.setUninCodeTable(uninCodeTable);
	}

}


package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.processor;

import org.apache.commons.lang3.tuple.Pair;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.batch.core.configuration.annotation.StepScope;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.SnapCharacteristicRecord;
import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.service.SnapCharacteristicService;
import gov.nv.dwss.domain.record.sor.BenefitsCaseProgramHistorySorRecord;
import gov.nv.dwss.fw.batch.common.AbstractBatchStepComponent;

import java.util.ArrayList;
import java.util.List;

@Component
@StepScope
public class SnapCharacteristicProcessor extends AbstractBatchStepComponent implements ItemProcessor<Pair<Boolean, BenefitsCaseProgramHistorySorRecord>, SnapCharacteristicRecord> {
	private static final Logger log = LogManager.getLogger(SnapCharacteristicProcessor.class);

	@Autowired SnapCharacteristicService service;
	@Value("#{stepExecutionContext['officeName']}") private String ofcNm;
	@Value("#{stepExecutionContext['officeCode']}") private String ofcCd;
	List<BenefitsCaseProgramHistorySorRecord> buffer = new ArrayList<>();
	
	@Override
	public SnapCharacteristicRecord process(Pair<Boolean, BenefitsCaseProgramHistorySorRecord> programHistoryRecordPair) throws Exception {
		buffer.add(programHistoryRecordPair.getRight());
		if (!programHistoryRecordPair.getLeft()) return null;

		log.info("Processing BenefitsCaseProgramHistory for officeCode: {} - size: {}", ofcCd, buffer.size());
		return this.service.processSnapCharacteristicDetail(buffer, ofcNm, ofcCd);
	}

}


package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.reader;

import java.util.ArrayList;
import java.util.List;

import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.SnapCharacteristicInputParam;
import gov.nv.dwss.domain.record.sor.CodeTableSorRecord;
import org.apache.commons.lang3.tuple.Pair;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.batch.core.configuration.annotation.StepScope;
import org.springframework.batch.item.ItemReader;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;

import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.service.SnapCharacteristicDataService;
import gov.nv.dwss.domain.record.sor.BenefitsCaseProgramHistorySorRecord;
import gov.nv.dwss.fw.batch.common.AbstractBatchStepComponent;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;

import javax.annotation.PostConstruct;

@StepScope
@Component
public class SnapCharacteristicReader extends AbstractBatchStepComponent implements ItemReader<Pair<Boolean, BenefitsCaseProgramHistorySorRecord>>{

	private static final Logger log = LogManager.getLogger(SnapCharacteristicReader.class);
	
	@Autowired SnapCharacteristicDataService dataService;
	@Value("#{stepExecutionContext['officeCode']}") private String officeCode;

	private static final int PAGE_SIZE = 1000;
	private List<BenefitsCaseProgramHistorySorRecord> currentPage = new ArrayList<>();
	private int pageIndex = 0;
	private int recordIndex = 0;
	private int totalCount = 0;


	@PostConstruct
	public void init() {
		totalCount = this.dataService.countProgramCaseHistory(officeCode);
		log.info("Fetched ProgramCaseHistoryCount, officeCode: {} - totalCount: {}", officeCode, totalCount);
	}

	@Override
	public Pair<Boolean, BenefitsCaseProgramHistorySorRecord> read() {
		// Load next page if current page is exhausted
		if (recordIndex >= currentPage.size()) {
			int startIndex = (pageIndex * PAGE_SIZE);
			if ((pageIndex * PAGE_SIZE) >= totalCount) return null; // No more pages

			int fromRow = startIndex + 1;
			int toRow = startIndex + PAGE_SIZE;
			/* FETCHING ONGOING FS CASES FOR GIVEN OFFICE */
			currentPage = this.dataService.getProgramCaseHistoryWithPagination(officeCode, fromRow, toRow);

			log.info("Fetched ProgramCaseHistories for officeCode: {} and size: {}", officeCode, currentPage.size());
			if (CollectionUtils.isEmpty(currentPage)) {
				log.info("ProgramCaseHistories not found for officeCode: {}", officeCode);
				return null;
			}

			pageIndex++;
			recordIndex = 0;
		}

		BenefitsCaseProgramHistorySorRecord programHistoryRecord = currentPage.get(recordIndex++);
		int absoluteIndex = (pageIndex - 1) * PAGE_SIZE + recordIndex;

		boolean isLastRecord = (absoluteIndex == totalCount);

		return Pair.of(isLastRecord, programHistoryRecord);
	}

}


package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.service;

import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.QueryConstants.*;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.DateUtil.firstDay;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.DateUtil.lastDay;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.DateUtil.month;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.DateUtil.reportBegDtTs;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.DateUtil.reportEndDtTs;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.DateUtil.year;
import static gov.nv.dwss.fw.batch.util.ObjectUtils.*;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.*;

import gov.nv.dwss.fw.batch.context.SystemInfoParam;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;

import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.mapper.*;
import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.*;
import gov.nv.dwss.domain.record.sor.*;
import gov.nv.dwss.fw.batch.common.AbstractSorDataService;
import gov.nv.dwss.fw.batch.constants.FWConstants;

package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.tasklet;

import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.SnapCharacteristicReport;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.stereotype.Component;

@Component
public class SnapCharacteristicInitTasklet implements Tasklet {
    @Override
    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) {
        SnapCharacteristicReport.getSnapCharacteristicRecords().clear();
        return RepeatStatus.FINISHED;
    }
}





package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.tasklet;

import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.SnapCharacteristicRecord;
import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.SnapCharacteristicReport;
import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.SnapCharacteristicStateWideRecord;
import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.service.SnapCharacteristicDataService;
import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.service.SnapCharacteristicService;
import gov.nv.dwss.domain.dao.sor.ReportSnapStatisticsSorDao;
import gov.nv.dwss.domain.record.SorRecord;
import gov.nv.dwss.domain.record.sor.ReportSnapStatisticsSorRecord;
import gov.nv.dwss.fw.batch.common.AbstractBatchStepComponent;
import gov.nv.dwss.fw.batch.exception.BatchBusinessException;
import gov.nv.dwss.switcher.DatabaseSwitcher;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.batch.repeat.RepeatStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.datasource.DataSourceUtils;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static gov.nv.dwss.fw.batch.enums.BatchExceptionType.SQL_EXCEPTION;
import static gov.nv.dwss.fw.batch.util.ExceptionUtil.batchBusinessException;
import static java.util.Collections.singletonList;
import static java.util.stream.Collectors.toList;

@Component
public class SnapCharacteristicInsertTasklet extends AbstractBatchStepComponent implements Tasklet {

    private static final Logger log = LogManager.getLogger(SnapCharacteristicInsertTasklet.class);

    @Autowired private ReportSnapStatisticsSorDao snapStatisticsSorDao;
    @Autowired private SnapCharacteristicService snapCharacteristicService;
    @Autowired SnapCharacteristicDataService snapCharacteristicDataService;
    @Autowired @Qualifier(value = "nswdDataSource") DataSource nswdDataSource;
    @Autowired DatabaseSwitcher databaseSwitch;
    @Value("${db.nswd.schema}") private String nswdSchemaName;

    @Override
    public RepeatStatus execute(StepContribution contribution, ChunkContext chunkContext) throws Exception {
        // Fetching SnapCharacteristicRecord - all offices
        List<SnapCharacteristicRecord> snapCharRecords = SnapCharacteristicReport.getSnapCharacteristicRecords();
        logList("Processing SnapCharacteristicRecords to prepare the report data", snapCharRecords);

        List<ReportSnapStatisticsSorRecord> snapStatisticsSorRecords = new ArrayList<>();

        // Preparing Report Data - office wise
        snapStatisticsSorRecords = snapCharacteristicService.mapToReportData(snapCharRecords, snapStatisticsSorRecords);
        logList("Office wide SnapCharacteristicRecords", snapStatisticsSorRecords);

        // Preparing Report Data - statewide totals
        SnapCharacteristicStateWideRecord stateWideRecord = snapCharacteristicService.populateStateWideTotals(snapCharRecords);
        snapStatisticsSorRecords = snapCharacteristicService.mapToReportData(singletonList(stateWideRecord), snapStatisticsSorRecords);
        // Trim report category if needed
        snapStatisticsSorRecords.forEach(d -> {
            String category = d.getReportCategory();
            if (category != null && category.length() > 30) d.setReportCategory(category.substring(0, 30));
        });
        logList("SnapCharacteristicRecords with Statewide", snapStatisticsSorRecords);

        // Persisting the report data for all the offices with statewide totals.
        writeReportData(snapStatisticsSorRecords);
        return RepeatStatus.FINISHED;
    }

    private void writeReportData(List<ReportSnapStatisticsSorRecord> reportData) throws SQLException, BatchBusinessException {
        Map<String, List<ReportSnapStatisticsSorRecord>> groupedRptData =
                reportData.stream().collect(Collectors.groupingBy(d -> d.getKey().getOfficeCode()));

        Connection connection = DataSourceUtils.getConnection(nswdDataSource);
        try {
            snapCharacteristicDataService.deleteAllFoodStatsReportData();
            databaseSwitch.switchDataSourceAndSchema(snapStatisticsSorDao, nswdSchemaName, nswdDataSource);
            for(Map.Entry<String, List<ReportSnapStatisticsSorRecord>> rptData: groupedRptData.entrySet()) {
                String ofcCd = rptData.getKey();
                List<ReportSnapStatisticsSorRecord> ofcRecToPersist = rptData.getValue();
                log.info("Persisting Report data for ofcCd: {}, reportData size: {}", ofcCd, ofcRecToPersist.size());
                if (!CollectionUtils.isEmpty(ofcRecToPersist)) {
                    List<SorRecord> sorRecordList = ofcRecToPersist.stream().map(d -> (SorRecord) d).collect(toList());
                    snapStatisticsSorDao.batchInsert(sorRecordList);
                    log.info("Persisted Report data for ofcCd: {}, reportData size: {}", ofcCd, ofcRecToPersist.size());
                }
            }
            connection.commit();
            log.info("Persisted Report data, committed...");
        } catch (Exception e) {
            final String msg = "Exception occurred while inserting the SnapCharacteristicReportData";
            log.error(msg);
            connection.rollback();
            throw batchBusinessException(SQL_EXCEPTION, msg, null, null, "snapCharacteristicStudyBatch", e);
        } finally {
            DataSourceUtils.releaseConnection(connection, nswdDataSource);
        }
    }

    private <T> void logList(String label, List<T> list) {
        log.info("{} (size: {})", label, list.size());
    }

}



package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util;

import java.util.*;

import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_0_5;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_13_15;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_16_17;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_18_20;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_21_25;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_26_30;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_31_35;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_36_40;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_41_45;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_46_50;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_51_55;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_56_59;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_6;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_60_PLUS;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_7_12;
import static java.util.Collections.singletonList;

public class CategoryUtil {

    private CategoryUtil() {}

    public static final List<String> Q01CAT = singletonList("TOTAL ACTIVE CASES");
    public static final List<String> Q02CAT = singletonList("TOTAL PEOPLE ON ACTIVE CASES");
    public static final List<String> Q03CAT = singletonList("CASES ON MONTHLY REPORTING");

    public static List<String> getQ04CAT() {
        return Arrays.asList("PA CASES", "NA CASES");
    }

    public static final List<String> Q06CAT = singletonList("AVERAGE HOUSEHOLD-SIZE");
    public static final List<String> Q14CAT = singletonList("INDIVIDUALS WITH MEDICAL EXPENSES");
    public static final List<String> Q15CAT = singletonList("CASES WITH MEDICAL EXPENSES");
    public static final List<String> Q16CAT = singletonList("AVERAGE MEDICAL EXPENSE (AFTER $35 DEDUCTION)");
    public static final List<String> Q18CAT = singletonList("CASES WITH AUTHORIZED REPRESENTATIVE");
    public static final List<String> Q19CAT = singletonList("CASES WITH INCOME");
    public static final List<String> Q21CAT = singletonList("AVERAGE-GROSS-INCOME - ALL CASES WITH INCOME");
    public static final List<String> Q26CAT = singletonList("CASES ON FULL SUA");
    public static final List<String> Q27CAT = singletonList("CASES ON PARTIAL SUA");
    public static final List<String> Q28CAT = singletonList("CASES WITH DEPENDENT CARE EXPENSE");
    public static final List<String> Q29CAT = singletonList("AVERAGE DEPENDENT CARE");
    public static final List<String> Q30CAT = singletonList("CASES ON ACTUAL UTILITIES");
    public static final List<String> Q31CAT = singletonList("AVERAGE ACTUAL UTILITY COST");
    public static final List<String> Q32CAT = singletonList("AVERAGE COMBINED SHELTER & UTILITIES");
    public static final List<String> Q36CAT = singletonList("AVERAGE ASSIGNED CERT PERIOD (IN MONTHS)");
    public static final List<String> Q38CAT = singletonList("CASES WITH BENEFIT REDUCTION");
    public static final List<String> Q40CAT = singletonList("AVERAGE ACTUAL CERT PERIOD");
    public static final List<String> Q41CAT = singletonList("REINSTATEMENTS WITHIN 30 DAYS OF TERMINATION FOR ANNUAL REPORTING NONCOMPLIANCE");
    public static final List<String> Q42CAT = singletonList("REAPPLICATIONS WITHIN 30 DAYS OF TERMINATION FOR ANNUAL REPORTING NONCOMPLIANCE");
    public static final List<String> Q43CAT = singletonList("AVERAGE APP/REAPP PROCESSING TIME (IN DAYS) FOR APPROVED CASES");
    public static final List<String> Q44CAT = singletonList("AVERAGE APP/REAPP PROCESSING TIME (IN DAYS) FOR DENIALS");
    public static final List<String> Q45CAT = singletonList("AVERAGE APP/REAPP PROCESSING TIME (IN DAYS) FOR ALL CASES");

    public static List<String> getQ05CAT() {
        return Arrays.asList("HH-1", "HH-2", "HH-3", "HH-4", "HH-5", "HH-6", "HH-7+");
    }

    public static List<String> getQ07CAT() {
        return Arrays.asList(
                AGE_0_5, AGE_6, AGE_7_12, AGE_13_15, AGE_16_17, AGE_18_20, AGE_21_25, AGE_26_30,
                AGE_31_35, AGE_36_40, AGE_41_45, AGE_46_50, AGE_51_55, AGE_56_59, AGE_60_PLUS
        );
    }

    public static List<String> getQ08CAT() {
        return Arrays.asList(
                "DISQUALIFIED INDIVIDUALS - IPV", "A0", "A1", "A2", "A3", "A4",
                "F0", "F1", "F2", "F3", "F4", "O4", "T2", "T3", "W0", "W1", "W2", "W3", "W4"
        );
    }

    public static List<String> getQ09CAT() {
        return Arrays.asList("DISQUALIFIED INDIVIDUALS - OTHER", "SSN", "CTZN", "FELON", "DRUG");
    }

    public static List<String> getQ10CAT() {
        return Arrays.asList("A", "B", "C", "D", "E", "F", "G", "I", "J", "K", "L", "M", "N", "P", "Q", "R", "T", "U", "V", "W", "Y", "Z", "UN");
    }

    public static List<String> getQ11CAT() {
        return Arrays.asList("MALE", "FEMALE");
    }

    public static List<String> getQ13CAT() {
        return Arrays.asList("CASES WITH 60+ AGE AND/OR DISABLED & OTHERS", "CASES WITH ONLY 60+ AGE AND/OR DISABLED");
    }

    public static List<String> getQ20CAT() {
        return Arrays.asList(
                "CASES WITH EARNED INCOME", "CASES WITH UNEARNED INCOME", "GAGA", "TANF", "EDIN",
                "01", "02", "03", "04", "05", "06", "07", "08", "09", "10",
                "11", "12", "13", "14", "15", "16", "17", "18", "19", "20",
                "21", "22", "23", "24", "25", "26", "27", "28", "29", "30",
                "31", "32", "33", "34", "35", "36", "37", "38", "39", "40",
                "41", "42", "43", "45", "46", "47", "48", "49", "50", "51",
                "52", "53", "54", "55", "56", "57", "58", "59", "60", "61",
                "98", "99"
        );
    }

    public static List<String> getQ22CAT() {
        return Arrays.asList(
                "AVERAGE-GROSS-INCOME - ALL PA CASES",
                "AVERAGE-GROSS-INCOME - ALL NA CASES",
                "AVERAGE-GROSS-INCOME - PA CASES WITH INCOME",
                "AVERAGE-GROSS-INCOME - NA CASES WITH INCOME"
        );
    }

    public static List<String> getQ23CAT() {
        return Arrays.asList(
                "AVERAGE-GROSS-INCOME - ELDERLY/DISABLED CASES WITH INCOME",
                "AVERAGE-GROSS-INCOME - ALL ELDERLY/DISABLED CASES"
        );
    }

    public static List<String> getQ24CAT() {
        return Arrays.asList(
                "AVERAGE EARNED INCOME", "AVERAGE UNEARNED INCOME", "GAGA", "TANF", "EDIN",
                "01", "02", "03", "04", "05", "06", "07", "08", "09", "10",
                "11", "12", "13", "14", "15", "16", "17", "18", "19", "20",
                "21", "22", "23", "24", "25", "26", "27", "28", "29", "30",
                "31", "32", "33", "34", "35", "36", "37", "38", "39", "40",
                "41", "42", "43", "45", "46", "47", "48", "49", "50", "51",
                "52", "53", "54", "55", "56", "57", "58", "59", "60", "61",
                "98", "99"
        );
    }

    public static List<String> getQ25CAT() {
        return Arrays.asList("AVERAGE RENT/MORTGAGE", "CASES WITH RENT/MORTGAGE");
    }

    public static List<String> getQ33CAT() {
        return Arrays.asList(
                "CASES WITH NO SHELTER OR UTILITIES EXPENSE",
                "CASES WITH SHELTER OR UTILITIES EXPENSE",
                "CASES WITH ANY EXPENSE"
        );
    }

    public static List<String> getQ34CAT() {
        return Arrays.asList(
                "AVERAGE ONGOING BENEFIT - ALL CASES",
                "AVERAGE ONGOING BENEFIT - PA",
                "AVERAGE ONGOING BENEFIT - NA"
        );
    }

    public static List<String> getQ35CAT() {
        return Arrays.asList("HH-01", "HH-02", "HH-03", "HH-04", "HH-05", "HH-06", "HH-07+");
    }

    public static List<String> getQ37CAT() {
        return Arrays.asList(
                "1 MO", "2 MO", "3 MO", "4 MO", "5 MO", "6 MO", "7 MO", "8 MO", "9 MO", "10 MO", "11 MO", "12 MO", "24 MO"
        );
    }

    public static List<String> getQ39CAT() {
        return Arrays.asList(
                "EFF 01", "EFF 02", "EFF 03", "EFF 04", "EFF 05", "EFF 06", "EFF 07", "EFF 08", "EFF 09", "EFF 10",
                "EFF 11", "EFF 12", "EFF 13", "EFF 14", "EFF 15", "EFF 16", "EFF 17", "EFF 18", "EFF 19", "EFF 20",
                "EFF 21", "EFF 22", "EFF 23", "EFF 24", "EFF 25", "EFF 26", "EFF 27", "EFF 28", "EFF 29", "EFF 30", "EFF 31"
        );
    }

    public static List<String> getQ46CAT() {
        return Arrays.asList("HOUSEHOLD HEADS >=18 - NO SPOUSE", "HOUSEHOLD HEADS >=18 - WITH SPOUSE");
    }

    public static List<String> getQ47CAT() {
        return Arrays.asList("HOUSEHOLD HEADS >15 AND <18NS", "HOUSEHOLD HEADS >15 AND <18WS", "NUMBER OF HOMELESS CASES");
    }

}



package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util;

import gov.nv.dwss.fw.batch.context.SystemInfoParam;

import java.util.Date;

import static gov.nv.dwss.fw.batch.util.ObjectUtils.convertToDate;
import static gov.nv.dwss.fw.batch.util.ObjectUtils.getFirstDayOfMonth;
import static gov.nv.dwss.fw.batch.util.ObjectUtils.getFormattedSQLDate;
import static gov.nv.dwss.fw.batch.util.ObjectUtils.getLastDayOfMonth;
import static gov.nv.dwss.fw.batch.util.ObjectUtils.getMonth;
import static gov.nv.dwss.fw.batch.util.ObjectUtils.getYear;

public class DateUtil {

    private DateUtil() {}

    private static Date asOfDate() {
        return convertToDate(SystemInfoParam.getAsOfDate());
    }

    public static String firstDay() {
        return getFormattedSQLDate(getFirstDayOfMonth(asOfDate()));
    }

    public static String lastDay() {
        return getFormattedSQLDate(getLastDayOfMonth(asOfDate()));
    }

    public static int year() {
        return getYear(asOfDate());
    }

    public static int month() {
        return getMonth(asOfDate());
    }

    public static String reportBegDtTs(String date) {
        return date + "-00.00.00.000000";
    }

    public static String reportEndDtTs(String date) {
        return date + "-23.59.59.999999";
    }
}



package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.writer;

import java.util.List;

import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.SnapCharacteristicReport;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.batch.core.configuration.annotation.StepScope;
import org.springframework.batch.item.ItemWriter;
import org.springframework.stereotype.Component;

import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.SnapCharacteristicRecord;
import gov.nv.dwss.fw.batch.common.AbstractBatchStepComponent;

@Component
@StepScope
public class SnapCharacteristicWriter extends AbstractBatchStepComponent implements ItemWriter<SnapCharacteristicRecord> {

	private static final Logger log = LogManager.getLogger(SnapCharacteristicWriter.class);

	@Override
	public void write(List<? extends SnapCharacteristicRecord> snapCharacteristicRecords) throws Exception {
		if (!snapCharacteristicRecords.isEmpty()) {

			for (SnapCharacteristicRecord snapCharacteristicRecord : snapCharacteristicRecords) {
				// Adding SnapCharacteristicReportData List into static List.
				String ofcCd = snapCharacteristicRecord.getOfficeCode();
				log.info("Adding SnapCharacteristicRecord into SnapCharacteristicReport for officeCode: {}", ofcCd);
				SnapCharacteristicReport.getSnapCharacteristicRecords().add(snapCharacteristicRecord);
			}
		}
	}
	
}