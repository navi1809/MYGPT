//ILIES-231565: Check if SSN already exists in CV_DC_MCI_INDV table
    private boolean checkSSNFileClearance(T1004AppIndvCargo t1004AppIndvCargo) throws Exception{
    	CvDcMciIndvCargo cvDcMciIndvCargo = null;
    	CvDcMciIndvCollection cvDcMciIndvColl = new CvDcMciIndvCollection(connection);
    	try{
    		if(t1004AppIndvCargo.getSsnNum() != 0){
				cvDcMciIndvColl.clear();
				cvDcMciIndvCargo = new CvDcMciIndvCargo();
				cvDcMciIndvCargo.setSsn(t1004AppIndvCargo.getSsnNum());
				cvDcMciIndvColl.setCargo(cvDcMciIndvCargo);
				CvDcMciIndvCargo[] results = (CvDcMciIndvCargo[])cvDcMciIndvColl.select("findBySsnForSdx");
				if(results != null && results.length > 0){
					return true;
				}
			}
    		return false;
    	}catch(Exception e){
			log(ILog.ERROR, "Exception in AutoRegistrationBO.checkSSNFileClearance():" + "\n" + e.getMessage() + "\n", e);
    		throw e;
    	}    	
    }
    
	public boolean existingActiveCaseCheck(String appNum, Map indvMap) throws Exception {
		log(7, "Begin AutoRegistrationBO.existingActiveCaseCheck() ");

		DcCaseIndividualCargo dcCaseIndvCargo = new DcCaseIndividualCargo();
		DcCaseIndividualCollection dcCaseIndvColl = new DcCaseIndividualCollection(connection);
		DcCasesCargo dcCaseCargo = new DcCasesCargo();
		EdEligibilityCollection edEligColl = new EdEligibilityCollection(connection);
		DcCaseIndividualCargo[] dcCaseIndvCargoArray = null;
		DcCasesCargo[] dcCaseCargoArray = null;
		DcCasesCargo[] dcCaseTempArray = null;
		ArApplicationForAidCargo[] arAppForAidCargoArray = null;
		EdEligibilityCargo[] edEligCargoArray = null;
		ArAppIndvCollection arAppIndvColl = new ArAppIndvCollection(connection);
		ArAppIndvCargo arAppIndvCargo = new ArAppIndvCargo();
		ArApplicationForAidCargo arApplicationForAidCargo = new ArApplicationForAidCargo();
		ArApplicationForAidCollection arApplicationForAidColl = new ArApplicationForAidCollection(connection);
		ArApplicationForAidCargo[] arApplicationForAidCargoArray = null;
		DcCaseProgramIndvCargo dcCaseProgramIndvCargo = new DcCaseProgramIndvCargo();
		DcCaseProgramIndvCollection dcCaseProgramIndvColl = new DcCaseProgramIndvCollection(connection);
		DcCaseProgramIndvCargo[] dcCaseProgramIndvCargoArray = null;
		ArAppProgramIndvCargo arAppProgramIndvCargo = new ArAppProgramIndvCargo();
		ArAppProgramIndvCollection arAppProgramIndvColl = new ArAppProgramIndvCollection(connection);
		ArAppProgramIndvCargo[] arAppProgramIndvCargoArray = null;
		ArAppProgramIndvCargo arAppProgIndvCargo = new ArAppProgramIndvCargo();
		ArAppProgramIndvCollection arAppPgmIndvColl = new ArAppProgramIndvCollection(connection);
		ArAppProgramIndvCargo[] arAppPgmIndvCargoArray = null;
		long caseClosed90Days = 0;
		long caseDenied60Days = 0;
		boolean lisMSPApp = false;
		Timestamp closureDate = null;

		boolean indvCaseCheck = true;
		String autoRegStatus = "";
		long caseInPast = 0;
		associatedAppNumStr = null;
		mspPgmStatrtDt = new Timestamp(cal.getTimeInMillis());
		try {
			if (indvMap == null || indvMap.size() == 0)
				return false;

			// Start - REDE Check sfdsf
			if (autoRegT1001Cargo.getAppMode() != null && autoRegT1001Cargo.getAppMode().equals(AppRegConstants.SS_APP_MODE)) {
				if (appHPECategory && autoRegT1002Cargo.getFsRqstSw() != 'Y' && autoRegT1002Cargo.getCashRqstSw() != 'Y' && autoRegT1002Cargo.getMaRqstSw() != 'Y' && autoRegT1002Cargo.getMcRqstSw() != 'Y') {
					log(7, " AutoRegistrationBO.existingActiveCaseCheck() : Only HPE Application. Not applicable for REDE ");

				} else {
					log(7, " AutoRegistrationBO.existingActiveCaseCheck() : REDE Check :: Checking for Existing indv ");
					Long appExtIndvId = 0L;
					for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
						if (autoRegT1004CargoArray[i].getPrimPrsnSw() == 'Y' && indvMap.containsKey((int) autoRegT1004CargoArray[i].getIndvSeqNum())
								&& ((Long) indvMap.get((int) autoRegT1004CargoArray[i].getIndvSeqNum()) != 0L)) {
							// PMD_Override - R10 - The casting of this numeric/byte type does not need to be addressed because it will not exceed the int value.
							PMDRules.markApprovedStatement("R10");
							appExtIndvId = (Long) indvMap.get((int) autoRegT1004CargoArray[i].getIndvSeqNum());
							break;
						}
					}
					log(7, " AutoRegistrationBO.existingActiveCaseCheck() : REDE Check :: Existing indv ID " + appExtIndvId);
					if (appExtIndvId != 0) {
						log(7, " AutoRegistrationBO.existingActiveCaseCheck() : REDE Check Started ");
						try {
							if (!appREDECheck(appNum, indvMap)) {
								return false;
							}
						} catch (Exception e) {
							log(ILog.ERROR, "Exception in AutoRegistrationBO.existingActiveCaseCheck():: appREDECheck---: appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
							autoRegStatus = AppRegConstants.AUTO_REG_PROCESS_AC;

							throw e;

						}
						log(7, " AutoRegistrationBO.existingActiveCaseCheck() : REDE Check End ");
					}
				}
			}

			// End - REDE Check
			int size = indvMap.size();
			for (Object key : indvMap.keySet()) {
			    long indvId = (Long) indvMap.get(key);
				if (indvId == 0) {
					continue;
				}
				//SSA - LIS MSP changes : ILIES-291947
				log(7," AutoRegistrationBO.existingActiveCaseCheck() :Is SSA-LIS MSP apps:"+appSSALISMSPCategory);
				System.out.println(" AutoRegistrationBO.existingActiveCaseCheck() :Is SSA-LIS MSP apps:"+appSSALISMSPCategory);
				if (appSSALISMSPCategory)
				{
					boolean isPrimary = false;
					if (autoRegT1004CargoArray != null && autoRegT1004CargoArray.length > 0)
					{
						for (T1004AppIndvCargo cargo : autoRegT1004CargoArray)
						{
							char mcReqSw = cargo.getMcRqstSw();
							int indvSeqNum = (int) cargo.getIndvSeqNum();
							int keySeqNum = (Integer) key;
							if ('Y' == mcReqSw && keySeqNum == indvSeqNum)
							{
								isPrimary = true;
								log(7, " AutoRegistrationBO.existingActiveCaseCheck() :Primary Indv who is requesting for SSA-LIS MSP : " + indvId);
								System.out.println(" AutoRegistrationBO.existingActiveCaseCheck() : Primary Indv who is requesting for SSA-LIS MSP :: " + indvId);
								break;
							}
						}
					}
					if (isPrimary)
					{
						log(7, " AutoRegistrationBO.existingActiveCaseCheck() :Start SSA-LIS MSP apps:" + indvId);
						System.out.println(" AutoRegistrationBO.existingActiveCaseCheck() :Start SSA-LIS MSP apps:" + indvId);

						// To check individual not in Pending/Registered Application
						arAppIndvCargo.setIndvId(indvId);
						arAppIndvColl.add(arAppIndvCargo);
						arAppForAidCargoArray = (ArApplicationForAidCargo[]) arAppIndvColl.select("findArAppsByIndvId");
						if (arAppForAidCargoArray != null && arAppForAidCargoArray.length > 0)
						{
							Set<String> appNumSet = new HashSet<String>();
							if (arAppForAidCargoArray[0].getApplicationStatusCd().equals(AppRegConstants.AUTO_REG_AP)
									|| arAppForAidCargoArray[0].getApplicationStatusCd().equals(AppRegConstants.AUTO_REG_AC))
							{
								for (ArApplicationForAidCargo aidCargo : arAppForAidCargoArray)
								{
									if (aidCargo.getApplicationStatusCd().equals(AppRegConstants.AUTO_REG_AP)
											|| aidCargo.getApplicationStatusCd().equals(AppRegConstants.AUTO_REG_AC))
									{
										appNumSet.add(aidCargo.getAppNum());
									}
								}
								arAppPgmIndvCargoArray = getArAppProgramIndvAllCargos(String.valueOf(indvId));
								if (arAppPgmIndvCargoArray != null && arAppPgmIndvCargoArray.length > 0)
								{
									// indvCaseCheck = false;
									autoRegStatus = AppRegConstants.AUTO_REG_PROCESS_PA;
									for (ArAppProgramIndvCargo cargo : arAppPgmIndvCargoArray)
									{
										if ("MC".equalsIgnoreCase(cargo.getProgramCd()) && appNumSet.contains(cargo.getAppNum()))
										{
											lisMSPApp = true;
											associatedAppNumStr = cargo.getAppNum();
											ArAppProgramCargo[] arAppProgramCargos = getmspPrgmStDt(cargo.getAppNum());
											if (arAppProgramCargos != null && arAppProgramCargos.length > 0 && arAppProgramCargos[0].getRequestDt() != null)
											{
												mspPgmStatrtDt = arAppProgramCargos[0].getRequestDt();
												break;
											}
											log(7, " AutoRegistrationBO.existingActiveCaseCheck() :Existing MSP application found for indv : " + indvId);
											System.out.println(" AutoRegistrationBO.existingActiveCaseCheck() :Existing MSP application found for indv : " + indvId);
										}
									}
								}
							}
						}
						List argumentsList = new ArrayList();
						List pendingArgumentsList = new ArrayList();
						// To check individual not on pending case
						dcCaseIndvCargo.setIndvId(indvId);
						dcCaseIndvColl.add(dcCaseIndvCargo);
						dcCaseCargoArray = (DcCasesCargo[]) dcCaseIndvColl.select("findActiveCaseIndvId");
						if (dcCaseCargoArray != null && dcCaseCargoArray.length > 0)
						{
							for (int i = 0; i < dcCaseCargoArray.length; i++)
							{
								//Hirerachy changes
								if (dcCaseCargoArray[i].getCaseStatusCd().equals(AppRegConstants.AUTO_REG_AP))
								{
									argumentsList.add(dcCaseCargoArray[i].getCaseNum());
 
									// New-Check if we have approved MSP Case
 
									Object[] methodArgs = new Object[1];
 
									methodArgs[0] = argumentsList;
									log(7, " AutoRegistrationBO.existingActiveCaseCheck() :Check case details for case " + argumentsList);
									System.out.println(" AutoRegistrationBO.existingActiveCaseCheck() :Check case details for case " + argumentsList);
									edEligCargoArray = (EdEligibilityCargo[]) edEligColl.select("findActiveOngoingCaseLIS", methodArgs);// use in query to get
																																		// ongoing benefits
									if (edEligCargoArray != null && edEligCargoArray.length > 0)
									{
										for (int j = 0; j < edEligCargoArray.length; j++)
										{
											if ("MC".equalsIgnoreCase(edEligCargoArray[j].getProgramCd()))
											{// First check if we have any Active MSP Case
												autoRegStatus = AppRegConstants.AUTO_REG_PROCESS_AC;
												indvCaseCheck = false;
												break;
											}
										}
 
									}
 
								}
 
								if (indvCaseCheck && dcCaseCargoArray[i].getCaseStatusCd().equals(AppRegConstants.AUTO_REG_PE))
								{
									pendingArgumentsList.add(dcCaseCargoArray[i].getCaseNum());
									// start-Check if we have any Pending MSP Case
									if (checkPendingMSPCase(dcCaseCargoArray[i], indvId))
									{
										indvCaseCheck = false;
										log(7, " AutoRegistrationBO.existingActiveCaseCheck() : LIS MSP indv assoicated to a penindg case with MSP:"
												+ dcCaseCargoArray[i].getCaseNum());
										System.out.println(" AutoRegistrationBO.existingActiveCaseCheck() :LIS MSP indv assoicated to a penindg case with MSP:"
												+ indvId);
										autoRegStatus = AppRegConstants.AUTO_REG_PROCESS_PC;
									}
 
								}
 
							}
							if(indvCaseCheck)
							{
								// If Approved MSP Cases is not found then check if we have Approved Cases without MSP
								if (indvCaseCheck && !argumentsList.isEmpty() && argumentsList.size() > 0 && !lisMSPApp)
								{
									Object[] methodArgs = new Object[1];
									// List argumentsList = new ArrayList();
									// argumentsList.add(dcCaseCargoArray[i].getCaseNum());
									methodArgs[0] = argumentsList;
									log(7, " AutoRegistrationBO.existingActiveCaseCheck() :Check case details for case " + argumentsList);
									System.out.println(" AutoRegistrationBO.existingActiveCaseCheck() :Check case details for case " + argumentsList);
									edEligCargoArray = (EdEligibilityCargo[]) edEligColl.select("findActiveOngoingCaseLIS", methodArgs);// use in query to get
																																		// ongoing benefits
									if (edEligCargoArray != null && edEligCargoArray.length > 0)
									{
										for (int j = 0; j < edEligCargoArray.length; j++)
										{
											autoRegStatus = AppRegConstants.AUTO_REG_PROCESS_AC;
											indvCaseCheck = false;
											break;
 
										}
									}
								}
 
								// If Pending MSP Cases is not found then check if we have Pending Cases without MSP
								if (indvCaseCheck &&  !lisMSPApp &&  !pendingArgumentsList.isEmpty() && pendingArgumentsList.size() > 0)
								{
									indvCaseCheck = false;
									log(7, " AutoRegistrationBO.existingActiveCaseCheck() : LIS MSP indv assoicated to a penindg case with MSP:"
											+ pendingArgumentsList);
									System.out
											.println(" AutoRegistrationBO.existingActiveCaseCheck() :LIS MSP indv assoicated to a penindg case with MSP:" + indvId);
									autoRegStatus = AppRegConstants.AUTO_REG_PROCESS_PC;
								}
 
							}
							if (indvCaseCheck)
							{
								// Check -- Case that has been closed for
								// less than 3 months
								for (int j = 0; j < dcCaseCargoArray.length; j++)
								{
									dcCaseCargo = dcCaseCargoArray[j];
									if (dcCaseCargo.getCaseStatusCd().equals(AppRegConstants.AUTO_REG_TN))
									{
										caseInPast = dcCaseCargo.getCaseNum();
										indvCaseCheck = false;
										Calendar caseDate = Calendar.getInstance();
										caseDate.setTime(new java.util.Date(dcCaseCargo.getCaseClosedDt().getTime()));
										Calendar today = Calendar.getInstance();
										today.add(Calendar.MONTH, -3);
										if (today.compareTo(caseDate) < 0)
										{
											indvCaseCheck = false;
											autoRegStatus = AppRegConstants.AUTO_REG_PROCESS_RE;
											log(7,
													" AutoRegistrationBO.existingActiveCaseCheck() : LIS MSP indv assoicated to a closed case :"
															+ dcCaseCargo.getCaseNum());
											System.out.println(" AutoRegistrationBO.existingActiveCaseCheck() : LIS MSP indv assoicated to a closed case :"
													+ dcCaseCargo.getCaseNum());
											caseClosed90Days = dcCaseCargo.getCaseNum();
											closureDate = dcCaseCargo.getCaseClosedDt();
										}
									}
									else if (dcCaseCargo.getCaseStatusCd().equals(AppRegConstants.AUTO_REG_DN))
									{
										// Check -- Case that has been
										// denied within 2 months
										caseInPast = dcCaseCargo.getCaseNum();
										indvCaseCheck = false;
										Calendar caseDeniedDate = Calendar.getInstance();
										caseDeniedDate.setTime(new java.util.Date(dcCaseCargo.getCaseClosedDt().getTime()));
										Calendar today1 = Calendar.getInstance();
										today1.add(Calendar.MONTH, -2);
										if (today1.compareTo(caseDeniedDate) < 0)
										{
											indvCaseCheck = false;
											autoRegStatus = AppRegConstants.AUTO_REG_PROCESS_DA;
											caseDenied60Days = dcCaseCargo.getCaseNum();
											closureDate = dcCaseCargo.getCaseClosedDt();
										}
									}
								} // end of for loop
							}
						}
						else if (AppRegConstants.AUTO_REG_PROCESS_PA.equals(autoRegStatus))
						{
							indvCaseCheck = false;
						}
						if (indvCaseCheck == false)
						{
							if (autoRegT1002Cargo.getMcRqstSw() == 'Y')
							{
								log(7, " AutoRegistrationBO.existingActiveCaseCheck() : Existing Application case check for MSP  for indv Begin : " + indvId);
								boolean mspCheck = existingActiveCaseCheckMSP(autoRegStatus, appNum, indvId, lisMSPApp, dcCaseCargoArray, caseInPast,
										caseClosed90Days, caseDenied60Days, closureDate);
								log(7, " AutoRegistrationBO.existingActiveCaseCheck() : Existing Application case check for MSP results : " + mspCheck);
								System.out.println(" AutoRegistrationBO.existingActiveCaseCheck() : Existing Application case check for MSP results : " + mspCheck);
								return mspCheck;
							}
						}
					}
					else
					{
						log(7, " AutoRegistrationBO.existingActiveCaseCheck() :Spouse Indv who is not requesting for SSA-LIS MSP : " + indvId);
						System.out.println(" AutoRegistrationBO.existingActiveCaseCheck() : Spouse Indv who is not requesting for SSA-LIS MSP :: " + indvId);
					}
				}
				else{
				// To check individual not in Pending/Registered Application
				arAppIndvCargo.setIndvId(indvId);
				arAppIndvColl.add(arAppIndvCargo);
				arAppForAidCargoArray = (ArApplicationForAidCargo[]) arAppIndvColl.select("findArAppsByIndvId");

				if (arAppForAidCargoArray != null && arAppForAidCargoArray.length > 0) {
					if (arAppForAidCargoArray[0].getApplicationStatusCd().equals(AppRegConstants.AUTO_REG_AP) || arAppForAidCargoArray[0].getApplicationStatusCd().equals(AppRegConstants.AUTO_REG_AC)) {
						indvCaseCheck = false;
						autoRegStatus = AppRegConstants.AUTO_REG_PROCESS_PA;
						// Start: Added for ILIES-192695
						for (ArApplicationForAidCargo arAppCargo: arAppForAidCargoArray) {
							if (arAppCargo.getAppMpeSw() == 'Y') {
								mpeAppExists = true;
								associatedAppNumStr = arAppCargo.getAppNum();
								//break;
							}
							if (arAppCargo.getAppFppeSw() == 'Y') {
								appFppExists = true;
								//break;
							}
						}
						// End: Added for ILIES-192695
					}
				}
				if (indvCaseCheck) {
					// To check individual not on pending case
					dcCaseIndvCargo.setIndvId(indvId);
					dcCaseIndvColl.add(dcCaseIndvCargo);
					dcCaseCargoArray = (DcCasesCargo[]) dcCaseIndvColl.select("findActiveCaseIndvId");
					if (dcCaseCargoArray != null && dcCaseCargoArray.length > 0) {
						for (int i = 0; i < dcCaseCargoArray.length; i++) {
							if (dcCaseCargoArray[i].getCaseStatusCd().equals(AppRegConstants.AUTO_REG_PE)) {
								indvCaseCheck = false;
								autoRegStatus = AppRegConstants.AUTO_REG_PROCESS_PC;
							} else {

								Object[] methodArgs = new Object[1];
								List argumentsList = new ArrayList();
								argumentsList.add(dcCaseCargoArray[i].getCaseNum());

								methodArgs[0] = argumentsList;
								edEligCargoArray = (EdEligibilityCargo[]) edEligColl.select("findByCaseNumForAutoRegBatch", methodArgs);
								if (edEligCargoArray != null && edEligCargoArray.length > 0) {
									for (int j = 0; j < edEligCargoArray.length; j++) {
										if (edEligCargoArray[j].getCurrentEligInd() == 'A' && edEligCargoArray[j].getCgStatusCd().equals(AppRegConstants.AUTO_REG_AP)) {
											autoRegStatus = AppRegConstants.AUTO_REG_PROCESS_AC;
											indvCaseCheck = false;
											break;
										}
									}
								}
								if (indvCaseCheck) {
									// Check -- Case that has been closed for less than 3 months
									for (int j = 0; j < dcCaseCargoArray.length; j++) {
										dcCaseCargo = dcCaseCargoArray[j];
										if (dcCaseCargo.getCaseStatusCd().equals(AppRegConstants.AUTO_REG_TN)) {
											Calendar caseDate = Calendar.getInstance();
											caseDate.setTime(new java.util.Date(dcCaseCargo.getCaseClosedDt().getTime()));
											Calendar today = Calendar.getInstance();
											today.add(Calendar.MONTH, -3);
											if (today.compareTo(caseDate) < 0) {
												indvCaseCheck = false;
												autoRegStatus = AppRegConstants.AUTO_REG_PROCESS_RE;
												caseClosed90Days = dcCaseCargo.getCaseNum();
											}

										} else if (dcCaseCargo.getCaseStatusCd().equals(AppRegConstants.AUTO_REG_DN)) {
											// Check -- Case that has been
											// denied within 2 months
											Calendar caseDeniedDate = Calendar.getInstance();
											caseDeniedDate.setTime(new java.util.Date(dcCaseCargo.getCaseClosedDt().getTime()));
											Calendar today1 = Calendar.getInstance();
											today1.add(Calendar.MONTH, -2);
											if (today1.compareTo(caseDeniedDate) < 0) {
												indvCaseCheck = false;
												autoRegStatus = AppRegConstants.AUTO_REG_PROCESS_DA;
												caseDenied60Days = dcCaseCargo.getCaseNum();
											}

										}
									} // end of for loop
								}
							}
						}
					}
				}

				if (indvCaseCheck == false) {
					// For MSP apps
					if (appSSAMSPCategory == true && autoRegT1002Cargo.getMcRqstSw() == 'Y') {
						log(7, " AutoRegistrationBO.existingActiveCaseCheck() : MSP apps");
						for (Object nextKey : indvMap.keySet()) {
							long nextIndvId = (Long) indvMap.get(nextKey);
							if (indvId == nextIndvId) {
								continue;
							}

							if (nextIndvId == 0) {
								createEDMTask(appNum);
								updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegStatus, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
								return false;
							} else {
								dcCaseIndvColl.clear();
								dcCaseIndvCargo = new DcCaseIndividualCargo();
								dcCaseIndvCargo.setIndvId(nextIndvId);
								dcCaseIndvColl.add(dcCaseIndvCargo);
								dcCaseTempArray = (DcCasesCargo[]) dcCaseIndvColl.select("findActiveCaseIndvId");
								if (dcCaseTempArray != null && dcCaseTempArray.length > 0 && dcCaseCargoArray != null && dcCaseCargoArray.length > 0) {
									for (int i = 0; i < dcCaseCargoArray.length; i++) {
										for (int j = 0; j < dcCaseTempArray.length; j++) {
											if (dcCaseCargoArray[i].getCaseNum() == dcCaseTempArray[j].getCaseNum()) {
												autoReg_SSA_MSP_Sw = "Y";
											} else {
												autoReg_SSA_MSP_Sw = "N";
												createEDMTask(appNum);
												updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegStatus, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
												return false;
											}
										}
									}
									if (autoReg_SSA_MSP_Sw != null && autoReg_SSA_MSP_Sw.equals("Y") && autoRegT1004CargoArray != null && autoRegT1004CargoArray.length > 0) {
										/*for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
											int key1 = (int) autoRegT1004CargoArray[i].getIndvSeqNum();
											if (indvMap.containsKey(key1)) {
												autoRegT1004CargoArray[i].setBridgesIndvId((Long) indvMap.get(key1));
												updateT1004AppIndvTable(autoRegT1004CargoArray[i]);
											}
										}*/

										createEDMTask(appNum);
										updateTaskForCaseProcess(appNum);
										updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_SUCCESS, AppRegConstants.AUTO_REG_EMPTY, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
										return true;
									}
								}
							}
						}
					} else if (appHPECategory) {
						log(7, " AutoRegistrationBO.existingActiveCaseCheck() : HPE apps");
						ArrayList<Long> extIndvList = new ArrayList<Long>();
						ArHospitalPEBO hpeBO = new ArHospitalPEBO(connection);
						Timestamp certDate = null;
						boolean associationCheck = false;
						for (Object key1 : indvMap.keySet()) {
							if ((Long) indvMap.get(key1) == 0) {
								continue;
							} else {
								extIndvList.add((Long) indvMap.get(key1));
							}
						}

						if (extIndvList.size() == 0) {
							createEDMTask(appNum);
							updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegStatus, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
							return false;
						}

						dcCaseIndvColl.clear();
						dcCaseIndvCargo.setIndvId(extIndvList.get(0));
						dcCaseIndvColl.add(dcCaseIndvCargo);
						dcCaseCargoArray = (DcCasesCargo[]) dcCaseIndvColl.select("findCaseByIndvIdSofrByStatusCd");
						if (dcCaseCargoArray != null && dcCaseCargoArray.length > 0) {
							for (int i = 0; i < dcCaseCargoArray.length; i++) {
								dcCaseIndvColl.clear();
								dcCaseIndvCargoArray = null;
								dcCaseIndvCargo = new DcCaseIndividualCargo();
								dcCaseIndvCargo.setCaseNum(dcCaseCargoArray[i].getCaseNum());
								dcCaseIndvColl.add(dcCaseIndvCargo);
								dcCaseIndvCargoArray = (DcCaseIndividualCargo[]) dcCaseIndvColl.select("findByCaseAllIndvCurrRec");
								if (dcCaseIndvCargoArray != null && dcCaseIndvCargoArray.length > 0) {
									int caseMatchCount = 0;
									for (int j = 0; j < dcCaseIndvCargoArray.length; j++) {
										for (int extIndvCount = 0; extIndvCount < extIndvList.size(); extIndvCount++) {
											if (dcCaseIndvCargoArray[j].getIndvId() == extIndvList.get(extIndvCount)) {
												caseMatchCount++;
											}
										}
									}

									if (caseMatchCount == extIndvList.size()) {
										dcCaseProgramIndvColl.clear();
										dcCaseProgramIndvCargo.setCaseNum(dcCaseCargoArray[i].getCaseNum());
										dcCaseProgramIndvCargo.setProgCd(AppRegConstants.AUTO_REG_MA);
										dcCaseProgramIndvColl.add(dcCaseProgramIndvCargo);
										dcCaseProgramIndvCargoArray = (DcCaseProgramIndvCargo[]) dcCaseProgramIndvColl.select("findByCaseProgramCdAidSw");
										if (dcCaseProgramIndvCargoArray != null && dcCaseProgramIndvCargoArray.length > 0) {
											int extMAIndvCount = 0;
											for (int j = 0; j < dcCaseProgramIndvCargoArray.length; j++) {
												for (int extIndvCount = 0; extIndvCount < extIndvList.size(); extIndvCount++) {
													if (dcCaseProgramIndvCargoArray[j].getIndvId() == extIndvList.get(extIndvCount)) {
														extMAIndvCount++;
													}
												}
											}
											if (extMAIndvCount == extIndvList.size()) {
												arApplicationForAidColl.clear();
												arApplicationForAidCargo.setCaseNum(dcCaseCargoArray[i].getCaseNum());
												arApplicationForAidColl.add(arApplicationForAidCargo);
												arApplicationForAidCargoArray = (ArApplicationForAidCargo[]) arApplicationForAidColl.select("findByCaseNum");
												String hpeAppNum = "";
												if (arApplicationForAidCargoArray != null && arApplicationForAidCargoArray.length > 0) {
													hpeAppNum = arApplicationForAidCargoArray[0].getAppNum();
												}
												certDate = hpeBO.isMedCertified(dcCaseCargoArray[i].getCaseNum());
												if (certDate != null) { // Case Certified check
													if (extIndvList.size() != indvMap.size()) {
														createEDMTask(appNum);
														updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegStatus, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
														return false;
													}
													updateHpeEligDetailsIndvTable(hpeAppNum, extIndvList);
												}
												createEDMTask(appNum);
												updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegStatus, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
												return false;
												//ILIES-223560 hpeAppAssociation("HPE", appNum, hpeAppNum, dcCaseCargoArray[i].getCaseNum(), certDate, dcCaseCargoArray[i].getAppRecvdDt(), 'N');
												//associationCheck = true;
											}
										}
									}
								}
							}
						} else {
							arAppIndvCargo.setIndvId(extIndvList.get(0));
							arAppIndvColl.clear();
							arAppIndvColl.add(arAppIndvCargo);
							arAppForAidCargoArray = (ArApplicationForAidCargo[]) arAppIndvColl.select("findArAppsByIndvId");
							if (arAppForAidCargoArray != null && arAppForAidCargoArray.length > 0) {
								for (int i = 0; i < arAppForAidCargoArray.length; i++) {
									Object appNumArgs[] = { arAppForAidCargoArray[i].getAppNum() };
									ArAppIndvCargo[] arAppIndvCargoArray = (ArAppIndvCargo[]) arAppIndvColl.select("findByAppNum", appNumArgs);
									int appMatchCount = 0;
									if (arAppIndvCargoArray != null && arAppIndvCargoArray.length > 0) {
										for (int j = 0; j < arAppIndvCargoArray.length; j++) {
											for (int extIndvCount = 0; extIndvCount < extIndvList.size(); extIndvCount++) {
												if (arAppIndvCargoArray[j].getIndvId() == extIndvList.get(extIndvCount)) {
													appMatchCount++;
												}
											}
										}
									}
									if (appMatchCount == extIndvList.size()) {
										arAppProgramIndvCargo.setAppNum(arAppForAidCargoArray[i].getAppNum());
										arAppProgramIndvCargo.setProgramCd("MA");
										arAppProgramIndvCargo.clone();
										arAppProgramIndvColl.add(arAppProgramIndvCargo);
										arAppProgramIndvCargoArray = (ArAppProgramIndvCargo[]) arAppProgramIndvColl.select("findByAppNumPrgCD");
										int extMaIndvCount = 0;
										if (arAppProgramIndvCargoArray != null && arAppProgramIndvCargoArray.length > 0) {
											for (int j = 0; j < arAppProgramIndvCargoArray.length; j++) {
												for (int extIndvCount = 0; extIndvCount < extIndvList.size(); extIndvCount++) {
													if (arAppProgramIndvCargoArray[j].getIndvId() == extIndvList.get(extIndvCount)) {
														extMaIndvCount++;
													}
												}
											}
										}

										if (extMaIndvCount == extIndvList.size()) {
											createEDMTask(appNum);
											updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegStatus, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
											return false;
											//ILIES-223560 hpeAppAssociation("HPE", appNum, arAppForAidCargoArray[i].getAppNum(), arAppForAidCargoArray[i].getCaseNum(), certDate, arAppForAidCargoArray[i].getAppRecvdDt(), 'N');
											//associationCheck = true;
										}
									}
								}
							}
						}

						if (associationCheck == false) {
							createEDMTask(appNum);
							updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegStatus, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
							return false;
						}
						return true;
					} else if (autoRegT1002Cargo.getMaRqstSw() == 'Y') {
						log(7, " AutoRegistrationBO.existingActiveCaseCheck() : MA apps");
						ArrayList<Long> extIndvList = new ArrayList<Long>();
						Timestamp certDate = null;
						long indvId1 = 0L;
						for (Object key1 : indvMap.keySet()) {
							if ((Long) indvMap.get(key1) == 0) {
								continue;
							} else {
								extIndvList.add((Long) indvMap.get(key1));
							}
						}
						/*if (extIndvList.size() > 0) {
							for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
								int key1 = (int) autoRegT1004CargoArray[i].getIndvSeqNum();
								if (indvMap.containsKey(key1)) {
									autoRegT1004CargoArray[i].setBridgesIndvId((Long) indvMap.get(key1));
									updateT1004AppIndvTable(autoRegT1004CargoArray[i]);
								}
							}
						}*/
						if (extIndvList.size() == 0) {
							createEDMTask(appNum);
							updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegStatus, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
							return false;
						}

						Object[] args = new Object[1];
						args[0] = extIndvList;

						ArHpeAssociationCargo cargo = new ArHpeAssociationCargo();
						ArHpeAssociationCollection coll = new ArHpeAssociationCollection(connection);
						ArHpeAssociationCargo[] arHpeAssociationCargoArray = null;
						log(7, " AutoRegistrationBO.existingActiveCaseCheck() : MA apps :: calling findHpeAssociationDetails method");
						arHpeAssociationCargoArray = (ArHpeAssociationCargo[]) coll.select("findHpeAssociationDetails", args);
						if (arHpeAssociationCargoArray != null && arHpeAssociationCargoArray.length == 1) {
							/*ILIES-223560 log(7, " AutoRegistrationBO.existingActiveCaseCheck() : MA apps :: arHpeAssociationCargoArray.length " + arHpeAssociationCargoArray.length);
						    arApplicationForAidCargo = new ArApplicationForAidCargo();
						    arApplicationForAidCargo.setAppNum(arHpeAssociationCargoArray[0].getHpeAppNum());
						    arApplicationForAidColl.clear();
						    arAppForAidCargoArray = null;
						    arApplicationForAidColl.add(arApplicationForAidCargo);
						    arAppForAidCargoArray = (ArApplicationForAidCargo[]) arApplicationForAidColl.select("findByAppNum");
						    if (arAppForAidCargoArray != null && arAppForAidCargoArray.length > 0) {
								if (arAppForAidCargoArray[0].getApplicationStatusCd().equals(AppRegConstants.AUTO_REG_AP)) {
								    hpeAppAssociation("MA", appNum, arHpeAssociationCargoArray[0].getHpeAppNum(), 0, certDate, autoRegT1001Cargo.getAppRcvDt(), 'N');
								    updateHpeEligDetailsIndvTableForMAApps(arHpeAssociationCargoArray[0].getHpeAppNum());
								    updateArHpeEligDetailForMAApps(arHpeAssociationCargoArray[0].getHpeAppNum());
								    return true;
								} else if (arAppForAidCargoArray[0].getApplicationStatusCd().equals(AppRegConstants.AUTO_REG_AC)) {
								    hpeAppAssociation("MA", appNum, arHpeAssociationCargoArray[0].getHpeAppNum(), 0, certDate, autoRegT1001Cargo.getAppRcvDt(), 'Y');
								    updateHpeEligDetailsIndvTableForMAApps(arHpeAssociationCargoArray[0].getHpeAppNum());
								    updateArHpeEligDetailForMAApps(arHpeAssociationCargoArray[0].getHpeAppNum());
								    appMaHpeAssociation = true;
								    reopenHPETask(arHpeAssociationCargoArray[0].getHpeAppNum());
								    createEDMTask(appNum);
								    updateTaskForCaseProcess(appNum);
								    AppInboxBO appInbox = new AppInboxBO(connection);
								    appInbox.disposeApp(appNum);
								    updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_SUCCESS, AppRegConstants.AUTO_REG_EMPTY, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
								    return false;
								}
						    }
						} else {*/
							createEDMTask(appNum);
							updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegStatus, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
							return false;
						}else if (arHpeAssociationCargoArray != null && arHpeAssociationCargoArray.length == 0 && indvCaseCheck == false){
							createEDMTask(appNum);
							updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegStatus, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
							return false;
						}
					} else {
						createEDMTask(appNum);
						updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, autoRegStatus, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
						return false;
					}
				}
			}
			}
			return true;
		} catch (Exception e) {
			log(ILog.ERROR, "Exception in AutoRegistrationBO.existingActiveCaseCheck() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
			if (this.con != null) {
				this.con.rollback();
			}
			if (e.getMessage() != null && e.getMessage().contains("10016")) {
			    exceptionBO.writeExceptionRecord(BatchConstants.INFO, "AR-ATREG-HLY:  AutoRegistrationBO - existingActiveCaseCheck()", "Exception processing app num: " + appNum + " :: " + e.getMessage(), BatchConstants.REPORT_BODY, false, BatchConstants.LOG_FILE, ILog.INFO, BatchConstants.DEFAULT_LOGGER_FILE, true, e, null, null, null);
			    dmWebserviceVO.setSourceTypeCode(DMConstants.SELFSERVICE_LIS);
			    createEDMTask(appNum);
			    updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL, AppRegConstants.AUTO_REG_PROCESS_AD, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
			    return false;
			}
			updateAutoRegExcpTable(appNum, autoRegStatus, AppRegConstants.AUTO_REG_EXCP_STATUS_EX);

			if (this.con != null) {
				this.con.commit();
			}
			throw e;
		} finally {
			dcCaseIndvCargo = null;
			dcCaseIndvColl = null;
			dcCaseCargo = null;
			edEligColl = null;
			dcCaseIndvCargoArray = null;
			dcCaseCargoArray = null;
			arAppForAidCargoArray = null;
			edEligCargoArray = null;

			arApplicationForAidCargo = null;
			arApplicationForAidColl = null;
			arApplicationForAidCargoArray = null;

			dcCaseProgramIndvCargo = null;
			dcCaseProgramIndvColl = null;
			dcCaseProgramIndvCargoArray = null;
			arAppProgramIndvCargo = null;
			arAppProgramIndvColl = null;
		}
	}
    
    private ArAppProgramCargo[] getmspPrgmStDt(String appNum)
	{
		ArAppProgramCargo arAppProgCargo = new ArAppProgramCargo();
		ArAppProgramCollection arAppProgramColl = new ArAppProgramCollection(connection);
		ArAppProgramCargo[] arAppProgramCargoArray = null;
		Object[] objLst = new Object[1];		
		objLst[0] = appNum;
    
		try{
			arAppProgramCargoArray = (ArAppProgramCargo[]) arAppProgramColl.select("findEarliestRequestDtForAppNum",objLst);			
		}catch(Exception e){
			log(ILog.ERROR, "Exception in AutoRegistrationBO.getmspPrgmStDt() indvId: " + appNum + "\n" + e.getMessage() + "\n", e);
			e.printStackTrace();
		}
	return arAppProgramCargoArray;
	}

	public int caseIndvCount(long caseNum) throws Exception {
	log(7, "Begin AutoRegistrationBO.caseIndvCount() ");
	DcCaseIndividualCargo dcCaseIndvCargo = new DcCaseIndividualCargo();
	DcCaseIndividualCollection dcCaseIndvColl = new DcCaseIndividualCollection(connection);
	DcCaseIndividualCargo[] dcCaseIndvCargoArray = null;
	try {
	    int caseIndvMatchingCount = 0;
	    dcCaseIndvCargo = new DcCaseIndividualCargo();
	    dcCaseIndvCargo.setCaseNum(caseNum);
	    dcCaseIndvColl.clear();
	    dcCaseIndvColl.add(dcCaseIndvCargo);
	    dcCaseIndvCargoArray = (DcCaseIndividualCargo[]) dcCaseIndvColl.select("findByCaseNumber");
	    if (dcCaseIndvCargoArray != null && dcCaseIndvCargoArray.length > 0) {
		
		for (Object key : indvMap.keySet()) {
		    for (int i = 0; i < dcCaseIndvCargoArray.length; i++) {
			if ((Long) indvMap.get(key) == dcCaseIndvCargoArray[i].getIndvId()) {
			    caseIndvMatchingCount++;
			    break;
			}
		    }
		}
		
	    }
	    return caseIndvMatchingCount;
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.caseIndvCount() caseNum: " + caseNum + "\n" + e.getMessage() + "\n", e);
	    throw e;
	} finally {
	    dcCaseIndvCargo = null;
	    dcCaseIndvColl = null;
	    dcCaseIndvCargoArray = null;
	}
	
    }
    
    public boolean appREDECheck(String appNum, Map appIndvMap) throws TIERSValidationException, Exception {
	log(7, "Begin AutoRegistrationBO.appREDECheck() ");
	VArApplicationIndvCargo[] appCargos = null;
	String redePotentialMatch = "N";
	String[] apDtlPrgrmArray = { "N", "N", "N", "N", "N" };
	StringBuffer errorMessages = new StringBuffer("");
	//HashMap<Long, Long> indivMap = new HashMap();
	//boolean caseREDECheck = false;
	//long caseNum = 0L;
	
	T1004AppIndvCollection T1004Coll = new T1004AppIndvCollection(connection);
	//T1001AppRqstCollection T1001Coll = new T1001AppRqstCollection(connection);
	//T1002AppDtlCargo appDtlCargo = new T1002AppDtlCargo();
	try {
	    
	    int size = autoRegT1004CargoArray.length;
	    if (size > 0) {
		//Set<Long> indvIds = new HashSet<Long>();
		//ArHospitalPEBO hpeBO = new ArHospitalPEBO(connection);
		//DcIndvCargo indvCargos[] = new DcIndvCargo[size];
		ArrayList<Long> indvList = new ArrayList<Long>();
		
		ArrayList programList = new ArrayList();
		Map<Long, ArrayList<String>> caseProgMap = new HashMap<Long, ArrayList<String>>();
		
		int extIndvCount = 0;
		for (Object key1 : appIndvMap.keySet()) {
		    //Integer kayVal = (Integer) key1;
		    // PMD_Override - R10 - The casting of this numeric/byte type does not need to be addressed because it will not lose precision from int to long.
		    PMDRules.markApprovedStatement("R10");
		    //indivMap.put((long) kayVal, (Long) appIndvMap.get(key1));
		    if ((Long) appIndvMap.get(key1) == 0L) {
			return true;
		    } else {
			indvList.add((Long) appIndvMap.get(key1));
			extIndvCount++;
		    }
		}
		log(7, "AutoRegistrationBO.appREDECheck() :- extIndvCount -" + extIndvCount);
		if (indvList != null && indvList.size() > 0) {
		    ArREDEBO redebo = new ArREDEBO(connection);
		    appCargos = redebo.searchForCases(indvList);
		    if (appCargos != null && appCargos.length > 0) {
			for (int k = 0; k < appCargos.length; k++) {
			    if (caseProgMap.containsKey(appCargos[k].getCaseNum())) {
				programList = caseProgMap.get(appCargos[k].getCaseNum());
				programList.add(appCargos[k].getProgCd());
				caseProgMap.put(appCargos[k].getCaseNum(), programList);
			    } else {
				programList = new ArrayList();
				programList.add(appCargos[k].getProgCd());
				caseProgMap.put(appCargos[k].getCaseNum(), programList);
			    }
			}
		    }
		    log(7, "AutoRegistrationBO.appREDECheck() :- caseProgMap -" + caseProgMap);		    
		    
		    if (autoRegT1002Cargo.getFsRqstSw() == 'Y') {
			apDtlPrgrmArray[0] = "Y";
		    }
		    if (autoRegT1002Cargo.getMaRqstSw() == 'Y') {
			apDtlPrgrmArray[1] = "Y";
		    }
		    if (autoRegT1002Cargo.getMcRqstSw() == 'Y') {
			apDtlPrgrmArray[2] = "Y";
		    }
		    if (autoRegT1002Cargo.getCashRqstSw() == 'Y') {
			apDtlPrgrmArray[3] = "Y";
		    }
		    int counter = 0;
		    for (int y = 0; y < apDtlPrgrmArray.length; y++) {
			if (apDtlPrgrmArray[y].equalsIgnoreCase("Y")) {
			    counter++;
			}
		    }
		    log(7, "AutoRegistrationBO.appREDECheck() :- Prog counter -" + counter);
		    
		    if (caseProgMap != null && !caseProgMap.isEmpty()) {
			Iterator iterator = caseProgMap.entrySet().iterator();
			while (iterator.hasNext()) {
			    Map.Entry mapEntry = (Map.Entry) iterator.next();
			    ArrayList progList = (ArrayList) mapEntry.getValue();
			    if (counter > 0 && counter <= progList.size()) {
				if (apDtlPrgrmArray[0].equalsIgnoreCase("Y") && progList.contains("FS")) {
				    for (int l = 0; l < appCargos.length; l++) {
					if (((Long) mapEntry.getKey() == appCargos[l].getCaseNum()) && appCargos[l].getProgCd().equalsIgnoreCase("FS") && (extIndvCount == caseIndvCount(appCargos[l].getCaseNum()))) {
					    VArApplicationIndvCargo vArApplicationIndvCargo = appCargos[l];
					    Timestamp redeDueDate = vArApplicationIndvCargo.getAppRecvdDt();
					    Calendar calendar = Calendar.getInstance();
					    calendar.setTime(redeDueDate);
					    // PMD_Override - R10 - The casting of this numeric/byte type does not need to be addressed because it will not exceed the int value.
					    PMDRules.markApprovedStatement("R10");
					    calendar.add(calendar.DATE, (int) -45);
					    Timestamp priorDueDate = new Timestamp(calendar.getTime().getTime());
					    Timestamp appRcvdDate = autoRegT1001Cargo.getAppRcvDt();
					    if (appRcvdDate.after(priorDueDate)) {
						redePotentialMatch = "Y";
						//caseNum = appCargos[l].getCaseNum();
					    }
					}
				    }
				}
				if (apDtlPrgrmArray[1].equalsIgnoreCase("Y") && progList.contains("MA")) {
				    for (int l = 0; l < appCargos.length; l++) {
					if (((Long) mapEntry.getKey() == appCargos[l].getCaseNum()) && appCargos[l].getProgCd().equalsIgnoreCase("MA") && (extIndvCount == caseIndvCount(appCargos[l].getCaseNum()))) {
					    VArApplicationIndvCargo vArApplicationIndvCargo = appCargos[l];
					    Timestamp redeDueDate = vArApplicationIndvCargo.getAppRecvdDt();
					    Calendar calendar = Calendar.getInstance();
					    calendar.setTime(redeDueDate);
					    // PMD_Override - R10 - The casting of this numeric/byte type does not need to be addressed because it will not exceed the int value.
					    PMDRules.markApprovedStatement("R10");
					    calendar.add(calendar.DATE, (int) -45);
					    Timestamp priorDueDate = new Timestamp(calendar.getTime().getTime());
					    Timestamp appRcvdDate = autoRegT1001Cargo.getAppRcvDt();
					    if (appRcvdDate.after(priorDueDate)) {
						redePotentialMatch = "Y";
						//caseNum = appCargos[l].getCaseNum();
					    }
					}
				    }
				}
				if (apDtlPrgrmArray[2].equalsIgnoreCase("Y") && progList.contains("MC")) {
				    for (int l = 0; l < appCargos.length; l++) {
					if (((Long) mapEntry.getKey() == appCargos[l].getCaseNum()) && appCargos[l].getProgCd().equalsIgnoreCase("MC") && (extIndvCount == caseIndvCount(appCargos[l].getCaseNum()))) {
					    VArApplicationIndvCargo vArApplicationIndvCargo = appCargos[l];
					    Timestamp redeDueDate = vArApplicationIndvCargo.getAppRecvdDt();
					    Calendar calendar = Calendar.getInstance();
					    calendar.setTime(redeDueDate);
					    // PMD_Override - R10 - The casting of this numeric/byte type does not need to be addressed because it will not exceed the int value.
					    PMDRules.markApprovedStatement("R10");
					    calendar.add(calendar.DATE, (int) -45);
					    Timestamp priorDueDate = new Timestamp(calendar.getTime().getTime());
					    Timestamp appRcvdDate = autoRegT1001Cargo.getAppRcvDt();
					    if (appRcvdDate.after(priorDueDate)) {
						redePotentialMatch = "Y";
						//caseNum = appCargos[l].getCaseNum();
					    }
					}
				    }
				}
				if (apDtlPrgrmArray[3].equalsIgnoreCase("Y") && progList.contains("TF")) {
				    for (int l = 0; l < appCargos.length; l++) {
					if (((Long) mapEntry.getKey() == appCargos[l].getCaseNum()) && appCargos[l].getProgCd().equalsIgnoreCase("TF") && (extIndvCount == caseIndvCount(appCargos[l].getCaseNum()))) {
					    VArApplicationIndvCargo vArApplicationIndvCargo = appCargos[l];
					    Timestamp redeDueDate = vArApplicationIndvCargo.getAppRecvdDt();
					    Calendar calendar = Calendar.getInstance();
					    calendar.setTime(redeDueDate);
					    // PMD_Override - R10 - The casting of this numeric/byte type does not need to be addressed because it will not exceed the int value.
					    PMDRules.markApprovedStatement("R10");
					    calendar.add(calendar.DATE, (int) -45);
					    Timestamp priorDueDate = new Timestamp(calendar.getTime().getTime());
					    Timestamp appRcvdDate = autoRegT1001Cargo.getAppRcvDt();
					    if (appRcvdDate.after(priorDueDate)) {
						redePotentialMatch = "Y";
						//caseNum = appCargos[l].getCaseNum();
					    }
					}
				    }
				}
			    }
			}
		    }
		}
	    }
	    
	    log(7, "AutoRegistrationBO.appREDECheck() :- redePotentialMatch -" + redePotentialMatch);
	    if (redePotentialMatch.equalsIgnoreCase("Y")) {
		
		log(7, "AutoRegistrationBO.appREDECheck() :- redePotentialMatch is Y");
		/*long empID = 0;
		String trackNum = null;
		trackNum = autoRegT1001Cargo.getSsAppNum();
		if (trackNum == null) {
		    trackNum = "0";
		}
		empID = retrieveIntakeVirtualWkrId(autoRegT1001Cargo.getOfcNum());
		ArREDEBO arREDEBO = new ArREDEBO(connection);*/
		
		// Updating Existing Indv ids in T1004
		//remove as part of Program Add ER 228036
		/*for (Object key : appIndvMap.keySet()) {
		    for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
			if (((Integer) key) == autoRegT1004CargoArray[i].getIndvSeqNum() && (Long) appIndvMap.get(key) != 0L) {
			    autoRegT1004CargoArray[i].setBridgesIndvId((Long) appIndvMap.get(key));
			    T1004Coll.add(autoRegT1004CargoArray[i]);
			    break;
			}
		    }
		}
		T1004Coll.update(T1004Coll);*/
		
		//ILIES-239765 : Application should fail with Active Case if any individual has potential REDE
		createEDMTask(appNum);
		updateAutoRegTriggerTable(appNum, AppRegConstants.AUTO_REG_PROCESS_APP_STATUS_FAIL,  AppRegConstants.AUTO_REG_PROCESS_AC, AppRegConstants.AUTO_REG_PROCESS_BATCH_IND_COMPLETED);
		return false;
		
	    }
	    
	    return true;
	} catch (Exception ex) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.appREDECheck() appNum: " + appNum + "\n" + ex.getMessage() + "\n", ex);
	    throw ex;
	}
    }
    
    public boolean hpeAppAssociation(String progType, String ssAppnum, String hpeNum, long caseNum, Timestamp certDate, java.sql.Timestamp rcvDt, char dcReady) throws TIERSValidationException, Exception {
	
	log(7, "Begin AutoRegistrationBO.hpeAppAssociation() ");
	ArHpeAssociationCargo cargo = new ArHpeAssociationCargo();
	ArHpeAssociationCollection coll = new ArHpeAssociationCollection(connection);
	ArHpeAssociationCargo[] cargoArray = null;
	
	try {
	    
	    FwCalendar calendar = FwCalendar.getInstance();
	    FwDate date = calendar.getDate();
	    java.sql.Timestamp timeStamp = date.getTimestamp();
	    if (progType.equals("MA")) {
		Object appNumArgs[] = { hpeNum };
		cargoArray = (ArHpeAssociationCargo[]) coll.select("findByHpeAppNum", appNumArgs);
		if (cargoArray == null || cargoArray.length == 0) {
		    return false;
		} else {
		    cargo = cargoArray[0];
		}
		coll.clear();
	    }
	    
	    if (progType.equals("HPE")) {
		cargo.setHpeAppNum(ssAppnum);
		cargo.setMaAppNum(hpeNum);
		if (autoRegT1060HPECargoArray != null && autoRegT1060HPECargoArray.length > 0) {
		    cargo.setHpeBegDt(autoRegT1060HPECargoArray[0].getHpeBeginDt());
		}
	    } else {
		cargo.setMaAppNum(ssAppnum);
	    }
	    cargo.setMaAppRcvDt(rcvDt);
	    if (dcReady == 'Y') {
		cargo.setDcReady(dcReady);
	    }
	    
	    if (caseNum != 0) {
		
		if (certDate != null) {
		    cargo.setHpeTriggerStatusCd("CP");
		    cargo.setHpeTriggerDt(timeStamp);
		    cargo.setHpeEndDt(certDate);
		    cargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    cargo.setCreateDt(timeStamp);
		    
		} else {
		    cargo.setHpeTriggerStatusCd("AC");
		    cargo.setHpeEndDt(getMaxDate());
		    cargo.setHpeTriggerDt(timeStamp);
		    cargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    cargo.setCreateDt(timeStamp);
		    
		}
	    } else {// app cannot be certified
		cargo.setHpeTriggerStatusCd("AC");
		cargo.setHpeEndDt(getMaxDate());
		cargo.setHpeTriggerDt(timeStamp);
		cargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		cargo.setCreateDt(timeStamp);
	    }
	    if (progType.equals("HPE")) {
		log(7, "AutoRegistrationBO.hpeAppAssociation() :: Inserting HPE applications");
		coll.setCargo(cargo);
		coll.insert(coll);
	    } else {
		log(7, "AutoRegistrationBO.hpeAppAssociation() :: Updating HPE applications");
		coll.setCargo(cargo);
		coll.update(coll);
	    }
	    
	    return true;
	} catch (Exception ex) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.hpeAppAssociation() ssAppnum: " + ssAppnum + "  caseNum: " + caseNum + "\n" + ex.getMessage() + "\n", ex);
	    throw ex;
	} finally {
	    cargo = null;
	    coll = null;
	    cargoArray = null;
	}
    }

    public boolean updateHpeEligDetailsIndvTableForMAApps(String appNum) throws TIERSValidationException, Exception {
	
	log(7, "Begin AutoRegistrationBO.updateHpeEligDetailsIndvTableForMAApps() ");
	ArHpeEligDetailIndvCargo arHpeEligDetailIndvCargo = null;
	ArHpeEligDetailIndvCollection arHpeEligDetailIndvColl = new ArHpeEligDetailIndvCollection(connection);
	ArHpeEligDetailIndvCargo[] arHpeEligDetailIndvCargoArray = null;
	try {
	    
	    Object appNumArgs[] = { appNum };
	    arHpeEligDetailIndvCargoArray = (ArHpeEligDetailIndvCargo[]) arHpeEligDetailIndvColl.select("findByAppNum", appNumArgs);
	    arHpeEligDetailIndvColl.clear();
	    if (arHpeEligDetailIndvCargoArray != null && arHpeEligDetailIndvCargoArray.length > 0) {
		for (int i = 0; i < arHpeEligDetailIndvCargoArray.length; i++) {
		    arHpeEligDetailIndvCargo = new ArHpeEligDetailIndvCargo();
		    arHpeEligDetailIndvCargo = arHpeEligDetailIndvCargoArray[i];
		    arHpeEligDetailIndvCargo.setHpeEndDt(getMaxDate());
		    
		    arHpeEligDetailIndvColl.add(arHpeEligDetailIndvCargo);
		}
		
		arHpeEligDetailIndvColl.update(arHpeEligDetailIndvColl);
		
	    }
	    return true;
	} catch (Exception ex) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateHpeEligDetailsIndvTableForMAApps() appNum: " + appNum + "\n" + ex.getMessage() + "\n", ex);
	    throw ex;
	} finally {
	    arHpeEligDetailIndvCargo = null;
	    arHpeEligDetailIndvColl = null;
	    arHpeEligDetailIndvCargoArray = null;
	}
    }
    
    public boolean updateArHpeEligDetailForMAApps(String appNum) throws TIERSValidationException, Exception {
	
	log(7, "Begin AutoRegistrationBO.updateArHpeEligDetailForMAApps() ");
	ArHpeEligDetailCargo arHpeEligDetailCargo = new ArHpeEligDetailCargo();
	ArHpeEligDetailCollection arHpeEligDetailColl = new ArHpeEligDetailCollection(connection);
	ArHpeEligDetailCargo[] arHpeEligDetailCargoArray = null;
	try {
	    
	    arHpeEligDetailCargo.setAppNum(appNum);
	    arHpeEligDetailColl.add(arHpeEligDetailCargo);
	    arHpeEligDetailCargoArray = (ArHpeEligDetailCargo[]) arHpeEligDetailColl.select("findUserByAppNum");
	    arHpeEligDetailColl.clear();
	    if (arHpeEligDetailCargoArray != null && arHpeEligDetailCargoArray.length > 0) {
		for (int i = 0; i < arHpeEligDetailCargoArray.length; i++) {
		    arHpeEligDetailCargo = new ArHpeEligDetailCargo();
		    arHpeEligDetailCargo = arHpeEligDetailCargoArray[i];
		    arHpeEligDetailCargo.setHpeEndDt(getMaxDate());
		    
		    arHpeEligDetailColl.add(arHpeEligDetailCargo);
		}
		
		arHpeEligDetailColl.update(arHpeEligDetailColl);
		
	    }
	    return true;
	} catch (Exception ex) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArHpeEligDetailForMAApps() appNum: " + appNum + "\n" + ex.getMessage() + "\n", ex);
	    throw ex;
	} finally {
	    arHpeEligDetailCargo = null;
	    arHpeEligDetailColl = null;
	    arHpeEligDetailCargoArray = null;
	}
    }
    
    public boolean updateHpeEligDetailsIndvTable(String appNum, ArrayList<Long> extIndvList) throws TIERSValidationException, Exception {
	
	log(7, "Begin AutoRegistrationBO.updateHpeEligDetailsIndvTable() ");
	ArHpeEligDetailIndvCargo arHpeEligDetailIndvCargo = null;
	ArHpeEligDetailIndvCollection arHpeEligDetailIndvColl = new ArHpeEligDetailIndvCollection(connection);
	ArHpeEligDetailIndvCargo[] arHpeEligDetailIndvCargoArray = null;
	try {
	    
	    for (int i = 0; i < extIndvList.size(); i++) {
		arHpeEligDetailIndvCargo = new ArHpeEligDetailIndvCargo();
		arHpeEligDetailIndvCargo.setIndvId(extIndvList.get(i));
		arHpeEligDetailIndvCargo.setAppNum(appNum);
		arHpeEligDetailIndvColl.clear();
		arHpeEligDetailIndvColl.add(arHpeEligDetailIndvCargo);
		arHpeEligDetailIndvCargoArray = (ArHpeEligDetailIndvCargo[]) arHpeEligDetailIndvColl.select("findByAppIndvId");
		if (arHpeEligDetailIndvCargoArray != null && arHpeEligDetailIndvCargoArray.length > 0) {
		    arHpeEligDetailIndvCargo = arHpeEligDetailIndvCargoArray[0];
		    arHpeEligDetailIndvCargo.setHpeEligSw('N');
		    arHpeEligDetailIndvColl.clear();
		    arHpeEligDetailIndvColl.add(arHpeEligDetailIndvCargo);
		    arHpeEligDetailIndvColl.update(arHpeEligDetailIndvColl);
		    
		}
	    }
	    return true;
	} catch (Exception ex) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateHpeEligDetailsIndvTable() appNum: " + appNum + "\n" + ex.getMessage() + "\n", ex);
	    throw ex;
	} finally {
	    arHpeEligDetailIndvCargo = null;
	    arHpeEligDetailIndvColl = null;
	}
    }
    
    public boolean isValidHpeApp(String appNum) throws TIERSValidationException, Exception {
	log(7, "Begin AutoRegistrationBO.isValidHpeApp() ");
	try {
	    ArHpeAssociationCargo[] assocCargos = null;
	    ArHpeAssociationCollection assocColl = new ArHpeAssociationCollection(connection);
	    Object[] args = new Object[1];
	    args[0] = appNum;
	    assocCargos = (ArHpeAssociationCargo[]) assocColl.select("findByAppNum", args);
	    if (assocCargos != null && assocCargos.length > 0) {
		ArHpeAssociationCargo hpeCargo = assocCargos[0];
		if (hpeCargo.getMaAppNum() != null && hpeCargo.getMaAppNum().equals(hpeCargo.getHpeAppNum())) {
		    // ma app = hpe app means unassociated HPE/MA app
		    return true;
		}
		ArAppProgramCargo progCargo = new ArAppProgramCargo();
		ArAppProgramCargo[] progCargos = null;
		ArAppProgramCollection progColl = new ArAppProgramCollection(connection);
		progCargo.setAppNum(appNum);
		progColl.add(progCargo);
		progCargos = (ArAppProgramCargo[]) progColl.select("findByAppNum");
		if (progCargos != null && progCargos.length > 0) {
		    if (hpeCargo.getHpeTriggerStatusCd() != null) {
			if (hpeCargo.getHpeTriggerStatusCd().equals("PM")) {
			    // potential match detected
			    ArrayList errorList = new ArrayList();
			    ArrayList places = new ArrayList();
			    errorList.add("This application is currently Potentially Matched to " + hpeCargo.getPotMaAppNum() + ". Please confirm or decline the Potential Match in the EDM Inbox");
			    throw new TIERSValidationException(errorList, places);
			}
			if (hpeCargo.getMaAppNum() == null) {
			    // no association. combined app
			    return true;
			}
			if (!hpeCargo.getMaAppNum().equals(hpeCargo.getHpeAppNum())) {
			    // HPE/MA app that has an association. Do not go to DC
			    ArrayList errorList = new ArrayList();
			    ArrayList places = new ArrayList();
			    errorList.add("This HPE/MA application is associated to another MA application/case, please complete Data Collection with the associated MA application.");
			    throw new TIERSValidationException(errorList, places);
			}
		    }
		} else {
		    // no HPE/MA app
		}
		if (hpeCargo.getDcReady() != 0 && hpeCargo.getDcReady() == 'Y') {
		    return true;
		}
	    } else {
		// not HPE application
		return true;
	    }
	    return false;
	} catch (ApplicationException ape) {
		log(ILog.ERROR, "Exception [ApplicationException] in AutoRegistrationBO.isValidHpeApp() appNum: " + appNum + "\n" + ape.getMessage() + "\n", ape);
	    throw ape;
	} catch (Exception ex) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.isValidHpeApp() appNum: " + appNum + "\n" + ex.getMessage() + "\n", ex);
	    throw ex;
	}
    }