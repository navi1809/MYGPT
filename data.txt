package gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.service;

import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_0_5;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_13_15;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_16_17;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_18_20;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_21_25;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_26_30;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_31_35;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_36_40;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_41_45;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_46_50;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_51_55;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_56_59;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_6;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_60_PLUS;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.constants.SnapCharacteristicConstants.AGE_7_12;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q01CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q02CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q03CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q06CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q14CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q15CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q16CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q18CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q19CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q21CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q26CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q27CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q28CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q29CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q30CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q31CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q32CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q36CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q38CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q40CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q41CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q42CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q43CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q44CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.Q45CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.getQ04CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.getQ05CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.getQ07CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.getQ08CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.getQ09CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.getQ10CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.getQ11CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.getQ13CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.getQ20CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.getQ22CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.getQ23CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.getQ24CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.getQ25CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.getQ33CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.getQ34CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.getQ35CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.getQ37CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.getQ39CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.getQ46CAT;
import static gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.util.CategoryUtil.getQ47CAT;
import static gov.nv.dwss.fw.batch.constants.FWConstants.CHAR_A;
import static gov.nv.dwss.fw.batch.constants.FWConstants.CHAR_F;
import static gov.nv.dwss.fw.batch.constants.FWConstants.CHAR_G;
import static gov.nv.dwss.fw.batch.constants.FWConstants.CHAR_I;
import static gov.nv.dwss.fw.batch.constants.FWConstants.CHAR_L;
import static gov.nv.dwss.fw.batch.constants.FWConstants.CHAR_M;
import static gov.nv.dwss.fw.batch.constants.FWConstants.CHAR_N;
import static gov.nv.dwss.fw.batch.constants.FWConstants.CHAR_P;
import static gov.nv.dwss.fw.batch.constants.FWConstants.CHAR_S;
import static gov.nv.dwss.fw.batch.constants.FWConstants.CHAR_Y;
import static gov.nv.dwss.fw.batch.constants.FWConstants.EMPTY;
import static gov.nv.dwss.fw.batch.util.ObjectUtils.convertToDate;
import static gov.nv.dwss.fw.batch.util.ObjectUtils.convertToLocalDate;
import static gov.nv.dwss.fw.batch.util.ObjectUtils.convertUtilDateToLocalDate;
import static java.util.Arrays.asList;
import static java.util.Collections.emptyList;
import static java.util.Collections.singletonList;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.TreeMap;
import java.util.stream.Collectors;

import javax.sql.DataSource;

import gov.nv.dwss.fw.batch.context.SystemInfoParam;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.EligVersionCaseHistoryRecord;
import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.MemberRecord;
import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.SnapCharacteristicBaseRecord;
import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.SnapCharacteristicControlParam;
import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.SnapCharacteristicInputParam;
import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.SnapCharacteristicRecord;
import gov.nv.dwss.crystalreports.foodstampcharacteristicstudy.model.SnapCharacteristicStateWideRecord;
import gov.nv.dwss.domain.dao.sor.ReportSnapStatisticsSorDao;
import gov.nv.dwss.domain.record.sor.BenefitsCaseProgramHistorySorRecord;
import gov.nv.dwss.domain.record.sor.CaseActionSorRecord;
import gov.nv.dwss.domain.record.sor.CodeTableSorRecord;
import gov.nv.dwss.domain.record.sor.EligBudgetUnitSorRecord;
import gov.nv.dwss.domain.record.sor.EligMemberTestResultSorRecord;
import gov.nv.dwss.domain.record.sor.GeneralAssistanceIncomeSorRecord;
import gov.nv.dwss.domain.record.sor.ReportSnapStatisticsSorRecord;
import gov.nv.dwss.domain.record.sor.UnearnedIncomeSorRecord;
import gov.nv.dwss.domain.record.sor.UtilityExpenseSorRecord;
import gov.nv.dwss.fw.batch.exception.BatchBusinessException;
import gov.nv.dwss.fw.batch.service.BatchDataService;
import gov.nv.dwss.fw.batch.util.ObjectUtils;
import gov.nv.dwss.switcher.DatabaseSwitcher;

@Service
public class SnapCharacteristicService extends BatchDataService {

	private static final Logger log = LogManager.getLogger(SnapCharacteristicService.class);

	@Autowired SnapCharacteristicDataService dataService;
	@Autowired @Qualifier(value = "nswdDataSource") DataSource nswdDataSource;
	@Autowired DatabaseSwitcher databaseSwitch;
	@Autowired ReportSnapStatisticsSorDao snapStatisticsSorDao;
	@Value("${db.nswd.schema}") private String nswdSchemaName;

	private static final Map<Integer, List<String>> CATEGORY_MAP = createCategoryMap();
	private static final Map<Integer, String> QUES_CD_MAP = createQuesCdMap();
	private String ds2Flag = CHAR_N;

	private static Map<Integer, String> createQuesCdMap() {
		Map<Integer, String> map = new HashMap<>();
		for (int i = 1; i <= 47; i++) {
			map.put(i, String.format("Q%02d", i));
		}
		return map;
	}

	private static Map<Integer, List<String>> createCategoryMap() {
		Map<Integer, List<String>> map = new HashMap<>();
		List<List<String>> categories = asList(
				Q01CAT, Q02CAT, Q03CAT, getQ04CAT(), getQ05CAT(), Q06CAT, getQ07CAT(), getQ08CAT(), getQ09CAT(), getQ10CAT(),
				getQ11CAT(), null, getQ13CAT(), Q14CAT, Q15CAT, Q16CAT, null, Q18CAT, Q19CAT, getQ20CAT(),
				Q21CAT, getQ22CAT(), getQ23CAT(), getQ24CAT(), getQ25CAT(), Q26CAT, Q27CAT, Q28CAT, Q29CAT, Q30CAT,
				Q31CAT, Q32CAT, getQ33CAT(), getQ34CAT(), getQ35CAT(), Q36CAT, getQ37CAT(), Q38CAT, getQ39CAT(), Q40CAT,
				Q41CAT, Q42CAT, Q43CAT, Q44CAT, Q45CAT, getQ46CAT(), getQ47CAT()
		);

		for (int i = 0; i < categories.size(); i++) {
			if (categories.get(i) != null) {
				map.put(i + 1, categories.get(i));
			}
		}
		return map;
	}

	public SnapCharacteristicRecord processSnapCharacteristicDetail(
			List<BenefitsCaseProgramHistorySorRecord> programCaseHistories, String ofcNm, String ofcCd
	) throws BatchBusinessException {
		SnapCharacteristicRecord record = new SnapCharacteristicRecord();
		record.setOfficeCode(ofcCd);
		record.setOfficeName(ofcNm);

		String iciList = programCaseHistories.stream().map(d -> String.valueOf(d.getIci())).collect(Collectors.joining(","));

		Map<Integer, List<EligVersionCaseHistoryRecord>> eligVerMap =
				this.dataService.getEligVersionAndCaseHstryAllCases(iciList).stream()
						.filter(Objects::nonNull)
						.collect(Collectors.groupingBy(EligVersionCaseHistoryRecord::getIci));

		Map<Integer, List<MemberRecord>> memHistMap =
				dataService.fetchAllCaseMemberHistory(iciList).stream()
						.filter(Objects::nonNull)
						.collect(Collectors.groupingBy(MemberRecord::getIci));

		for (BenefitsCaseProgramHistorySorRecord historyRecord : programCaseHistories) {
			SnapCharacteristicControlParam controlParam = new SnapCharacteristicControlParam();
			populateQuestions(record, historyRecord, controlParam, eligVerMap, memHistMap);
		}
		if(CHAR_Y.equals(ds2Flag)) {
			//Q06
			if(record.getHouseholdTotal()!=0) {
				BigDecimal avg = divide(record.getTotalEligNumbers(), record.getHouseholdTotal(), 2);
				record.setAverageHosehodlSize(avg);
			}
			//Q16
			if(record.getCasesWithMedicalExpenses()!=0) {
				int avgMedx = Math.round((float) record.getMedexAmount().intValue() / record.getCasesWithMedicalExpenses());
				record.setAverageMedicalExpense(BigDecimal.valueOf(avgMedx));
			}
			//Q21
			if(record.getCasesWithIncome()!=0) {
				int avgGrossIncome = Math.round((float) record.getTotalGrossIncome().intValue() / record.getCasesWithIncome());
				record.setAllCasesAverageGrossIncome(BigDecimal.valueOf(avgGrossIncome));
			}
			//Q22
			if(record.getAllPACasesCount()!=0) {
				int avgGrossIncome = Math.round((float) record.getTotalPAIncomeAmount().intValue() / record.getAllPACasesCount());
				record.setAllPAWithIncomeCasesAverageGrossIncome(BigDecimal.valueOf(avgGrossIncome));
			}
			if(record.getAllNACasesCount()!=0) {
				int avgGrossIncome = Math.round((float) record.getTotalNAIncomeAmount().intValue() / record.getAllNACasesCount());
				record.setAllNAWithIncomeCasesAverageGrossIncome(BigDecimal.valueOf(avgGrossIncome));
			}

			if(record.getPaCases()!=0) {
				int avgGrossIncome = Math.round((float) record.getTotalPAIncomeAmount().intValue() / record.getPaCases());
				record.setAllPACasesAverageGrossIncome(BigDecimal.valueOf(avgGrossIncome));
			}

			if(record.getNacases()!=0) {
				int avgGrossIncome = Math.round((float) record.getTotalNAIncomeAmount().intValue() / record.getNacases());
				record.setAllNACasesAverageGrossIncome(BigDecimal.valueOf(avgGrossIncome));
			}
			//Q23
			if(record.getTotalDisabledIncomeCount()!=0) {
				int avgGrossIncome = Math.round((float) record.getTotalDisabledIncomeAmount().intValue() / record.getTotalDisabledIncomeCount());
				record.setAllElderlyDisabledWithIncomeAverageGrossIncome(BigDecimal.valueOf(avgGrossIncome));
			}

			if(record.getDisAllCount()!=0) {
				int avgGrossIncome = Math.round((float) record.getTotalDsaIncomeAmount().intValue() / record.getDisAllCount());
				record.setAllElderlyDisabledAverageGrossIncome(BigDecimal.valueOf(avgGrossIncome));
			}
			//Q24-A
			if(record.getCasesWithEarnedIncome()!=0) {
				int avgGrossIncome = Math.round((float) record.getTotalEarnedIncome().intValue() / record.getCasesWithEarnedIncome());
				record.setAverageEarnedIncome(BigDecimal.valueOf(avgGrossIncome)); /* q24a*/
			}
			// Q24-B
			if(record.getCasesWithUnEarnedIncome() != 0) {
				int avgGrossIncome = Math.round((float) record.getTotalUnEarnedIncome().intValue() / record.getCasesWithUnEarnedIncome());
				record.setAverageUnearnedIncome(BigDecimal.valueOf(avgGrossIncome)); /* q24b*/
			}
			// Q24-C
			Integer gagaCount = record.getOccurencesOfMiscUnin().get("GAGA");
			if(gagaCount != null && gagaCount != 0) {
				int avgGrossIncome = Math.round((float) record.getUninGagaTotal().intValue() / gagaCount);
				record.setMiscUnearnedIncomeAveragesGaga(BigDecimal.valueOf(avgGrossIncome)); /* q24c*/
			}
			// Q24-D
			Integer tanfCount = record.getOccurencesOfMiscUnin().get("TANF");
			if(tanfCount != null && tanfCount != 0) {
				int avgGrossIncome = Math.round((float) record.getTotalUninTanfIncome().intValue() / tanfCount);
				record.setMiscUnearnedIncomeAveragesTanf(BigDecimal.valueOf(avgGrossIncome)); /* q24d*/
			}
			// Q24-E
			Integer edinCount = record.getOccurencesOfMiscUnin().get("EDIN");
			if(edinCount != null && edinCount != 0) {
				int avgGrossIncome = Math.round((float) record.getUninEdinTotal().intValue() / edinCount);
				record.setMiscUnearnedIncomeAveragesEdin(BigDecimal.valueOf(avgGrossIncome)); /* q24e*/
			}
			// Q24-F
			for (Map.Entry<String, Integer> entrySet : record.getOccuerencesOfUnearnedIncomeByType().entrySet()) {
				String typeCode = entrySet.getKey();
				int uninTypeCodeCount = entrySet.getValue();
				BigDecimal uninAmt = record.getUninAmountTotal().getOrDefault(typeCode, BigDecimal.ZERO);
				BigDecimal avgUnearnedIncome = uninAmt.divide(BigDecimal.valueOf(uninTypeCodeCount), 0, RoundingMode.HALF_UP);

				record.getAverageUnearnedIncomeByType().put(typeCode, avgUnearnedIncome.intValue()); /* q24f*/
			}

			//Q25
			if(record.getCasesWithRent() != 0) {
				int avgGrossIncome = Math.round((float) record.getTotalRmAmount().intValue() / record.getCasesWithRent());
				record.setAverageRent(BigDecimal.valueOf(avgGrossIncome));
			}

			//Q29
			if(record.getCasesWithDependentCareExpense() != 0) {
				int avgGrossIncome = Math.round((float) record.getTotalDcexAmount().intValue() / record.getCasesWithDependentCareExpense());
				record.setAverageDependentCare(BigDecimal.valueOf(avgGrossIncome));
			}

			//Q31
			if(record.getCasesOnActualUntilities() != 0) {
				int avgGrossIncome = Math.round((float) record.getTotalUtilAmount().intValue() / record.getCasesOnActualUntilities());
				record.setAverageActualUtilityCost(BigDecimal.valueOf(avgGrossIncome));
			}

			//Q32
			if(record.getCasesWithShelter() != 0) {
				int avgGrossIncome = Math.round((float) record.getTotalShelterAmount().intValue() / record.getCasesWithShelter());
				record.setAverageCombinedShelterUtilities(BigDecimal.valueOf(avgGrossIncome));
			}

			//Q34
			if(record.getBenefitCount() != 0) {
				int avgGrossIncome = Math.round((float) record.getTotalBenefitAmount().intValue() / record.getBenefitCount());
				record.setAverageOngoinfBenefitAllCases(BigDecimal.valueOf(avgGrossIncome));
			}
			if(record.getPaCases() != 0) {
				int avgGrossIncome = Math.round((float) record.getTotalPaBenefitAmount().intValue() / record.getPaCases());
				record.setAverageOngoinfBenefitPACases(BigDecimal.valueOf(avgGrossIncome));
			}
			if(record.getNacases() != 0) {
				int avgGrossIncome = Math.round((float) record.getTotalNaBenefitAmount().intValue() / record.getNacases());
				record.setAverageOngoinfBenefitNACases(BigDecimal.valueOf(avgGrossIncome));
			}

			//Q35
			if (record.getCasesByHouseoldSize() != null) {
				if(record.getCasesByHouseoldSize().get(1) != null && record.getCasesByHouseoldSize().get(1) != 0) {
					int avgGrossIncome = Math.round((float) record.getHouseholdTotal1().intValue() / record.getCasesByHouseoldSize().get(1));
					record.setAverageBenefitByHosueholdSize1(BigDecimal.valueOf(avgGrossIncome));
				}

				if(record.getCasesByHouseoldSize().get(2) != null && record.getCasesByHouseoldSize().get(2) != 0) {
					int avgGrossIncome = Math.round((float) record.getHouseholdTotal2().intValue() / record.getCasesByHouseoldSize().get(2));
					record.setAverageBenefitByHosueholdSize2(BigDecimal.valueOf(avgGrossIncome));
				}

				if(record.getCasesByHouseoldSize().get(3) != null && record.getCasesByHouseoldSize().get(3) != 0) {
					int avgGrossIncome = Math.round((float) record.getHouseholdTotal3().intValue() / record.getCasesByHouseoldSize().get(3));
					record.setAverageBenefitByHosueholdSize3(BigDecimal.valueOf(avgGrossIncome));
				}

				if(record.getCasesByHouseoldSize().get(4) != null && record.getCasesByHouseoldSize().get(4) != 0) {
					int avgGrossIncome = Math.round((float) record.getHouseholdTotal4().intValue() / record.getCasesByHouseoldSize().get(4));
					record.setAverageBenefitByHosueholdSize4(BigDecimal.valueOf(avgGrossIncome));
				}

				if(record.getCasesByHouseoldSize().get(5) != null && record.getCasesByHouseoldSize().get(5) != 0) {
					int avgGrossIncome = Math.round((float) record.getHouseholdTotal5().intValue() / record.getCasesByHouseoldSize().get(5));
					record.setAverageBenefitByHosueholdSize5(BigDecimal.valueOf(avgGrossIncome));
				}

				if(record.getCasesByHouseoldSize().get(6) != null && record.getCasesByHouseoldSize().get(6) != 0) {
					int avgGrossIncome = Math.round((float) record.getHouseholdTotal6().intValue() / record.getCasesByHouseoldSize().get(6));
					record.setAverageBenefitByHosueholdSize6(BigDecimal.valueOf(avgGrossIncome));
				}

				if(record.getCasesByHouseoldSize().get(7) != null && record.getCasesByHouseoldSize().get(7)!=0) {
					int avgGrossIncome = Math.round((float) record.getHouseholdTotal7().intValue() / record.getCasesByHouseoldSize().get(7));
					record.setAverageBenefitByHosueholdSize7(BigDecimal.valueOf(avgGrossIncome));
				}
			}

			//Q36
			int totalQdetFrequency = record.getCasesByAssignedCertPeriod().values().stream().mapToInt(Integer::intValue).sum();
			int sumQdetFrequency = record.getCasesByAssignedCertPeriod().entrySet().stream().mapToInt(e -> e.getKey() * e.getValue()).sum();
			if(totalQdetFrequency!=0) {
				BigDecimal roundedAvg = divide(sumQdetFrequency, totalQdetFrequency, 0);
				record.setAverageAssignedCertPeriod(roundedAvg);
			}

			//Q43
			if(record.getIciACount()!=0) {
				BigDecimal roundedAvg = divide(record.getDiffADays(), record.getIciACount(), 0);
				record.setAverageAppOrReappForApprovedCases(roundedAvg);
			}

			//Q44
			if(record.getIciDCount()!=0) {
				BigDecimal roundedAvg = divide(record.getDiffDDays(), record.getIciDCount(), 0);
				record.setAverageAppOrReappForDenialCases(roundedAvg);
			}

			//Q45
			if(record.getIciADCount()!=0) {
				BigDecimal roundedAvg = divide(record.getDiffDays(), record.getIciADCount(), 0);
				record.setAverageAppOrReappForAllCases(roundedAvg);
			}
		}

		Map<String, Integer> zipCodeData = this.dataService.getZipCodeData(ofcCd);
		Map<String, Integer> sortedZipCodeData = new TreeMap<>();
		if (!CollectionUtils.isEmpty(zipCodeData)) {
			for (Map.Entry<String, Integer> entry : zipCodeData.entrySet()) {
				String zip = entry.getKey();
				Integer count = entry.getValue();
				String baseZip = zip.length() > 5 ? zip.substring(0, 5) : zip;

				sortedZipCodeData.put(baseZip, sortedZipCodeData.getOrDefault(baseZip, 0) + count);
			}
			record.setZipCodeData(sortedZipCodeData);
		}

		return record;
	}

	public List<ReportSnapStatisticsSorRecord> mapToReportData(
			List<? extends SnapCharacteristicBaseRecord> snapRecords,
			List<ReportSnapStatisticsSorRecord> reportData
	) {
		Date reportDt = convertToDate(SystemInfoParam.getAsOfDate());

		for (SnapCharacteristicBaseRecord snapRec : snapRecords) {
			log.info("EthnicityMaleMap: {}", snapRec.getEthnicityMaleMap());
			log.info("EthnicityFemaleMap: {}", snapRec.getEthnicityFemaleMap());
			log.info("EthnicityTotalMap: {}", snapRec.getEthnicityTotalMap());
			int rptSeqNo = 1; // Reset for each officeCode
			for (int i = 1; i < 48; i++) {
				List<String> categories = getCategories(snapRec.getZipCodeData(), i);

				int catSeqNo = 1; // Reset for each questionCode
				if (!categories.isEmpty()) {
					for (int j = 0; j < categories.size(); j++) {
						String category = categories.get(j);
						ReportSnapStatisticsSorRecord data = new ReportSnapStatisticsSorRecord();
						data.setRunDate(reportDt);
						data.setReportSeqNumber(rptSeqNo++);
						data.setOfficeCode(snapRec.getOfficeCode());
						data.setReportCategory(category);

						BigDecimal totalCount;
						String quesCd = getQuesCd(i); // Default
						if (i == 10) {
							// For Q10, use index to select map and set QuesCd and categorySeqNo
							int groupSize = getQ10CAT().size(); // 21
							int group = j / groupSize;      // 0: Male, 1: Female, 2: Total
							int seqNo = (j % groupSize) + 1; // 1 to 21

							switch (group) {
								case 0:
									totalCount = BigDecimal.valueOf(snapRec.getEthnicityMaleMap().getOrDefault(category, 0));
									quesCd = "Q10A";
									break;
								case 1:
									totalCount = BigDecimal.valueOf(snapRec.getEthnicityFemaleMap().getOrDefault(category, 0));
									quesCd = "Q10B";
									break;
								case 2:
									totalCount = BigDecimal.valueOf(snapRec.getEthnicityTotalMap().getOrDefault(category, 0));
									quesCd = "Q10C";
									break;
								default:
									totalCount = BigDecimal.ZERO;
							}
							data.setQuestionCode(quesCd);
							data.setCategorySeqNumber(seqNo);
						} else {
							totalCount = getTotalCount(snapRec, i, category);
							data.setQuestionCode(quesCd);
							data.setCategorySeqNumber(catSeqNo++);
						}
						data.setFsStatsCount(totalCount);
						reportData.add(data);
					}
				}
			}
		}

		return reportData;
	}

	private List<String> getCategories(Map<String, Integer> zipCodeData, int quesNo) {
		if (quesNo == 17) {
			if (zipCodeData != null && !zipCodeData.isEmpty()) return new ArrayList<>(zipCodeData.keySet());
			else return singletonList("NA");
		}
		if (quesNo == 10) {
			List<String> baseCategories = CATEGORY_MAP.getOrDefault(quesNo, emptyList());
			List<String> categories = new ArrayList<>(baseCategories.size() * 3);
			for (int i = 0; i < 3; i++) {
				categories.addAll(baseCategories);
			}
			return categories;
		}
		if (quesNo == 12) return emptyList();

		return new ArrayList<>(CATEGORY_MAP.getOrDefault(quesNo, emptyList()));
	}

	private String getQuesCd(int quesNo) {
		return QUES_CD_MAP.getOrDefault(quesNo, EMPTY);
	}

	private BigDecimal getTotalCount(SnapCharacteristicBaseRecord snapRec, int quesNo, String category) {
		switch (quesNo) {
			case 1: return category.equals(Q01CAT.get(0)) ? BigDecimal.valueOf(snapRec.getActiveCases()) : BigDecimal.ZERO;
			case 2: return category.equals(Q02CAT.get(0)) ? BigDecimal.valueOf(snapRec.getTotalPeopleOnActiveCases()) : BigDecimal.ZERO;
			case 3: return category.equals(Q03CAT.get(0)) ? BigDecimal.valueOf(snapRec.getCasesOnMonthlyReporting()) : BigDecimal.ZERO;
			case 4: return BigDecimal.valueOf(getCase4Count(snapRec, category));
			case 5: return BigDecimal.valueOf(getCase5Count(snapRec, category));
			case 6: return category.equals(Q06CAT.get(0)) ? snapRec.getAverageHosehodlSize() : BigDecimal.ZERO;
			case 7: return BigDecimal.valueOf(getCase7Count(snapRec, category));
			case 8: return category.equals(getQ08CAT().get(0)) ? BigDecimal.valueOf(snapRec.getDisqualifiedIndividuals()) : BigDecimal.valueOf(getCase8Count(snapRec, category));
			case 9: return category.equals(getQ09CAT().get(0)) ? BigDecimal.valueOf(snapRec.getOtherDisqualifiedIndividuals()) : BigDecimal.valueOf(getCase9Count(snapRec, category));
			case 11: return BigDecimal.valueOf(getCase11Count(snapRec, category));
			case 13: return BigDecimal.valueOf(getCase13Count(snapRec, category));
			case 14: return category.equals(Q14CAT.get(0)) ? BigDecimal.valueOf(snapRec.getIndividualWithMedicalExpenses()) : BigDecimal.ZERO;
			case 15: return category.equals(Q15CAT.get(0)) ? BigDecimal.valueOf(snapRec.getCasesWithMedicalExpenses()) : BigDecimal.ZERO;
			case 16: return category.equals(Q16CAT.get(0)) ? snapRec.getAverageMedicalExpense() : BigDecimal.ZERO;
			case 17: return BigDecimal.valueOf(getCase17Count(snapRec, category));
			case 18: return category.equals(Q18CAT.get(0)) ? BigDecimal.valueOf(snapRec.getCasesWithAuthorizedRepresentative()) : BigDecimal.ZERO;
			case 19: return category.equals(Q19CAT.get(0)) ? BigDecimal.valueOf(snapRec.getCasesWithIncome()) : BigDecimal.ZERO;
			case 20: return BigDecimal.valueOf(getCase20Count(snapRec, category));
			case 21: return category.equals(Q21CAT.get(0)) ? snapRec.getAllCasesAverageGrossIncome() : BigDecimal.ZERO;
			case 22: return BigDecimal.valueOf(getCase22Count(snapRec, category));
			case 23: return BigDecimal.valueOf(getCase23Count(snapRec, category));
			case 24: return BigDecimal.valueOf(getCase24Count(snapRec, category));
			case 25: return BigDecimal.valueOf(getCase25Count(snapRec, category));
			case 26: return category.equals(Q26CAT.get(0)) ? BigDecimal.valueOf(snapRec.getCasesOnFullSua()) : BigDecimal.ZERO;
			case 27: return category.equals(Q27CAT.get(0)) ? BigDecimal.valueOf(snapRec.getCasesOnPartialSua()) : BigDecimal.ZERO;
			case 28: return category.equals(Q28CAT.get(0)) ? BigDecimal.valueOf(snapRec.getCasesWithDependentCareExpense()) : BigDecimal.ZERO;
			case 29: return category.equals(Q29CAT.get(0)) ? snapRec.getAverageDependentCare() : BigDecimal.ZERO;
			case 30: return category.equals(Q30CAT.get(0)) ? BigDecimal.valueOf(snapRec.getCasesOnActualUntilities()) : BigDecimal.ZERO;
			case 31: return category.equals(Q31CAT.get(0)) ? snapRec.getAverageActualUtilityCost() : BigDecimal.ZERO;
			case 32: return category.equals(Q32CAT.get(0)) ? snapRec.getAverageCombinedShelterUtilities() : BigDecimal.ZERO;
			case 33: return BigDecimal.valueOf(getCase33Count(snapRec, category));
			case 34: return BigDecimal.valueOf(getCase34Count(snapRec, category));
			case 35: return BigDecimal.valueOf(getCase35Count(snapRec, category));
			case 36: return category.equals(Q36CAT.get(0)) ? snapRec.getAverageAssignedCertPeriod() : BigDecimal.ZERO;
			case 37: return BigDecimal.valueOf(getCase37Count(snapRec, category));
			case 38: return category.equals(Q38CAT.get(0)) ? snapRec.getCasesWithBenefitReduction() : BigDecimal.ZERO;
			case 39: return BigDecimal.valueOf(getCase39Count(snapRec, category));
			case 40: return category.equals(Q40CAT.get(0)) ? snapRec.getAverageActualCertPeriod() : BigDecimal.ZERO;
			case 41: return category.equals(Q41CAT.get(0)) ? BigDecimal.valueOf(snapRec.getReinstationWithin30Days()) : BigDecimal.ZERO;
			case 42: return category.equals(Q42CAT.get(0)) ? BigDecimal.valueOf(snapRec.getReApplicationWithin30Days()) : BigDecimal.ZERO;
			case 43: return category.equals(Q43CAT.get(0)) ? snapRec.getAverageAppOrReappForApprovedCases() : BigDecimal.ZERO;
			case 44: return category.equals(Q44CAT.get(0)) ? snapRec.getAverageAppOrReappForDenialCases() : BigDecimal.ZERO;
			case 45: return category.equals(Q45CAT.get(0)) ? snapRec.getAverageAppOrReappForAllCases() : BigDecimal.ZERO;
			case 46: return BigDecimal.valueOf(getCase46Count(snapRec, category));
			case 47: return BigDecimal.valueOf(getCase47Count(snapRec, category));
			default: return BigDecimal.ZERO;
		}
	}

	private int getCase4Count(SnapCharacteristicBaseRecord snapRec, String category) {
		if (getQ04CAT().get(0).equals(category)) return snapRec.getPaCases();
		else if (getQ04CAT().get(1).equals(category)) return snapRec.getNacases();
		else return 0;
	}

	private int getCase5Count(SnapCharacteristicBaseRecord snapRec, String category) {
		Map<String, Integer> hhMap = new HashMap<String, Integer>() {{
			put(getQ05CAT().get(0), 1); put(getQ05CAT().get(1), 2); put(getQ05CAT().get(2), 3);
			put(getQ05CAT().get(3), 4); put(getQ05CAT().get(4), 5); put(getQ05CAT().get(5), 6); put(getQ05CAT().get(6), 7);
		}};
		for (Map.Entry<String, Integer> entry : hhMap.entrySet()) {
			if (category.equals(entry.getKey())) {
				return snapRec.getCasesByHouseoldSize().getOrDefault(entry.getValue(), 0);
			}
		}
		return 0;
	}

	private int getCase7Count(SnapCharacteristicBaseRecord snapRec, String category) {
        for (String ageCategory : getQ07CAT()) {
            if (category.equals(ageCategory)) {
                return snapRec.getIndividualsbyAge().getOrDefault(category, 0);
            }
        }
		return 0;
	}

	private int getCase8Count(SnapCharacteristicBaseRecord snapRec, String category) {
		List<String> ipvTypes = getQ08CAT().subList(1,18); //Removed 1st category for Q08 as its calculated separately.
		for (String ipvType : ipvTypes) {
			if (category.equals(ipvType)) {
				return snapRec.getOccurencesByIPBbyType().getOrDefault(ipvType, 0);
			}
		}
		return 0;
	}

	private int getCase9Count(SnapCharacteristicBaseRecord snapRec, String category) {
		List<String> ipvTypes = getQ09CAT().subList(1,4); //Removed 1st category for Q09 as its calculated separately.
        for (String ipvType : ipvTypes) {
            if (category.equals(ipvType)) {
                return snapRec.getOtherDisqualifiedIndividualsType().getOrDefault(category, 0);
            }
        }
		return 0;
	}

	private int getCase11Count(SnapCharacteristicBaseRecord snapRec, String category) {
		if (getQ11CAT().get(0).equals(category)) return snapRec.getMaleCasesNotDesignatedAsM0rF();
		else if (getQ11CAT().get(1).equals(category)) return snapRec.getFemaleCasesNotDesignatedAsM0rF();
		else return 0;
	}

	private int getCase13Count(SnapCharacteristicBaseRecord snapRec, String category) {
		if (getQ13CAT().get(0).equals(category)) return snapRec.getCasesWithAge60OrDisabled();
		else if (getQ13CAT().get(1).equals(category)) return snapRec.getCasesWithAgeOnly60OrDisabled();
		else return 0;
	}

	private int getCase17Count(SnapCharacteristicBaseRecord snapRec, String category) {
		Map<String, ?> zipMap = snapRec.getZipCodeData(); // Use wildcard to accept the value as an Integer/Long

		if (zipMap != null) {
			Object value = zipMap.get(category);
			if (value instanceof Integer) {
				return (Integer) value;
			} else if (value instanceof Long) {
				return ((Long) value).intValue(); // Convert Long to int safely
			}
		}
		return 0;
	}

	private int getCase20Count(SnapCharacteristicBaseRecord snapRec, String category) {
		if (getQ20CAT().get(0).equals(category)) return snapRec.getCasesWithEarnedIncome();
		else if (getQ20CAT().get(1).equals(category)) return snapRec.getCasesWithUnEarnedIncome();
		else if (getQ20CAT().get(2).equals(category)) return snapRec.getOccurencesOfMiscUnin().getOrDefault("GAGA", 0);
		else if (getQ20CAT().get(3).equals(category)) return snapRec.getOccurencesOfMiscUnin().getOrDefault("TANF", 0);
		else if (getQ20CAT().get(4).equals(category)) return snapRec.getOccurencesOfMiscUnin().getOrDefault("EDIN", 0);
		// For numeric categories ("01", "02", ..., "99")
		else return snapRec.getOccuerencesOfUnearnedIncomeByType().getOrDefault(category, 0);
	}

	private int getCase22Count(SnapCharacteristicBaseRecord snapRec, String category) {
		if (getQ22CAT().get(0).equals(category)) return snapRec.getAllPACasesAverageGrossIncome().intValue();
		else if (getQ22CAT().get(1).equals(category)) return snapRec.getAllNACasesAverageGrossIncome().intValue();
		else if (getQ22CAT().get(2).equals(category)) return snapRec.getAllPAWithIncomeCasesAverageGrossIncome().intValue();
		else if (getQ22CAT().get(3).equals(category)) return snapRec.getAllNAWithIncomeCasesAverageGrossIncome().intValue();
		else return 0;
	}

	private int getCase23Count(SnapCharacteristicBaseRecord snapRec, String category) {
		if (getQ23CAT().get(0).equals(category)) return snapRec.getAllElderlyDisabledWithIncomeAverageGrossIncome().intValue();
		else if (getQ23CAT().get(1).equals(category)) return snapRec.getAllElderlyDisabledAverageGrossIncome().intValue();
		else return 0;
	}

	private int getCase24Count(SnapCharacteristicBaseRecord snapRec, String category) {
		if (getQ24CAT().get(0).equals(category)) return snapRec.getAverageEarnedIncome().intValue();
		else if (getQ24CAT().get(1).equals(category)) return snapRec.getAverageUnearnedIncome().intValue();
		else if (getQ24CAT().get(2).equals(category)) return snapRec.getMiscUnearnedIncomeAveragesGaga().intValue();
		else if (getQ24CAT().get(3).equals(category)) return snapRec.getMiscUnearnedIncomeAveragesTanf().intValue();
		else if (getQ24CAT().get(4).equals(category)) return snapRec.getMiscUnearnedIncomeAveragesEdin().intValue();
		// For numeric categories ("01", "02", ..., "99")
		else return snapRec.getAverageUnearnedIncomeByType().getOrDefault(category, 0);
	}

	private int getCase25Count(SnapCharacteristicBaseRecord snapRec, String category) {
		if (getQ25CAT().get(0).equals(category)) return snapRec.getAverageRent().intValue();
		else if (getQ25CAT().get(1).equals(category)) return snapRec.getCasesWithRent();
		else return 0;
	}

	private int getCase33Count(SnapCharacteristicBaseRecord snapRec, String category) {
		if (getQ33CAT().get(0).equals(category)) return snapRec.getCasesWithNoShelter();
		else if (getQ33CAT().get(1).equals(category)) return snapRec.getCasesWithShelter();
		else if (getQ33CAT().get(2).equals(category)) return snapRec.getCasesWithAnyExpense();
		else return 0;
	}

	private int getCase34Count(SnapCharacteristicBaseRecord snapRec, String category) {
		if (getQ34CAT().get(0).equals(category)) return snapRec.getAverageOngoinfBenefitAllCases().intValue();
		else if (getQ34CAT().get(1).equals(category)) return snapRec.getAverageOngoinfBenefitPACases().intValue();
		else if (getQ34CAT().get(2).equals(category)) return snapRec.getAverageOngoinfBenefitNACases().intValue();
		else return 0;
	}

	private int getCase35Count(SnapCharacteristicBaseRecord snapRec, String category) {
		if (getQ35CAT().get(0).equals(category)) return snapRec.getAverageBenefitByHosueholdSize1().intValue();
		else if (getQ35CAT().get(1).equals(category)) return snapRec.getAverageBenefitByHosueholdSize2().intValue();
		else if (getQ35CAT().get(2).equals(category)) return snapRec.getAverageBenefitByHosueholdSize3().intValue();
		else if (getQ35CAT().get(3).equals(category)) return snapRec.getAverageBenefitByHosueholdSize4().intValue();
		else if (getQ35CAT().get(4).equals(category)) return snapRec.getAverageBenefitByHosueholdSize5().intValue();
		else if (getQ35CAT().get(5).equals(category)) return snapRec.getAverageBenefitByHosueholdSize6().intValue();
		else if (getQ35CAT().get(6).equals(category)) return snapRec.getAverageBenefitByHosueholdSize7().intValue();
		else return 0;
	}

	private int getCase37Count(SnapCharacteristicBaseRecord snapRec, String category) {
		if (category != null && category.endsWith(" MO")) {
			// Remove " MO" and parse the number
			int redeterminationFrequency = Integer.parseInt(category.replace(" MO", "").trim());
			return snapRec.getCasesByAssignedCertPeriod().getOrDefault(redeterminationFrequency, 0);
		}
		return 0;
	}

	private int getCase39Count(SnapCharacteristicBaseRecord snapRec, String category) {
		if (category != null && category.startsWith("EFF ")) {
			// Extract the day part after "EFF " and parse as integer
			int day = Integer.parseInt(category.substring(4).trim());
			return snapRec.getCasesByDayOfProgramEffectiveDate().getOrDefault(day, 0);
		}
		return 0;
	}

	private int getCase46Count(SnapCharacteristicBaseRecord snapRec, String category) {
		if (getQ46CAT().get(0).equals(category)) return snapRec.getHoseholdHeads18NoSpouse();
		else if (getQ46CAT().get(1).equals(category)) return snapRec.getHoseholdHeads18WithSpouse();
		else return 0;
	}

	private int getCase47Count(SnapCharacteristicBaseRecord snapRec, String category) {
		if (getQ47CAT().get(0).equals(category)) return snapRec.getHoseholdHeads15NoSpouse();
		else if (getQ47CAT().get(1).equals(category)) return snapRec.getHoseholdHeads15WithSpouse();
		else if (getQ47CAT().get(2).equals(category)) return snapRec.getNoOfHomeLessCases();
		else return 0;
	}

	public SnapCharacteristicStateWideRecord populateStateWideTotals(List<SnapCharacteristicRecord> records) {
		SnapCharacteristicStateWideRecord record = new SnapCharacteristicStateWideRecord();
		record.setActiveCases(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getActiveCases)
			    .sum());
		record.setTotalPeopleOnActiveCases(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getTotalPeopleOnActiveCases)
			    .sum());
		record.setCasesOnMonthlyReporting(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getCasesOnMonthlyReporting)
			    .sum());
		record.setPaCases(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getPaCases)
			    .sum());
		record.setNacases(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getNacases)
			    .sum());
		records.stream()
	    .map(SnapCharacteristicRecord::getCasesByHouseoldSize)
	    .forEach(map -> 
	        map.forEach((key, value) -> 
	        record.getCasesByHouseoldSize().merge(key, value, Integer::sum)
	        )
	    );
		
		record.setAverageHosehodlSize(records.stream()
	    .map(SnapCharacteristicRecord::getAverageHosehodlSize)
	    .reduce(BigDecimal.ZERO, BigDecimal::add));
		
		records.stream()
	    .map(SnapCharacteristicRecord::getIndividualsbyAge)
	    .forEach(map -> 
	        map.forEach((key, value) -> 
	        record.getIndividualsbyAge().merge(key, value, Integer::sum)
	        )
	    );
		record.setDisqualifiedIndividuals(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getDisqualifiedIndividuals)
			    .sum());
		
		records.stream()
	    .map(SnapCharacteristicRecord::getOccurencesByIPBbyType)
	    .forEach(map -> 
	        map.forEach((key, value) -> 
	        record.getOccurencesByIPBbyType().merge(key, value, Integer::sum)
	        )
	    );
		
		record.setOtherDisqualifiedIndividuals(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getOtherDisqualifiedIndividuals)
			    .sum());
		
		records.stream()
	    .map(SnapCharacteristicRecord::getOtherDisqualifiedIndividualsType)
	    .forEach(map -> 
	        map.forEach((key, value) -> 
	        record.getOtherDisqualifiedIndividualsType().merge(key, value, Integer::sum)
	        )
	    );
		
		records.stream()
	    .map(SnapCharacteristicRecord::getEthnicityMaleMap)
	    .forEach(map -> 
	        map.forEach((key, value) -> 
	        record.getEthnicityMaleMap().merge(key, value, Integer::sum)
	        )
	    );
		
		records.stream()
	    .map(SnapCharacteristicRecord::getEthnicityFemaleMap)
	    .forEach(map -> 
	        map.forEach((key, value) -> 
	        record.getEthnicityFemaleMap().merge(key, value, Integer::sum)
	        )
	    );
		
		records.stream()
	    .map(SnapCharacteristicRecord::getEthnicityTotalMap)
	    .forEach(map -> 
	        map.forEach((key, value) -> 
	        record.getEthnicityTotalMap().merge(key, value, Integer::sum)
	        )
	    );
		
		record.setMaleCasesNotDesignatedAsM0rF(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getMaleCasesNotDesignatedAsM0rF)
			    .sum());
		record.setFemaleCasesNotDesignatedAsM0rF(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getFemaleCasesNotDesignatedAsM0rF)
			    .sum());
		record.setCasesWithAge60OrDisabled(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getCasesWithAge60OrDisabled)
			    .sum());
		record.setCasesWithAgeOnly60OrDisabled(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getCasesWithAgeOnly60OrDisabled)
			    .sum());
		record.setIndividualWithMedicalExpenses(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getIndividualWithMedicalExpenses)
			    .sum());
		record.setCasesWithMedicalExpenses(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getCasesWithMedicalExpenses)
			    .sum());
		record.setAverageMedicalExpense(records.stream()
			    .map(SnapCharacteristicRecord::getAverageMedicalExpense)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		Map<String, Integer> sateWideZipData = this.dataService.getSateWideZipData();
		record.setZipCodeData(sateWideZipData);
		
		record.setCasesWithAuthorizedRepresentative(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getCasesWithAuthorizedRepresentative)
			    .sum());
		record.setCasesWithIncome(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getCasesWithIncome)
			    .sum());
		record.setCasesWithEarnedIncome(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getCasesWithEarnedIncome)
			    .sum());
		record.setCasesWithUnEarnedIncome(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getCasesWithUnEarnedIncome)
			    .sum());
		
		records.stream()
	    .map(SnapCharacteristicRecord::getOccurencesOfMiscUnin)
	    .forEach(map -> 
	        map.forEach((key, value) -> 
	        record.getOccurencesOfMiscUnin().merge(key, value, Integer::sum)
	        )
	    );
		records.stream()
	    .map(SnapCharacteristicRecord::getOccuerencesOfUnearnedIncomeByType)
	    .forEach(map -> 
	        map.forEach((key, value) -> 
	        record.getOccuerencesOfUnearnedIncomeByType().merge(key, value, Integer::sum)
	        )
	    );

		record.setAllCasesAverageGrossIncome(records.stream()
			    .map(SnapCharacteristicRecord::getAllCasesAverageGrossIncome)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		
		record.setAllPACasesAverageGrossIncome(records.stream()
			    .map(SnapCharacteristicRecord::getAllPACasesAverageGrossIncome)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setAllNACasesAverageGrossIncome(records.stream()
			    .map(SnapCharacteristicRecord::getAllNACasesAverageGrossIncome)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setAllPAWithIncomeCasesAverageGrossIncome(records.stream()
			    .map(SnapCharacteristicRecord::getAllPAWithIncomeCasesAverageGrossIncome)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setAllNAWithIncomeCasesAverageGrossIncome(records.stream()
			    .map(SnapCharacteristicRecord::getAllNAWithIncomeCasesAverageGrossIncome)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setAllElderlyDisabledWithIncomeAverageGrossIncome(records.stream()
			    .map(SnapCharacteristicRecord::getAllElderlyDisabledWithIncomeAverageGrossIncome)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setAllElderlyDisabledAverageGrossIncome(records.stream()
			    .map(SnapCharacteristicRecord::getAllElderlyDisabledAverageGrossIncome)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setAverageEarnedIncome(records.stream()
			    .map(SnapCharacteristicRecord::getAverageEarnedIncome)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setAverageUnearnedIncome(records.stream()
			    .map(SnapCharacteristicRecord::getAverageUnearnedIncome)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setMiscUnearnedIncomeAveragesGaga(records.stream()
			    .map(SnapCharacteristicRecord::getMiscUnearnedIncomeAveragesGaga)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setMiscUnearnedIncomeAveragesTanf(records.stream()
			    .map(SnapCharacteristicRecord::getMiscUnearnedIncomeAveragesTanf)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setMiscUnearnedIncomeAveragesEdin(records.stream()
			    .map(SnapCharacteristicRecord::getMiscUnearnedIncomeAveragesEdin)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		
		records.stream()
	    .map(SnapCharacteristicRecord::getAverageUnearnedIncomeByType)
	    .forEach(map -> 
	        map.forEach((key, value) -> 
	        record.getAverageUnearnedIncomeByType().merge(key, value, Integer::sum)
	        )
	    );
		
		record.setAverageRent(records.stream()
			    .map(SnapCharacteristicRecord::getAverageRent)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		
		record.setCasesWithRent(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getCasesWithRent)
			    .sum());
		
		record.setCasesOnFullSua(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getCasesOnFullSua)
			    .sum());
		record.setCasesOnPartialSua(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getCasesOnPartialSua)
			    .sum());
		
		record.setCasesWithDependentCareExpense(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getCasesWithDependentCareExpense)
			    .sum());
		
		record.setAverageDependentCare(records.stream()
			    .map(SnapCharacteristicRecord::getAverageDependentCare)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		
		record.setCasesOnActualUntilities(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getCasesOnActualUntilities)
			    .sum());
		record.setAverageActualUtilityCost(records.stream()
			    .map(SnapCharacteristicRecord::getAverageActualUtilityCost)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setAverageCombinedShelterUtilities(records.stream()
			    .map(SnapCharacteristicRecord::getAverageCombinedShelterUtilities)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setCasesWithNoShelter(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getCasesWithNoShelter)
			    .sum());
		record.setCasesWithShelter(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getCasesWithShelter)
			    .sum());
		record.setCasesWithAnyExpense(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getCasesWithAnyExpense)
			    .sum());
		record.setAverageOngoinfBenefitAllCases(records.stream()
			    .map(SnapCharacteristicRecord::getAverageOngoinfBenefitAllCases)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setAverageOngoinfBenefitPACases(records.stream()
			    .map(SnapCharacteristicRecord::getAverageOngoinfBenefitPACases)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setAverageOngoinfBenefitNACases(records.stream()
			    .map(SnapCharacteristicRecord::getAverageOngoinfBenefitNACases)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setAverageBenefitByHosueholdSize1(records.stream()
			    .map(SnapCharacteristicRecord::getAverageBenefitByHosueholdSize1)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		
		record.setAverageBenefitByHosueholdSize2(records.stream()
			    .map(SnapCharacteristicRecord::getAverageBenefitByHosueholdSize2)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setAverageBenefitByHosueholdSize3(records.stream()
			    .map(SnapCharacteristicRecord::getAverageBenefitByHosueholdSize3)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setAverageBenefitByHosueholdSize4(records.stream()
			    .map(SnapCharacteristicRecord::getAverageBenefitByHosueholdSize4)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setAverageBenefitByHosueholdSize5(records.stream()
			    .map(SnapCharacteristicRecord::getAverageBenefitByHosueholdSize5)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setAverageBenefitByHosueholdSize6(records.stream()
			    .map(SnapCharacteristicRecord::getAverageBenefitByHosueholdSize6)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setAverageBenefitByHosueholdSize7(records.stream()
			    .map(SnapCharacteristicRecord::getAverageBenefitByHosueholdSize7)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setAverageAssignedCertPeriod(records.stream()
			    .map(SnapCharacteristicRecord::getAverageAssignedCertPeriod)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		records.stream()
	    .map(SnapCharacteristicRecord::getCasesByAssignedCertPeriod)
	    .forEach(map -> 
	        map.forEach((key, value) -> 
	        record.getCasesByAssignedCertPeriod().merge(key, value, Integer::sum)
	        )
	    );
		record.setCasesWithBenefitReduction(records.stream()
			    .map(SnapCharacteristicRecord::getCasesWithBenefitReduction)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		records.stream()
	    .map(SnapCharacteristicRecord::getCasesByDayOfProgramEffectiveDate)
	    .forEach(map -> 
	        map.forEach((key, value) -> 
	        record.getCasesByDayOfProgramEffectiveDate().merge(key, value, Integer::sum)
	        )
	    );
		record.setAverageActualCertPeriod(records.stream()
			    .map(SnapCharacteristicRecord::getAverageActualCertPeriod)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setReinstationWithin30Days(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getReinstationWithin30Days)
			    .sum());
		record.setReApplicationWithin30Days(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getReApplicationWithin30Days)
			    .sum());
		record.setAverageAppOrReappForApprovedCases(records.stream()
			    .map(SnapCharacteristicRecord::getAverageAppOrReappForApprovedCases)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setAverageAppOrReappForDenialCases(records.stream()
			    .map(SnapCharacteristicRecord::getAverageAppOrReappForDenialCases)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setAverageAppOrReappForAllCases(records.stream()
			    .map(SnapCharacteristicRecord::getAverageAppOrReappForAllCases)
			    .reduce(BigDecimal.ZERO, BigDecimal::add));
		record.setHoseholdHeads18NoSpouse(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getHoseholdHeads18NoSpouse)
			    .sum());
		record.setHoseholdHeads18WithSpouse(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getHoseholdHeads18WithSpouse)
			    .sum());
		record.setHoseholdHeads15NoSpouse(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getHoseholdHeads15NoSpouse)
			    .sum());
		record.setHoseholdHeads15WithSpouse(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getHoseholdHeads15WithSpouse)
			    .sum());
		record.setNoOfHomeLessCases(records.stream()
			    .mapToInt(SnapCharacteristicRecord::getNoOfHomeLessCases)
			    .sum());
		
		return record;
	}

	private void populateQuestions(
			SnapCharacteristicRecord record, BenefitsCaseProgramHistorySorRecord historyRecord,
			SnapCharacteristicControlParam controlParam, Map<Integer, List<EligVersionCaseHistoryRecord>> eligVerMap,
			Map<Integer, List<MemberRecord>> memHistMap
	) {
		List<EligVersionCaseHistoryRecord> eligVersionAndCaseHstryList = eligVerMap.get(historyRecord.getIci());
		if (!CollectionUtils.isEmpty(eligVersionAndCaseHstryList)) {
			EligVersionCaseHistoryRecord eligVersionCaseHistoryRecord = eligVersionAndCaseHstryList.get(0);
			ds2Flag = CHAR_Y;
			controlParam.setIciCount(controlParam.getIciCount() + 1);
			controlParam.setIci(historyRecord.getIci());
			// Q1
			record.setActiveCases(record.getActiveCases() + 1);  /* q01*/
			// PROCESS UPI'S FOR EACH ICI
			processCaseIndividuals(record, controlParam, eligVersionCaseHistoryRecord, memHistMap);
			//Q3
			if(CHAR_Y.equals(eligVersionCaseHistoryRecord.getMthlyRptrInd())) {
				record.setCasesOnMonthlyReporting(record.getCasesOnMonthlyReporting()+1);
			}
			//Q4, Q34A, Q34A
			calculatePANACounts(record, eligVersionCaseHistoryRecord);
			//Q37
			populateCertFrequencyCounts(record, historyRecord);

			//Q39
			int day = ObjectUtils.getDay(historyRecord.getProgramEffectiveDate());
			this.incrementEffectiveDay(record.getCasesByDayOfProgramEffectiveDate(), day);

			//Q46/Q47
			populateHouseHoldHeads(record, controlParam, eligVersionCaseHistoryRecord);

			//Q05
			populateCasesByHouseholdSize(record, eligVersionCaseHistoryRecord);

			//Q13
			populateAgedDisabledCount(record, controlParam);

			//Q26/Q27
			populateFullAndPartialSua(record, controlParam);

			//Q38
			if (eligVersionCaseHistoryRecord.getBnftReductionAmount().compareTo(BigDecimal.ZERO) > 0) {
				record.setCasesWithBenefitReduction(record.getCasesWithBenefitReduction().add(eligVersionCaseHistoryRecord.getBnftReductionAmount()));
			}

			List<EligBudgetUnitSorRecord> budUnit = this.dataService.getBudgetUnit(historyRecord.getIci(), eligVersionCaseHistoryRecord.getVersionNumber());
			if (!CollectionUtils.isEmpty(budUnit)) {
				EligBudgetUnitSorRecord budgetRecord = budUnit.get(0);
				//Q15
				populateMedexAmount(record, budgetRecord);

				//Q19
				populateCasesWithIncome(record, budgetRecord);

				//Q22
				populatePANACasesAvgGrossIncome(record, eligVersionCaseHistoryRecord, budgetRecord);

				//Q20
				populateTotalEarnedIncome(record, budgetRecord);

				//Q20Map
				populateUninTanfIncome(record, budgetRecord);

				//Q20b
				populateCasesWithUnearnedIncome(record, controlParam, budgetRecord);

				//Q25
				populateCasesWithRent(record, budgetRecord);

				//Q28
				populateCasesWithDcexAmount(record, budgetRecord);

				//Q30
				populateCasesWithUtilities(record, budgetRecord);

				record.setTotalShelterAmount(record.getTotalShelterAmount().add(budgetRecord.getRentExpenseAmount())
						.add(budgetRecord.getHomeExpenseAmount()).add(budgetRecord.getUtilExpenseAmount())
				);
				record.setTotalRentHomeUtilAmount(budgetRecord.getRentExpenseAmount()
						.add(budgetRecord.getHomeExpenseAmount()).add(budgetRecord.getUtilExpenseAmount()));
				//Q33a&b
				if (record.getTotalRentHomeUtilAmount().compareTo(BigDecimal.ZERO) > 0) {
					record.setCasesWithShelter(record.getCasesWithShelter() + 1);
				} else {
					record.setCasesWithNoShelter(record.getCasesWithNoShelter() + 1);
				}

				record.setAllExpensesAmount(budgetRecord.getDependentCareExpenseAmount()
						.add(budgetRecord.getUtilExpenseAmount()).add(budgetRecord.getRentExpenseAmount())
						.add(budgetRecord.getHomeExpenseAmount()).add(budgetRecord.getOngoingMedicalExpenseAmount())
						.add(budgetRecord.getOtherMedicalExpenseAmount())
				);
				//Q33c
				if (record.getAllExpensesAmount().compareTo(BigDecimal.ZERO) > 0) {
					record.setCasesWithAnyExpense(record.getCasesWithAnyExpense() + 1);
				}

				if ((controlParam.getAgedCount() > 0 || controlParam.getDisabledCount() > 0) && budgetRecord.getTotalIncomeAmount().compareTo(BigDecimal.ZERO) > 0) {
					record.setTotalDisabledIncomeAmount(record.getTotalDisabledIncomeAmount().add(budgetRecord.getTotalIncomeAmount()));
					record.setTotalDisabledIncomeCount(record.getTotalDisabledIncomeCount() + 1);
				}

				if (controlParam.getAgedCount() > 0 || controlParam.getDisabledCount() > 0) {
					record.setTotalDsaIncomeAmount(record.getTotalDsaIncomeAmount().add(budgetRecord.getTotalIncomeAmount()));
					record.setDisAllCount(record.getDisAllCount() + 1);
				}
			} // block end for budget unit

			// START - Q43 & Q45
			Timestamp apActionTimeStamp = this.dataService.getApActionTimeStamp(historyRecord.getIci(), historyRecord.getApplicationReceivedDate());
			if (null != apActionTimeStamp) {
				LocalDate actionDate = apActionTimeStamp.toLocalDateTime().toLocalDate();
				LocalDate applDate = convertUtilDateToLocalDate(historyRecord.getApplicationReceivedDate());
				int dateDiff = dateDiff(actionDate, applDate);
				dateDiff = actionDate.isBefore(applDate) ? 1 : dateDiff + 1;

				record.setDiffADays(record.getDiffADays() + dateDiff); /* q43 approved cases */
				record.setDiffDays(record.getDiffDays() + dateDiff);  /* q45 all cases */
				record.setIciACount(record.getIciACount() + 1);   /* q43 approved cases */
				record.setIciADCount(record.getIciADCount() + 1); /* q45 all cases */
			}
			// END - Q43 & Q45

			// START - Q18
			Integer facilityCount = this.dataService.getFacilityData(historyRecord.getIci());
			if (facilityCount > 0) {
				record.setCasesWithAuthorizedRepresentative(record.getCasesWithAuthorizedRepresentative() + 1);
			}
			// END - Q18

		} // block end for elig version

		//Q43 & Q45
		populateQ43AndQ45(record);
	}

	private void populateQ43AndQ45(SnapCharacteristicRecord record) {
		/* GET ALL DENIED (FIRST ACTION) CASES */
		List<CaseActionSorRecord> caseActionSorRecords = this.dataService.getDnActionTimeStamp(record.getOfficeCode());
		if (!caseActionSorRecords.isEmpty()) {
			for (CaseActionSorRecord caseActionSorRecord : caseActionSorRecords) {
				Timestamp dnPreviousTimestamp = this.dataService.getDnMaxActionTimeStamp(caseActionSorRecord.getIci(), caseActionSorRecord.getActionTimeStamp());
				if (dnPreviousTimestamp != null) {
					LocalDate minDate = caseActionSorRecord.getActionTimeStamp().toLocalDateTime().toLocalDate();
					LocalDate prevDate = dnPreviousTimestamp.toLocalDateTime().toLocalDate();
					int dateDiff = dateDiff(minDate, prevDate);
					dateDiff = minDate.isBefore(prevDate) ? 1 : dateDiff + 1;
					record.setDiffDDays(record.getDiffDDays() + dateDiff); /* q44 denials cases */
					record.setDiffDays(record.getDiffDays() + dateDiff); /* q45 all cases */
					record.setIciDCount(record.getIciDCount() + 1); /* q44 denials cases */
					record.setIciADCount(record.getIciADCount() + 1); /* q45 all cases */
				}
			}
		}
	}

	private void populateCasesWithUtilities(SnapCharacteristicRecord record, EligBudgetUnitSorRecord budgetRecord) {
		if(budgetRecord.getUtilExpenseAmount().compareTo(BigDecimal.ZERO) > 0 ) {
			record.setCasesOnActualUntilities(record.getCasesOnActualUntilities() + 1);
			record.setTotalUtilAmount(record.getTotalUtilAmount().add(budgetRecord.getUtilExpenseAmount()));
		}
	}

	private void populateCasesWithDcexAmount(SnapCharacteristicRecord record, EligBudgetUnitSorRecord budgetRecord) {
		if(budgetRecord.getDependentCareExpenseAmount().compareTo(BigDecimal.ZERO) > 0 ) {
			record.setCasesWithDependentCareExpense(record.getCasesWithDependentCareExpense() + 1);
			record.setTotalDcexAmount(record.getTotalDcexAmount().add(budgetRecord.getDependentCareExpenseAmount()));
		}
	}

	private void populateCasesWithRent(SnapCharacteristicRecord record, EligBudgetUnitSorRecord budgetRecord) {
		if(budgetRecord.getRentExpenseAmount().compareTo(BigDecimal.ZERO) > 0 || budgetRecord.getHomeExpenseAmount().compareTo(BigDecimal.ZERO) > 0 ) {
			record.setCasesWithRent(record.getCasesWithRent()+1);
		}
	}

	private void populateCasesWithUnearnedIncome(
			SnapCharacteristicRecord record, SnapCharacteristicControlParam controlParam,
			EligBudgetUnitSorRecord budgetRecord
	) {
		if(budgetRecord.getUnearnedIncomeAmount().compareTo(BigDecimal.ZERO) > 0
				|| budgetRecord.getCashBenefitAmount().compareTo(BigDecimal.ZERO) > 0
				|| CHAR_Y.equals(controlParam.getGagaIncomeFlag())
				|| CHAR_Y.equals(controlParam.getEdinIncomeFlag())){
			
			record.setCasesWithUnEarnedIncome(record.getCasesWithUnEarnedIncome()+1);
		}
		if(budgetRecord.getUnearnedIncomeAmount().compareTo(BigDecimal.ZERO) > 0 ) {
			record.setTotalUnEarnedIncome(record.getTotalUnEarnedIncome().add(budgetRecord.getUnearnedIncomeAmount()));
		}
		
		if(budgetRecord.getRentExpenseAmount().compareTo(BigDecimal.ZERO) > 0 ) {
			record.setTotalRmAmount(record.getTotalRmAmount().add(budgetRecord.getRentExpenseAmount()));
		}
		
		if(budgetRecord.getHomeExpenseAmount().compareTo(BigDecimal.ZERO) > 0 ) {
			record.setTotalRmAmount(record.getTotalRmAmount().add(budgetRecord.getHomeExpenseAmount()));
		}
	}

	private void populateUninTanfIncome(SnapCharacteristicRecord record, EligBudgetUnitSorRecord budgetRecord) {
		if(budgetRecord.getCashBenefitAmount().compareTo(BigDecimal.ZERO) > 0) {
			incrementCategoryCount(record.getOccurencesOfMiscUnin(), "TANF");
			record.setTotalUninTanfIncome(record.getTotalUninTanfIncome().add(budgetRecord.getCashBenefitAmount()));
		}
	}

	private void populateTotalEarnedIncome(SnapCharacteristicRecord record, EligBudgetUnitSorRecord budgetRecord) {
		if(budgetRecord.getGrossEarndIncomeAmount().compareTo(BigDecimal.ZERO)>0) {
			record.setCasesWithEarnedIncome(record.getCasesWithEarnedIncome()+1);
			record.setTotalEarnedIncome(record.getTotalEarnedIncome().add(budgetRecord.getGrossEarndIncomeAmount()));
		}
	}

	private void populatePANACasesAvgGrossIncome(SnapCharacteristicRecord record,
			EligVersionCaseHistoryRecord eligVersionCaseHistoryRecord, EligBudgetUnitSorRecord budgetRecord) {
		if (budgetRecord.getTotalIncomeAmount().compareTo(BigDecimal.ZERO) > 0) {
			if(asList(CHAR_P, CHAR_S, CHAR_A, CHAR_G).contains(eligVersionCaseHistoryRecord.getFsSufx())) {
				record.setAllPACasesCount(record.getAllPACasesCount() + 1);
				record.setTotalPAIncomeAmount(record.getTotalPAIncomeAmount().add(budgetRecord.getTotalIncomeAmount()));
			} else {
				record.setAllNACasesCount(record.getAllNACasesCount() + 1);
				record.setTotalNAIncomeAmount(record.getTotalNAIncomeAmount().add(budgetRecord.getTotalIncomeAmount()));
			}
		}
	}

	private void populateCasesWithIncome(SnapCharacteristicRecord record, EligBudgetUnitSorRecord budgetRecord) {
		if(budgetRecord.getTotalIncomeAmount().compareTo(BigDecimal.ZERO) > 0) {
			record.setCasesWithIncome(record.getCasesWithIncome() + 1);
			record.setTotalGrossIncome(record.getTotalGrossIncome().add(budgetRecord.getTotalIncomeAmount()));
		}
	}

	private void populateMedexAmount(SnapCharacteristicRecord record, EligBudgetUnitSorRecord budgetRecord) {
		if(budgetRecord.getOngoingMedicalExpenseAmount().compareTo(BigDecimal.ZERO) > 0
				|| budgetRecord.getOtherMedicalExpenseAmount().compareTo(BigDecimal.ZERO) > 0) {
			record.setCasesWithMedicalExpenses(record.getCasesWithMedicalExpenses() + 1);
			record.setMedexAmount(record.getMedexAmount().add(budgetRecord.getOngoingMedicalExpenseAmount()));
		}
	}

	private int dateDiff(LocalDate d1, LocalDate d2) {
	        if (d1 == null || d2 == null) return 0;
	        return (int) ChronoUnit.DAYS.between(d2, d1);
	    }

	private void populateFullAndPartialSua(SnapCharacteristicRecord record, SnapCharacteristicControlParam controlParam) {
		if (CHAR_Y.equals(controlParam.getSuaFlag())) {
			record.setCasesOnFullSua(record.getCasesOnFullSua()+1); /* q26*/
		} else if (CHAR_Y.equals(controlParam.getPsuaFlag())) {
			record.setCasesOnPartialSua(record.getCasesOnPartialSua()+1); /* q27*/
		}
	}

	private void populateAgedDisabledCount(SnapCharacteristicRecord record, SnapCharacteristicControlParam controlParam) {
		if(controlParam.getAgedCount()>0 || controlParam.getDisabledCount()>0) {
			record.setCasesWithAge60OrDisabled(record.getCasesWithAge60OrDisabled()+1);
		}
		if(controlParam.getDisabledCount().equals(controlParam.getAgddisUpiCount()) || 
				controlParam.getAgedCount().equals(controlParam.getAgddisUpiCount())
				|| controlParam.getDisabledOrAgedCount().equals(controlParam.getAgddisUpiCount())){
			record.setCasesWithAgeOnly60OrDisabled(record.getCasesWithAgeOnly60OrDisabled()+1);	
		}
	}

	private void populateCasesByHouseholdSize(SnapCharacteristicRecord record, EligVersionCaseHistoryRecord eligRecord) {
		Integer eligNumber = eligRecord.getEligNumber();
		if(eligNumber==1) {
			this.incrementEffectiveDay(record.getCasesByHouseoldSize(),eligNumber);
			record.setHouseholdTotal1(record.getHouseholdTotal1().add(eligRecord.getMtdEntlmAmount()));
		}
		if(eligNumber==2) {
			this.incrementEffectiveDay(record.getCasesByHouseoldSize(),eligNumber);
			record.setHouseholdTotal2(record.getHouseholdTotal2().add(eligRecord.getMtdEntlmAmount()));
		}
		if(eligNumber==3) {
			this.incrementEffectiveDay(record.getCasesByHouseoldSize(),eligNumber);
			record.setHouseholdTotal3(record.getHouseholdTotal3().add(eligRecord.getMtdEntlmAmount()));
		}
		if(eligNumber==4) {
			this.incrementEffectiveDay(record.getCasesByHouseoldSize(),eligNumber);
			record.setHouseholdTotal4(record.getHouseholdTotal4().add(eligRecord.getMtdEntlmAmount()));
		}
		if(eligNumber==5) {
			this.incrementEffectiveDay(record.getCasesByHouseoldSize(),eligNumber);
			record.setHouseholdTotal5(record.getHouseholdTotal5().add(eligRecord.getMtdEntlmAmount()));
		}
		if(eligNumber==6) {
			this.incrementEffectiveDay(record.getCasesByHouseoldSize(),eligNumber);
			record.setHouseholdTotal6(record.getHouseholdTotal6().add(eligRecord.getMtdEntlmAmount()));
		}
		if(eligNumber>6) {
			this.incrementEffectiveDay(record.getCasesByHouseoldSize(),7);
			record.setHouseholdTotal7(record.getHouseholdTotal7().add(eligRecord.getMtdEntlmAmount()));
		}
		
		if(eligNumber>0) {
			record.setHouseholdTotal(record.getHouseholdTotal()+1);
			record.setTotalEligNumbers(record.getTotalEligNumbers()+eligNumber);
		}
	}

	private void populateHouseHoldHeads(SnapCharacteristicRecord record, SnapCharacteristicControlParam controlParam,
			EligVersionCaseHistoryRecord eligVersionCaseHistoryRecord) {
		if (CHAR_Y.equals(controlParam.getHouseHoldAge18Flag())) {
			if (CHAR_Y.equals(controlParam.getSpouseFlag())) {
				record.setHoseholdHeads18WithSpouse(record.getHoseholdHeads18WithSpouse()+1); /* 46B */
			} else {
				record.setHoseholdHeads18NoSpouse(record.getHoseholdHeads18NoSpouse()+1); /* 46A */
			}
		} else if (CHAR_Y.equals(controlParam.getHouseHoldAge15Flag())) {
			if (CHAR_Y.equals(controlParam.getSpouseFlag())) {
				record.setHoseholdHeads15WithSpouse(record.getHoseholdHeads15WithSpouse()+1); /* 47CB */
			} else {
				record.setHoseholdHeads15NoSpouse(record.getHoseholdHeads15NoSpouse()+1); /* 47A */
			}
		}

		if (CHAR_Y.equals(eligVersionCaseHistoryRecord.getHmlsInd())) {
			record.setNoOfHomeLessCases(record.getNoOfHomeLessCases()+1); /* 47C */
		}
	}
	
	public void incrementEffectiveDay(Map<Integer, Integer> map, int value) {
		map.merge(value, 1, Integer::sum);
	}

	private void populateCertFrequencyCounts(SnapCharacteristicRecord record, BenefitsCaseProgramHistorySorRecord historyRecord) {
		int redFreq = historyRecord.getRedeterminationFrequency();
		if (asList(1,2,3,4,5,6,7,8,9,10,11,12,24).contains(redFreq)) {
			this.incrementEffectiveDay(record.getCasesByAssignedCertPeriod(), historyRecord.getRedeterminationFrequency());
		}
	}

	private void calculatePANACounts(SnapCharacteristicRecord record, EligVersionCaseHistoryRecord eligVersionCaseHistoryRecord) {
		if (asList(CHAR_P, CHAR_S, CHAR_A, CHAR_G).contains(eligVersionCaseHistoryRecord.getFsSufx())) {
			record.setPaCases(record.getPaCases()+1); /* Q04 - A*/
			record.setBenefitCount(record.getBenefitCount()+1);
			record.setTotalPaBenefitAmount(record.getTotalPaBenefitAmount().add(eligVersionCaseHistoryRecord.getMtdEntlmAmount()));
			record.setTotalBenefitAmount(record.getTotalBenefitAmount().add(eligVersionCaseHistoryRecord.getMtdEntlmAmount()));
		} else {
			record.setNacases(record.getNacases()+1); /* Q04 - B*/
			record.setBenefitCount(record.getBenefitCount()+1);
			record.setTotalNaBenefitAmount(record.getTotalNaBenefitAmount().add(eligVersionCaseHistoryRecord.getMtdEntlmAmount()));
			record.setTotalBenefitAmount(record.getTotalBenefitAmount().add(eligVersionCaseHistoryRecord.getMtdEntlmAmount()));
		}
	}

	private void processCaseIndividuals(SnapCharacteristicRecord record, SnapCharacteristicControlParam controlParam,
			EligVersionCaseHistoryRecord eligVersionAndCaseHstry, Map<Integer, List<MemberRecord>> memHistMap) {
		/* GET UPI'S FOR EACH ICI*/
		List<MemberRecord> memberHistory = memHistMap.get(controlParam.getIci());
		if (!CollectionUtils.isEmpty(memberHistory)) {
			for (MemberRecord memberRecord : memberHistory) {
				controlParam.setDisqFlag(CHAR_N);
				/* start q08*/
				//String personDisQlRsnCd = this.dataService.getPersonDisqlRsnCd(controlParam.getIci(), memberRecord.getUpi());
				String personDisQlRsnCd = memberRecord.getPersonDisQlRsnCd();
				List<String> ipvDisCodes = SnapCharacteristicInputParam.getIpvDisCodeTable().stream().map(CodeTableSorRecord::getCodeTableCd).collect(Collectors.toList());
				if (personDisQlRsnCd != null && ipvDisCodes.contains(personDisQlRsnCd)) {
					// Q08
					record.getOccurencesByIPBbyType().put(personDisQlRsnCd, record.getOccurencesByIPBbyType().getOrDefault(personDisQlRsnCd, 0) + 1);
					// Q08
					record.setDisqualifiedIndividuals(record.getDisqualifiedIndividuals() + 1);
					controlParam.setDisqFlag(CHAR_Y);
				}
				/* end q08*/

				/* start q09*/
				List<EligMemberTestResultSorRecord> eligMemberTestResults = this.dataService.getEligMemberTestResults(
						controlParam.getIci(), memberRecord.getUpi(), eligVersionAndCaseHstry.getVersionNumber());
				if (!CollectionUtils.isEmpty(eligMemberTestResults)) {
					// Q09
					populateOtherDisqualifiedCounts(record, controlParam, eligMemberTestResults.get(0));
				}
				/* end q09*/

				LocalDate asOfDate = convertToLocalDate(SystemInfoParam.getAsOfDate());
				LocalDate dob = convertUtilDateToLocalDate(memberRecord.getDob());
				int calculateAge = calculateAge(dob, asOfDate);
				if (!CHAR_Y.equals(controlParam.getDisqFlag())) {
					// Q02
					record.setTotalPeopleOnActiveCases(record.getTotalPeopleOnActiveCases() + 1);
					// Q07
					processMemberAgeCounts(calculateAge, record.getIndividualsbyAge());
				}

				/* start q13*/
				/* COUNT EVERY UPI - USED IN APPLSPEC TO DETERMINE IF ALL ARE AGDDIS*/
			    controlParam.setAgddisUpiCount(controlParam.getAgddisUpiCount()+1);
			    //String incapDisabilityIndicator = this.dataService.getIncapDiablityIndicator(memberRecord.getUpi());
				String incapDisabilityIndicator = memberRecord.getIncapDisabilityIndicator();
				if(CHAR_Y.equals(incapDisabilityIndicator)) {
			    	controlParam.setDisabledCount(controlParam.getDisabledCount()+1);
			    	controlParam.setDisabledOrAgedCount(controlParam.getDisabledOrAgedCount()+1);
			    } else {
			    	if(calculateAge>=60) {
			    		controlParam.setAgedCount(controlParam.getAgedCount()+1);
			    		controlParam.setDisabledOrAgedCount(controlParam.getDisabledOrAgedCount()+1);
			    	}
			    }
				/* end q13*/

				/* start q46,q47*/
			    if(memberRecord.getUpi().equals(eligVersionAndCaseHstry.getHohUpi())) {
			    	if(calculateAge >= 18) {
			    		controlParam.setHouseHoldAge18Flag(CHAR_Y);
			    	} else if(calculateAge > 15) {
			    		controlParam.setHouseHoldAge15Flag(CHAR_Y);
			    	}
			    }

				/* check for a spouse in the household*/
			    String relationshipCode = this.dataService.getRelationshipCodes(controlParam.getIci(), eligVersionAndCaseHstry.getHohUpi(), memberRecord.getUpi());
			    if(relationshipCode != null && relationshipCode.equals("02")) {
			    	controlParam.setSpouseFlag(CHAR_Y);
			    }
				/* end q46,q47*/

			    //Q10/Q12
			    populateEthnicityCounts(record, memberRecord);

		        //Q14
		        //BigDecimal medicalExpenseTotalAmount = this.dataService.getMedicalExpenseTotalAmount(memberRecord.getUpi());
				BigDecimal medicalExpenseTotalAmount = memberRecord.getMedicalExpenseTotAmt();
				if(null != medicalExpenseTotalAmount && medicalExpenseTotalAmount.compareTo(BigDecimal.ZERO) > 0) {
			    	record.setIndividualWithMedicalExpenses(record.getIndividualWithMedicalExpenses() + 1);
			    }

			    //For Q26, Q27
			    setSuaFlags(controlParam, memberRecord);
			    //Q20,Q24 GAGA
			    calculateGaga(record, controlParam, memberRecord);
			    //Q20,Q24 EDIN
			    calculateEdin(record, controlParam, memberRecord);
			    //Q20,Q24 UNIN
			    calculateUnin(record, memberRecord);
			}
		}
	}

	private void populateEthnicityCounts(SnapCharacteristicRecord record, MemberRecord memberRecord) {
		List<CodeTableSorRecord> ethnicityCodeTable = SnapCharacteristicInputParam.getEthnicityCodeTable();
		String ethncCd = memberRecord.getEthnicCode();
		String sexCd = memberRecord.getSexCode();
		String description = getDescription(ethncCd, ethnicityCodeTable);

		//log.info("{}", memberRecord);
		if (CHAR_M.equalsIgnoreCase(sexCd)) {
			record.getEthnicityMaleMap().put(description, record.getEthnicityMaleMap().getOrDefault(description, 0) + 1); /* Q10A*/
			record.getEthnicityTotalMap().put(description, record.getEthnicityTotalMap().getOrDefault(description, 0) + 1); /* Q10C*/
			record.setMaleCasesNotDesignatedAsM0rF(record.getMaleCasesNotDesignatedAsM0rF()+1); /* Q11A*/
		} else if (CHAR_F.equalsIgnoreCase(sexCd)) {
			record.getEthnicityFemaleMap().put(description, record.getEthnicityFemaleMap().getOrDefault(description, 0) + 1); /* Q10B*/
			record.getEthnicityTotalMap().put(description, record.getEthnicityTotalMap().getOrDefault(description, 0) + 1); /* Q10C*/
			record.setFemaleCasesNotDesignatedAsM0rF(record.getFemaleCasesNotDesignatedAsM0rF()+1); /* Q11B*/
		}
	}

	private static String getDescription(String ethncCd, List<CodeTableSorRecord> ethnicityCodeTable) {
		String description = null;
		if (!"".equals(ethncCd) && !"U".equals(ethncCd) && !"?".equals(ethncCd)) {
		    for (CodeTableSorRecord rec : ethnicityCodeTable) {
		        if (rec.getCodeTableCd().equals(ethncCd)) {
		            description = rec.getCodeTableCd();
		            break;
		        }
		    }
		} else {
			description = "UN";
		}

		if (description == null) {
			description = "UN";
		}
		return description;
	}

	private void calculateUnin(SnapCharacteristicRecord record, MemberRecord memberRecord) {
		List<UnearnedIncomeSorRecord> unearnedIncomeDetails = this.dataService.getUnearnedIncomeDetails(memberRecord.getUpi());
		List<CodeTableSorRecord> uninCodeTable = SnapCharacteristicInputParam.getUninCodeTable();
		if (!CollectionUtils.isEmpty(unearnedIncomeDetails)) {
			for (UnearnedIncomeSorRecord uninRecord : unearnedIncomeDetails) {
				if(uninCodeTable.stream().anyMatch(d -> d.getCodeTableCd().equals(uninRecord.getTypeCode()))) {
					incrementCategoryCount(record.getOccuerencesOfUnearnedIncomeByType(), uninRecord.getTypeCode());
					record.getUninAmountTotal().put(uninRecord.getTypeCode(), record.getUninAmountTotal().getOrDefault(uninRecord.getTypeCode(), BigDecimal.ZERO).add(uninRecord.getAmount()));
				}
			}
		}
	}

	private void calculateEdin(SnapCharacteristicRecord record, SnapCharacteristicControlParam controlParam, MemberRecord memberRecord) {
		List<BigDecimal> studentGrantInfo = this.dataService.getStudentGrantInfo(memberRecord.getUpi());
		if (!studentGrantInfo.isEmpty()) {
			for (BigDecimal grant : studentGrantInfo) {
				if(grant.compareTo(BigDecimal.ZERO)>0) {
					controlParam.setEdinIncomeFlag(CHAR_Y);
					incrementCategoryCount(record.getOccurencesOfMiscUnin(), "EDIN");
					record.setUninEdinTotal(record.getUninEdinTotal().add(grant));
				}
			}
		}
	}

	private void calculateGaga(SnapCharacteristicRecord record, SnapCharacteristicControlParam controlParam, MemberRecord memberRecord) {
		List<GeneralAssistanceIncomeSorRecord> gagaDetails = this.dataService.getGagaDetails(memberRecord.getUpi());
		if (!gagaDetails.isEmpty()) {
			for (GeneralAssistanceIncomeSorRecord gagaRecord : gagaDetails) {
				double monthlyAmount = convertToMonthly(gagaRecord.getAmount().doubleValue(), gagaRecord.getFrequencyCode());
				if (monthlyAmount > 0) {
					controlParam.setGagaIncomeFlag(CHAR_Y);
					incrementCategoryCount(record.getOccurencesOfMiscUnin(), "GAGA");
					record.setUninGagaTotal(record.getUninGagaTotal().add(gagaRecord.getAmount()));
				}
			}
		}
	}
	
	private double convertToMonthly(double amount, String frequencyCode) {
	    switch (frequencyCode) {
	        case "A": return amount / 12;       // Annual
	        case "B": return amount / 2.15;     // Bi-weekly
	        case "M": return amount;            // Monthly
	        case "Q": return amount / 3;        // Quarterly
	        case "S": return amount * 2;        // Semi-monthly
	        case "T": return amount / 6;        // Twice-annually
	        case "W": return amount * 4.33;     // Weekly
	        default:  return 0.0;               // Unknown
	    }
	}

	private void setSuaFlags(SnapCharacteristicControlParam controlParam, MemberRecord memberRecord) {
		List<UtilityExpenseSorRecord> utilityDetails = this.dataService.getUtilityDetails(memberRecord.getUpi());
		if (!utilityDetails.isEmpty()) {
			UtilityExpenseSorRecord utilityExpenseSorRecord = utilityDetails.get(0);
			if (asList(CHAR_Y, CHAR_I, CHAR_L).contains(utilityExpenseSorRecord.getStandardUtilityAllowanceIndicator())) {
				if (utilityExpenseSorRecord.getNumberSharingSUA() > 1) {
					controlParam.setPsuaFlag(CHAR_Y);
				} else {
					log.info("Setting SuaFlag=Y for UPI: {}", memberRecord.getUpi());
					controlParam.setSuaFlag(CHAR_Y);
				}
			}
		}
	}

	private void populateOtherDisqualifiedCounts(
			SnapCharacteristicRecord record, SnapCharacteristicControlParam controlParam,
			EligMemberTestResultSorRecord testResult
	) {
		// Q09
		record.setOtherDisqualifiedIndividuals(record.getOtherDisqualifiedIndividuals() + 1);
		controlParam.setDisqFlag(CHAR_Y);
		if (CHAR_F.equals(testResult.getSsnTestResultCode())) {
			incrementCategoryCount(record.getOtherDisqualifiedIndividualsType(), "SSN");
		}
		if (CHAR_F.equals(testResult.getCitizenshipTestResultCode())) {
			incrementCategoryCount(record.getOtherDisqualifiedIndividualsType(), "CTZN");
		}
		if (CHAR_F.equals(testResult.getFelonTestResultcode())) {
			incrementCategoryCount(record.getOtherDisqualifiedIndividualsType(), "FELON");
		}
		if (CHAR_F.equals(testResult.getDrugConvictionTestResultCode())) {
			incrementCategoryCount(record.getOtherDisqualifiedIndividualsType(), "DRUG");
		}
	}

	private String getAgeCategoryLabel(int age) {
		if (age <= 5)
			return AGE_0_5;
		if (age == 6)
			return AGE_6;
		if (age <= 12)
			return AGE_7_12;
		if (age <= 15)
			return AGE_13_15;
		if (age <= 17)
			return AGE_16_17;
		if (age <= 20)
			return AGE_18_20;
		if (age <= 25)
			return AGE_21_25;
		if (age <= 30)
			return AGE_26_30;
		if (age <= 35)
			return AGE_31_35;
		if (age <= 40)
			return AGE_36_40;
		if (age <= 45)
			return AGE_41_45;
		if (age <= 50)
			return AGE_46_50;
		if (age <= 55)
			return AGE_51_55;
		if (age <= 59)
			return AGE_56_59;
		return AGE_60_PLUS;
	}

	private void incrementCategoryCount(Map<String, Integer> map, String category) {
		map.put(category, map.getOrDefault(category, 0) + 1);
	}

	private int calculateAge(LocalDate dob, LocalDate reportDate) {
		long days = ChronoUnit.DAYS.between(dob, reportDate);
		// return (int)(days / 365.25);
		return Math.round((float)days / 365);
	}

	private void processMemberAgeCounts(int age, Map<String, Integer> ageCategoryCounts) {
		String category = getAgeCategoryLabel(age);
		incrementCategoryCount(ageCategoryCounts, category);
	}

	private static BigDecimal divide(int num1, int num2, int scale) {
		return BigDecimal.valueOf(num1).divide(BigDecimal.valueOf(num2), scale, RoundingMode.HALF_UP);
	}

}
