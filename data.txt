import java.math.BigDecimal;
import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

/**
 * Java version of ARX04A batch.
 *
 * This program:
 *   – Uses the current date (which must be the last day of the month) as input.
 *   – Connects to the database and executes all the SELECT queries (with all WHERE, ORDER BY, etc.)
 *     as in the original EGL batch.
 *   – Processes program case history (and related family action, eligibility, redetermination, office,
 *     and worker data) and “builds” a PCERecord object for each case.
 *   – Instead of writing out a file, the output is stored in an in‐memory object (a list of PCERecord)
 *     which can then be passed to other batches.
 *
 * NOTE: This code attempts to “translate” every line of business logic (including comments that
 * refer to “Changes due to WI …” or “PTR # …”) as in the original code. Some of the SQL queries include
 * placeholders (such as "/*-- INSERT ORDER BY CLAUSE HERE --*/") which you must complete as needed.
 */
public class ARX04A {

    // JDBC connection
    private Connection connection;

    // Working storage objects equivalent to the EGL records.
    private ARX04W arx04w = new ARX04W();
    private ARX04W2 arx04w2 = new ARX04W2();
    private ARX04W3 arx04w3 = new ARX04W3();
    // The PCE extract – a list of records that would be written out in EGL.
    private List<PCERecord> pceExtract = new ArrayList<>();

    public ARX04A() {
        // Initialize the JDBC connection.
        try {
            // (Replace the URL, user and password with your database settings.)
            Class.forName("com.your.jdbc.Driver");
            connection = DriverManager.getConnection("jdbc:yourdb://localhost:3306/yourdatabase", "user", "password");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Main entry point.
     */
    public static void main(String[] args) {
        // Use current date
        LocalDate currentDate = LocalDate.now();
        // Validate that the current date is the last day of the month
        if (!isLastDayOfMonth(currentDate)) {
            System.err.println("ERROR: Current date must be the last day of the month.");
            System.exit(1);
        }
        ARX04A batch = new ARX04A();
        batch.initialize();
        batch.populateDate(currentDate);
        batch.mainProcess();

        // At this point, pceExtract holds the list of PCERecords
        PCEExtract output = batch.getPCEExtract();
        // You can now pass 'output' to other batches.
        System.out.println("PCE Extract complete. Total records: " + output.getRecords().size());
    }

    private static boolean isLastDayOfMonth(LocalDate date) {
        return date.getDayOfMonth() == date.lengthOfMonth();
    }

    /**
     * Initialize working storage (equivalent to ARX04P9-INITIALIZE).
     */
    public void initialize() {
        arx04w.clear();
        arx04w2.clear();
        arx04w3.clear();
        // Initialize other working storage fields as needed.
    }

    /**
     * Instead of reading the date from an input file, set the working storage date to currentDate.
     */
    public void populateDate(LocalDate date) {
        arx04w3.setDate(date);
        arx04w2.setDate(date);
    }

    /**
     * Main processing logic (equivalent to ARX04P9-MAIN).
     */
    public void mainProcess() {
        // Validate the input date is correct (ARX04P9-VALIDATE)
        if (!validateDate()) {
            System.err.println("Input date validation failed.");
            System.exit(1);
        }
        // Retrieve program case history details (ARX04P9-GET-DB-DAT)
        getDbData();
        // In EGL the PCE file is closed here; in Java, our pceExtract list is the final output.
    }

    /**
     * Validate that the date is the last day of the month and is valid.
     * (This method implements ARX04P9-VALIDATE logic.)
     */
    private boolean validateDate() {
        // Validate date format via a date utility if needed.
        // Here we assume that arx04w2 and arx04w3 have already been set.
        LocalDate date = LocalDate.of(arx04w2.pi1LstDayMnthCCYY, arx04w2.pi1LstDayMnthMM, arx04w2.pi1LstDayMnthDD);
        if (!isLastDayOfMonth(date)) {
            System.err.println("ERROR: Input date must be the last day of the month.");
            return false;
        }
        // For February, also check leap year logic (as in EGL code)
        if (arx04w2.pi1LstDayMnthMM == 2) {
            boolean isLeap = date.isLeapYear();
            int expectedDay = isLeap ? 29 : 28;
            if (arx04w2.pi1LstDayMnthDD != expectedDay) {
                System.err.println("ERROR: For February, the date must be " + expectedDay);
                return false;
            }
        }
        return true;
    }

    /**
     * Retrieve all program case history data (equivalent to ARX04P9-GET-DB-DAT).
     */
    public void getDbData() {
        try {
            // STEP 1: Query offices (ARX04P9-OFC-INQ)
            String sqlOffice = "SELECT t1.OFC_CD " +
                    "FROM TWNOFFICE t1 " +
                    "WHERE t1.OFC_TYP = 'A' " +
                    "  AND t1.OFC_CD BETWEEN 'AA' AND '01' " +
                    "  /*-- INSERT ORDER BY CLAUSE HERE --*/ " +
                    "ORDER BY t1.OFC_CD ASC";
            PreparedStatement stmtOffice = connection.prepareStatement(sqlOffice);
            ResultSet rsOffice = stmtOffice.executeQuery();
            while (rsOffice.next()) {
                String ofcCd = rsOffice.getString("OFC_CD");
                // Process each office row (ARX04P9-OFC-SCAN)
                Office office = new Office();
                office.setOfcCd(ofcCd);

                // STEP 2: For each office, query program case history details (ARX04P9-PCY-INQ)
                String sqlPCY = "SELECT T1.OFC_CD, T1.SPRVS_UNIT, T1.PSN_NMB, T1.FUNC_AREA_CD, T1.WRKR_TYPE, T1.CASLD_ID, " +
                        "       T2.CASE_STS, T2.MTHLY_RPTR_IND, T2.HOH_UPI, T2.FS_SUFX, T2.HMLS_IND, " +
                        "       T3.ICI, T3.PRGM_CASE_TYPE, T3.STS_EFF_DT, T3.PRGM_CASE_STS, T3.EXPD_FS_RSN_CD, " +
                        "       T3.INIT_APRVL_DT, T3.APPL_DT, T3.AID_CD, T3.ELIG_CD, T3.CLSRE_RSN_CD, " +
                        "       T3.MULT_CLSRE_RSN_IND, T3.SYS_CLSRE_DNL_RSN " +
                        "FROM TWNFAM_CASELD_CASE T1, TWNFAM_CASE_HSTRY T2, TWNPRGM_CASE_HSTRY T3 " +
                        "WHERE T1.ofc_cd = ? " +
                        "  AND T3.PRD_BEG_DT <= ? " +
                        "  AND T3.PRD_END_DT >= ? " +
                        "  AND T3.PRGM_CASE_TYPE IN ('AF', 'FS', 'MA', 'TC', 'TL', 'TN', 'TP', 'SG', 'MC', 'AO') " +
                        "  AND T2.PRD_BEG_DT <= ? " +
                        "  AND T2.PRD_END_DT >= ? " +
                        "  AND T2.ICI = T3.ICI " +
                        "  AND T1.ICI = T3.ICI " +
                        "  /*-- INSERT ORDER BY CLAUSE HERE --*/ " +
                        "ORDER BY T1.OFC_CD ASC, T1.SPRVS_UNIT ASC, T1.FUNC_AREA_CD ASC, T1.WRKR_TYPE ASC, " +
                        "         T1.PSN_NMB ASC, T3.ICI ASC, T3.PRGM_CASE_TYPE ASC, T3.AID_CD";
                PreparedStatement stmtPCY = connection.prepareStatement(sqlPCY);
                stmtPCY.setString(1, office.getOfcCd());
                // Use the date from arx04w2 (which was set in populateDate)
                String procDate = arx04w2.getPi1LstDayMnth();
                stmtPCY.setString(2, procDate);
                stmtPCY.setString(3, procDate);
                stmtPCY.setString(4, procDate);
                stmtPCY.setString(5, procDate);
                ResultSet rsPCY = stmtPCY.executeQuery();
                while (rsPCY.next()) {
                    // Build the PCE record from the PCY row (ARX04P9-BLD-PCE)
                    PCERecord pce = buildPCE(rsPCY);
                    // Process Family Actions (ARX04P9-FAM-ACTN)
                    processFamActn(pce);
                    // Add to the extract object (instead of writing to a file)
                    pceExtract.add(pce);
                }
                rsPCY.close();
                stmtPCY.close();
            }
            rsOffice.close();
            stmtOffice.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Build a PCERecord from the current program case history result row.
     * (Implements ARX04P9-BLD-PCE business logic.)
     */
    private PCERecord buildPCE(ResultSet rs) throws SQLException {
        PCERecord pce = new PCERecord();
        // Set default flags (from ARX04P9-BLD-PCE)
        pce.setPceLastRecForMnth("N");
        pce.setPceReinstInd("N");
        pce.setPceReopnInd("N");
        pce.setPceReappInd("N");
        pce.setPceAprvlInd("N");
        pce.setPceRedetInd("N");
        pce.setPceConfrsInd("N");
        pce.setPceRedetCmpltThisMnth("N");

        // Set fields from TWNFAM_CASELD_CASE, TWNFAM_CASE_HSTRY, and TWNPRGM_CASE_HSTRY
        pce.setOfcCd(rs.getString("OFC_CD"));
        pce.setSprvsUnit(rs.getString("SPRVS_UNIT"));
        pce.setPsnNmb(rs.getInt("PSN_NMB"));
        pce.setFuncAreaCd(rs.getString("FUNC_AREA_CD"));
        pce.setWrkrType(rs.getString("WRKR_TYPE"));
        pce.setCasldId(rs.getString("CASLD_ID"));
        pce.setCaseSts(rs.getString("CASE_STS"));
        pce.setMthlyRptInd(rs.getString("MTHLY_RPTR_IND"));
        pce.setHohUpi(rs.getString("HOH_UPI"));
        pce.setFsSuFx(rs.getString("FS_SUFX"));
        pce.setHmlsInd(rs.getString("HMLS_IND"));
        pce.setIci(rs.getString("ICI"));
        pce.setPrgmCaseType(rs.getString("PRGM_CASE_TYPE"));
        pce.setStsEffDt(rs.getString("STS_EFF_DT"));
        pce.setPrgmCaseSts(rs.getString("PRGM_CASE_STS"));
        pce.setExpdFsRsnCd(rs.getString("EXPD_FS_RSN_CD"));
        pce.setInitAprvlDt(rs.getString("INIT_APRVL_DT"));
        pce.setApplDt(rs.getString("APPL_DT"));
        pce.setAidCd(rs.getString("AID_CD"));
        pce.setEligCd(rs.getString("ELIG_CD"));
        pce.setClsreRsnCd(rs.getString("CLSRE_RSN_CD"));
        pce.setMultClsreRsnInd(rs.getString("MULT_CLSRE_RSN_IND"));
        pce.setSysClsreDnlRsn(rs.getString("SYS_CLSRE_DNL_RSN"));
        // (Additional business logic and pointer–related changes are applied here as in the EGL code.)
        return pce;
    }

    /**
     * Process family action details for a given PCERecord.
     * (Implements ARX04P9-FAM-ACTN and related routines.)
     */
    private void processFamActn(PCERecord pce) throws SQLException {
        // First, run a query to get family actions for the case.
        String sqlFam = "SELECT ACTN_TYP, ACTN_TS, AID_CD, ACTN_EFF_DT, INIT_APRVL_DT, APPL_DT, " +
                "       EXPD_FS_RSN_CD, ELIG_CD, ACTN_RSN_CD, MULT_CLSRE_RSN_IND, " +
                "       BNFT_YR, BNFT_MTH, VER_NMB, FAM_APPL_TYPE " +
                "FROM twnfam_actns " +
                "WHERE ICI = ? " +
                "  AND PRGM_TYP = ? " +
                "  AND YEAR(ACTN_TS) = ? " +
                "  AND MONTH(ACTN_TS) = ? " +
                "ORDER BY ACTN_TS DESC";
        PreparedStatement stmtFam = connection.prepareStatement(sqlFam);
        stmtFam.setString(1, pce.getIci());
        stmtFam.setString(2, pce.getPrgmCaseType());
        LocalDate now = LocalDate.now();
        stmtFam.setInt(3, now.getYear());
        stmtFam.setInt(4, now.getMonthValue());
        ResultSet rsFam = stmtFam.executeQuery();
        while (rsFam.next()) {
            String actnTyp = rsFam.getString("ACTN_TYP");
            // Process each action type (AP, DN, TR, FA, RA, RE, RI) per business logic.
            if ("AP".equals(actnTyp)) { // Approval
                pce.setPceAprvlInd("Y");
                pce.setPrgmCaseSts("O");
                // If FAM_APPL_TYPE is "FT", set INIT_APRVL_DT from the family action.
                // (Other conditional logic as in the EGL code goes here.)
            } else if ("DN".equals(actnTyp)) {
                pce.setMultClsreRsnInd(rsFam.getString("MULT_CLSRE_RSN_IND"));
                pce.setPrgmCaseSts("D");
                pce.setClsreRsnCd(rsFam.getString("ACTN_RSN_CD"));
            } else if ("TR".equals(actnTyp)) {
                pce.setMultClsreRsnInd(rsFam.getString("MULT_CLSRE_RSN_IND"));
                pce.setPrgmCaseSts("T");
                pce.setClsreRsnCd(rsFam.getString("ACTN_RSN_CD"));
            } else if ("RE".equals(actnTyp)) {
                // For RE, decide between reapplication and re-opening
                String famApplType = rsFam.getString("FAM_APPL_TYPE");
                if ("RP".equals(famApplType) || "RH".equals(famApplType)) {
                    pce.setPceReappInd("Y");
                } else {
                    pce.setPceReopnInd("Y");
                }
            } else if ("RI".equals(actnTyp)) {
                pce.setPceReinstInd("Y");
                pce.setPceReisntDt(rsFam.getString("ACTN_EFF_DT"));
            }
            // Additional rules for other types (e.g., "FA", "RA") are applied here.
        }
        rsFam.close();
        stmtFam.close();

        // Process eligibility details based on FAM action data (ARX04P9-ELIG-L1 and ARX04P9-ELIG-DTL)
        processEligDetails(pce);
    }

    /**
     * Process eligibility details (from TWNELIG_VERSION).
     */
    private void processEligDetails(PCERecord pce) throws SQLException {
        String sqlElig = "SELECT ELIG_NUM, CHD_NMB, BNFT_AMT, ENTLM_AMT, BNFT_RDCTN_AMT, BNFT_YR, BNFT_MTH, VER_NMB, TOT_MTHLY_BNFT_AMT " +
                "FROM TWNELIG_VERSION " +
                "WHERE ICI = ? " +
                "  AND PRGM_CASE_TYPE = ? " +
                "  AND BNFT_YR = ? " +
                "  AND BNFT_MTH = ? " +
                "  AND LST_POSTD_VER_IND = 'Y' " +
                "/*-- INSERT ORDER BY CLAUSE HERE --*/";
        PreparedStatement stmtElig = connection.prepareStatement(sqlElig);
        stmtElig.setString(1, pce.getIci());
        stmtElig.setString(2, pce.getPrgmCaseType());
        LocalDate now = LocalDate.now();
        stmtElig.setInt(3, now.getYear());
        stmtElig.setInt(4, now.getMonthValue());
        ResultSet rsElig = stmtElig.executeQuery();
        if (rsElig.next()) {
            pce.setNoOfRcpt(rsElig.getInt("ELIG_NUM"));
            pce.setNoOfChldRcpt(rsElig.getInt("CHD_NMB"));
            // As per WI 16330: Use TOT_MTHLY_BNFT_AMT for benefit amount.
            pce.setBnftAmt(rsElig.getBigDecimal("TOT_MTHLY_BNFT_AMT"));
            pce.setEntlmAmt(rsElig.getBigDecimal("ENTLM_AMT"));
            pce.setBnftRdctnAmt(rsElig.getBigDecimal("BNFT_RDCTN_AMT"));
            pce.setBnftMnth(rsElig.getInt("BNFT_MTH"));
            pce.setBnftYr(rsElig.getInt("BNFT_YR"));
            pce.setVerNmb(rsElig.getInt("VER_NMB"));
        } else {
            pce.setNoOfRcpt(0);
            pce.setNoOfChldRcpt(0);
            pce.setBnftAmt(BigDecimal.ZERO);
            pce.setEntlmAmt(BigDecimal.ZERO);
            pce.setBnftRdctnAmt(BigDecimal.ZERO);
            pce.setBnftMnth(0);
            pce.setBnftYr(0);
            pce.setVerNmb(0);
        }
        rsElig.close();
        stmtElig.close();
    }

    /**
     * Get the final PCE extract as an object.
     */
    public PCEExtract getPCEExtract() {
        PCEExtract extract = new PCEExtract();
        extract.setRecords(pceExtract);
        return extract;
    }

    // -------------------------------------------------------------------
    // Below are inner classes representing record structures (similar to EGL record types)
    // -------------------------------------------------------------------

    static class ARX04W {
        // Example fields (you would add all fields as in the EGL record)
        String wsFileAidCd;
        String wsFileEligCd;
        // ... additional fields omitted for brevity

        public void clear() {
            wsFileAidCd = "";
            wsFileEligCd = "";
            // reset other fields
        }
    }

    static class ARX04W2 {
        String pi1LstDayMnth;
        int pi1LstDayMnthCCYY;
        int pi1LstDayMnthMM;
        int pi1LstDayMnthDD;

        public void clear() {
            pi1LstDayMnth = "";
            pi1LstDayMnthCCYY = 0;
            pi1LstDayMnthMM = 0;
            pi1LstDayMnthDD = 0;
        }

        public void setDate(LocalDate date) {
            pi1LstDayMnth = date.toString();
            pi1LstDayMnthCCYY = date.getYear();
            pi1LstDayMnthMM = date.getMonthValue();
            pi1LstDayMnthDD = date.getDayOfMonth();
        }

        public String getPi1LstDayMnth() {
            return pi1LstDayMnth;
        }
    }

    static class ARX04W3 {
        String pi1LstDayMnth;
        int pi1LstDayMnthCCYY;
        int pi1LstDayMnthMM;
        int pi1LstDayMnthDD;

        public void clear() {
            pi1LstDayMnth = "";
            pi1LstDayMnthCCYY = 0;
            pi1LstDayMnthMM = 0;
            pi1LstDayMnthDD = 0;
        }

        public void setDate(LocalDate date) {
            pi1LstDayMnth = date.toString();
            pi1LstDayMnthCCYY = date.getYear();
            pi1LstDayMnthMM = date.getMonthValue();
            pi1LstDayMnthDD = date.getDayOfMonth();
        }
    }

    /**
     * PCERecord represents one output record equivalent to SR-ARX04W1.
     * All fields and business logic (including default values and conditional updates)
     * are stored here.
     */
    static class PCERecord {
        private String pceLastRecForMnth;
        private String pceReinstInd;
        private String pceReopnInd;
        private String pceReappInd;
        private String pceAprvlInd;
        private String pceRedetInd;
        private String pceConfrsInd;
        private String pceRedetCmpltThisMnth;
        // Many more fields as per the original record...
        private String ofcCd;
        private String sprvsUnit;
        private int psnNmb;
        private String funcAreaCd;
        private String wrkrType;
        private String casldId;
        private String caseSts;
        private String mthlyRptInd;
        private String hohUpi;
        private String fsSuFx;
        private String hmlsInd;
        private String ici;
        private String prgmCaseType;
        private String stsEffDt;
        private String prgmCaseSts;
        private String expdFsRsnCd;
        private String initAprvlDt;
        private String applDt;
        private String aidCd;
        private String eligCd;
        private String clsreRsnCd;
        private String multClsreRsnInd;
        private String sysClsreDnlRsn;
        // Eligibility fields:
        private int noOfRcpt;
        private int noOfChldRcpt;
        private BigDecimal bnftAmt;
        private BigDecimal entlmAmt;
        private BigDecimal bnftRdctnAmt;
        private int bnftMnth;
        private int bnftYr;
        private int verNmb;
        // For RI type actions:
        private String pceReisntDt;

        // Getters and setters for all fields

        public String getIci() {
            return ici;
        }

        public void setIci(String ici) {
            this.ici = ici;
        }

        public String getPrgmCaseType() {
            return prgmCaseType;
        }

        public void setPrgmCaseType(String prgmCaseType) {
            this.prgmCaseType = prgmCaseType;
        }

        public void setPceLastRecForMnth(String val) { this.pceLastRecForMnth = val; }
        public void setPceReinstInd(String val) { this.pceReinstInd = val; }
        public void setPceReopnInd(String val) { this.pceReopnInd = val; }
        public void setPceReappInd(String val) { this.pceReappInd = val; }
        public void setPceAprvlInd(String val) { this.pceAprvlInd = val; }
        public void setPceRedetInd(String val) { this.pceRedetInd = val; }
        public void setPceConfrsInd(String val) { this.pceConfrsInd = val; }
        public void setPceRedetCmpltThisMnth(String val) { this.pceRedetCmpltThisMnth = val; }

        public void setOfcCd(String val) { this.ofcCd = val; }
        public void setSprvsUnit(String val) { this.sprvsUnit = val; }
        public void setPsnNmb(int val) { this.psnNmb = val; }
        public void setFuncAreaCd(String val) { this.funcAreaCd = val; }
        public void setWrkrType(String val) { this.wrkrType = val; }
        public void setCasldId(String val) { this.casldId = val; }
        public void setCaseSts(String val) { this.caseSts = val; }
        public void setMthlyRptInd(String val) { this.mthlyRptInd = val; }
        public void setHohUpi(String val) { this.hohUpi = val; }
        public void setFsSuFx(String val) { this.fsSuFx = val; }
        public void setHmlsInd(String val) { this.hmlsInd = val; }
        public void setStsEffDt(String val) { this.stsEffDt = val; }
        public void setPrgmCaseSts(String val) { this.prgmCaseSts = val; }
        public void setExpdFsRsnCd(String val) { this.expdFsRsnCd = val; }
        public void setInitAprvlDt(String val) { this.initAprvlDt = val; }
        public void setApplDt(String val) { this.applDt = val; }
        public void setAidCd(String val) { this.aidCd = val; }
        public void setEligCd(String val) { this.eligCd = val; }
        public void setClsreRsnCd(String val) { this.clsreRsnCd = val; }
        public void setMultClsreRsnInd(String val) { this.multClsreRsnInd = val; }
        public void setSysClsreDnlRsn(String val) { this.sysClsreDnlRsn = val; }
        public void setNoOfRcpt(int val) { this.noOfRcpt = val; }
        public void setNoOfChldRcpt(int val) { this.noOfChldRcpt = val; }
        public void setBnftAmt(BigDecimal val) { this.bnftAmt = val; }
        public void setEntlmAmt(BigDecimal val) { this.entlmAmt = val; }
        public void setBnftRdctnAmt(BigDecimal val) { this.bnftRdctnAmt = val; }
        public void setBnftMnth(int val) { this.bnftMnth = val; }
        public void setBnftYr(int val) { this.bnftYr = val; }
        public void setVerNmb(int val) { this.verNmb = val; }
        public void setPceReisntDt(String val) { this.pceReisntDt = val; }
    }

    /**
     * PCEExtract holds the output list.
     */
    static class PCEExtract {
        private List<PCERecord> records;

        public List<PCERecord> getRecords() {
            return records;
        }

        public void setRecords(List<PCERecord> records) {
            this.records = records;
        }
    }

    /**
     * Office record (for H2-OFFICE)
     */
    static class Office {
        private String ofcCd;

        public String getOfcCd() {
            return ofcCd;
        }

        public void setOfcCd(String ofcCd) {
            this.ofcCd = ofcCd;
        }
    }
}
