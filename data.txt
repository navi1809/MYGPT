 public DcCasesCargo[] findMAABDMedicalCasesByCutOffDt(int maxRows, String trigCd, Timestamp cutOffDt) throws TIERSRunTimeException {
        Debug.println("findMAABDMedicalCasesByCutOffDt" + " maxRows= " + maxRows);
        ArrayList v = new ArrayList();
        Connection conn = null;
        PreparedStatement statement = null;
        ResultSet rs = null;
        DcCasesCargo[] colrows = null;

        try {
            conn = getConnection();

            StringBuilder queryBuilder = new StringBuilder("SELECT DISTINCT R.CASE_NUM FROM BRG_OWNER.ED_CASE_RECERT_DATES R ");
            queryBuilder.append("INNER JOIN BRG_OWNER.DC_CASES DC ON DC.CASE_NUM = R.CASE_NUM AND DC.CASE_STATUS_CD = 'AP' ");
            queryBuilder.append("INNER JOIN BRG_OWNER.ED_AUTO_REDE_DETERMN REDE ON R.CASE_NUM = REDE.CASE_NUM ");
            queryBuilder.append("AND REDE.CREATE_DT BETWEEN ? AND ? AND PROCESS_SW IN ('S', 'X') AND FORM_GENERATED_CD = 'B' ");
            queryBuilder.append("WHERE R.PROGRAM_CD IN ('FP','MA', 'ME', 'MC', 'HB') ");
            queryBuilder.append("AND R.REVIEW_PACKET_RECEIVED_DT IS NULL AND R.EFF_END_DT IS NULL ");
            queryBuilder.append("AND R.RECERT_REVIEW_DUE_DT BETWEEN ? AND ? ");

            statement = conn.prepareStatement(queryBuilder.toString(), ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            Timestamp createDtSubMnths = DateUtility.subMonths(cutOffDt, 2);
            statement.setTimestamp(1, DateUtility.getStartOfDay(DateUtility.getFirstDayOfMonth(createDtSubMnths)));
            statement.setTimestamp(2, DateUtility.getEndOfDay(DateUtility.getLastDayOfMonth(createDtSubMnths)));

            statement.setTimestamp(3, DateUtility.getStartOfDay(DateUtility.getFirstDayOfMonth(cutOffDt)));
            statement.setTimestamp(4, DateUtility.getEndOfDay(DateUtility.getLastDayOfMonth(cutOffDt)));

            int cnt = 0;
            rs = statement.executeQuery();
            while (cnt++ < maxRows && rs.next()) {
                DcCasesCargo row = new DcCasesCargo();
                getCustomRowFromResultSet(row, rs, "findMAABDMedicalCasesByCutOffDt");
                v.add(row);
            }
            colrows = new DcCasesCargo[v.size()];
            v.toArray(colrows);
        } catch (Exception e) {
            throw new TIERSRunTimeException(e.getMessage(), e);
        } finally {
            try {
                if (rs != null && getClose()) {
                    rs.close();
                }
                if (statement != null) {
                    closeStatement("findMAABDMedicalCasesByCutOffDt", statement, maxRows, v.size());
                    Debug.println("called close statement for findMAABDMedicalCasesByCutOffDt");
                }
                if (conn != null && getClose()) {
                    conn.close();
                }
            } catch (SQLException e) {
                throw new TIERSRunTimeException(e.getClass().getName() + " findMAABDMedicalCasesByCutOffDt " + e.getMessage(), e);
            }
        }
        return colrows;
    }
