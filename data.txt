public boolean updateArAppAddrTable(String appNum) throws Exception {
		log(7, "Begin AutoRegistrationBO.updateArAppAddrTable() ");
		ArAppAddrCollection arAppAddrColl = new ArAppAddrCollection(connection);

		try {
			if (arAppAddrCargo == null) {
				return false;
			}
			if (arAppAddrCargo != null) {
				arAppAddrCargo.setAppNum(appNum);
				arAppAddrCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
				arAppAddrCargo.setCreateDt(currentTime);
				// ILIES-185675
				arAppAddrCargo.setAddrCountyCd(String.valueOf(autoRegT1001Cargo.getCntyNum()));

				arAppAddrColl.add(arAppAddrCargo);
			}
			if (arAppMailAddrCargo != null) {
				arAppMailAddrCargo.setAppNum(appNum);
				arAppMailAddrCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
				arAppMailAddrCargo.setCreateDt(currentTime);
				arAppMailAddrCargo.setAddrCountyCd(String.valueOf(autoRegT1001Cargo.getCntyNum()));
				arAppAddrColl.add(arAppMailAddrCargo);

			}
			arAppAddrColl.insert(arAppAddrColl);

			Object[] objects = new Object[2];
			objects[0] = "AMMAD";
			objects[1] = appNum;

			SsBrgConflictStatusCollection ssBrgConflictStatusColl = new SsBrgConflictStatusCollection(connection);
			SsBrgConflictStatusCargo[] ssBrgConflictStatusArr = (SsBrgConflictStatusCargo[]) ssBrgConflictStatusColl.select("findByPageIdAppNum", objects);
			if (ssBrgConflictStatusArr != null && ssBrgConflictStatusArr.length > 0) {
				ssBrgConflictStatusArr[0].setStatusInd("PC");
				ssBrgConflictStatusColl.add(ssBrgConflictStatusArr[0]);
				ssBrgConflictStatusColl.update(ssBrgConflictStatusColl);
			}

			return true;
		} catch (Exception e) {
			log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArAppAddrTable(): " + "\n" + e.getMessage() + "\n", e);
			hasExceptionOccurred = true;
			throw e;
		} finally {
			arAppAddrColl = null;
		}
	}
    
    public boolean updateArAppIndvTable(String appNum) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateArAppIndvTable() ");
	ArAppIndvCargo arAppIndvCargo = null;
	ArAppIndvCollection arAppIndvColl = new ArAppIndvCollection(connection);
	
	try {
	    
	    if (autoRegT1004CargoArray == null || autoRegT1004CargoArray.length == 0) {
		return false;
	    }
	    
	    for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
		
		arAppIndvCargo = new ArAppIndvCargo();
		arAppIndvCargo.setAppNum(appNum);
		arAppIndvCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		arAppIndvCargo.setCreateDt(currentTime);
		arAppIndvCargo.setEmployeeSw('N');
		arAppIndvCargo.setIndvId(autoRegT1004CargoArray[i].getBridgesIndvId());
		arAppIndvCargo.setHeadOfHouseholdSw(autoRegT1004CargoArray[i].getPrimPrsnSw());
		
		arAppIndvColl.add(arAppIndvCargo);
	    }
	    arAppIndvColl.insert(arAppIndvColl);
	    
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArAppIndvTable(): " + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    arAppIndvCargo = null;
	    arAppIndvColl = null;
	}
    }
    
    public boolean updateArAppProgramTable(String appNum) throws Exception {
	
	log(7, "Begin AutoRegistrationBO.updateArAppProgramTable () ");
	ArAppProgramCargo arAppProgCargo = null;
	ArAppProgramCollection arAppProgColl = new ArAppProgramCollection(connection);
	java.sql.Timestamp defaultProgStatusDt = getCurrentMonthFirstDate(autoRegT1001Cargo.getAppRcvDt(), 0);
	T1004AppIndvCargo t1004Cargo = null;
	try {
	    boolean fsCheck = false;
	    boolean cashCheck = false;
	    boolean maCheck = false;
	    boolean mcCheck = false;
	    boolean fpCheck = false;
	    
	    for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
		if (fsCheck && cashCheck && maCheck && mcCheck && fpCheck) {
		    break;
		}
		t1004Cargo = autoRegT1004CargoArray[i];
		if (fsCheck == false && t1004Cargo.getFsRqstSw() == 'Y') {
		    fsCheck = true;
		}
		if (cashCheck == false && t1004Cargo.getBcRqstSw() == 'Y') {
		    cashCheck = true;
		}
		if (maCheck == false && t1004Cargo.getMaRqstSw() == 'Y') {
		    maCheck = true;
		}
		if (mcCheck == false && t1004Cargo.getMcRqstSw() == 'Y') {
		    mcCheck = true;
		}
			if(fpCheck == false && t1004Cargo.getFppRqstSw() == 'Y')
				fpCheck = true;
	    }
	    
	    if (autoRegT1002Cargo.getFsRqstSw() == 'Y' && fsCheck) {
		arAppProgCargo = new ArAppProgramCargo();
		arAppProgCargo.setAppNum(appNum);
		arAppProgCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		arAppProgCargo.setCreateDt(currentTime);
		arAppProgCargo.setProgStatusCd("PE");
		arAppProgCargo.setExpScreenDt(autoRegT1001Cargo.getAppRcvDt());
		arAppProgCargo.setProgStatusDt(ALSOPUtil.truncate(defaultProgStatusDt));
		arAppProgCargo.setRequestDt(ALSOPUtil.truncate(autoRegT1001Cargo.getAppRcvDt()));
		arAppProgCargo.setExpeditedSw(autoRegT1001Cargo.getExpeditedFapSw());
		arAppProgCargo.setPriorMedicaidCd("P0");
		arAppProgCargo.setProgramCd("FS");
		arAppProgColl.add(arAppProgCargo);
	    }
	    if (autoRegT1002Cargo.getCashRqstSw() == 'Y' && cashCheck) {
		arAppProgCargo = new ArAppProgramCargo();
		arAppProgCargo.setAppNum(appNum);
		arAppProgCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		arAppProgCargo.setCreateDt(currentTime);
		arAppProgCargo.setProgStatusCd("PE");
		arAppProgCargo.setExpScreenDt(autoRegT1001Cargo.getAppRcvDt());
		arAppProgCargo.setProgStatusDt(ALSOPUtil.truncate(defaultProgStatusDt));
		arAppProgCargo.setRequestDt(ALSOPUtil.truncate(autoRegT1001Cargo.getAppRcvDt()));
		arAppProgCargo.setExpeditedSw(autoRegT1001Cargo.getExpeditedFapSw());
		arAppProgCargo.setPriorMedicaidCd("P0");
		arAppProgCargo.setProgramCd("TF");
		
		arAppProgColl.add(arAppProgCargo);
	    }
	    if (autoRegT1002Cargo.getMaRqstSw() == 'Y' && maCheck || autoRegT1002Cargo.getFppRqstSw() == 'Y' && fpCheck) {
		arAppProgCargo = new ArAppProgramCargo();
		arAppProgCargo.setAppNum(appNum);
		arAppProgCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		arAppProgCargo.setCreateDt(currentTime);
		arAppProgCargo.setProgStatusCd("PE");
		arAppProgCargo.setExpScreenDt(autoRegT1001Cargo.getAppRcvDt());
		arAppProgCargo.setProgStatusDt(ALSOPUtil.truncate(defaultProgStatusDt));
		arAppProgCargo.setRequestDt(ALSOPUtil.truncate(autoRegT1001Cargo.getAppRcvDt()));
		arAppProgCargo.setExpeditedSw(autoRegT1001Cargo.getExpeditedFapSw());
		arAppProgCargo.setProgramCd(AppIndividualBO.calculatePrgCd(maCheck, fpCheck));
		arAppProgCargo.setPriorMedicaidCd("P0");
		
		arAppProgColl.add(arAppProgCargo);
		
		if (autoRegT1002Cargo.getMaBackdtMo1Ind() == 1L) {
		    arAppProgCargo = new ArAppProgramCargo();
		    arAppProgCargo.setAppNum(appNum);
		    arAppProgCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    arAppProgCargo.setCreateDt(currentTime);
		    arAppProgCargo.setProgStatusCd("PE");
		    arAppProgCargo.setExpScreenDt(autoRegT1001Cargo.getAppRcvDt());
		    java.sql.Timestamp date = ALSOPUtil.truncate(getCurrentMonthFirstDate(autoRegT1001Cargo.getAppRcvDt(), -1));
		    arAppProgCargo.setProgStatusDt(date);
		    arAppProgCargo.setRequestDt(date);
		    arAppProgCargo.setExpeditedSw(autoRegT1001Cargo.getExpeditedFapSw());
		    arAppProgCargo.setProgramCd(AppIndividualBO.calculatePrgCd(maCheck, fpCheck));
		    arAppProgCargo.setPriorMedicaidCd("P1");
		    
		    arAppProgColl.add(arAppProgCargo);
		    
		}
		if (autoRegT1002Cargo.getMaBackdtMo2Ind() == 1L) {
		    arAppProgCargo = new ArAppProgramCargo();
		    arAppProgCargo.setAppNum(appNum);
		    arAppProgCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    arAppProgCargo.setCreateDt(currentTime);
		    arAppProgCargo.setProgStatusCd("PE");
		    arAppProgCargo.setExpScreenDt(autoRegT1001Cargo.getAppRcvDt());
		    java.sql.Timestamp date = ALSOPUtil.truncate(getCurrentMonthFirstDate(autoRegT1001Cargo.getAppRcvDt(), -2));
		    arAppProgCargo.setProgStatusDt(date);
		    arAppProgCargo.setRequestDt(date);
		    arAppProgCargo.setExpeditedSw(autoRegT1001Cargo.getExpeditedFapSw());
		    arAppProgCargo.setProgramCd(AppIndividualBO.calculatePrgCd(maCheck, fpCheck));
		    arAppProgCargo.setPriorMedicaidCd("P2");
		    
		    arAppProgColl.add(arAppProgCargo);
		    
		}
		if (autoRegT1002Cargo.getMaBackdtMo3Ind() == 1L) {
		    arAppProgCargo = new ArAppProgramCargo();
		    arAppProgCargo.setAppNum(appNum);
		    arAppProgCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    arAppProgCargo.setCreateDt(currentTime);
		    arAppProgCargo.setProgStatusCd("PE");
		    arAppProgCargo.setExpScreenDt(autoRegT1001Cargo.getAppRcvDt());
		    java.sql.Timestamp date = ALSOPUtil.truncate(getCurrentMonthFirstDate(autoRegT1001Cargo.getAppRcvDt(), -3));
		    arAppProgCargo.setProgStatusDt(date);
		    arAppProgCargo.setRequestDt(date);
		    arAppProgCargo.setExpeditedSw(autoRegT1001Cargo.getExpeditedFapSw());
		    arAppProgCargo.setProgramCd(AppIndividualBO.calculatePrgCd(maCheck, fpCheck));
		    arAppProgCargo.setPriorMedicaidCd("P3");
		    
		    arAppProgColl.add(arAppProgCargo);
		}
		
	    }
	    if (autoRegT1002Cargo.getMcRqstSw() == 'Y' && mcCheck) {
		arAppProgCargo = new ArAppProgramCargo();
		arAppProgCargo.setAppNum(appNum);
		arAppProgCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		arAppProgCargo.setCreateDt(currentTime);
		arAppProgCargo.setProgStatusCd("PE");
		arAppProgCargo.setExpScreenDt(autoRegT1001Cargo.getAppRcvDt());
		arAppProgCargo.setProgStatusDt(ALSOPUtil.truncate(defaultProgStatusDt));
		arAppProgCargo.setRequestDt(ALSOPUtil.truncate(autoRegT1001Cargo.getAppRcvDt()));
		arAppProgCargo.setExpeditedSw(autoRegT1001Cargo.getExpeditedFapSw());
		arAppProgCargo.setPriorMedicaidCd("P0");
		arAppProgCargo.setProgramCd("MC");
		
		arAppProgColl.add(arAppProgCargo);
	    }
	    
	    for (ArAppProgramCargo cargo : arAppProgColl.getResults())
		{
	    	cargo.setProgNrCd("Y");
		}
	    
	    arAppProgColl.insert(arAppProgColl);
	    
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArAppProgramTable() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    arAppProgCargo = null;
	    arAppProgColl = null;
	}
    }
    
    public boolean updateArAppProgramTableMSP(String appNum,boolean isduplicateAppAssociation,String autoRegStatus) throws Exception {
	
	log(7, "Begin AutoRegistrationBO.updateArAppProgramTableMSP() ");
	ArAppProgramCargo arAppProgCargo = null;
	ArAppProgramCollection arAppProgColl = new ArAppProgramCollection(connection);
	java.sql.Timestamp defaultProgStatusDt = getCurrentMonthFirstDate(autoRegT1001Cargo.getAppRcvDt(), 0);
	T1004AppIndvCargo t1004Cargo = null;
	try {
	    boolean fsCheck = false;
	    boolean cashCheck = false;
	    boolean maCheck = false;
	    boolean mcCheck = false;
	    boolean fpCheck = false;
	    
	    for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
		if (fsCheck && cashCheck && maCheck && mcCheck && fpCheck) {
		    break;
		}
		t1004Cargo = autoRegT1004CargoArray[i];
		
		if (mcCheck == false && t1004Cargo.getMcRqstSw() == 'Y') {
		    mcCheck = true;
		}
			
	    }
	    if (autoRegT1002Cargo.getMcRqstSw() == 'Y' && mcCheck) {
		arAppProgCargo = new ArAppProgramCargo();
		arAppProgCargo.setAppNum(appNum);
		arAppProgCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		arAppProgCargo.setCreateDt(currentTime);
		arAppProgCargo.setProgStatusCd("PE");
		arAppProgCargo.setExpScreenDt(autoRegT1001Cargo.getAppRcvDt());
		arAppProgCargo.setProgStatusDt(ALSOPUtil.truncate(defaultProgStatusDt));
		arAppProgCargo.setRequestDt(ALSOPUtil.truncate(autoRegT1001Cargo.getAppRcvDt()));
		arAppProgCargo.setExpeditedSw(autoRegT1001Cargo.getExpeditedFapSw());
		arAppProgCargo.setPriorMedicaidCd("P0");
		arAppProgCargo.setProgramCd("MC");
		
		if(isduplicateAppAssociation){
		    if(AppRegConstants.AUTO_REG_PROCESS_AC.equalsIgnoreCase(autoRegStatus)){
			arAppProgCargo.setDenialReasonCd("049");
		    }else{
			arAppProgCargo.setDenialReasonCd("075");
		    }
		    
		    arAppProgCargo.setProgStatusCd("DN");
		}
		
		arAppProgColl.add(arAppProgCargo);
	    }
	    
	    for (ArAppProgramCargo cargo : arAppProgColl.getResults())
		{
	    	cargo.setProgNrCd("Y");
		}
	    
	    arAppProgColl.insert(arAppProgColl);
	    
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArAppProgramTableMSP() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    arAppProgCargo = null;
	    arAppProgColl = null;
	}
    }
    
    public boolean updateArAppProgramIndvTable(String appNum) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateArAppProgramIndvTable() ");
	ArAppProgramIndvCargo arAppProgIndvCargo = null;
	ArAppProgramIndvCollection arAppProgIndvColl = new ArAppProgramIndvCollection(connection);
	T1004AppIndvCargo t1004Cargo = null;
	
	try {
	    if (autoRegT1004CargoArray == null || autoRegT1004CargoArray.length == 0) {
		return false;
	    }
	    
	    boolean fsCheck = false;
	    boolean cashCheck = false;
	    boolean maCheck = false;
	    boolean mcCheck = false;
	    boolean fpCheck = false;
	    
	    for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
		if (fsCheck && cashCheck && maCheck && mcCheck && fpCheck) {
		    break;
		}
		t1004Cargo = autoRegT1004CargoArray[i];
		if (fsCheck == false && t1004Cargo.getFsRqstSw() == 'Y') {
		    fsCheck = true;
		}
		if (cashCheck == false && t1004Cargo.getBcRqstSw() == 'Y') {
		    cashCheck = true;
		}
		if (maCheck == false && t1004Cargo.getMaRqstSw() == 'Y') {
		    maCheck = true;
		}
		if (mcCheck == false && t1004Cargo.getMcRqstSw() == 'Y') {
		    mcCheck = true;
		}
			if(fpCheck == false && t1004Cargo.getFppRqstSw() == 'Y')
				fpCheck = true;
		
	    }
	    if (appHPECategory || appMPECategory || appFPPECategory) {
		if (fsCheck && autoRegT1002Cargo.getFsRqstSw() != 'Y') {
		    fsCheck = false;
		}
		if (cashCheck && autoRegT1002Cargo.getCashRqstSw() != 'Y') {
		    cashCheck = false;
		}
		if (maCheck && autoRegT1002Cargo.getMaRqstSw() != 'Y') {
		    maCheck = false;
		}
		if (mcCheck && autoRegT1002Cargo.getMcRqstSw() != 'Y') {
		    mcCheck = false;
		}
			if(fpCheck && autoRegT1002Cargo.getFppRqstSw() != 'Y')
				fpCheck = false;
	    }
	    
	    t1004Cargo = null;
	    if (fsCheck) {
		for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
		    t1004Cargo = autoRegT1004CargoArray[i];
		    arAppProgIndvCargo = new ArAppProgramIndvCargo();
		    arAppProgIndvCargo.setAppNum(appNum);
		    arAppProgIndvCargo.setCreateDt(currentTime);
		    arAppProgIndvCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    arAppProgIndvCargo.setPriorMedicaidCd("P0");
		    arAppProgIndvCargo.setMaFormCd("AA");
		    arAppProgIndvCargo.setRequestDt(autoRegT1001Cargo.getAppRcvDt());
		    arAppProgIndvCargo.setSeparateFsSw('N');
		    arAppProgIndvCargo.setIndvId(t1004Cargo.getBridgesIndvId());
		    arAppProgIndvCargo.setProgramCd("FS");
		    if (t1004Cargo.getFsRqstSw() == 'Y') {
			arAppProgIndvCargo.setAidRequestSw('Y');
		    } else {
			arAppProgIndvCargo.setAidRequestSw('N');
		    }
		    
		    arAppProgIndvColl.add(arAppProgIndvCargo);
		}
	    }
	    if (cashCheck) {
		for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
		    t1004Cargo = autoRegT1004CargoArray[i];
		    arAppProgIndvCargo = new ArAppProgramIndvCargo();
		    arAppProgIndvCargo.setAppNum(appNum);
		    arAppProgIndvCargo.setCreateDt(currentTime);
		    arAppProgIndvCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    arAppProgIndvCargo.setPriorMedicaidCd("P0");
		    arAppProgIndvCargo.setMaFormCd("AA");
		    arAppProgIndvCargo.setRequestDt(autoRegT1001Cargo.getAppRcvDt());
		    arAppProgIndvCargo.setSeparateFsSw('N');
		    arAppProgIndvCargo.setIndvId(t1004Cargo.getBridgesIndvId());
		    arAppProgIndvCargo.setProgramCd("TF");
		    if (t1004Cargo.getBcRqstSw() == 'Y') {
			arAppProgIndvCargo.setAidRequestSw('Y');
		    } else {
			arAppProgIndvCargo.setAidRequestSw('N');
		    }
		    
		    arAppProgIndvColl.add(arAppProgIndvCargo);
		}
	    }
	    if (maCheck || fpCheck) {
		for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
		    t1004Cargo = autoRegT1004CargoArray[i];
		    String appLvlProgCd = AppIndividualBO.calculatePrgCd(t1004Cargo,maCheck,fpCheck); //Defines if application is MA,Standalone FPS or MA+FPS 
		    //P0
		    arAppProgIndvCargo = AppIndividualBO.fillingBackDates(appLvlProgCd,"P0",t1004Cargo);
		    arAppProgIndvCargo.setCreateDt(currentTime);
		    arAppProgIndvCargo.setRequestDt(autoRegT1001Cargo.getAppRcvDt());
		    arAppProgIndvCargo.setAidRequestSw(t1004Cargo.getMaRqstSw() == 'Y' || t1004Cargo.getFppRqstSw() == 'Y'  ? 'Y' : 'N');
		    arAppProgIndvColl.add(arAppProgIndvCargo);
		    //P1
		    if (autoRegT1002Cargo.getMaBackdtMo1Ind() == 1L){
		    arAppProgIndvCargo = new ArAppProgramIndvCargo();
			arAppProgIndvCargo = AppIndividualBO.fillingBackDates(appLvlProgCd,"P1",t1004Cargo);
			arAppProgIndvCargo.setCreateDt(currentTime);
			arAppProgIndvCargo.setRequestDt(autoRegT1001Cargo.getAppRcvDt());
			arAppProgIndvCargo.setAidRequestSw(t1004Cargo.getMaBackdtMo1Sw() == 'Y' ? 'Y' : 'N');
			arAppProgIndvColl.add(arAppProgIndvCargo);
		    }
		    //P2
		    if (autoRegT1002Cargo.getMaBackdtMo2Ind() == 1L) {
			arAppProgIndvCargo = new ArAppProgramIndvCargo();
			arAppProgIndvCargo = AppIndividualBO.fillingBackDates(appLvlProgCd,"P2",t1004Cargo);
			arAppProgIndvCargo.setCreateDt(currentTime);
			arAppProgIndvCargo.setRequestDt(autoRegT1001Cargo.getAppRcvDt());
			arAppProgIndvCargo.setAidRequestSw(t1004Cargo.getMaBackdtMo2Sw() == 'Y' ? 'Y' : 'N');
			arAppProgIndvColl.add(arAppProgIndvCargo);
		    }
		    //P3
		    if (autoRegT1002Cargo.getMaBackdtMo3Ind() == 1L) {
			arAppProgIndvCargo = new ArAppProgramIndvCargo();
			arAppProgIndvCargo = AppIndividualBO.fillingBackDates(appLvlProgCd,"P3",t1004Cargo);
			arAppProgIndvCargo.setCreateDt(currentTime);
			arAppProgIndvCargo.setRequestDt(autoRegT1001Cargo.getAppRcvDt());
			arAppProgIndvCargo.setAidRequestSw(t1004Cargo.getMaBackdtMo3Sw() == 'Y' ? 'Y' : 'N');
			arAppProgIndvColl.add(arAppProgIndvCargo);
		    }
		}
	    }
	    if (mcCheck) {
		for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
		    t1004Cargo = autoRegT1004CargoArray[i];
		    arAppProgIndvCargo = new ArAppProgramIndvCargo();
		    arAppProgIndvCargo.setAppNum(appNum);
		    arAppProgIndvCargo.setCreateDt(currentTime);
		    arAppProgIndvCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    arAppProgIndvCargo.setPriorMedicaidCd("P0");
		    arAppProgIndvCargo.setMaFormCd("AA");
		    arAppProgIndvCargo.setRequestDt(autoRegT1001Cargo.getAppRcvDt());
		    arAppProgIndvCargo.setSeparateFsSw('N');
		    arAppProgIndvCargo.setIndvId(t1004Cargo.getBridgesIndvId());
		    arAppProgIndvCargo.setProgramCd("MC");
		    if (t1004Cargo.getMcRqstSw() == 'Y') {
			arAppProgIndvCargo.setAidRequestSw('Y');
		    } else {
			arAppProgIndvCargo.setAidRequestSw('N');
		    }
		    
		    arAppProgIndvColl.add(arAppProgIndvCargo);
		}
	    }
	    
	    arAppProgIndvColl.insert(arAppProgIndvColl);
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArAppProgramIndvTable() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    arAppProgIndvCargo = null;
	    arAppProgIndvColl = null;
	    t1004Cargo = null;
	}
    }
    // ALL CPE,MangiPE, AABDPE
    public boolean updateArCpeEligDetailTable(String appNum) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateArCpeEligDetailTable() ");
	ArCpeEligDetailCargo arCpeEligDetailCargo = null;
	ArCpeEligDetailCollection arCpeEligDetailColl = new ArCpeEligDetailCollection(connection);
	ILogger logger = (ILogger) Logger.getInstance();
	log(4," AutoRegistationBO.updateArCpeEligDetailTable: BEGIN");

	try {
	    
	    int count = autoRegT1004CargoArray.length;
	    if (autoRegT1004CargoArray == null || count == 0) {
		return false;
	    }
		String MAGIPESwitch =  ReferenceTableManager.getValueByColumn(true, "COVID19SW", "MAGIPE", "DESCRIPTION");
		String AABDSwitch   =  ReferenceTableManager.getValueByColumn(true, "COVID19SW", "AABDPE", "DESCRIPTION");
		String CPESwitch    =  ReferenceTableManager.getValueByColumn(true, "COVID19SW", "CPEPE", "DESCRIPTION");
		AppSummaryBO appBO = new AppSummaryBO(connection);
		int ageCal = 0;
		boolean incCheck = familyIncCheck(appNum, 0);
		boolean insertRecords =false;
		for (int i = 0; i < autoRegT1004CargoArray.length; i++) {
			T1004AppIndvCargo t1004Cargo = autoRegT1004CargoArray[i];
			T1006AppInPermdCollection t1006AppInPermdColl = new T1006AppInPermdCollection(connection);
			T1006AppInPermdCargo t1006AppInPermdCargo = new T1006AppInPermdCargo();
			T1006AppInPermdCargo[] t1006AppInPermdCargoArray = null;
			t1006AppInPermdCargo.setAppNum(appNum);
			t1006AppInPermdColl.add(t1006AppInPermdCargo);
			t1006AppInPermdCargoArray = (T1006AppInPermdCargo[]) t1006AppInPermdColl.select("findByAppNumInboundFFMApps");
		    arCpeEligDetailCargo = new ArCpeEligDetailCargo();
		    boolean check12MonthRecord = false;
			boolean immigrationCheck =  false;
			if ((t1004Cargo.getMaRqstSw() == 'Y' || t1004Cargo.getFppRqstSw() == 'Y') && t1004Cargo.getBridgesIndvId()>0) {
				log(4," AutoRegistationBO.updateArCpeEligDetailTable t1004Cargo.getMaRqstSw() is: "+t1004Cargo.getMaRqstSw());
				log(4," AutoRegistationBO.updateArCpeEligDetailTable t1004Cargo.getFppRqstSw() is: "+t1004Cargo.getFppRqstSw());
				log(4," AutoRegistationBO.updateArCpeEligDetailTable t1004Cargo.getBridgesIndvId() is: "+t1004Cargo.getBridgesIndvId());
		    	
			    java.sql.Timestamp indvdbrthDt = t1004Cargo.getBrthDt();
			    ageCal = ageCal(indvdbrthDt);
				char repeatedSw=appBO.twiceinYear(t1004Cargo.getBridgesIndvId());
				arCpeEligDetailCargo.setPeLast12MonthsSw(repeatedSw);
			    	//check12MonthRecord =  checkActivePERecord(t1004Cargo.getBridgesIndvId());
				log(4," AutoRegistationBO.updateArCpeEligDetailTable: ageCal:"+ageCal);

				if (ageCal<19){
				 try {
					 log(4," AutoRegistationBO.updateArCpeEligDetailTable: Start CPE calc");

					String FPLValue = "";
					String additionalFPLValue = "";
					int additionalPeople = autoRegT1004CargoArray.length - 8;
					double additionalAmount = 0.00;
					double additionalAmountFor209 = 0.00;
					double additionalAmountFor147 = 0.00;
					double limitAmount = 0.00;
					double limitAmountFor209 = 0.00;
					double limitAmountFor147 = 0.00;
				
					String reftableOldVerEffEndDt = ARConstants.EDMCMELIMITS_OLDVERSION_EFFENDDT;
		
					SimpleDateFormat refTableDateSdf= new SimpleDateFormat("dd-MMM-yyyy");
				    java.util.Date refTableOldVsEffEndDate = refTableDateSdf.parse(reftableOldVerEffEndDt);
				    Timestamp oldVerEffEndDtTS= new Timestamp(refTableOldVsEffEndDate.getTime());
				    Timestamp batchRunAsofDateTs = null;
				    Timestamp fwCurrDateTs = null;
	
				    log(4," AutoRegistationBO.updateArCpeEligDetailTable: reftableOldVerEffEndDt : "+reftableOldVerEffEndDt);

				    //Use FW_BATCH_RUN_CONTROL asOfDate to compare with EDMCMELIMITS_OLDVERSION_EFFENDDT and determine the calc logic
					if(batchController != null && StringUtils.isNotEmpty(batchController.getAsOfDate())){
						 log(4," AutoRegistationBO.updateArCpeEligDetailTable: batchController.getAsOfDate() is not null");
						
						 batchRunAsofDateTs = appBO.convertDateStrToTimeStampWithNull(batchController.getAsOfDate(), "MM/dd/yyyy", appNum);
						 if(batchRunAsofDateTs!=null){
							 fwCurrDateTs = new Timestamp(batchRunAsofDateTs.getTime()); 
						 	}
						 
						 log(4," AutoRegistationBO.updateArCpeEligDetailTable: batchController.getAsOfDate() : "+batchController.getAsOfDate());
					}else{
						 //fetch current date using FW 
						FwCalendar fwCalendar = FwCalendar.getInstance();
						FwDate fwDate = fwCalendar.getDate();
						fwCurrDateTs = fwDate.getTimestamp();
						log(4," AutoRegistationBO.updateArCpeEligDetailTable: batchController.getAsOfDate()" +
								" is not present using current TS "+fwCurrDateTs+" fwDate"+ fwDate);
					}
					log(4," AutoRegistationBO.updateArCpeEligDetailTable: fwCurrDateTs : "+fwCurrDateTs);

					if(fwCurrDateTs!=null  && oldVerEffEndDtTS !=null && fwCurrDateTs.after(oldVerEffEndDtTS) ){
				    	
				    	if(arCpeEligDetailCargo.getNumberInStandard() == 0){
				    		arCpeEligDetailCargo.setNumberInStandard((short) count);
				    	}
				    	arCpeEligDetailCargo.setAppNum(appNum);
				    	
				    	log(4," In AutoRegistationBO.updateArCpeEligDetailTable oldVerThresholdTS :" +oldVerEffEndDtTS
				    			+ " fwCurrDateTs" +fwCurrDateTs
				    			+ " invoking calculateFPLLatestPERCENT for App Num : " + arCpeEligDetailCargo.getAppNum());
				    	
				    	Double dblLimitAmount = new Double(0.00); 
				    	Double dblLimitAmountFor209 = new Double(0.00); 
				    	Double dblLimitAmountFor147 = new Double(0.00); 
						
				    	
				    	dblLimitAmount = appBO.calculateFPLLatestPercent(arCpeEligDetailCargo,"PERCENT209",fwCurrDateTs);
				    	if(dblLimitAmount!=null){
				    		 limitAmount = dblLimitAmount.doubleValue(); 
				    	 }
				    	
				    	dblLimitAmountFor147 = appBO.calculateFPLLatestPercent(arCpeEligDetailCargo,"PERCENT147",fwCurrDateTs);
				    	if(dblLimitAmountFor147 != null ){
				    		 limitAmountFor147 = dblLimitAmountFor147.doubleValue(); 
				    	 }
				    	
				    	dblLimitAmountFor209 = appBO.calculateFPLLatestPercent(arCpeEligDetailCargo,"PERCENT209",fwCurrDateTs);
				    	if(dblLimitAmountFor209 != null){
				    		limitAmountFor209 = dblLimitAmountFor209.doubleValue(); 
				    	 }

				    	log(4," AutoRegistationBO.updateArCpeEligDetailTable new version limitAmount is: "+limitAmount);
				    	log(4," AutoRegistationBO.updateArCpeEligDetailTable new version limitAmountFor209 is: "+limitAmountFor209);
				    	log(4," AutoRegistationBO.updateArCpeEligDetailTable new version limitAmountFor147 is: "+limitAmountFor147);
				    }			
					else{
						
						log(4, "Using Old version EDMCMELIMITS calculations for " +
								"appNum:" +arCpeEligDetailCargo.getAppNum()+" indvId:" +arCpeEligDetailCargo.getIndvId()+
								"reftableOldVerEffEndDt" +reftableOldVerEffEndDt+" fwCurrDateTs" +fwCurrDateTs
				    			);
						if (additionalPeople > 0 && additionalPeople <= 10) {
						    FPLValue = ReferenceTableManager.getValueByColumn(true, "EDMCMELIMITS", "8", "PERCENT100");
						    additionalFPLValue = ReferenceTableManager.getValueByColumn(true, "EDMCMELIMITS", "ADDLPERS", "PERCENT100");
						    additionalAmount = ((Double.valueOf(additionalFPLValue) * 2.09) / 12) * additionalPeople;
						} else {
						    FPLValue = ReferenceTableManager.getValueByColumn(true, "EDMCMELIMITS", String.valueOf(autoRegT1004CargoArray.length), "PERCENT100");
						}
						
						if (FPLValue != null && FPLValue.equals("")) {
						    FPLValue = "0";
						}
						if (additionalFPLValue.equals("")) {
						    additionalFPLValue = "0";
						}
						limitAmount = Math.round((Double.valueOf(FPLValue) * 2.09) / 12 + additionalAmount);
						
						additionalAmountFor209 = ((Double.valueOf(additionalFPLValue) * 2.09) / 12) * additionalPeople;
						additionalAmountFor147 = ((Double.valueOf(additionalFPLValue) * 1.47) / 12) * additionalPeople;
						limitAmountFor209 = Math.round((Double.valueOf(FPLValue) * 2.09) / 12 + additionalAmountFor209);
						limitAmountFor147 = Math.round((Double.valueOf(FPLValue) * 1.47) / 12 + additionalAmountFor147);
						
						log(4," AutoRegistationBO.updateArCpeEligDetailTable old version limitAmount is "+limitAmount);
						log(4," AutoRegistationBO.updateArCpeEligDetailTable old version limitAmountFor209 is "+limitAmountFor209);
						log(4," AutoRegistationBO.updateArCpeEligDetailTable old version limitAmountFor147 is "+limitAmountFor147);
				    	
						
					}
					// Default cargo
					arCpeEligDetailCargo.setAppNum(appNum);
					arCpeEligDetailCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
					arCpeEligDetailCargo.setCreateDt(currentTime);
					// PMD_Override - R10 - The casting of this numeric/byte type does not need to be addressed because it will not exceed the short value.
					PMDRules.markApprovedStatement("R10");
					arCpeEligDetailCargo.setNumberInStandard((short) count);
		 			arCpeEligDetailCargo.setIndvId(t1004Cargo.getBridgesIndvId());
		 			arCpeEligDetailCargo.setDeclaredFamilyIncAmt(autoRegAppIncome);
		 			arCpeEligDetailCargo.setPeTypeInd("CP");
		  		    // Validations
					/*if(check12MonthRecord){
						arCpeEligDetailCargo.setPeLast12MonthsSw('Y');
					}else
						arCpeEligDetailCargo.setPeLast12MonthsSw('N');*/
					
					if(incCheck && autoRegAppIncome<=0.0)
						arCpeEligDetailCargo.setIncomeAvailableSw('N');
					else 
						arCpeEligDetailCargo.setIncomeAvailableSw('Y');
					
					for (int j = 0; j < t1006AppInPermdCargoArray.length; j++) {
				    	if (t1006AppInPermdCargoArray[j] == null || ( t1006AppInPermdCargoArray[j].getIndvSeqNum() == t1004Cargo.getIndvSeqNum() && t1006AppInPermdCargoArray[j].getUsCtznSw() != 'Y' && t1004Cargo.getDocumentedAlienSw() == 'N')) {
				  			immigrationCheck = true;
				  			break;
				         }
			    	}
					if(!immigrationCheck)
						arCpeEligDetailCargo.setImmigrationStatusSw('N');
					else 
						arCpeEligDetailCargo.setImmigrationStatusSw('Y');

					// C2 income 
					 if(incCheck && autoRegAppIncome<=0.0){
			 			arCpeEligDetailCargo.setDenialReasonCd("C2");
			         }else if(immigrationCheck){
					 	arCpeEligDetailCargo.setDenialReasonCd("C4");   //c4 Immigration check	
			         }else if(autoRegAppIncome > limitAmount){
			 			arCpeEligDetailCargo.setDenialReasonCd("C5");// C5 over  income 
			         }else if(arCpeEligDetailCargo.getPeLast12MonthsSw()=='Y'){
						 arCpeEligDetailCargo.setDenialReasonCd("C7");////Child received PE twice in last year
					 }else{// c1  Eligible 
						arCpeEligDetailCargo.setDenialReasonCd("C1");
						arCpeEligDetailCargo.setPeBeginDt(autoRegT1001Cargo.getAppRcvDt());
						
						log(4, "Begin AutoRegistrationBO.updateArCpeEligDetailTable() ::  limitAmountFor147 " + limitAmountFor147);
						log(4, "Begin AutoRegistrationBO.updateArCpeEligDetailTable() ::  arCpeEligDetailCargo.getDeclaredFamilyIncAmt() " + arCpeEligDetailCargo.getDeclaredFamilyIncAmt());
						log(4, "Begin AutoRegistrationBO.updateArCpeEligDetailTable() ::  limitAmountFor209 " + limitAmountFor209);
						if ((limitAmountFor147 < arCpeEligDetailCargo.getDeclaredFamilyIncAmt()) && (arCpeEligDetailCargo.getDeclaredFamilyIncAmt() <= limitAmountFor209)) {
						    arCpeEligDetailCargo.setMangpCd("PH");
						} else if (arCpeEligDetailCargo.getDeclaredFamilyIncAmt() <= limitAmountFor147) {
						    arCpeEligDetailCargo.setMangpCd("PL");
						}
			    	}
			    	arCpeEligDetailColl.add(arCpeEligDetailCargo);
			    	insertRecords =true;
			    	
			    	//ILIES-296616 EDMCMELIMITS 
				    }catch (Exception e) {
						logger.Log(LogLevel.ERROR,"In AutoRegistationBO.updateArCpeEligDetailTable method for  EDMCMELIMITS" , e.getMessage() + e  );
						e.printStackTrace();
					}
				    
				    log(4," AutoRegistationBO.updateArCpeEligDetailTable: Finished CPE calc");
 
			    }
			    
			    //MAGIPESwitch
			    if("Y".equalsIgnoreCase(MAGIPESwitch) && ageCal>=19 && ageCal<65){
			    	arCpeEligDetailCargo.setAppNum(appNum);
					arCpeEligDetailCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
					arCpeEligDetailCargo.setCreateDt(currentTime);
					arCpeEligDetailCargo.setNumberInStandard((short) count);
					arCpeEligDetailCargo.setIndvId(t1004Cargo.getBridgesIndvId());					
		    		arCpeEligDetailCargo.setDeclaredFamilyIncAmt(autoRegAppIncome);
		    		arCpeEligDetailCargo.setPeTypeInd("MP");
		    		arCpeEligDetailCargo.setPeBeginDt(autoRegT1001Cargo.getAppRcvDt());
					if(incCheck && autoRegAppIncome<=0.0){
						arCpeEligDetailCargo.setIncomeAvailableSw('N');
						arCpeEligDetailCargo.setDenialReasonCd("M2");
					}
			    	else{
			    		arCpeEligDetailCargo.setIncomeAvailableSw('Y');
			    		char medicareSW = appBO.medicareDteails(t1004Cargo.getBridgesIndvId());
			    		arCpeEligDetailCargo.setImmigrationStatusSw('N');
			    		for (int j = 0; j < t1006AppInPermdCargoArray.length; j++) {
			    			if (t1006AppInPermdCargoArray[j] == null || ( t1006AppInPermdCargoArray[j].getIndvSeqNum() == t1004Cargo.getIndvSeqNum() && t1006AppInPermdCargoArray[j].getUsCtznSw() != 'Y' && t1004Cargo.getDocumentedAlienSw() == 'N')) {
			    				arCpeEligDetailCargo.setImmigrationStatusSw('Y');
			    				break;
			    			}
			    		}
			    		arCpeEligDetailCargo.setDenialReasonCd("");
			    		arCpeEligDetailCargo.setMedicareRecvSw(medicareSW);
			    		String magiAsOfDate = null;
			    		if(batchController != null && batchController.getAsOfDate()!=null){
			    			magiAsOfDate = batchController.getAsOfDate();
			    		}
			    		arCpeEligDetailCargo = appBO.isPEdenialCd(arCpeEligDetailCargo, false,magiAsOfDate);
		    		}
			    		arCpeEligDetailColl.add(arCpeEligDetailCargo);
			    		insertRecords =true;
			    }
			    
			    //AABD
			    if("Y".equalsIgnoreCase(AABDSwitch) && ageCal>=65){
			    	arCpeEligDetailCargo.setAppNum(appNum);
					arCpeEligDetailCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
					arCpeEligDetailCargo.setCreateDt(currentTime);
					arCpeEligDetailCargo.setNumberInStandard((short) count);
					arCpeEligDetailCargo.setIndvId(t1004Cargo.getBridgesIndvId());					
		    		arCpeEligDetailCargo.setDeclaredFamilyIncAmt(autoRegAppIncome);
		    		arCpeEligDetailCargo.setPeTypeInd("AP");
		    		arCpeEligDetailCargo.setPeBeginDt(autoRegT1001Cargo.getAppRcvDt());
					if(incCheck && autoRegAppIncome<=0.0){
						arCpeEligDetailCargo.setIncomeAvailableSw('N');
						arCpeEligDetailCargo.setDenialReasonCd("A2");
					}
			    	else{
			    		arCpeEligDetailCargo.setIncomeAvailableSw('Y');
			    		arCpeEligDetailCargo.setImmigrationStatusSw('N');
				    	for (int j = 0; j < t1006AppInPermdCargoArray.length; j++) {
					    	if (t1006AppInPermdCargoArray[j] == null || ( t1006AppInPermdCargoArray[j].getIndvSeqNum() == t1004Cargo.getIndvSeqNum() && t1006AppInPermdCargoArray[j].getUsCtznSw() != 'Y' && t1004Cargo.getDocumentedAlienSw() == 'N')) {
					    		arCpeEligDetailCargo.setImmigrationStatusSw('Y');
					    		break;
					         }
				    	}
			    		char medicareSW = appBO.medicareDteails(t1004Cargo.getBridgesIndvId());
			    		arCpeEligDetailCargo.setMedicareRecvSw(medicareSW);
			    		String aabdAsOfDate = null;
			    		if(batchController != null && batchController.getAsOfDate()!=null){
			    			aabdAsOfDate = batchController.getAsOfDate();
			    		}
			    		arCpeEligDetailCargo = appBO.isPEdenialCd(arCpeEligDetailCargo,false,aabdAsOfDate);
			    	}
						arCpeEligDetailColl.add(arCpeEligDetailCargo);
					    insertRecords =true;
			    }
	 		}
		 }
		if(insertRecords){
			arCpeEligDetailColl.insert(arCpeEligDetailColl);
			updateArCpeIncomeDetailTable(appNum);
			for(int k=0;k<arCpeEligDetailColl.size();k++){
				ArCpeEligDetailCargo arCpeEligDetail =arCpeEligDetailColl.getResults(k);
				if(arCpeEligDetail.getDenialReasonCd()!=null && (!arCpeEligDetail.getDenialReasonCd().equalsIgnoreCase("A1") && !arCpeEligDetail.getDenialReasonCd().equalsIgnoreCase("C1") &&
						!arCpeEligDetail.getDenialReasonCd().equalsIgnoreCase("M1"))){
					 generateCorrespondance(appNum, DIConstants.DOC_ID_FXX421, "", this.con);
					 break;
				}
			}
		}
		
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArCpeEligDetailTable() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    arCpeEligDetailCargo = null;
	    arCpeEligDetailColl = null;
	   
	}
    }
    
    public boolean updateArCpeIncomeDetailTable(String appNum) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateArCpeIncomeDetailTable() ");
	ArCpeIncomeDetailCargo arCpeIncomeDetailCargo = new ArCpeIncomeDetailCargo();
	ArCpeIncomeDetailCollection arCpeIncomeDetailColl = new ArCpeIncomeDetailCollection(connection);
	
	try {
	    arCpeIncomeDetailCargo.setAppNum(appNum);
	    arCpeIncomeDetailCargo.setIncomeAmt(autoRegAppIncome);
	    arCpeIncomeDetailCargo.setIncomeFrequencyCd("MO");
	    arCpeIncomeDetailCargo.setMonthlyAvgIncomeAmt(autoRegAppIncome);
	    arCpeIncomeDetailCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
	    arCpeIncomeDetailCargo.setCreateDt(currentTime);
	    
	    arCpeIncomeDetailColl.setCargo(arCpeIncomeDetailCargo);
	    arCpeIncomeDetailColl.insert(arCpeIncomeDetailColl);
	    
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArCpeIncomeDetailTable() appNum: " + appNum + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    arCpeIncomeDetailCargo = null;
	    arCpeIncomeDetailColl = null;
	}
    }
    
    public boolean updateArHpeEligDetailTable(T1060_APP_IN_HPECargo t1060HPECargo) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateArHpeEligDetailTable() ");
	ArHpeEligDetailCargo arHpeEligDetailCargo = new ArHpeEligDetailCargo();
	ArHpeEligDetailCollection arHpeEligDetailColl = new ArHpeEligDetailCollection(connection);
	
	try {
	    
	    arHpeEligDetailCargo.setHouseholdSize(autoRegT1004CargoArray.length);
	    arHpeEligDetailCargo.setHpeProvId(t1060HPECargo.getHpeProvId());
	    arHpeEligDetailCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
	    arHpeEligDetailCargo.setAdrStateCd(t1060HPECargo.getAdrStateCd());
	    arHpeEligDetailCargo.setAdrCityName(t1060HPECargo.getAdrCityName());
	    arHpeEligDetailCargo.setAppNum(t1060HPECargo.getAppNum());
	    arHpeEligDetailCargo.setAdrTypeCd(t1060HPECargo.getAdrTypeCd());
	    arHpeEligDetailCargo.setTelNum(t1060HPECargo.getTelNum());
	    arHpeEligDetailCargo.setCreateDt(currentTime);
	    arHpeEligDetailCargo.setHpeHospName(t1060HPECargo.getHpeHospName());
	    arHpeEligDetailCargo.setHpeEmplName(t1060HPECargo.getHpeEmplName());
	    log(ILog.INFO, "AutoRegistrationBO.updateArHpeEligDetailTable() app Num " + t1060HPECargo.getAppNum());
	    log(ILog.INFO, "AutoRegistrationBO.updateArHpeEligDetailTable() combinedHpeMaApp" + combinedHpeMaApp(t1060HPECargo.getAppNum()));
	    if (combinedHpeMaApp(t1060HPECargo.getAppNum())) {
		arHpeEligDetailCargo.setHpeEndDt(getMaxDate());
	    } else {
		arHpeEligDetailCargo.setHpeEndDt(getNextMonthEndDate(t1060HPECargo.getHpeBeginDt()));
	    }
	    log(ILog.INFO, "AutoRegistrationBO.updateArHpeEligDetailTable() hpeEndDt" + arHpeEligDetailCargo.getHpeEndDt());
	    arHpeEligDetailCargo.setAdrZipCd(t1060HPECargo.getAdrZipCd());
	    arHpeEligDetailCargo.setHpeHsplNmbr(t1060HPECargo.getHpeHsplNmbr());
	    arHpeEligDetailCargo.setStreetAddr(t1060HPECargo.getStreetAddr());
	    arHpeEligDetailCargo.setCommentsTxt(t1060HPECargo.getCommentsTxt());
	    arHpeEligDetailCargo.setHpeBeginDt(t1060HPECargo.getHpeBeginDt());
	    arHpeEligDetailCargo.setIncomeAmt(t1060HPECargo.getIncomeAmt());
	    
	    arHpeEligDetailColl.setCargo(arHpeEligDetailCargo);
	    arHpeEligDetailColl.insert(arHpeEligDetailColl);
	    
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArHpeEligDetailTable(): " + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    arHpeEligDetailCargo = null;
	    arHpeEligDetailColl = null;
	}
    }
    
    public boolean updateArHpeEligDetailIndvTable(T1060_APP_IN_HPECargo[] t1060HPECargoArray) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateArHpeEligDetailIndvTable() ");
	ArHpeEligDetailIndvCargo arHpeEligDetailIndvCargo = null;
	ArHpeEligDetailIndvCollection arHpeEligDetailIndvColl = new ArHpeEligDetailIndvCollection(connection);
	T1004AppIndvCargo t1004Cargo = new T1004AppIndvCargo();
	try {
	    java.sql.Timestamp currentTime = new java.sql.Timestamp(System.currentTimeMillis());
	    
	    T1060_APP_IN_HPECargo t1060HPECargo = null;
	    for (int i = 0; i < t1060HPECargoArray.length; i++) {
		t1060HPECargo = t1060HPECargoArray[i];
		// ILIES-194046
		for (int j = 0; j < autoRegT1004CargoArray.length; j++) {
		    if (t1060HPECargo.getIndvSeqNum() == autoRegT1004CargoArray[j].getIndvSeqNum()) {
			t1004Cargo = autoRegT1004CargoArray[j];
			break;
		    }
		}
		
		arHpeEligDetailIndvCargo = new ArHpeEligDetailIndvCargo();
		arHpeEligDetailIndvCargo.setIlResSw(t1060HPECargo.getIlResSw());
		arHpeEligDetailIndvCargo.setHpeEligGrpCd(t1060HPECargo.getHpeEligGrpCd() == null ? "NA" : t1060HPECargo.getHpeEligGrpCd());
		arHpeEligDetailIndvCargo.setHpeEligSw(t1060HPECargo.getHpeEligSw());
		arHpeEligDetailIndvCargo.setPrevMaEligSw(t1060HPECargo.getPrevHpeEligSw());
		arHpeEligDetailIndvCargo.setUniqueTransId(t1060HPECargo.getUniqueTransId());
		arHpeEligDetailIndvCargo.setPrevHpeEligSw(t1060HPECargo.getPrevHpeEligSw());
		arHpeEligDetailIndvCargo.setPrevMpeEligSw('N');
		arHpeEligDetailIndvCargo.setNatAmerSw(t1060HPECargo.getNatAmerSw());
		arHpeEligDetailIndvCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		arHpeEligDetailIndvCargo.setDeliveryDt(t1060HPECargo.getDeliveryDt());
		arHpeEligDetailIndvCargo.setAppNum(t1060HPECargo.getAppNum());
		arHpeEligDetailIndvCargo.setUsCtznSw(t1060HPECargo.getUsCtznSw());
		arHpeEligDetailIndvCargo.setHpeApplicantSw(t1060HPECargo.getHpeApplicantSw());
		arHpeEligDetailIndvCargo.setIrdbStatusDt(currentTime);
		arHpeEligDetailIndvCargo.setCreateDt(currentTime);
		log(ILog.INFO, "AutoRegistrationBO.updateArHpeEligDetailIndvTable() app Num " + t1060HPECargo.getAppNum());
		log(ILog.INFO, "AutoRegistrationBO.updateArHpeEligDetailIndvTable() combinedHpeMaApp" + combinedHpeMaApp(t1060HPECargo.getAppNum()));
		if (combinedHpeMaApp(t1060HPECargo.getAppNum())) {
		    arHpeEligDetailIndvCargo.setHpeEndDt(getMaxDate());
		} else {
		    arHpeEligDetailIndvCargo.setHpeEndDt(getNextMonthEndDate(t1060HPECargo.getHpeBeginDt()));
		}
		log(ILog.INFO, "AutoRegistrationBO.updateArHpeEligDetailTable() hpeEndDt" + arHpeEligDetailIndvCargo.getHpeEndDt());
		arHpeEligDetailIndvCargo.setLawfulPresSw(t1060HPECargo.getLawfulPresSw());
		arHpeEligDetailIndvCargo.setPregnancySw(t1060HPECargo.getPregnancySw());
		arHpeEligDetailIndvCargo.setMedicareSw(t1060HPECargo.getMedicareSw());
		arHpeEligDetailIndvCargo.setIndvId(t1004Cargo.getBridgesIndvId());
		//BEGIN: ILIES-226708 - ONLY SET STATUS IF INDIV IS ELIGIBLE
		if(t1060HPECargo.getHpeEligGrpCd()!= null && !t1060HPECargo.getHpeEligGrpCd().equalsIgnoreCase("NA")){
			arHpeEligDetailIndvCargo.setIrdbStatusCd('P');
		}
		//END: ILIES-226708
		arHpeEligDetailIndvCargo.setHpeBeginDt(t1060HPECargo.getHpeBeginDt());
		
		arHpeEligDetailIndvColl.add(arHpeEligDetailIndvCargo);
	    }
	    arHpeEligDetailIndvColl.insert(arHpeEligDetailIndvColl);
	    
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArHpeEligDetailIndvTable(): " + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    arHpeEligDetailIndvCargo = null;
	    arHpeEligDetailIndvColl = null;
	}
    }
    
    // ILIES-189484
    public boolean updateArHpeAssociationTable(T1060_APP_IN_HPECargo t1060HPECargo) throws Exception {
	log(7, "Begin AutoRegistrationBO.updateArHpeAssociationTable() ");
	
	ArHpeAssociationCargo arHpeAssCargo = new ArHpeAssociationCargo();
	ArHpeAssociationCollection arHpeAssColl = new ArHpeAssociationCollection(connection);
	
	try {
	    
	    arHpeAssCargo.setHpeAppNum(t1060HPECargo.getAppNum());
	    arHpeAssCargo.setHpeBegDt(t1060HPECargo.getHpeBeginDt());
	    if (combinedHpeMaApp(t1060HPECargo.getAppNum())) {
		arHpeAssCargo.setHpeEndDt(getMaxDate());
	    } else {
		arHpeAssCargo.setHpeEndDt(getNextMonthEndDate(t1060HPECargo.getHpeBeginDt()));
	    }
	    
	    arHpeAssCargo.setCreateDt(currentTime);
	    arHpeAssCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
	    arHpeAssCargo.setHpeTriggerStatusCd("NM");
	    arHpeAssCargo.setHpeTriggerDt(currentTime);
	    
	    arHpeAssColl.setCargo(arHpeAssCargo);
	    arHpeAssColl.insert(arHpeAssColl);
	    
	    return true;
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArHpeAssociationTable(): " + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    arHpeAssCargo = null;
	    arHpeAssColl = null;
	}
    }
    
    public String updateArMpeEligDetailTable() throws Exception {
	log(7, "Begin AutoRegistrationBO.updateArMpeEligDetailTable() ");
	ArMpeEligDetailCargo arMpeEligDetailCargo = new ArMpeEligDetailCargo();
	ArFppeEligDetailCargo arFppeCargo = new ArFppeEligDetailCargo();
	ArMpeEligDetailCollection arMpeEligDetailColl = new ArMpeEligDetailCollection(connection);
	ArFppeEligDetailCollection arFppeCollection = new ArFppeEligDetailCollection(connection);
	boolean isMPEapp = true;
	AppSummaryBO appBO = new AppSummaryBO(connection);
	char repeatedSw=' ';
	
	try {
	    //FPPE is a clone of MPE AR table, pre-filling logic needs to be replicated.
	    if (autoRegT1001SSAppMpeCargo == null) {
		return null;
	    }
	    //MPE apps are only those where APP_TYPE is not FPPE; by default all PM are MPE apps.
	    isMPEapp = !DMConstants.FP_PRESUMPTIVE_ELIGIBILITY.equals(autoRegT1001SSAppMpeCargo.getAppType());
	    
	    if(isMPEapp){
	    	arMpeEligDetailCargo.setAppNum(autoRegT1001SSAppMpeCargo.getAppNum());
	    	arMpeEligDetailCargo.setNetIncomeAmt(autoRegT1001SSAppMpeCargo.getMoNetIncAmt());
		    arMpeEligDetailCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
		    arMpeEligDetailCargo.setPregnancyTestSw(autoRegT1001SSAppMpeCargo.getPosPrefTestInd());
		    arMpeEligDetailCargo.setDeductionAmt(autoRegT1001SSAppMpeCargo.getMoCsPymtAmt());
		    arMpeEligDetailCargo.setDeliveryDt(autoRegT1001SSAppMpeCargo.getExptDlvrDt());
		    arMpeEligDetailCargo.setGrossAmt(autoRegT1001SSAppMpeCargo.getMoGrEiAmt() + autoRegT1001SSAppMpeCargo.getMoGrUeiAmt());
		    arMpeEligDetailCargo.setMonthlyUiAmt(autoRegT1001SSAppMpeCargo.getMoGrUeiAmt());
		    arMpeEligDetailCargo.setMpeEndDt(getNextMonthEndDate(autoRegT1001SSAppMpeCargo.getAppBeginDt()));
		    arMpeEligDetailCargo.setCreateDt(currentTime);
		    arMpeEligDetailCargo.setProviderId(autoRegT1001SSAppMpeCargo.getPrvdId());
		    arMpeEligDetailCargo.setMpeDenialSw('N');
		    arMpeEligDetailCargo.setUnbornCount(autoRegT1001SSAppMpeCargo.getFetusCt());
		    arMpeEligDetailCargo.setHouseholdCount(autoRegT1001SSAppMpeCargo.getHshlMbrQty());
		    arMpeEligDetailCargo.setMonthlyEiAmt(autoRegT1001SSAppMpeCargo.getMoGrEiAmt());
		    arMpeEligDetailCargo.setMpeBeginDt(autoRegT1001SSAppMpeCargo.getAppBeginDt());
		    arMpeEligDetailCargo.setMangpCd("MM");
		    
		    if (autoRegT1004CargoArray != null && autoRegT1004CargoArray.length > 0) {
		    	arMpeEligDetailCargo.setIndvId(autoRegT1004CargoArray[0].getBridgesIndvId());
		    	repeatedSw=appBO.twiceinYear(autoRegT1004CargoArray[0].getBridgesIndvId()); //Used to determine if a denial is needed (N or Y expected).
		    }
		    
		    if(repeatedSw=='Y'){
		    	arMpeEligDetailCargo.setMpeDenialSw('Y');
		    	arMpeEligDetailCargo.setPeTwiceInYearSw('Y');
		    	arMpeEligDetailCargo.setDenialReasonCd("P7");
		    	arMpeEligDetailCargo.setMpeEndDt(currentTime);
		    }
		    else{
		    	arMpeEligDetailCargo.setPeTwiceInYearSw('N');
		    }
		    
	    	arMpeEligDetailColl.add(arMpeEligDetailCargo);
	    	arMpeEligDetailColl.insert(arMpeEligDetailColl);
	    }else{
	    	arFppeCargo.setAppNum(autoRegT1001SSAppMpeCargo.getAppNum());
	    	arFppeCargo.setNetIncomeAmt(autoRegT1001SSAppMpeCargo.getMoNetIncAmt());
	    	arFppeCargo.setCreateUserId(AppRegConstants.AUTO_REG_BATCH);
	    	arFppeCargo.setPregnancyTestSw(autoRegT1001SSAppMpeCargo.getPosPrefTestInd());
	    	arFppeCargo.setDeductionAmt(autoRegT1001SSAppMpeCargo.getMoCsPymtAmt());
	    	arFppeCargo.setGrossAmt(autoRegT1001SSAppMpeCargo.getMoGrEiAmt() + autoRegT1001SSAppMpeCargo.getMoGrUeiAmt());
	    	arFppeCargo.setMonthlyUiAmt(autoRegT1001SSAppMpeCargo.getMoGrUeiAmt());
	    	arFppeCargo.setFppeEndDt(getNextMonthEndDate(autoRegT1001SSAppMpeCargo.getAppBeginDt()));
	    	arFppeCargo.setCreateDt(currentTime);
	    	arFppeCargo.setProviderId(autoRegT1001SSAppMpeCargo.getPrvdId());
	    	arFppeCargo.setFppeDenialSw('N');
	    	arFppeCargo.setHouseholdCount(autoRegT1001SSAppMpeCargo.getHshlMbrQty());
	    	arFppeCargo.setMonthlyEiAmt(autoRegT1001SSAppMpeCargo.getMoGrEiAmt());
	    	arFppeCargo.setFppeBeginDt(autoRegT1001SSAppMpeCargo.getAppBeginDt());
	    	arFppeCargo.setMangpCd("FG");
	    	
	    	if (autoRegT1004CargoArray != null && autoRegT1004CargoArray.length > 0) {
	    		arFppeCargo.setIndvId(autoRegT1004CargoArray[0].getBridgesIndvId());
	    		//repeatedSw=appBO.twiceinYear(autoRegT1004CargoArray[0].getBridgesIndvId()); //Used to determine if a denial is needed (N or Y expected).
	    	}
	    	
	    	/*if(repeatedSw=='Y'){
	    		arFppeCargo.setFppeDenialSw('Y');
	    		arFppeCargo.setDenialReasonCd("P7");
	    		arFppeCargo.setFppeEndDt(currentTime);
	    	}*/
	    	
	    	arFppeCollection.add(arFppeCargo);
	    	arFppeCollection.insert(arFppeCollection);
	    }
	    
	    if(arMpeEligDetailCargo.getMpeDenialSw()=='Y'){
	    	updateStatusArAppforAidTable(autoRegT1001SSAppMpeCargo.getAppNum());
	    	return "P7true";
	    }else{
	    	return "P7false";
	    }
	    
	} catch (Exception e) {
		log(ILog.ERROR, "Exception in AutoRegistrationBO.updateArMpeEligDetailTable(): " + "\n" + e.getMessage() + "\n", e);
	    hasExceptionOccurred = true;
	    throw e;
	} finally {
	    arMpeEligDetailCargo = null;
	    arMpeEligDetailColl = null;
	}
   }