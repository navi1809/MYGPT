//Read in APP_IN_PROFILE from session
			APP_IN_PRFL_Collection sesAppInPrflColl =(APP_IN_PRFL_Collection) session.get(AppConstants.APP_IN_PRFL_MASTER);
			int collSize = sesAppInPrflColl.size();
			for(int i=0;i<collSize;i++){
				String indSeq = sesAppInPrflColl.getCargo(i).getIndv_seq_num();
				if(indSeq.equals(indvSeqNum)){
					sesAppInPrflColl.getCargo(i).setPreg_resp(String.valueOf(IApplicationManager.STATUS_REQUIRED));
					//persisting the data to the database
					short[] questionsArray = new short[1];
					questionsArray[0] = IApplicationManager.PREGNANCY;	
					String[] questionsValues = new String[1];
					questionsValues[0] = String.valueOf(IApplicationManager.STATUS_REQUIRED);	
					applicationManager.persist(appNumber, indvSeqNum, questionsArray,questionsValues); 
					break;
				}
			}
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivTypeSeqBean);
		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("addHouseHoldPregnancyIndividual");
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "addHouseHoldPregnancyIndividual", e);
			throw fe;
		}
	}		
	/**
	* Loads the House hold relationship details page to modify relationship information
	*@param txnBean gov.wisconsin.framework.business.entities.FwTransaction
	*@author govinpr 
	*/
	public void changeHouseholdRelationDetail(FwTransaction txnBean) throws javax.ejb.EJBException {

		try {
			Map pageCollection = txnBean.getPageCollection();
			//Map request = txnBean.getRequest();
			IndivTypeSeqBean indivTypeSeqBean = new IndivTypeSeqBean();
			APP_HSHL_RLT_Collection appHshlRltColl = (APP_HSHL_RLT_Collection)pageCollection.get("APP_HSHL_RLT_Collection");
			indivTypeSeqBean.setIndivSeqNum(appHshlRltColl.getCargo(0).getSrc_indv_seq_num());
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivTypeSeqBean);
		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("changeHouseholdRelationDetail");
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "changeHouseholdRelationDetail", e);
			throw fe;
		}
	}	
	/**
	* Loads the other parent details page to modify other parents information
	*@param txnBean gov.wisconsin.framework.business.entities.FwTransaction
	*@author govinpr 
	*/
	public void changeAbsentParentDetail(FwTransaction txnBean) throws javax.ejb.EJBException {

		try {
			Map pageCollection = txnBean.getPageCollection();
			//Map request = txnBean.getRequest();
			IndivTypeSeqBean indivTypeSeqBean = new IndivTypeSeqBean();
			APP_ABS_PRNT_Cust_Collection appHshlRltColl = (APP_ABS_PRNT_Cust_Collection)pageCollection.get("APP_ABS_PRNT_Cust_Collection");
			indivTypeSeqBean.setIndivSeqNum(appHshlRltColl.getResult(0).getIndv_seq_num());
			indivTypeSeqBean.setType(appHshlRltColl.getResult(0).getAbs_ind());
			pageCollection.put(FwConstants.DETAIL_KEY_BEAN, indivTypeSeqBean);
		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID("changeAbsentParentDetail");
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), "changeAbsentParentDetail", e);
			throw fe;
		}
	}		
	/**
	* Comment here
	*/
	public void getHouseHoldRelationshipDetails(FwTransaction txnBean) throws javax.ejb.EJBException {
	
		Map session = txnBean.getSession();
		Map request = txnBean.getRequest();
		Map pageCollection = txnBean.getPageCollection();
		
		String appNumber = null;
		Map beforeColl = null;
		int[] driverArray = null;
		int indvSeqNumber = 1;
		PeopleHandler peopleHandler = null;
		INDIVIDUAL_Custom_Collection indvSortedCustColl = null;
		INDIVIDUAL_Custom_Collection indvSrcCustColl = null;
		INDIVIDUAL_Custom_Collection indvRefCustColl = null;	
		INDIVIDUAL_Custom_Collection careTakerCustColl = null;
		INDIVIDUAL_Custom_Collection newBornCustColl = null;	
		int relationPosition = 0;
		String pageId = null;
		int pageStatus = 0; 		
		int indvSortSize = 0;
		APP_IN_PRFL_Collection appInPrflSessionColl = null;
		boolean detailKeyFlag = false;
		
		try {
			appNumber =(String) session.get(AppConstants.APP_NUMBER);
			driverArray = (int[]) session.get(FwConstants.AFB_DRIVER);
			peopleHandler = (PeopleHandler)session.get(AppConstants.INDIV_MASTER_HANDLER);
			//Modified by Varshi Kasarla for ILIES-282240 : Added Null fix.
			if(peopleHandler == null && appNumber != null){
				peopleHandler=new PeopleHandler();
				peopleHandler.loadPeopleHandler(appNumber);
				session.put(AppConstants.INDIV_MASTER_HANDLER,peopleHandler);	
			}
			//ILIES-282240 changes end
			
			//Determine driver status
			int driverStatus =
				(int) driverManager.getAFBStatus(
					FwConstants.AFB_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);
			pageId = (String)request.get(FwConstants.CURRENT_PAGE_ID);
			pageStatus = driverManager.getAFBStatus(FwConstants.AFB_DRIVER,pageId,driverArray);
			//PCR# 32248
			INDIVIDUAL_Custom_Collection peopleInHome=peopleHandler.getInAndOutOfHomeIndividuals(appNumber);
			indvSortSize=peopleInHome.size();
			beforeColl =(Map)session.get(FwConstants.BEFORE_COLLECTION);
			appInPrflSessionColl = (APP_IN_PRFL_Collection)session.get(AppConstants.APP_IN_PRFL_MASTER);
			String previousPageId = (String)request.get(FwConstants.PREVIOUS_PAGE_ID);

			if(!pageId.equals(previousPageId)){
				//we need to remove the vallues from the session
				session.remove(FwConstants.BEFORE_COLLECTION);
				if(!previousPageId.equals("ABHMS")){
					pageCollection.remove(FwConstants.DETAIL_KEY_BEAN);
				}
				beforeColl = new HashMap();
			}
			if(beforeColl != null ){
				beforeColl.remove("APP_HSHL_RLT_Collection");
				beforeColl.remove("INDV_SRC_CUST_Collection");
				beforeColl.remove("INDV_REF_CUST_Collection");			
				beforeColl.remove("APP_IN_NEWB_Collection");
				beforeColl.remove("INDIVIDUAL_CareTaker_Collection");
				beforeColl.remove("APP_HSHL_RLT_CareTaker_Collection");
				beforeColl.remove("CareTakerMap");

				if(beforeColl.containsKey(FwConstants.CURRENT_RECORD_INDEX)){
					relationPosition = Integer.parseInt((String)beforeColl.get(FwConstants.CURRENT_RECORD_INDEX));
					relationPosition = relationPosition + 1;
				}
				if(beforeColl.containsKey("SortedColl")){
					indvSortedCustColl =(INDIVIDUAL_Custom_Collection)beforeColl.get("SortedColl");
				}
			}

			if(indvSortedCustColl == null){
				//here we are getting the sorted collection
				//indvSortedCustColl = peopleHandler.sortIndividualsByAge(peopleHandler.getInHomeIndividuals());
				//PCR# 32248
				indvSortedCustColl = peopleHandler.sortIndividualsByAge(peopleHandler.getInAndOutOfHomeIndividuals(appNumber));
			}
			ABHouseHoldRelationshipBO houseHoldRelationBo = new  ABHouseHoldRelationshipBO();
			indvSortSize = indvSortedCustColl.size();
			 
			if(pageCollection.containsKey(FwConstants.DETAIL_KEY_BEAN)){
				IndivTypeSeqBean indvSeqBean =(IndivTypeSeqBean)pageCollection.get(FwConstants.DETAIL_KEY_BEAN);
				indvSeqNumber = Integer.parseInt(indvSeqBean.getIndivSeqNum());
				
				//now we are finding that position
				for(int i=0; i <indvSortSize;i++){
					if(indvSortedCustColl.getResult(i).getIndv_seq_num().equals(indvSeqBean.getIndivSeqNum())){
						relationPosition = i;
						break;
					}
				}
				detailKeyFlag = true;
			}
			else if(pageStatus == FwConstants.DRIVER_COMPLETE){
				INDIVIDUAL_Custom_Cargo indvSortCargo = null;
				for(int i=0; i <indvSortSize; i++)
				{
					indvSortCargo = indvSortedCustColl.getResult(i);
					
					//here we need to determine the last record we need to show are not 
					if(indvSortSize == i+1){
						//now we need to determine that person rules
						indvSrcCustColl = new INDIVIDUAL_Custom_Collection();
						indvSrcCustColl.add(indvSortCargo);
						//now we need to run the rules 
						//first we need to run the preg check
						
						//Indrani
						// boolean pregChk = houseHoldRelationBo.runPregChk(appInPrflSessionColl,indvSrcCustColl);
						//next new born 
						String newBornMotherSeqNumber = houseHoldRelationBo.runNewBornMotherCheck(indvSrcCustColl,appNumber);
						//caretaker check
						APP_HSHL_RLT_Collection  careTakerColl = houseHoldRelationBo.runCareTakerCheck(indvSrcCustColl,peopleHandler,appNumber);
						// if(!pregChk && newBornMotherSeqNumber == null && careTakerColl == null){
						if( newBornMotherSeqNumber == null && careTakerColl == null){
							continue;						
						}
					}
					populateRecordArray(new IndivTypeSeqBean(indvSortCargo.getIndv_seq_num(),"",""),session);
					relationPosition = i;
				}	
			}
					
			//now i am creating the collections 
			//first collection is src indv seq number
			indvSrcCustColl = new INDIVIDUAL_Custom_Collection();
			indvRefCustColl = new INDIVIDUAL_Custom_Collection();
			pageCollection = new HashMap();
			Map noOneCheckedMap = new HashMap();
			if(pageStatus == FwConstants.DRIVER_COMPLETE || pageStatus == FwConstants.DRIVER_VISIT_AGAIN || pageStatus == FwConstants.DRIVER_REQUIRED || detailKeyFlag)
			{

				//first i need to get the rel point one to the src collection
				indvSrcCustColl.add(indvSortedCustColl.get(relationPosition));
				indvSeqNumber = Integer.parseInt(indvSrcCustColl.getResult(0).getIndv_seq_num());

				//now i am loging the page informaton 
				pageCollection = houseHoldRelationBo.loadHousholdRelationshipDetails(appNumber,indvSeqNumber);
				//now i am adding to the before collection 
				for(int k = relationPosition+1 ; k < indvSortSize; k++){
					indvRefCustColl.add(indvSortedCustColl.getResult(k));
				}

				//now i am storing this seq number to the record array 
				if(!detailKeyFlag && pageStatus != FwConstants.DRIVER_COMPLETE){
					populateRecordArray(new IndivTypeSeqBean(indvSrcCustColl.getResult(0).getIndv_seq_num(),"",""),session);
				}
				
				boolean pregStatus = houseHoldRelationBo.runPregChk(appInPrflSessionColl,indvSrcCustColl);
				
				
				String newBornMotherSeqNumber = houseHoldRelationBo.runNewBornMotherCheck(indvSrcCustColl,appNumber);
				if(newBornMotherSeqNumber != null){
					newBornCustColl = new INDIVIDUAL_Custom_Collection();
					newBornCustColl.add(peopleHandler.getIndividual(newBornMotherSeqNumber));
					
					//now i need to get that custom cargo 
					pageCollection.put("INDIVIDUAL_NewBorn_Collection",newBornCustColl);
				}
				List relationList = null;
				if(pageCollection.containsKey("RelationList")){
					relationList =(ArrayList)pageCollection.get("RelationList");
				}
				//filtered values
				APP_HSHL_RLT_Collection relationCollection =houseHoldRelationBo.checkExitingRelations(appNumber,String.valueOf(indvSeqNumber),relationList);
				if(relationCollection != null){
					pageCollection.put("RelationCollection",relationCollection);
				}
				
				APP_HSHL_RLT_Collection careTakerColl = houseHoldRelationBo.runCareTakerCheck(indvSrcCustColl,peopleHandler,appNumber);
				if(careTakerColl != null && careTakerColl.size()> 0){
					int careTakerSize  =careTakerColl.size();
					Map careTakerMap = new HashMap();
					//now i am making map and the collection 
					careTakerCustColl = new INDIVIDUAL_Custom_Collection();
					APP_HSHL_RLT_Cargo careTakerCargo = null;
					boolean foundFlag = false;
					boolean relation = false;
					boolean noOneFlag = false;
					for(int i =0;i < careTakerSize;i++){
						careTakerCargo = careTakerColl.getCargo(i);
						//now i am checking that person exit in the people handler. 
						if(peopleHandler.getIndividual(careTakerCargo.getSrc_indv_seq_num()) != null){
							careTakerCustColl.add(peopleHandler.getIndividual(careTakerCargo.getSrc_indv_seq_num()));
							if(careTakerCargo.getCare_resp().equals(FwConstants.YES)){
								careTakerMap.put(careTakerCargo.getSrc_indv_seq_num(),"R");
								relation = true;
							} else if(careTakerCargo.getCare_resp().equals(FwConstants.NO)) {
								noOneFlag = true;
							}
							else if(careTakerCargo.getCare_resp().equals(FwConstants.SPACE)){
								careTakerMap.put(careTakerCargo.getSrc_indv_seq_num()," ");	
								relation = true;
							}
						foundFlag = true;
						}
					}
					//if caretaker found
					if(foundFlag){
						pageCollection.put("INDIVIDUAL_CareTaker_Collection",careTakerCustColl);
						pageCollection.put("APP_HSHL_RLT_CareTaker_Collection",careTakerColl);
						pageCollection.put("CareTakerMap",careTakerMap);
					} 
					
					//noOneCheckedMap = (Map)pageCollection.get(AppConstants.NO_ONE_CHECKED_MAP);
					if(!relation && noOneFlag ) {
						noOneCheckedMap.put("NO_ONE_CHECKED_32", FwConstants.YES);
						pageCollection.put(AppConstants.NO_ONE_CHECKED_MAP, noOneCheckedMap);
						
					}
				AFBHouseHoldPregnancyQuestionsBO finalBo = new AFBHouseHoldPregnancyQuestionsBO();
				APP_RQST_Collection appRqstCollection = finalBo.loadRqstApplication(appNumber);
	             APP_RQST_Cargo appRqstCargo = null;
	             Map beforeCollection = (Map)session.get(FwConstants.BEFORE_COLLECTION);
	             APP_IN_PRFL_Cargo appInCargo = null;
	             NO_ONE_Cargo noCargo = new NO_ONE_Cargo();
	             NO_ONE_Collection noOneColl = null;
	             int appInCollSize = appInPrflSessionColl.size();
	             int appRqstSize = appRqstCollection.size();
	             boolean indvFound = false;
	             for (int i = 0; i < appRqstSize; i++) {
	                   appRqstCargo = (APP_RQST_Cargo) appRqstCollection.get(i);
	                   if (appRqstCargo != null && appRqstCargo.getHpe_app_stat_cd() != null && appRqstCargo.getHpe_app_stat_cd().equals("PE")) {
	                         for (int j = 0; j < appInCollSize; j++) {
	                               appInCargo = (APP_IN_PRFL_Cargo) appInPrflSessionColl.get(j);
	                               if (appInCargo != null && !careTakerMap.isEmpty() 
	                            		   && "R".equals(careTakerMap.get(appInCargo.getIndv_seq_num()))) {
	                                     indvFound = true;
	                                     break;
	                               }
	                         }
	                         if (!indvFound) {
	                        	 	noOneCheckedMap = (Map) pageCollection.get(AppConstants.NO_ONE_CHECKED_MAP);
	                        	 	if(noOneCheckedMap==null) {
	                        	 		noOneCheckedMap = new HashMap();
	                        	 	}
	                        	 	noCargo.setNo_one_name("CARETAKER");
	                               noCargo.setNo_one_value("FwConstants.YES");
	                               noOneCheckedMap.put("NO_ONE_CHECKED_32",FwConstants.YES);
	                               pageCollection.put(AppConstants.NO_ONE_CHECKED_MAP, noOneCheckedMap);
	                         }
	                   }
	             }
				}
	           pageCollection.put("INDV_SRC_CUST_Collection",indvSrcCustColl);
				pageCollection.put("INDV_REF_CUST_Collection",indvRefCustColl);
				pageCollection.put("SortedColl",indvSortedCustColl);
				// Indrani comment4
				//pageCollection.put("PregPrflStatus",Boolean.valueOf(pregStatus));  Indrani comment4
				pageCollection.put(AppConstants.INDV_SEQUENCE_NUMBERS,String.valueOf(indvSeqNumber));
			}
			pageCollection.put("CurrentPageStatus",String.valueOf(pageStatus));
			
			txnBean.setPageCollection(pageCollection);
			componentManager.getComponents(pageId,txnBean);			
			beforeColl =(Map) session.get(FwConstants.BEFORE_COLLECTION);
			if(beforeColl == null)
				beforeColl = new HashMap();
			beforeColl.putAll(pageCollection);
			session.put(FwConstants.BEFORE_COLLECTION, beforeColl);
			
			//Added by Varshi Kasarla for ILIES-282240 : Removing the values from session.
			ABRegistrationBO registrationBo = new ABRegistrationBO();
			registrationBo.clearSessionOfWarningMsgOnSaveAndExitFunc(session);
			//ILIES-282240 changes end here
				
		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID(AppConstants.GET_HOUSEHOLD_RELATIONSHIP_DETAILS);
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			FwException fe = createFwException(this.getClass().getName(), AppConstants.GET_HOUSEHOLD_RELATIONSHIP_DETAILS, e);
			throw fe;
		}
	}
	/**
	* Comment here
	*/
	public void storeHouseHoldRelationshipDetails(FwTransaction txnBean) throws javax.ejb.EJBException {
	    
		Map session = txnBean.getSession();
		Map request = txnBean.getRequest();
		Map pageCollection = txnBean.getPageCollection();
		int[] driverArray = null;
		String appNumber = null;
		String pageId = null;
		int currentPageStatus = 0;
		PeopleHandler peopleHandler = null;
		Map beforeColl = null;
		APP_HSHL_RLT_Collection appHshlRltColl = null;
		APP_HSHL_RLT_Collection  appHshlRltBeforeColl = null;
		APP_HSHL_RLT_Cargo appHshlRltCargo = null;
		APP_HSHL_RLT_Cargo appHshlRltBeforeCargo = null;

		APP_HSHL_RLT_Cargo appCareTakerHshlCargo = null;
		APP_HSHL_RLT_Cargo appCareTakerHshlBeforeCargo = null;
		APP_HSHL_RLT_Collection appCareTakerHshlColl = null;
		APP_HSHL_RLT_Collection  appCareTakerHshlBeforeColl = null;
		
		INDIVIDUAL_Custom_Collection sortedColl = null;
		APP_IN_PREG_Collection appPregColl = null;
		
		APP_IN_NEWB_Collection appNewBornColl = null;
		APP_IN_NEWB_Collection appNewBornBeforeColl = null;
		APP_IN_NEWB_Cargo appNewBornCargo = null;
		APP_IN_NEWB_Cargo appNewBornBeforeCargo = null;
		Map noOneCheckedMap = null;
		NO_ONE_Collection noOneColl = null;
		ABHouseHoldMemberBO memberBO = new ABHouseHoldMemberBO();
		FwMessageList validateInfo = null;
		int indvSeqNumber = 1;
		int sortedCollSize = 0;
		String  language = null;
		//Modified by Varshi Kasarla for ILIES-282240:including Save and Exit functionality
		APP_HSHL_RLT_Collection appCareTakerHshlCollNew = null;
		APP_HSHL_RLT_Collection prflColl = new APP_HSHL_RLT_Collection();
		APP_HSHL_RLT_Cargo[]  divPrflCargo= null;
		APP_HSHL_RLT_Cargo[]  cargo1= null;
		APP_IN_PRFL_Collection divPrflColl = new APP_IN_PRFL_Collection();
		APP_HSHL_RLT_Cargo cargo = new APP_HSHL_RLT_Cargo();
		APP_HSHL_RLT_Collection noOneSlectionColl = new APP_HSHL_RLT_Collection();
		
		try {
			appNumber =(String) session.get(AppConstants.APP_NUMBER);
			driverArray = (int[]) session.get(FwConstants.AFB_DRIVER);
			pageId = (String)request.get(FwConstants.CURRENT_PAGE_ID);
			 boolean scheduleABHMS = false;//added by ggr
  	         String previousPageID = (String) request.get(FwConstants.PREVIOUS_PAGE_ID);
  	         
  	         short[] selectedProgram = ( short[] )session.get( FwConstants.AFB_PROGRAM_KEY );
  	         IProgramManager programManager = FwProgramManager.getInstance();
  	         boolean isSnap = (selectedProgram[2] == 1) ? true : false;

  	         if(previousPageID.equals("ABHMS")){
  	        	scheduleABHMS = true;
  	         }
  	         //end by ggr
			appNumber =(String) session.get(AppConstants.APP_NUMBER);
			beforeColl =(Map) session.get(FwConstants.BEFORE_COLLECTION);
			peopleHandler = (PeopleHandler)session.get(AppConstants.INDIV_MASTER_HANDLER);
			currentPageStatus = driverManager.getAFBStatus(FwConstants.AFB_DRIVER,pageId,driverArray);
			Map httpSessionMap = (Map)session.get(FwConstants.HTTP_SESSION);
			language = (String)httpSessionMap.get(AppConstants.LANGUAGE);

			
			appHshlRltColl =  (APP_HSHL_RLT_Collection)pageCollection.get("APP_HSHL_RLT_Collection");
			if(beforeColl != null){
				if(beforeColl.containsKey("SortedColl")){
					sortedColl =(INDIVIDUAL_Custom_Collection) beforeColl.get("SortedColl");
				}
				if(beforeColl.containsKey("APP_HSHL_RLT_Collection")){
					appHshlRltBeforeColl = (APP_HSHL_RLT_Collection) beforeColl.get("APP_HSHL_RLT_Collection");
				}
				
				if(beforeColl.containsKey("APP_IN_NEWB_Collection")){
					appNewBornBeforeColl = (APP_IN_NEWB_Collection) beforeColl.get("APP_IN_NEWB_Collection");
				}
				if(beforeColl.containsKey("APP_HSHL_RLT_CareTaker_Collection")){
					appCareTakerHshlBeforeColl = (APP_HSHL_RLT_Collection) beforeColl.get("APP_HSHL_RLT_CareTaker_Collection");
				}
				if(beforeColl.containsKey(AppConstants.INDV_SEQUENCE_NUMBERS)){
					indvSeqNumber = Integer.parseInt((String)beforeColl.get(AppConstants.INDV_SEQUENCE_NUMBERS));
				}
				//get the NoOneChecked map from the beforecollection
				noOneCheckedMap = (Map)beforeColl.get(AppConstants.NO_ONE_CHECKED_MAP);
			}
			if(sortedColl != null){
				sortedCollSize = sortedColl.size();
			}	
			// avtsingh: Modified for ILIES-126663
			if(pageCollection != null){
				appCareTakerHshlColl = new APP_HSHL_RLT_Collection();
				if(pageCollection.containsKey("APP_HSHL_RLT_Collection")){
					appHshlRltColl = (APP_HSHL_RLT_Collection) pageCollection.get("APP_HSHL_RLT_Collection");
					//now i need to seperate the care taker cargo
					int appHshlSize = appHshlRltColl.size();
					// added by avtsingh for ILIES-129330
					Iterator itr = appHshlRltColl.iterator();
					while (itr.hasNext()){
					    appHshlRltCargo = (APP_HSHL_RLT_Cargo)itr.next();
						if(appHshlRltCargo.getRlt_cd() == null){
							itr.remove();
							appCareTakerHshlColl.add(appHshlRltCargo);
						}
					}
					if(appHshlRltCargo != null){
						if(appHshlRltCargo.getPhy_boe_sep_sw() == null || appHshlRltCargo.getPhy_boe_sep_sw().trim().equalsIgnoreCase("")){
							  appHshlRltCargo.setPhy_boe_sep_sw(FwConstants.SPACE);		  
						}	
						//Added by Uma to update the value
						if(appHshlRltCargo.getIs_parent_sw() == null || appHshlRltCargo.getIs_parent_sw().trim().equalsIgnoreCase("")){
							  appHshlRltCargo.setIs_parent_sw(FwConstants.SPACE);		  
						}
					}
				}
				if(pageCollection.containsKey("APP_IN_NEWB_Collection")){
					appNewBornColl = (APP_IN_NEWB_Collection) pageCollection.get("APP_IN_NEWB_Collection");
				}
				//Get the NO ONE Collection
				noOneColl = (NO_ONE_Collection)pageCollection.get("NO_ONE_Collection");
			}
			ABHouseHoldRelationshipBO houseHoldRelationBo = new ABHouseHoldRelationshipBO();
			
			//now i am validating the data
			// Modified for ILIES-129376
			//Added appnum for ILIES-134055
			validateInfo= houseHoldRelationBo.validateHousholdRelationshipDetails(appHshlRltColl,appPregColl,peopleHandler,indvSeqNumber,language,isSnap,appNumber);
			
			//Changes made by varshi kasarla for ILIES-284179- Change Start here
			if(appCareTakerHshlBeforeColl!=null){
				divPrflCargo = appCareTakerHshlBeforeColl.cloneResults();
				int seqNum = 0;
				if(divPrflCargo != null && divPrflCargo.length > 0){
					for(int i=1; i<= divPrflCargo.length; i++){
						String selectedValue = (String) request.get("careTaker_"+i);
						for(APP_HSHL_RLT_Cargo cargoCareTaker : divPrflCargo){
							if(cargoCareTaker.getSrc_indv_seq_num() != null  && !cargoCareTaker.getSrc_indv_seq_num().isEmpty()){
								if(seqNum == i){
									if(selectedValue!=null){
										cargoCareTaker.setPnp_tghr_sw(selectedValue);	
									}
									divPrflColl.add(cargoCareTaker);
								}
							}
						}
					}
				}
			}
			
			String noOneSelection = (String) request.get("NoOne_CARETAKER");
			if(noOneSelection != null){
				cargo.setRlt_cd(noOneSelection);
				noOneSlectionColl.addCargo(cargo);
            }
			//Changes made by varshi kasarla for ILIES-284179- Change Ends here
			//ILIES-282240: change ends here
			if(validateInfo != null&& validateInfo.hasMessages()){
				request.put(FwConstants.MESSAGE_LIST, validateInfo);			
				if(appNewBornColl != null)
					pageCollection.put("APP_IN_NEWB_Collection",appNewBornColl);
				if(appHshlRltColl != null)	
					pageCollection.put("APP_HSHL_RLT_Collection",appHshlRltColl);
				if(beforeColl.containsKey("INDIVIDUAL_NewBorn_Collection"))	
					pageCollection.put("INDIVIDUAL_NewBorn_Collection",beforeColl.get("INDIVIDUAL_NewBorn_Collection"));

				if(beforeColl.containsKey("INDIVIDUAL_CareTaker_Collection"))	
					pageCollection.put("INDIVIDUAL_CareTaker_Collection",beforeColl.get("INDIVIDUAL_CareTaker_Collection"));
				pageCollection.put(FwConstants.PAGE_COMPONENT_LIST, beforeColl.get(FwConstants.PAGE_COMPONENT_LIST));
				if(beforeColl.containsKey("APP_HSHL_RLT_CareTaker_Collection")){
					APP_HSHL_RLT_Collection appHshlRltCareColl = 	(APP_HSHL_RLT_Collection)beforeColl.get("APP_HSHL_RLT_CareTaker_Collection");
					pageCollection.put("APP_HSHL_RLT_CareTaker_Collection",appHshlRltCareColl);
					APP_HSHL_RLT_Cargo appCareTakerPageCargo = null;
					APP_HSHL_RLT_Cargo appCareTakerPageBeforeCargo = null;
					if(appCareTakerHshlColl != null && !(appCareTakerHshlColl.isEmpty())){
						appCareTakerPageCargo = appCareTakerHshlColl.getCargo(0);
					}
					int size = appHshlRltCareColl.size();
					Map careTakerMap = new HashMap();	
					for(int i=0; i<size;i++){
						appCareTakerPageBeforeCargo = appHshlRltCareColl.getCargo(i);
						if(appCareTakerPageCargo != null && appCareTakerPageBeforeCargo.getSrc_indv_seq_num().equals(appCareTakerPageCargo.getRef_indv_seq_num())){
							careTakerMap.put(appCareTakerPageBeforeCargo.getSrc_indv_seq_num(),"R");
						}
						else{
							careTakerMap.put(appCareTakerPageBeforeCargo.getSrc_indv_seq_num()," ");
						}
					}
					pageCollection.put("CareTakerMap",careTakerMap);
				}
				if(beforeColl.containsKey("INDV_SRC_CUST_Collection"))
					pageCollection.put("INDV_SRC_CUST_Collection",beforeColl.get("INDV_SRC_CUST_Collection"));
				
				if(beforeColl.containsKey("INDV_REF_CUST_Collection"))	
					pageCollection.put("INDV_REF_CUST_Collection",beforeColl.get("INDV_REF_CUST_Collection"));
				
				if(beforeColl.containsKey("SortedColl"))	
					pageCollection.put("SortedColl",beforeColl.get("SortedColl"));			
				if(beforeColl.containsKey("RelationCollection"))	
					pageCollection.put("RelationCollection",beforeColl.get("RelationCollection"));	
				pageCollection.put(AppConstants.INDV_SEQUENCE_NUMBERS,String.valueOf(indvSeqNumber));
				pageCollection.put("CurrentPageStatus",String.valueOf(currentPageStatus));
				
				//Changes made by varshi kasarla for ILIES-284179- Change Start here	
				request.put(FwConstants.PAGE_COLL_0, appHshlRltColl);
				request.put(FwConstants.PAGE_COLL_1, appCareTakerHshlBeforeColl);
				request.put(FwConstants.PAGE_COLL_2, noOneSlectionColl);
				request.put(FwConstants.PAGE_COLL_3, divPrflColl);
				request.put(FwConstants.NUMBER_OF_COLLECTIONS_FOR_WARNING_MSG, 4);
				//Changes made by varshi kasarla for ILIES-284179- Change Start here
				
			return;
			}
			
			// Added for the ILIES project
			// avtsingh: Modified for ILIES-126663
			if(appHshlRltCargo != null){
			if ( appHshlRltCargo.getTax_dependent_sw() == null )
			{
				appHshlRltCargo.setTax_dependent_sw( FwConstants.NO );
			}
			
			if ( appHshlRltCargo.getTax_jointly_filed_sw() == null )
			{
				appHshlRltCargo.setTax_jointly_filed_sw( FwConstants.NO );
			}
			}
			boolean completeCareFlg = true;
			List componentList =(ArrayList) beforeColl.get(FwConstants.PAGE_COMPONENT_LIST);
			 
			if(appCareTakerHshlBeforeColl != null && !(appCareTakerHshlBeforeColl.isEmpty())){
			
				if(componentList.contains("32")){	
					completeCareFlg = false;
				}
				if(appCareTakerHshlColl != null && !(appCareTakerHshlColl.isEmpty())){
					appCareTakerHshlCargo = appCareTakerHshlColl.getCargo(0);
					completeCareFlg = true;
				}
				// Modified by avtsingh for ILIES-129330
				Map careTakerMap = new HashMap();	
				APP_HSHL_RLT_Collection updatedCareTakerColl = null;
				int careTakerSize = 0;
				if(appCareTakerHshlBeforeColl != null)
					careTakerSize = appCareTakerHshlBeforeColl.size();
				int afterCareTakerSize = 0;
				if(appCareTakerHshlColl != null)
					afterCareTakerSize = appCareTakerHshlColl.size();
				boolean foundit = false;
				for(int j=0; j < careTakerSize ; j++) {
					appCareTakerHshlBeforeCargo = appCareTakerHshlBeforeColl.getCargo(j);
					foundit = false;
					for(int i =0; i < afterCareTakerSize ;i++){
						appCareTakerHshlCargo = appCareTakerHshlColl.getCargo(i);
						if(appCareTakerHshlBeforeCargo.getSrc_indv_seq_num().equals(appCareTakerHshlCargo.getSrc_indv_seq_num())){
								//we need to update this record.
								if(updatedCareTakerColl == null)
									updatedCareTakerColl = new APP_HSHL_RLT_Collection();
								appCareTakerHshlBeforeCargo.setCare_resp(FwConstants.YES);
								appCareTakerHshlBeforeCargo.setChg_eff_dt(AppConstants.HIGH_TIMESTAMP);
								if(appCareTakerHshlBeforeCargo.getChg_eff_dt() == null)
								{
									appCareTakerHshlBeforeCargo.setChg_eff_dt(AppConstants.HIGH_TIMESTAMP);
								}
								else if  (appCareTakerHshlBeforeCargo.getChg_eff_dt().trim().length()== 0){
									appCareTakerHshlBeforeCargo.setChg_eff_dt(AppConstants.HIGH_TIMESTAMP);
								}else{
										appCareTakerHshlBeforeCargo.setChg_eff_dt(displayFormatter.getYYYYMMDDTimestamp(displayFormatter.getMMDDYYYYDate(appCareTakerHshlBeforeCargo.getChg_eff_dt())));	
									}	
									
								
								if(appCareTakerHshlBeforeCargo.getSrc_app_ind() == null){
									appCareTakerHshlBeforeCargo.setChg_eff_dt(FwConstants.SPACE);
								}
								
								if(appCareTakerHshlBeforeCargo.getPhy_boe_sep_sw() == null || appCareTakerHshlBeforeCargo.getPhy_boe_sep_sw().trim().equalsIgnoreCase("")){
									appCareTakerHshlBeforeCargo.setPhy_boe_sep_sw(FwConstants.SPACE);	
								}
								//Added by Uma to Update the value 
								if(appCareTakerHshlBeforeCargo.getIs_parent_sw() == null || appCareTakerHshlBeforeCargo.getIs_parent_sw().trim().equalsIgnoreCase("")){
									appCareTakerHshlBeforeCargo.setIs_parent_sw(FwConstants.SPACE);	  
								}
								
								// Added for the ILIES project
								if ( appCareTakerHshlBeforeCargo.getTax_dependent_sw() == null )
								{
									appCareTakerHshlBeforeCargo.setTax_dependent_sw( FwConstants.NO );
								}
								
								if ( appCareTakerHshlBeforeCargo.getTax_jointly_filed_sw() == null )
								{
									appCareTakerHshlBeforeCargo.setTax_jointly_filed_sw( FwConstants.NO );
								}
								
								appCareTakerHshlBeforeCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
								updatedCareTakerColl.add(appCareTakerHshlBeforeCargo);	
								foundit = true;
								careTakerMap.put(appCareTakerHshlBeforeCargo.getSrc_indv_seq_num(),"R");
								break;
							} 
					}
						if(!foundit){	
								if(updatedCareTakerColl == null)
									updatedCareTakerColl = new APP_HSHL_RLT_Collection();
								appCareTakerHshlBeforeCargo.setCare_resp(FwConstants.NO);
								// PCR # 29768
							
								
								if(appCareTakerHshlBeforeCargo.getChg_eff_dt()== null || appCareTakerHshlBeforeCargo.getChg_eff_dt().trim().length() == 0){
									appCareTakerHshlBeforeCargo.setChg_eff_dt(AppConstants.HIGH_TIMESTAMP);
								}
								else{
									appCareTakerHshlBeforeCargo.setChg_eff_dt(displayFormatter.getYYYYMMDDTimestamp(displayFormatter.getMMDDYYYYDate(appCareTakerHshlBeforeCargo.getChg_eff_dt())));	
								}
								
								
								appCareTakerHshlBeforeCargo.setChg_eff_dt(AppConstants.HIGH_TIMESTAMP);
								
								if(appCareTakerHshlBeforeCargo.getSrc_app_ind() == null){
									appCareTakerHshlBeforeCargo.setChg_eff_dt(FwConstants.SPACE);
								}
								
								if(appCareTakerHshlBeforeCargo.getPhy_boe_sep_sw() == null){
									appCareTakerHshlBeforeCargo.setPhy_boe_sep_sw(FwConstants.SPACE);
								}
								
								if(appCareTakerHshlBeforeCargo.getPhy_boe_sep_sw() == null || appCareTakerHshlBeforeCargo.getPhy_boe_sep_sw().trim().equalsIgnoreCase("")){
									appCareTakerHshlBeforeCargo.setPhy_boe_sep_sw(FwConstants.SPACE);	
									  
								}
								//Added by Uma to update the value
								if(appCareTakerHshlBeforeCargo.getIs_parent_sw() == null || appCareTakerHshlBeforeCargo.getIs_parent_sw().trim().equalsIgnoreCase("") ){
									appCareTakerHshlBeforeCargo.setIs_parent_sw(FwConstants.SPACE);	
									  
								}
								
								// Added for the ILIES project
								if ( appCareTakerHshlBeforeCargo.getTax_dependent_sw() == null )
								{
									appCareTakerHshlBeforeCargo.setTax_dependent_sw( FwConstants.NO );
								}
								
								if ( appCareTakerHshlBeforeCargo.getTax_jointly_filed_sw() == null )
								{
									appCareTakerHshlBeforeCargo.setTax_jointly_filed_sw( FwConstants.NO );
								}
								
								
								appCareTakerHshlBeforeCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
								updatedCareTakerColl.add(appCareTakerHshlBeforeCargo);
								careTakerMap.put(appCareTakerHshlBeforeCargo.getSrc_indv_seq_num()," ");
						}
				}
				boolean[] componentsDisplayed = new boolean[]{false};
				componentsDisplayed = houseHoldRelationBo.getComponentsDisplayed(beforeColl, componentsDisplayed);
				
				if(noOneCheckedMap == null)
				{
					noOneCheckedMap = new HashMap();
				}
				
				StringBuffer noOneCheckedString = new StringBuffer();
				noOneCheckedString.append(AppConstants.NO_ONE_CHECKED);
				noOneCheckedString.append("32");	
				
				if(noOneColl!=null && !(noOneColl.isEmpty())) {
					noOneCheckedMap.put(noOneCheckedString.toString(), FwConstants.YES);
				} else {
					noOneCheckedMap.put(noOneCheckedString.toString(), FwConstants.NO);
				}
				pageCollection.put(AppConstants.NO_ONE_CHECKED_MAP, noOneCheckedMap);
				
				FwMessageList errorMessageList = null;
				//Added to restore the parental care content 
				//Added by arurajan ILIES-119944
				FwMessageList validationResult = houseHoldRelationBo.validateParentalCareQuestions(appCareTakerHshlBeforeColl,noOneColl);
				if((validationResult != null && validationResult.hasMessages()) || (errorMessageList != null && errorMessageList.hasMessages())){
				if (validationResult != null && validationResult.hasMessages()) {
					request.put(FwConstants.MESSAGE_LIST, validationResult);
					
					//Changes made by varshi kasarla for ILIES-284179- Change Start here
					request.put(FwConstants.PAGE_COLL_0, appHshlRltColl);
					request.put(FwConstants.PAGE_COLL_1, appCareTakerHshlBeforeColl);
					request.put(FwConstants.PAGE_COLL_2, noOneSlectionColl);
					request.put(FwConstants.PAGE_COLL_3, divPrflColl);
					request.put(FwConstants.NUMBER_OF_COLLECTIONS_FOR_WARNING_MSG, 4);
					//Changes made by varshi kasarla for ILIES-284179- Change Ends here
				}
				if(errorMessageList != null && errorMessageList.hasMessages()){
					request.put(FwConstants.MESSAGE_LIST, errorMessageList);
				}
					
					if(appNewBornColl != null)
						pageCollection.put("APP_IN_NEWB_Collection",appNewBornColl);
					if(appHshlRltColl != null)	
						pageCollection.put("APP_HSHL_RLT_Collection",appHshlRltColl);
					if(beforeColl.containsKey("INDIVIDUAL_NewBorn_Collection"))	
						pageCollection.put("INDIVIDUAL_NewBorn_Collection",beforeColl.get("INDIVIDUAL_NewBorn_Collection"));

					if(beforeColl.containsKey("INDIVIDUAL_CareTaker_Collection"))	
						pageCollection.put("INDIVIDUAL_CareTaker_Collection",beforeColl.get("INDIVIDUAL_CareTaker_Collection"));
					pageCollection.put(FwConstants.PAGE_COMPONENT_LIST, beforeColl.get(FwConstants.PAGE_COMPONENT_LIST));
					if(beforeColl.containsKey("APP_HSHL_RLT_CareTaker_Collection")){
						APP_HSHL_RLT_Collection appHshlRltCareColl = (APP_HSHL_RLT_Collection)beforeColl.get("APP_HSHL_RLT_CareTaker_Collection");
						pageCollection.put("APP_HSHL_RLT_CareTaker_Collection",appHshlRltCareColl);
						APP_HSHL_RLT_Cargo appCareTakerPageCargo = null;
						APP_HSHL_RLT_Cargo appCareTakerPageBeforeCargo = null;
						if(appCareTakerHshlColl != null && appCareTakerHshlColl.size()>0) {
							appCareTakerPageCargo = appCareTakerHshlColl.getCargo(0);
						}
						pageCollection.put("CareTakerMap",careTakerMap);
					}
					if(beforeColl.containsKey("INDV_SRC_CUST_Collection"))
						pageCollection.put("INDV_SRC_CUST_Collection",beforeColl.get("INDV_SRC_CUST_Collection"));
					
					if(beforeColl.containsKey("INDV_REF_CUST_Collection"))	
						pageCollection.put("INDV_REF_CUST_Collection",beforeColl.get("INDV_REF_CUST_Collection"));
					
					if(beforeColl.containsKey("SortedColl"))	
						pageCollection.put("SortedColl",beforeColl.get("SortedColl"));
					if(beforeColl.containsKey("RelationCollection"))	
						pageCollection.put("RelationCollection",beforeColl.get("RelationCollection"));	
					pageCollection.put(AppConstants.INDV_SEQUENCE_NUMBERS,String.valueOf(indvSeqNumber));
					pageCollection.put("CurrentPageStatus",String.valueOf(currentPageStatus));
					return;
				}
				//Added by arurajan ILIES-119944-ends
				//now i am updating the records 
				if(updatedCareTakerColl != null){
					houseHoldRelationBo.storeHousholdRelationshipDetails(updatedCareTakerColl,null,null);
				}
			
			}  
			
			//for the relation ship cargo
			if(appHshlRltColl != null && !(appHshlRltColl.isEmpty())){
				int appHshlRltCollSize = appHshlRltColl.size();
				APP_HSHL_RLT_Collection appHshlRltDataColl = null;
				boolean foundFlag = false;
				String srcSeqNum = null;
				String refSeqNum = null;
				boolean completeRltFlag = true;
				for(int i =0; i <appHshlRltCollSize;i++){
					completeRltFlag = true; 
					appHshlRltCargo = appHshlRltColl.getCargo(i);
					appHshlRltCargo.setApp_num(appNumber);
					// Source app indicator and change effective date default values population PCR # 29768					
					appHshlRltCargo.setChg_eff_dt(AppConstants.HIGH_TIMESTAMP);
					appHshlRltCargo.setSrc_app_ind(FwConstants.SPACE);
					if(appHshlRltCargo.getCare_resp() == null){
						appHshlRltCargo.setCare_resp(FwConstants.SPACE);
					}
					
					if(appHshlRltCargo.getTax_jointly_filed_sw()==null){
						appHshlRltCargo.setTax_jointly_filed_sw(FwConstants.NO);
					}
					
					
					if(appHshlRltCargo.getPhy_boe_sep_sw() == null || appHshlRltCargo.getPhy_boe_sep_sw().trim().equalsIgnoreCase("")){
						appHshlRltCargo.setPhy_boe_sep_sw(FwConstants.SPACE);	
						  
					}
					//Added by Uma Patil to update the value
					if(appHshlRltCargo.getIs_parent_sw() == null || appHshlRltCargo.getIs_parent_sw().trim().equalsIgnoreCase("")){
						appHshlRltCargo.setIs_parent_sw(FwConstants.SPACE);	
						  
					}
					
					if(appHshlRltCargo.getPnp_tghr_sw() == null){
						appHshlRltCargo.setPnp_tghr_sw(FwConstants.SPACE);
						if(componentList.contains("31")){
							//PCR#33829 -- Sharing Food question will not appear for Child Out of Home, 
							//so check if IndvSeqNum is for OutSide home child than set complete flag value to TRUE
							INDIVIDUAL_Custom_Collection tempIndvCustColl = peopleHandler.getInAndOutOfHomeIndividuals(appNumber);
							String tempSrcSeqNum = appHshlRltCargo.getSrc_indv_seq_num();
							String tempRefSeqNum = appHshlRltCargo.getRef_indv_seq_num();
							//call method to get all out side home children indev seq num list
							List outHomeIndvSeqNumList = memberBO.getOutSideHomeIndvSeqNum(tempIndvCustColl);
							if(outHomeIndvSeqNumList.contains(tempSrcSeqNum) || outHomeIndvSeqNumList.contains(tempRefSeqNum)){
								completeRltFlag = true;
							}
						}	
					}
								
					if(completeRltFlag && completeCareFlg){
						appHshlRltCargo.setRec_cplt_ind("1");	
					}
					else{
						appHshlRltCargo.setRec_cplt_ind("0");
					}
					foundFlag = false;
					srcSeqNum = appHshlRltCargo.getSrc_indv_seq_num();
					refSeqNum = appHshlRltCargo.getRef_indv_seq_num();

					//now we are comparing the data 
					if(appHshlRltBeforeColl != null && !(appHshlRltBeforeColl.isEmpty())){
						int appHshlRltBeforeCollSize = appHshlRltBeforeColl.size();
						for(int j=0; j < appHshlRltBeforeCollSize; j++){
							appHshlRltBeforeCargo = appHshlRltBeforeColl.getCargo(j);
							if(appHshlRltBeforeCargo.getSrc_indv_seq_num().equals(srcSeqNum) && appHshlRltBeforeCargo.getRef_indv_seq_num().equals(refSeqNum)){
								appHshlRltCargo.setCare_resp(appHshlRltBeforeCargo.getCare_resp());
								appHshlRltCargo.setChg_eff_dt(appHshlRltBeforeCargo.getChg_eff_dt());
								appHshlRltCargo.setSrc_app_ind(appHshlRltBeforeCargo.getSrc_app_ind());
								appHshlRltCargo = (APP_HSHL_RLT_Cargo)isChanged(appHshlRltBeforeCargo,appHshlRltCargo);
								if(appHshlRltCargo.isDirty()){
									appHshlRltCargo.setRowAction(FwConstants.ROWACTION_UPDATE);	
									if(appHshlRltDataColl == null)	
										appHshlRltDataColl = new APP_HSHL_RLT_Collection();
									appHshlRltDataColl.add(appHshlRltCargo);
									//checking for the change relationship as MTR,FTR,SON,DAU
									String beforeRel = appHshlRltBeforeCargo.getRlt_cd();
									String afterRel = appHshlRltCargo.getRlt_cd();
									if(!beforeRel.equals(afterRel) && currentPageStatus != FwConstants.DRIVER_REQUIRED){
										ABHouseHoldMemberBO houseHoldMemberBo = new ABHouseHoldMemberBO();
										if(afterRel.equals("FTR") || afterRel.equals("MTR")){
											IndividualAge indvAge = peopleHandler.getIndividualAge(appHshlRltCargo.getRef_indv_seq_num());
											if(indvAge.getYears() <19){
												houseHoldMemberBo.deleteAbsentParent(appHshlRltCargo.getRef_indv_seq_num(),appNumber);																						
											}
										}
										else if(afterRel.equals("SON") || afterRel.equals("DAU")){
											IndividualAge indvAge = peopleHandler.getIndividualAge(appHshlRltCargo.getSrc_indv_seq_num());
											if(indvAge.getYears() <19){
												houseHoldMemberBo.deleteAbsentParent(appHshlRltCargo.getSrc_indv_seq_num(),appNumber);
											}
										}
										else if(afterRel.equals("HUS") || afterRel.equals("WIF")){
											IndividualAge indvAge = peopleHandler.getIndividualAge(appHshlRltCargo.getSrc_indv_seq_num());
											if(indvAge.getYears() <19){
												houseHoldMemberBo.deleteAbsentParent(appHshlRltCargo.getSrc_indv_seq_num(),appNumber);
											}
											indvAge = peopleHandler.getIndividualAge(appHshlRltCargo.getRef_indv_seq_num());
											if(indvAge.getYears() <19){
												houseHoldMemberBo.deleteAbsentParent(appHshlRltCargo.getRef_indv_seq_num(),appNumber);
											}
										}
									}
								}
								appHshlRltBeforeColl.remove(appHshlRltBeforeCargo);
								foundFlag = true;
								break;
							}
						}
					}
					if(!foundFlag){
						appHshlRltCargo.setRowAction(FwConstants.ROWACTION_INSERT);	
						if(appHshlRltDataColl == null)	
							appHshlRltDataColl = new APP_HSHL_RLT_Collection();
						appHshlRltDataColl.add(appHshlRltCargo);
					}
					//now i am updating the people handler
					if(refSeqNum.equals("1")){
						//now i need to update people handler
						peopleHandler.setRelationshipCode(srcSeqNum,appHshlRltCargo.getRlt_cd());
					}
					else if(srcSeqNum.equals("1")){
						//now i need to get reverse relation 
						//first i need to get the srcSeqNum gender 
						String gender = peopleHandler.getIndividual(srcSeqNum).getSex_ind();
						String relation = appHshlRltCargo.getRlt_cd();
						IReferenceTableManager iref = ReferenceTableManager.getInstance();
						if(gender.equals(AppConstants.SEX_IND_MALE)){
							//i need to get reverse relation for the male 
							peopleHandler.setRelationshipCode(refSeqNum,iref.getColumnValue("TREL",69,relation,FwConstants.ENGLISH));
						}
						else{
							//i need to get reverse relation for the female
							peopleHandler.setRelationshipCode(refSeqNum,iref.getColumnValue("TREL",70,relation,FwConstants.ENGLISH));
						}
					}
				}
				if(appHshlRltBeforeColl != null && !(appHshlRltBeforeColl.isEmpty())){
					int appHshlRltBeforeCollSize = appHshlRltBeforeColl.size();
					for(int i =0; i < appHshlRltBeforeCollSize;i++){
						appHshlRltBeforeCargo = appHshlRltBeforeColl.getCargo(i);
						appHshlRltBeforeCargo.setRowAction(FwConstants.ROWACTION_DELETE);
						if(appHshlRltDataColl == null)	
							appHshlRltDataColl = new APP_HSHL_RLT_Collection();
						appHshlRltDataColl.add(appHshlRltBeforeCargo);
					}
				}
				
		   //Change the effective date format 		
				if(appHshlRltDataColl != null){
						int appHshlSize = appHshlRltDataColl.size();
						for(int i =0; i<appHshlSize;i++){
							
							APP_HSHL_RLT_Cargo appHshlRltDataCargo = appHshlRltDataColl.getCargo(i);
							
							appHshlRltDataCargo.setChg_eff_dt(AppConstants.HIGH_TIMESTAMP);
							if(appHshlRltDataCargo.getTax_dependent_sw()==null || appHshlRltDataCargo.getTax_dependent_sw().length() == 0){
								appHshlRltDataCargo.setTax_dependent_sw(FwConstants.NO);
							}
							
							if(appHshlRltDataCargo.getTax_jointly_filed_sw() == null || appHshlRltDataCargo.getTax_jointly_filed_sw().length() == 0)
								appHshlRltDataCargo.setTax_jointly_filed_sw(AppConstants.SPACE);
							
							} // end of for 
						} // end of if 
				
				
				if(appHshlRltDataColl != null && !(appHshlRltDataColl.isEmpty())){
					//now we need to persist the collection
					houseHoldRelationBo.storeHousholdRelationshipDetails(appHshlRltDataColl,null,null);
					
				}
			}
			else if(appHshlRltBeforeColl != null && !(appHshlRltBeforeColl.isEmpty())){
				int appHshlRltBeforeCollSize = appHshlRltBeforeColl.size();
				for(int i =0; i < appHshlRltBeforeCollSize;i++){
					appHshlRltBeforeCargo = appHshlRltBeforeColl.getCargo(i);
					appHshlRltBeforeCargo.setRowAction(FwConstants.ROWACTION_DELETE);
				}
				//now we need to call the persist method 
				houseHoldRelationBo.storeHousholdRelationshipDetails(appHshlRltBeforeColl,null,null);
			}
				//for the new born cargo 
			if(appNewBornColl != null && !(appNewBornColl.isEmpty())){
				appNewBornCargo = appNewBornColl.getResult(0);
				appNewBornCargo.setApp_num(appNumber);
				appNewBornCargo.setRec_cplt_ind("1");
				
				if(appNewBornBeforeColl != null && !(appNewBornBeforeColl.isEmpty())){
					appNewBornBeforeCargo = appNewBornBeforeColl.getResult(0);
					appNewBornCargo = (APP_IN_NEWB_Cargo)isChanged(appNewBornBeforeCargo,appNewBornCargo);
					if(appNewBornCargo.isDirty()){
						appNewBornCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
						//CALL PERSIST METHOD
						houseHoldRelationBo.storeHousholdRelationshipDetails(null,null,appNewBornColl);
					}	
				}
				else{
					appNewBornCargo.setRowAction(FwConstants.ROWACTION_INSERT);
					//CALL PERSIST METHOD
					houseHoldRelationBo.storeHousholdRelationshipDetails(null,null,appNewBornColl);
				}
			}
			else if(appNewBornBeforeColl != null && !(appNewBornBeforeColl.isEmpty())){
				appNewBornBeforeCargo = appNewBornBeforeColl.getResult(0);
				appNewBornBeforeCargo.setRowAction(FwConstants.ROWACTION_DELETE);
				houseHoldRelationBo.storeHousholdRelationshipDetails(null,null,appNewBornBeforeColl);
			}
			
			//This code is added to sort on individuals in detail pages added on 10/11/2006.

		   INDIVIDUAL_Custom_Collection sortedIndvCustColl = peopleHandler.sortIndividuals(peopleHandler.getInHomeIndividuals());
		   if(sortedIndvCustColl != null && !(sortedIndvCustColl.isEmpty())){
			   APP_IN_PRFL_Collection appPrflColl = (APP_IN_PRFL_Collection)session.get(AppConstants.APP_IN_PRFL_MASTER);
			   int indvCustCollSize = sortedIndvCustColl.size();
			   INDIVIDUAL_Custom_Cargo sortedIndvCustCargo = null;
			   APP_IN_PRFL_Collection newAppPrflColl = new APP_IN_PRFL_Collection();
			   for(int i =0; i <indvCustCollSize;i++){
				 sortedIndvCustCargo = sortedIndvCustColl.getResult(i);
				   newAppPrflColl.addCargo(applicationManager.getAppInProfile(appPrflColl,sortedIndvCustCargo.getIndv_seq_num()));
			   }
			   session.put(AppConstants.APP_IN_PRFL_MASTER,newAppPrflColl);
		   }


			boolean pageComplete = false;
			boolean lastRecord =false;
			
			if(currentPageStatus == FwConstants.DRIVER_REQUIRED || currentPageStatus == FwConstants.DRIVER_VISIT_AGAIN){
				
				//now i am checking is they any persons we have to display
				int currentArrayIndex = Integer.parseInt((String)beforeColl.get(FwConstants.CURRENT_RECORD_INDEX));  

				if(currentArrayIndex+1 == sortedCollSize){
					pageComplete = true;
				}
				if(currentArrayIndex+2 == sortedCollSize){
					lastRecord = true;
				}
			}
			
			//if the driver status is addnew and driver status is complete 					
			if(currentPageStatus == FwConstants.DRIVER_ADD_NEW || currentPageStatus == FwConstants.DRIVER_COMPLETE){
					pageComplete = true;
			}
			else{
				//think about this 
				session.put(FwConstants.BEFORE_COLLECTION,beforeColl);
			}
			//if page complete true last record is false			
			if(pageComplete){
				lastRecord = false;
			}
			
			//this is last record flag
			pageCollection.put("LastRecordFlag", Boolean.valueOf(lastRecord));
			//this is page complete flag
			pageCollection.put("PageCompleteFlag", Boolean.valueOf(pageComplete));
			if(scheduleABHMS){
				driverManager.makeRequired(FwConstants.AFB_DRIVER,"ABHMS",driverArray,appNumber);
				}
			//Added by Varshi Kasarla for ILIES-282240 : Removing the values from session.
			ABRegistrationBO registrationBo = new ABRegistrationBO();
			registrationBo.clearSessionOfWarningMsgOnSaveAndExitFunc(session);
			//ILIES-282240 changes end here
		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID(AppConstants.STORE_HOUSEHOLD_RELATIONSHIP_DETAILS);
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			throw createFwException(this.getClass().getName(), AppConstants.STORE_HOUSEHOLD_RELATIONSHIP_DETAILS, e);
		}
		
	}
	
	/**
	* Comment here
	*/
	public void getHouseHoldMembersQuestions(FwTransaction txnBean) throws javax.ejb.EJBException 
	{

		try 
		{		
			//Declarations
			Map session = txnBean.getSession();
			Map request = txnBean.getRequest();
			Map pageCollection = txnBean.getPageCollection();
			APP_INDV_Collection appIndvColl = null;
			
			
			ABRegistrationBO regBo = new ABRegistrationBO();
			String appNumber =(String) session.get(AppConstants.APP_NUMBER);
			
			int[] driverArray = (int[]) session.get(FwConstants.AFB_DRIVER);
			
			PeopleHandler peopleHandler = (PeopleHandler)session.get(AppConstants.INDIV_MASTER_HANDLER);
			//Added by Nancy Jain for ILIES-282114 : Null pointer exception fix.
			if(peopleHandler == null && appNumber != null){
				peopleHandler=new PeopleHandler();
				peopleHandler.loadPeopleHandler(appNumber);
				session.put(AppConstants.INDIV_MASTER_HANDLER,peopleHandler);	
			}
			//ILIES-282114 changes end here.
			INDIVIDUAL_Custom_Collection indivColl = peopleHandler.getAllIndividuals();
			INDIVIDUAL_Custom_Collection fosterIndvColl;			
			//get only individuals in home - BCP changes - PCR# 32248
			short[] selectedProgram = ( short[] )session.get( FwConstants.AFB_PROGRAM_KEY );
			boolean isMedicalOnlyProgramSelected = programManager.isMedicalOnlyProgramRequested(selectedProgram);
			//Read in APP_IN_PROFILE from session
			APP_IN_PRFL_Collection appInPrflColl =
			(APP_IN_PRFL_Collection) session.get(
				AppConstants.APP_IN_PRFL_MASTER);		
			 
			 //ILIES-180316
			 if(request.get(FwConstants.CURRENT_PAGE_ID).equals("ABHMS")){				 
				 request.put(FwConstants.CURRENT_PAGE_ID, "ABHHQ");				 
			 }
			//Determine driver status
			int driverStatus =
				driverManager.getAFBStatus(
					FwConstants.AFB_DRIVER,
					(String) request.get(FwConstants.CURRENT_PAGE_ID),
					driverArray);
			List compList = new ArrayList();

			//run component manager
			//call Component manager to get list of components
			//component ids are put into the pageCollection via this method
			//if rules exist, the individual custom collection is put into the page collection
			componentManager.getComponents(
				(String) (request.get(FwConstants.CURRENT_PAGE_ID)),
				txnBean);
			
			//Call create and load response maps to create the maps needed to create the AFBIndividuals tags
			createAndLoadABHHQResponseMapsToPageCollection(appInPrflColl, pageCollection, peopleHandler, true, driverStatus);
			fosterIndvColl = PeopleRulesBO.getIndividualsAgeGreaterOrEqualTo18AndLessOrEqualTo25(indivColl);
			if(fosterIndvColl == null || fosterIndvColl.isEmpty()){
				compList = (List)pageCollection.get(FwConstants.PAGE_COMPONENT_LIST);
				if(compList.contains("43")){
					compList.remove("43");
					pageCollection.put(FwConstants.PAGE_COMPONENT_LIST, compList);
				}
				
			}
			if(isMedicalOnlyProgramSelected)
			{
				compList = (List)pageCollection.get(FwConstants.PAGE_COMPONENT_LIST);
				if(compList.contains("41")){
					compList.remove("41");
					pageCollection.put(FwConstants.PAGE_COMPONENT_LIST, compList);
				}
				if(compList.contains("58")){
					compList.remove("58");
					pageCollection.put(FwConstants.PAGE_COMPONENT_LIST, compList);
				}
			}
			pageCollection.put(AppConstants.PEOPLE_43, fosterIndvColl);	
			
			//changes for ILIES-313147
			
		ABHouseHoldMemberBO householdBo= new ABHouseHoldMemberBO();
		APP_INDV_Collection combinedIndvCollection=new APP_INDV_Collection();
		if(indivColl !=null && !indivColl.isEmpty()){
				for(int i=0 ; i< indivColl.size();i++){
			INDIVIDUAL_Custom_Cargo indivCargo=indivColl.getResult(i);
				String indvSeqNumber= indivCargo.getIndv_seq_num();
				
					appIndvColl = householdBo.loadHouseholdMemberDetail(appNumber,Integer.parseInt(indvSeqNumber));
					combinedIndvCollection.addAll(appIndvColl);
				}
					pageCollection.put(AppConstants.APP_INDV_COLLECTION, combinedIndvCollection);
	}			

				
				
		
			
			
						
			AFBHouseHoldPregnancyQuestionsBO finalBo = new AFBHouseHoldPregnancyQuestionsBO();
             APP_RQST_Collection appRqstCollection = finalBo.loadRqstApplication(appNumber);
             APP_RQST_Cargo appRqstCargo = null;
             APP_IN_PRFL_Cargo appInCargo = null;
             NO_ONE_Cargo noCargo = new NO_ONE_Cargo();
             int appInCollSize = appInPrflColl.size();
             int appRqstSize = appRqstCollection.size();
             boolean indvFound = false;
             boolean agingIndv = false;
             boolean fosterIndvFound = false;
             for (int i = 0; i < appRqstSize; i++) {
                   appRqstCargo = (APP_RQST_Cargo) appRqstCollection.get(i);
                   if ((appRqstCargo != null && appRqstCargo.getHpe_app_stat_cd() != null && appRqstCargo.getHpe_app_stat_cd().equals("PE"))||driverStatus>1) {
                	   	session.put("HPE_INDICATOR", "Y");
                         for (int j = 0; j < appInCollSize; j++) {
                               appInCargo = (APP_IN_PRFL_Cargo) appInPrflColl.get(j);
                               if (appInCargo != null && appInCargo.getDabl_resp() != null  && !(appInCargo.getDabl_resp().equals("N")|| appInCargo.getDabl_resp().equalsIgnoreCase("K"))) {
                                     indvFound = true;
                               }
                               if (appInCargo != null && appInCargo.getAging_sw() != null  && !(appInCargo.getAging_sw().equals("N"))) {
                            	   agingIndv = true;
                               }
                               if (appInCargo != null && appInCargo.getFormer_foster_sw() != null  && !(appInCargo.getFormer_foster_sw().equals("N"))) {
                            	   fosterIndvFound = true;
                               }
                         }
                         Map noOneCheckedMap = (Map) pageCollection.get(AppConstants.NO_ONE_CHECKED_MAP);
                         if (!indvFound) {                             
                               noCargo.setNo_one_name("DABL");
                               noCargo.setNo_one_value("FwConstants.YES");
                               noOneCheckedMap.put("NO_ONE_CHECKED_56",FwConstants.YES);
                         }
                         if (!agingIndv) {
                             noCargo.setNo_one_name("AGISE");
                             noCargo.setNo_one_value("FwConstants.YES");
                             noOneCheckedMap.put("NO_ONE_CHECKED_421",FwConstants.YES);
                       }
                       if (!fosterIndvFound) {
                             noCargo.setNo_one_name("FSTRC");
                             noCargo.setNo_one_value("FwConstants.YES");
                             noOneCheckedMap.put("NO_ONE_CHECKED_43",FwConstants.YES);
                       	}
                 			
           			 
                   }
             }
 				ABRelevanceBO relevanceBO = new ABRelevanceBO();
 				APP_HSHL_RLT_Collection houseHoldCollection;
 				houseHoldCollection=relevanceBO.loadHSHLRLT((String)session.get(AppConstants.APP_NUMBER));
 				String language = null;
 				List<String> houseHold=new ArrayList<String>();
 				List<String> houseHoldInverse=new ArrayList<String>();
 			 	Map httpSessionMap = (Map)session.get(FwConstants.HTTP_SESSION);
 				language = (String)httpSessionMap.get(AppConstants.LANGUAGE);
 			    IReferenceTableManager iref = ReferenceTableManager.getInstance();
 			  
 			   
 				for(APP_HSHL_RLT_Cargo cargo:houseHoldCollection.getResults()){								
 					 String desc = iref.getColumnValue("IREL",137,cargo.getRlt_cd(),language);
 					 houseHold.add("\""+cargo.getSrc_indv_seq_num()+cargo.getRef_indv_seq_num()+AppConstants.LITERAL_SLASH+desc+"\"");		
 				     request.put(AppConstants.DISPLAY_MAP, houseHold.toString().replace("[", "{").replace("]", "}"));
 				}

	 		   	for(APP_HSHL_RLT_Cargo cargo:houseHoldCollection.getResults()){

					String gender = peopleHandler.getIndividual(cargo.getRef_indv_seq_num()).getSex_ind();
	 		   		 if("M".equalsIgnoreCase(gender)){
					 String desc = iref.getColumnValue("IREL",138,cargo.getRlt_cd(),language);
	 				 houseHoldInverse.add("\""+cargo.getRef_indv_seq_num()+cargo.getSrc_indv_seq_num()+AppConstants.LITERAL_SLASH+desc+"\"");
	 				 }	
	 				else{
	 				 String desc = iref.getColumnValue("IREL",139,cargo.getRlt_cd(),language);
	 				 houseHoldInverse.add("\""+cargo.getRef_indv_seq_num()+cargo.getSrc_indv_seq_num()+AppConstants.LITERAL_SLASH+desc+"\"");
	 				}
	 		   		request.put(AppConstants.INVERSE_MAP, houseHoldInverse.toString().replace("[", "{").replace("]", "}"));
 				}

	 		   ABHouseHoldRelationshipBO houseHoldRelationBo = new  ABHouseHoldRelationshipBO();	
			   houseHoldRelationBo.loadHousholdTaxDetails(houseHoldCollection,pageCollection, peopleHandler);
 				session.put("APP_JOINTLY_FILING_TAX", pageCollection.get("APP_JOINTLY_FILING_TAX"));
			//set page collection to before collection
			session.put(
				FwConstants.BEFORE_COLLECTION,
				txnBean.getPageCollection());

			//exit
			//Added by Nancy Jain for ILIES-282114 : Removing the values from session.
			regBo.clearSessionOfWarningMsgOnSaveAndExitFunc(session);
			//ILIES-282114 changes end here
		} catch(FwException fe) {
			ctx.setRollbackOnly();
			FwWrappedException we = new FwWrappedException();
			we.setCallingClassID(this.getClass().getName());
			we.setCallingMethodID(AppConstants.GET_HOUSE_HOLD_MEMBERS_QUESTIONS);
			we.setFwException(fe);
			throw we;
		} catch(Exception e) {
			ctx.setRollbackOnly();
			throw createFwException(this.getClass().getName(), AppConstants.GET_HOUSE_HOLD_MEMBERS_QUESTIONS, e);
			
		}
	}
	
	private String fixSelectionValue(String value){
		return value != null && value.equals(AppConstants.SPACE)?AppConstants.NO:value;
	}
	/**
	* Comment here
	*/
	public void storeHouseHoldMembersQuestions(FwTransaction txnBean) throws javax.ejb.EJBException {

		try 
		{
			//declarations
			boolean dablFlag = false;
			int numQuestions = 9;
			APP_IN_PRFL_Collection pageCollAppInPrflColl = null;
			APP_INDV_Collection appIndvColl = null;
			NO_ONE_Collection noOneColl = null;
			FwMessageList errorMessageList = null;
			String indivSeqNum = null;
			int indivSeqNumInt = 0;
			APP_IN_PRFL_Cargo sesAppInPrflCargo = null;
			APP_IN_PRFL_Cargo pageCollAppInPrflCargo = null;
			//Modified by Nancy Jain for ILIES-282238 : Sonar Fix-Changed variable name.
			APP_TAX_RLT_Collection pageRltColl = null;
			APP_HSHL_RLT_Collection relationColl = null;
			APP_TAX_RLT_Collection jointlyFilingColl = null;
			AFBHouseHoldMemberQuestionsBO abhhqObj = new AFBHouseHoldMemberQuestionsBO();
			int yeohCount=0;		
			APP_IN_PRFL_Cargo[] clonedPrflCollArray = null;
			APP_TAX_RLT_Cargo[] clonedTaxCollArray = null;
			APP_INDV_Cargo[] clonedappIndvCollArray = null;
			
			APP_IN_PRFL_Collection prflColl = new APP_IN_PRFL_Collection();
			APP_TAX_RLT_Collection taxColl = new APP_TAX_RLT_Collection();
			
			APP_INDV_Collection appColl= new APP_INDV_Collection();
			ABRegistrationBO regBo = new ABRegistrationBO();
		
			//define a short array for the questions
    		// Added DRUG_TRTMNT_PROG and PAROLE_PROB_VIOL fields for ILIES-129516
			short[] questionsArray = new short[numQuestions];
			questionsArray[0] = IApplicationManager.DISABLED_PERSON;			//blindDisabled
			questionsArray[1] = IApplicationManager.DRUG_FELON;					//drugFelonies
			questionsArray[2] = IApplicationManager.DRUG_TRTMNT_PROG;			//drugTreatmentProgram
			questionsArray[3] = IApplicationManager.PAROLE_PROB_VIOL;			//ParoleProbationViolation
			questionsArray[4] = IApplicationManager.RECEIVE_FS_IN_OTHER_STATE;	//otherFoodStamp
			questionsArray[5] = IApplicationManager.SSI_BENEFIT_RESP;			//ssiBenefits
			questionsArray[6] = IApplicationManager.CASH_BENEFIT_RESP;			//cashBenefits
			questionsArray[7] = IApplicationManager.AGING_SERVICE_SW;
			questionsArray[8] = IApplicationManager.FOSTER_CARE_SW;
			
			//page scheduling indicators
			int[] dirtyIndicator = {IApplicationManager.NOT_DIRTY};
			
			//Create string array for persist
			String[] indivResponseArray = null;

			//Create INDIV_RESP_MAP for persist
			Map indivResponseMap = new HashMap();
			
			//get variables from session and page collection
			Map session = txnBean.getSession();
			Map pageCollection = txnBean.getPageCollection();
			APP_INDV_Cargo appIndvCargo = null;
			APP_INDV_Cargo appIndvBeforeCargo = null;
			Map request = txnBean.getRequest();
			request.put(FwConstants.US_ASCII, true);
			int[] driverArray = (int[]) session.get(FwConstants.AFB_DRIVER);
			PeopleHandler peopleHandler = (PeopleHandler)session.get(AppConstants.INDIV_MASTER_HANDLER);
			
			//get current page status
			int pageStatus = driverManager.getAFBStatus(
				FwConstants.AFB_DRIVER,
				(String) request.get(FwConstants.CURRENT_PAGE_ID),
				driverArray);
			
			//get the appNumber from session
			String appNumber = (String)session.get(AppConstants.APP_NUMBER);

			//Read in APP_IN_PROFILE from session
			APP_IN_PRFL_Collection sesAppInPrflColl =
			(APP_IN_PRFL_Collection) session.get(
				AppConstants.APP_IN_PRFL_MASTER);		

			//get size of the collection
			int sesAppPrflCollSize = sesAppInPrflColl.size();
			
			//Read in APP_IN_PROFILE from page coll.
			pageCollAppInPrflColl = (APP_IN_PRFL_Collection) pageCollection.get("APP_IN_PRFL_Collection");	
			appIndvColl =(APP_INDV_Collection)pageCollection.get("APP_INDV_Collection"); 
			INDIVIDUAL_Custom_Collection indivColl = peopleHandler.getAllIndividuals();
			
			if(appIndvColl==null)
				appIndvColl = new APP_INDV_Collection();
			if(indivColl !=null && !indivColl.isEmpty()){
				for(int i=0 ; i< indivColl.size();i++){
					INDIVIDUAL_Custom_Cargo indivCargo=indivColl.getResult(i);
					String indvSeqNumber= indivCargo.getIndv_seq_num();
					appIndvCargo = new APP_INDV_Cargo();
					
					Map criteriaMap = null;
					FwDataCriteria[] criteria = null;
					APP_INDV_Collection appIndvCollection = new APP_INDV_Collection();
					criteriaMap = new HashMap();
					criteria = new FwDataCriteria[1];
					criteria[0] = new FwDataCriteria();
					criteria[0].setColumn_name(AppConstants.APP_NUM);
					criteria[0].setColumn_value(appNumber);
					criteria[0].setData_type(FwConstants.LONG);
					criteriaMap.put(FwConstants.CRITERIA, criteria);
					APP_INDV_Cargo[] dbAppIndvCargos = (APP_INDV_Cargo[]) appIndvCollection.select(FwConstants.DAO, criteriaMap);
					for(APP_INDV_Cargo dbAppIndvCargo:dbAppIndvCargos){
						if(dbAppIndvCargo.getIndv_seq_num().equalsIgnoreCase(indvSeqNumber)){
							appIndvCargo = dbAppIndvCargo;
							break;
						}
					}
					
					String val=(String) request.get("taxfilesw_"+indvSeqNumber);
					appIndvCargo.setApp_num(appNumber);
					appIndvCargo.setFile_taxes_sw(val);
					appIndvCargo.setBrth_dt(indivCargo.getBrth_dt());
					appIndvCargo.setFst_nam(indivCargo.getFst_nam());
					appIndvCargo.setLast_nam(indivCargo.getLast_nam());
					appIndvCargo.setLive_arng_typ(indivCargo.getLive_arng_typ());
					appIndvCargo.setRec_cplt_ind("1");
					appIndvCargo.setRlvn_ind(indivCargo.getRlvn_ind());
					appIndvCargo.setSex_ind(indivCargo.getSex_ind());
					appIndvCargo.setSs_num_app_dt(AppConstants.HIGH_TIMESTAMP);
					peopleHandler.updateIndividual(appIndvCargo);
					appIndvCargo.setIndv_seq_num(indvSeqNumber);
					appIndvColl.addCargo(appIndvCargo);
				}
			}
				
				
			APP_TAX_RLT_Collection taxIndvColl = (APP_TAX_RLT_Collection) pageCollection.get(AppConstants.APP_TAX_RLT_Collection);	
			//get the beforecollection map
			Map beforeCollection = (Map)session.get(FwConstants.BEFORE_COLLECTION);

			//get the NoOneChecked map from the beforecollection
			Map noOneCheckedMap = (Map)beforeCollection.get(AppConstants.NO_ONE_CHECKED_MAP);

			//Get the NO ONE Collection
			noOneColl = (NO_ONE_Collection)pageCollection.get("NO_ONE_Collection");

			pageRltColl = (APP_TAX_RLT_Collection) pageCollection.get(AppConstants.APP_TAX_RLT_Collection);
			APP_TAX_RLT_Collection appJointlyFilingTax = (APP_TAX_RLT_Collection) session.get("APP_JOINTLY_FILING_TAX");
			//check for missing cargos for people that don't have any questions answered, 
			//and populate with empty cargos
			applicationManager.preparePageColl(pageCollAppInPrflColl,sesAppInPrflColl,questionsArray);

			// Defaulting number of components displayed to false
    		// Modified for ILIES-129516
			boolean[] componentsDisplayed = new boolean[]{false, false, false, false, false, false, false,false, false};
			componentsDisplayed = abhhqObj.getComponentsDisplayed(beforeCollection, componentsDisplayed);			
			//RUN VALIDATIONS

			String felonyId = (String)request.get("felonyId");
			String drugId = (String)request.get("drugId");
			String blindId = (String)request.get("blindId");
			String outOfStateId = (String)request.get("outOfStateId");
			String deptAging = (String)request.get("getpostYesNo_deptAging");
			String fosterCare = (String)request.get("getpostYesNo_fosterCare");
			
			errorMessageList = abhhqObj.validateABHHQ(appIndvColl,pageCollAppInPrflColl, noOneColl, noOneCheckedMap, componentsDisplayed,felonyId,drugId,blindId,outOfStateId,peopleHandler, taxIndvColl, deptAging, fosterCare);
			pageCollection.put("FELONY_ID", felonyId);
			pageCollection.put("DRUG_ID", drugId);
			pageCollection.put("BLIND_ID", blindId);
			pageCollection.put("OUT_OF_STATE_ID", outOfStateId);
			pageCollection.put("DEPT_AGING", deptAging);
			pageCollection.put("FOSTER_CARE",fosterCare);
			
			//Added by Nancy Jain for ILIES-282238 changes : Cloned the collections.
			int seqNum = 0;
			int srcSeqNum = 0;
			clonedPrflCollArray = pageCollAppInPrflColl.cloneResults();
			if(clonedPrflCollArray != null && clonedPrflCollArray.length > 0){
				for(int i=1; i<= clonedPrflCollArray.length; i++){
					for(APP_IN_PRFL_Cargo cargo : clonedPrflCollArray){
						if(cargo.getIndv_seq_num() != null  && !cargo.getIndv_seq_num().isEmpty())
							seqNum = Integer.valueOf(cargo.getIndv_seq_num());
						if(seqNum == i){
							if(felonyId != null && "N".equals(felonyId)){
								cargo.setDrug_feln_resp(felonyId);
							}else if("Y".equals(felonyId)){
								//set this cargo field just to save the value that we are getting from request for radio buttons, so we can compare it later.
								cargo.setSu_cst_ases_resp(felonyId);
							}
							if(drugId != null && "N".equals(drugId)){
								cargo.setDrug_trtmnt_prg_resp(drugId);
							}else if("Y".equals(drugId)){
								cargo.setSu_cst_coal_resp(drugId);
							}
							if(blindId != null && "N".equals(blindId)){
								cargo.setDabl_resp(blindId);
							}else if("Y".equals(blindId)){
								cargo.setSu_cst_elec_resp(blindId);
							}else if(blindId != null && "K".equals(blindId)){
								cargo.setDabl_resp(blindId);
							}
							if(outOfStateId != null && "N".equals(outOfStateId)){
								cargo.setRcv_fs_oth_st_resp(outOfStateId);
							} else if("Y".equals(outOfStateId)){
								cargo.setSu_cst_fuel_resp(outOfStateId);
							}
							if(deptAging != null && "N".equals(deptAging)){
								cargo.setAging_sw(deptAging);
							}else if("Y".equals(deptAging)){
								cargo.setSu_cst_garbage_resp(deptAging);
							}
							if(fosterCare != null && "N".equals(fosterCare)){
								cargo.setFormer_foster_sw(fosterCare);
							}else if("Y".equals(fosterCare)){
								cargo.setSu_cst_gas_resp(fosterCare);
							}
							
							prflColl.add(cargo);
							break;
						}
					}
				}
			}
			
			//clonedappIndvCollArray=appIndvColl.cloneResults();
			clonedappIndvCollArray = appIndvColl.cloneResults();
			if(clonedappIndvCollArray != null && clonedappIndvCollArray.length > 0){
				for(int i=1; i<= clonedappIndvCollArray.length; i++){
					for(APP_INDV_Cargo cargo : clonedappIndvCollArray){
						if(cargo.getIndv_seq_num() != null  && !cargo.getIndv_seq_num().isEmpty())
							seqNum = Integer.valueOf(cargo.getIndv_seq_num());
						if(seqNum == i){
							appColl.add(cargo);
							break;
						}
					}
				}
			}
			
			clonedTaxCollArray = taxIndvColl.cloneResults();
			if(clonedTaxCollArray != null && clonedTaxCollArray.length > 0){
				for(int i=1; i<= clonedTaxCollArray.length; i++){
					for(APP_TAX_RLT_Cargo cargo : clonedTaxCollArray){
						if(cargo.getSrc_indv_seq_num() != null  && !cargo.getSrc_indv_seq_num().isEmpty())
							srcSeqNum = Integer.valueOf(cargo.getSrc_indv_seq_num());
						if(srcSeqNum == i){
							taxColl.add(cargo);
							break;
						}
					}
				}
			}
			//ILIES-282238 changes end here.
			
			if(errorMessageList != null && abhhqObj.hasMessages())
			{
					//Translate Profile Response After Validation
					applicationManager.translateProfileResponseAfterValidation(pageCollAppInPrflColl, 
							sesAppInPrflColl, questionsArray);
					List compList = new ArrayList();
					INDIVIDUAL_Custom_Collection fosterIndvColl ;				
					request.put(FwConstants.MESSAGE_LIST, errorMessageList); 
					
					//load maps into page collection
					createAndLoadABHHQResponseMapsToPageCollection(pageCollAppInPrflColl, pageCollection, peopleHandler, false, 0);	
					fosterIndvColl = PeopleRulesBO.getIndividualsAgeGreaterOrEqualTo18AndLessOrEqualTo25(indivColl);							
					pageCollection.put(AppConstants.NO_ONE_CHECKED_MAP, noOneCheckedMap);
					pageCollection.put("APP_IN_PRFL_Collection", pageCollAppInPrflColl);
					
					//Modified by Nancy Jain for ILIES-282238 : Sonar Fix.
					pageCollection.put(AppConstants.PEOPLE_56, beforeCollection.get(AppConstants.PEOPLE_56));
					pageCollection.put(AppConstants.PEOPLE_58, beforeCollection.get(AppConstants.PEOPLE_58));
		    		// Added for ILIES-129516
					pageCollection.put(AppConstants.PEOPLE_5218, beforeCollection.get(AppConstants.PEOPLE_5218));
					pageCollection.put(AppConstants.PEOPLE_5219, beforeCollection.get(AppConstants.PEOPLE_5219));
					pageCollection.put(AppConstants.PEOPLE_41, beforeCollection.get(AppConstants.PEOPLE_41));
					//Added by Uma for SSExpansion -- SSI Benefits and Clash benefits
					pageCollection.put("PEOPLE_418", beforeCollection.get("PEOPLE_418"));
					pageCollection.put("PEOPLE_419", beforeCollection.get("PEOPLE_419"));
					pageCollection.put(AppConstants.PEOPLE_421, beforeCollection.get(AppConstants.PEOPLE_421));
					pageCollection.put(AppConstants.PEOPLE_43, beforeCollection.get(AppConstants.PEOPLE_43));
					txnBean.setPageCollection(pageCollection);
					pageCollection.put(FwConstants.PAGE_COMPONENT_LIST, beforeCollection.get(FwConstants.PAGE_COMPONENT_LIST));
					if(fosterIndvColl == null || fosterIndvColl.isEmpty()){
						compList = (List)pageCollection.get(FwConstants.PAGE_COMPONENT_LIST);
						if(compList.contains("43")){
							compList.remove("43");
							pageCollection.put(FwConstants.PAGE_COMPONENT_LIST, compList);
						}
						
					}
					pageCollection.put(AppConstants.ALL_APP_INDIVS_TAX, beforeCollection.get(AppConstants.ALL_APP_INDIVS_TAX));
					pageCollection.put("APP_TAX_RLT_INDIVS", taxIndvColl);
					
					ABRelevanceBO relevanceBO = new ABRelevanceBO();
	 				APP_HSHL_RLT_Collection houseHoldCollection;
	 				houseHoldCollection=relevanceBO.loadHSHLRLT((String)session.get(AppConstants.APP_NUMBER));
	 				String language = null;	
	 				List<String> houseHold=new ArrayList<String>();
	 				List<String> houseHoldInverse=new ArrayList<String>();	
	 			 	Map httpSessionMap = (Map)session.get(FwConstants.HTTP_SESSION);
	 				language = (String)httpSessionMap.get(AppConstants.LANGUAGE);
	 			    IReferenceTableManager iref = ReferenceTableManager.getInstance();
	 				
	 			   for(APP_HSHL_RLT_Cargo cargo:houseHoldCollection.getResults()){								
						 String desc = iref.getColumnValue("IREL",137,cargo.getRlt_cd(),language);
						 houseHold.add("\""+cargo.getSrc_indv_seq_num()+cargo.getRef_indv_seq_num()+"\":\""+desc+"\"");		
					     request.put("DISPLAY_MAP", houseHold.toString().replace("[", "{").replace("]", "}"));
					}

		 		   	for(APP_HSHL_RLT_Cargo cargo:houseHoldCollection.getResults()){
		
						String gender = peopleHandler.getIndividual(cargo.getRef_indv_seq_num()).getSex_ind();
		 		   		 if("M".equalsIgnoreCase(gender)){
						 String desc = iref.getColumnValue("IREL",138,cargo.getRlt_cd(),language);
		 				 houseHoldInverse.add("\""+cargo.getRef_indv_seq_num()+cargo.getSrc_indv_seq_num()+"\":\""+desc+"\"");
		 				 }	
		 				else{
		 				 String desc = iref.getColumnValue("IREL",139,cargo.getRlt_cd(),language);
		 				 houseHoldInverse.add("\""+cargo.getRef_indv_seq_num()+cargo.getSrc_indv_seq_num()+"\":\""+desc+"\"");
		 				}
		 		   		request.put("INVERSE_MAP", houseHoldInverse.toString().replace("[", "{").replace("]", "}"));
					}
					txnBean.setRequest(request);
					txnBean.setPageCollection(pageCollection);
					//Added by Nancy Jain for ILIES-282238 : Added collection in the request.
					request.put(FwConstants.PAGE_COLL_0, prflColl);
					request.put(FwConstants.PAGE_COLL_1, taxColl);
					request.put(FwConstants.NUMBER_OF_COLLECTIONS_FOR_WARNING_MSG, 2);
					//ILIES-282238 changes end here
					return;
				
			} 
				// Added for ILIES-137846
				if (pageRltColl != null && !pageRltColl.isEmpty()) {

					
					ABHouseHoldRelationshipBO houseHoldRelationBo = new ABHouseHoldRelationshipBO();
					
					Map criteriaMap = null;
					FwDataCriteria[] criteria = null;
					APP_HSHL_RLT_Collection rltCollection = new APP_HSHL_RLT_Collection();
					criteriaMap = new HashMap();
					criteria = new FwDataCriteria[1];
					criteria[0] = new FwDataCriteria();
					criteria[0].setColumn_name(AppConstants.APP_NUM);
					criteria[0].setColumn_value(appNumber);
					criteria[0].setData_type(FwConstants.LONG);
					criteriaMap.put(FwConstants.CRITERIA, criteria);
					//Modified by Nancy Jain for ILIES-282238 : Sonar Fix-Changed variable name.
					APP_HSHL_RLT_Cargo[] dbRltCargos = (APP_HSHL_RLT_Cargo[]) rltCollection
					.select(FwConstants.DAO, criteriaMap);
					//Modified by Nancy Jain for ILIES-282238 : Sonar Fix-Changed variable name.
					Map<String, APP_HSHL_RLT_Cargo> dbMap=new HashMap<String, APP_HSHL_RLT_Cargo>();
					for(APP_HSHL_RLT_Cargo db_rlt_cargo:dbRltCargos){
						db_rlt_cargo.setTax_dependent_sw("N");
						db_rlt_cargo.setRowAction(FwConstants.ROWACTION_UPDATE);
						dbMap.put(db_rlt_cargo.getRef_indv_seq_num()+db_rlt_cargo.getSrc_indv_seq_num(), db_rlt_cargo);
					}
					//Modified by Nancy Jain for ILIES-282238 : Sonar Fix-Changed variable name.
					APP_HSHL_RLT_Collection updateRltColl=new APP_HSHL_RLT_Collection();
					for(APP_TAX_RLT_Cargo page_rlt_cargo:pageRltColl.getResults()){
						APP_HSHL_RLT_Cargo dbRltCargo;
						//Modified by Nancy Jain for ILIES-282238 : Sonar Fix-Changed variable name.
						String pageRltRel=page_rlt_cargo.getRef_indv_seq_num()+page_rlt_cargo.getSrc_indv_seq_num();
						String pageRltRelRev=page_rlt_cargo.getSrc_indv_seq_num()+page_rlt_cargo.getRef_indv_seq_num();
						if(page_rlt_cargo.getTax_dependent_sw().equals("Y")){
							if(dbMap.containsKey(pageRltRel)){
								dbRltCargo=dbMap.get(pageRltRel);
								dbRltCargo.setTax_dependent_sw("I");
								dbRltCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
							}else if(dbMap.containsKey(pageRltRelRev)){
								dbRltCargo=dbMap.get(pageRltRelRev);
								dbRltCargo.setTax_dependent_sw("Y");
								dbRltCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
							}
						}
					}
					updateRltColl.addAll(dbMap.values());
					houseHoldRelationBo.storeHousholdRelationshipDetails(updateRltColl,null,null);
				}
				
				//USERAN - Tax Jointly Filing Changes
				if (appJointlyFilingTax != null && !appJointlyFilingTax.isEmpty()) {

					
					ABHouseHoldRelationshipBO houseHoldRelationBo = new ABHouseHoldRelationshipBO();
					
					Map criteriaMap = null;
					FwDataCriteria[] criteria = null;
					APP_HSHL_RLT_Collection rltCollection = new APP_HSHL_RLT_Collection();
					criteriaMap = new HashMap();
					criteria = new FwDataCriteria[1];
					criteria[0] = new FwDataCriteria();
					criteria[0].setColumn_name(AppConstants.APP_NUM);
					criteria[0].setColumn_value(appNumber);
					criteria[0].setData_type(FwConstants.LONG);
					criteriaMap.put(FwConstants.CRITERIA, criteria);
					//Modified by Nancy Jain for ILIES-282238 : Sonar Fix-Changed variable name.
					APP_HSHL_RLT_Cargo[] dbRltCargos = (APP_HSHL_RLT_Cargo[]) rltCollection
					.select(FwConstants.DAO, criteriaMap);
					//Modified by Nancy Jain for ILIES-282238 : Sonar Fix-Changed variable name.
					Map<String, APP_HSHL_RLT_Cargo> dbMap=new HashMap<String, APP_HSHL_RLT_Cargo>();
					for(APP_HSHL_RLT_Cargo db_rlt_cargo:dbRltCargos){
						db_rlt_cargo.setTax_jointly_filed_sw("N");
						db_rlt_cargo.setRowAction(FwConstants.ROWACTION_UPDATE);
						dbMap.put(db_rlt_cargo.getRef_indv_seq_num()+db_rlt_cargo.getSrc_indv_seq_num(), db_rlt_cargo);
					}
					//Modified by Nancy Jain for ILIES-282238 : Sonar Fix-Changed variable name.
					APP_HSHL_RLT_Collection updateRltColl=new APP_HSHL_RLT_Collection();
					for(APP_TAX_RLT_Cargo jointlyFilingCargo:appJointlyFilingTax.getResults()){
						APP_HSHL_RLT_Cargo dbRltCargo;
						//Modified by Nancy Jain for ILIES-282238 : Sonar Fix-Changed variable name.
						String pageRltRel=jointlyFilingCargo.getRef_indv_seq_num()+jointlyFilingCargo.getSrc_indv_seq_num();
						String pageRltRelRev=jointlyFilingCargo.getSrc_indv_seq_num()+jointlyFilingCargo.getRef_indv_seq_num();
						if(null!=request.get("taxJointlyFiled_"+jointlyFilingCargo.getSrc_indv_seq_num()))
							jointlyFilingCargo.setTax_jointly_filed_sw(request.get("taxJointlyFiled_"+jointlyFilingCargo.getSrc_indv_seq_num()).toString());
						if(null!=jointlyFilingCargo.getTax_jointly_filed_sw() && jointlyFilingCargo.getTax_jointly_filed_sw().equals("Y")){
							if(dbMap.containsKey(pageRltRel)){
								dbRltCargo=dbMap.get(pageRltRel);
								dbRltCargo.setTax_jointly_filed_sw("Y");
								dbRltCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
							}else if(dbMap.containsKey(pageRltRelRev)){
								dbRltCargo=dbMap.get(pageRltRelRev);
								dbRltCargo.setTax_jointly_filed_sw("Y");
								dbRltCargo.setRowAction(FwConstants.ROWACTION_UPDATE);
							}
						}
					}
					updateRltColl.addAll(dbMap.values());
					houseHoldRelationBo.storeHousholdRelationshipDetails(updateRltColl,null,null);
				}
				INDIVIDUAL_Custom_Collection appIndvPrevColl = peopleHandler.getAllIndividuals();
				for(APP_INDV_Cargo appIndvCargoOld:appIndvColl.getResults()){
					
				}
				appIndvCargo = (APP_INDV_Cargo)isChanged(appIndvBeforeCargo,appIndvCargo);
			//	app
				//appIndvCargo.setRlvn_ind(appIndvBeforeCargo.getRlvn_ind());
				if(appIndvCargo.isDirty()){
					
					IndividualAge indvBeforeAge = peopleHandler.getIndividualAge(appIndvCargo.getIndv_seq_num());
				
					//if the cargo is dirty then we are updating the data base
					peopleHandler.updateIndividual(appIndvCargo);
					
					}
				
				
				//define a boolean array (size of SES_A_I_P + 1)
				int persistPeopleArraySize = applicationManager.getMaxSeqNumer(sesAppInPrflColl) + 1;
				boolean[] persistPeople = new boolean[persistPeopleArraySize];
				int persistPeopleSize = persistPeople.length; 
				
				//initialize array to false
				for(int i = 0; i < persistPeopleSize; i++){persistPeople[i] = false;}
				
				int pageCollAppInPrflCollSize = pageCollAppInPrflColl.size();
				
				//Loop for each Cargo in the Session APP_IN_PRFL collection
				for(int i = 0; i < sesAppPrflCollSize; i++)
				{
					//Get cargo i from the collection
					sesAppInPrflCargo = (APP_IN_PRFL_Cargo) sesAppInPrflColl.get(i);	
					
					//Get I_S_N for current cargo
					indivSeqNum = sesAppInPrflCargo.getIndv_seq_num();
					indivSeqNumInt = Integer.parseInt(indivSeqNum);
				
					//Get the matching indiv_seq_num cargo from the page collection
					for(int j = 0; j < pageCollAppInPrflCollSize; j++)
					{
						//Get cargo i from the collection
						pageCollAppInPrflCargo = (APP_IN_PRFL_Cargo) pageCollAppInPrflColl.get(j);	
						
						//does this match the SES_A_I_P cargo?
						if(Integer.parseInt(pageCollAppInPrflCargo.getIndv_seq_num()) ==
							indivSeqNumInt)
						{
							break;
						}
						else
						{
							pageCollAppInPrflCargo = null;
						}
					}
					
					//Did this person answer any questions? (Does the cargo contain responses?)
					if(pageCollAppInPrflCargo != null)
					{
						//Initialize indivResponseArray = new string array for current person
						indivResponseArray = new String[numQuestions];
						if(blindId != null && (blindId.equalsIgnoreCase("N") || blindId.equalsIgnoreCase("K"))){
							sesAppInPrflCargo.setDabl_resp(blindId);
							//pageCollAppInPrflCargo.setDabl_resp(blindId);
							trackPeopleToPersist(persistPeople, indivSeqNumInt);
						}
					
						//blindDisabled  = IApplicationManager.DISABLED_PERSON
							//Does AppManager.DetermineDirtyStatus() on this response return true?
							sesAppInPrflCargo.setDabl_resp(fixSelectionValue(sesAppInPrflCargo.getDabl_resp()));
							if(applicationManager.determineDirtyStatus(pageCollAppInPrflCargo.getDabl_resp(),
								sesAppInPrflCargo.getDabl_resp(), dirtyIndicator, pageStatus))
							{					
								trackPeopleToPersist(persistPeople, indivSeqNumInt);
							}
							
							//Call AppManager.TranslateProfileResponses() to update the session
							applicationManager.translateProfileResponses(pageCollAppInPrflCargo.getDabl_resp(),
								sesAppInPrflCargo.getDabl_resp(), pageStatus, IApplicationManager.DISABLED_PERSON,
								sesAppInPrflCargo);
						
							//Add the SES_RESP to the indivResponsesArray
							indivResponseArray[0] = sesAppInPrflCargo.getDabl_resp();
							//Check for Disability & Blindness -- if Yes set True -- Starts
							if(sesAppInPrflCargo.getDabl_resp().equalsIgnoreCase("R"))
								dablFlag = true;
							//Check for Disability & Blindness -- if Yes set True -- Ends

						
						//drugFelonies = IApplicationManager.DRUG_FELON
							//Does AppManager.DetermineDirtyStatus() on this response return true?
							sesAppInPrflCargo.setDrug_feln_resp(fixSelectionValue(sesAppInPrflCargo.getDrug_feln_resp()));
							if(applicationManager.determineDirtyStatus(pageCollAppInPrflCargo.getDrug_feln_resp(),
								sesAppInPrflCargo.getDrug_feln_resp(), dirtyIndicator, pageStatus))
							{					
								trackPeopleToPersist(persistPeople, indivSeqNumInt);
							}
								
							//Call AppManager.TranslateProfileResponses() to update the session
							applicationManager.translateProfileResponses(pageCollAppInPrflCargo.getDrug_feln_resp(),
								sesAppInPrflCargo.getDrug_feln_resp(), pageStatus, IApplicationManager.DRUG_FELON,
								sesAppInPrflCargo);
							
							//Add the SES_RESP to the indivResponsesArray
							indivResponseArray[1] = sesAppInPrflCargo.getDrug_feln_resp();
						    // Added for ILIES-129516 - Starts
							sesAppInPrflCargo.setDrug_trtmnt_prg_resp(fixSelectionValue(sesAppInPrflCargo.getDrug_trtmnt_prg_resp()));
							if(applicationManager.determineDirtyStatus(pageCollAppInPrflCargo.getDrug_trtmnt_prg_resp(),
								sesAppInPrflCargo.getDrug_trtmnt_prg_resp(), dirtyIndicator, pageStatus))
							{					
								trackPeopleToPersist(persistPeople, indivSeqNumInt);
							}
								
							//Call AppManager.TranslateProfileResponses() to update the session
							applicationManager.translateProfileResponses(pageCollAppInPrflCargo.getDrug_trtmnt_prg_resp(),
								sesAppInPrflCargo.getDrug_trtmnt_prg_resp(), pageStatus, IApplicationManager.DRUG_TRTMNT_PROG,
								sesAppInPrflCargo);
							
							//Add the SES_RESP to the indivResponsesArray
							indivResponseArray[2] = sesAppInPrflCargo.getDrug_trtmnt_prg_resp();
							sesAppInPrflCargo.setParole_prob_viol_resp(fixSelectionValue(sesAppInPrflCargo.getParole_prob_viol_resp()));
							if(applicationManager.determineDirtyStatus(pageCollAppInPrflCargo.getParole_prob_viol_resp(),
								sesAppInPrflCargo.getParole_prob_viol_resp(), dirtyIndicator, pageStatus))
							{					
								trackPeopleToPersist(persistPeople, indivSeqNumInt);
							}
								
							//Call AppManager.TranslateProfileResponses() to update the session
							applicationManager.translateProfileResponses(pageCollAppInPrflCargo.getParole_prob_viol_resp(),
								sesAppInPrflCargo.getParole_prob_viol_resp(), pageStatus, IApplicationManager.PAROLE_PROB_VIOL,
								sesAppInPrflCargo);
							
							//Add the SES_RESP to the indivResponsesArray
							indivResponseArray[3] = sesAppInPrflCargo.getParole_prob_viol_resp();
					        // Added for ILIES-129516 - Ends
						//otherFoodStamp = IApplicationManager.RECEIVE_FS_IN_OTHER_STATE
							//Does AppManager.DetermineDirtyStatus() on this response return true?
							sesAppInPrflCargo.setRcv_fs_oth_st_resp(fixSelectionValue(sesAppInPrflCargo.getRcv_fs_oth_st_resp()));
							if(applicationManager.determineDirtyStatus(pageCollAppInPrflCargo.getRcv_fs_oth_st_resp(),
								sesAppInPrflCargo.getRcv_fs_oth_st_resp(), dirtyIndicator, pageStatus))
							{					
								trackPeopleToPersist(persistPeople, indivSeqNumInt);
							}