/******************************************************************************
		File Name	: globalValidator.js		
		Track		: FRAMEWORK
		Functional	: GLOBAL
		Description : Javascript Validation functions used GLOBALLY
		Function List:	function getLabel(elem)
						function alertMe()
						function formulateMessage(msg, argsArr)
						function getOccurences(str, charac)
						function getErrorMessage(errCode)
						function parseFunctionName(func)
						function preValidate(inputForm) 
						function validateForm(thisForm)
						function enableAllFields(frm) 
						function isDataComplete(field) 
						function isAlphaNumericSpecialChar()
						function isAlphaNum()
						function isDigit (c)  
						function isInteger (s)   
						function isAlphaChar(c)
						function isAlphaNumericData(field,val)
						function doTrim(val) 
						function advance(thisField, nextField) 
						function formatDate(field1, field2, field3, targetField)
						function getMonthNumber(month) 
						function clearMonthDayYear(field) 
						function openPopupWindow(theURL,winName,features)  //v2.0
						function setFocus(field)
						function doSubmit(formName, field, val) 
						function submitForm(formId)
						function doReset(formName)
						function setSelectFlag() 
						function setSelectFlagFalse()
						function toCaps(field) 
						function trimSpaces(obj)
						function CompareAlpha(a, b) 
						function CompareAlphaIgnore(a, b) 
						function CompareDate(a, b) 
						function CompareDateEuro(a, b) 
						function CompareNumeric(a, b) 
						function changeImage(table,colNo)
						function sortTable(table,colNo)
						function refreshSort(table)
						function sortData(table,colNo,dataType,isSortDesc)
						function changeImageById(table,tableNo,colNo)
						function openCloseWindow() 
						function setLogout()
						function addList(txt, val, listObj)
						function isOptionExists(elem, val)
						function disableElements(flag,oids)
						function disableFieldsOnSpace()						
						function disableFieldsOnYes()
						function disableFieldsOnNo()
						function clearFields()
						function uncheckGroup(chk){						
						function enableFieldsOnSpace()
						function enableFieldsOnYes()
						function enableFieldsOnNo()
						function getRadioButtonValue (radio)   
						function displayMessages(errorMessage,message) 
						function resetElement(elem) 
						function runValidations(thisForm)
						function setActionFieldAndSubmit(frm,value,validate)   
						function initScrollTable(oElement) 
						function resizeScrollTable(oElement) 
						function openModalDialog(URL,winName,features)
						function setFieldValue(field,val)
						function selVal(selfield,hidCombo1,filteredCombo,hidCombo2)
						function clearMessages()
						function getLinkByID(tab)
						function getListText(valu,selobj)
						function resetInnerHTML()
						function disableAddr()
						function getToday()
						function textAreaEnter()
						function textAreaBreak(tArea)
						function replaceTilda(tArea)
						function validateDates(month,day,year)
						function createErrorMessages(month,day,year)
						function checkZip(field1,field2)
						function formDate(aDate,aTime,tgt)
						function setFocusOnFirstField()
						function getDefaultValues(elem)
						function setCheckBoxValue(selectedCheckbox)
						function getElementValueOrValue(elem)
						function preValidateElements(elemIDArray)
						function validateElements(elemIDArray)
						function prepareElementRequestParams(elementIds)
						function prepareFormRequestParams(frm)
						function setFormTarget(frm,val)
						function setAllFirstCaps(frmObj)
						function isGroupChecked(grpElem, chkNum)
						function setDateValue(beanId, dateVal)
						function setSelected(combo,val)
						function isCompleteForm(thisfrm)
						function getMandatoryFields(frm)
						function getElementValidations(elem)
						function addtoUniqueElementArray(arrObj,valtoAdd)
						function setKeyValues(keys,vals)
						function uppercase()
						function warnOnDelete(frm,act,val)
						function confirmAction(msg)
						function handleKeyPress()
						function setFocusonMessages()
						function pauseExecution(timeDelay)
						function isData(field)
						function alertMeDynaSection()
						function getErrorMessageOrSeverity(errCode)
						function getImageForMessage(severity,cde)
						function extractElementIdFromField(args)
						function displayDynaSectionMessages(errorMessage)
						function dynaSectionDelete(deleteFld,sectionCounter,pageAction,validateFlag)
						function getArrayOfFieldsStartingWith(str)
						function getHandleToField(startsWith,key)
						function getKeyFromField(field)
						//To Display the warning message before close the browser
						function confirmClose()
						//To identify the window is a popup or normal window
						function isPopup()
						//To create a modal dialog for the correspondence pdf
						function setKeyVal(keys,vals)
						function modalWin(key)
/****************************************************************************************/

/****************************************************************************************/
var isValidateON = false;			//Global flag that denotes whether validateForm is ON or OFF
var validationErrors = new Array();	//Global Array that holds all the error messages during submit validations
var glInnerHTMLArray = new Array(); //GLobal Array that holds the values of innerHTMLs
var glInnerHTMLIDArray = new Array();//GLobal Array that holds the values of innerHTML IDs
var overrideResults = false;//Global value that will be set to true when user clicks on Override Results in Eligibility screens
var dateVal = false;
var selectFlag=false;
var loginwarn = true;
var frmTarget = "";//Global variable to capture the target of the form
var errImg = "<IMG SRC='/access/images/icon_error.gif' ALT='/images/icon_error.gif' WIDTH='17' HEIGHT='17' VSPACE='2' ALIGN='absmiddle'> &nbsp;";	
var warningImg 	= "<IMG SRC='/access/images/icon_warning.gif' ALT='Warning' WIDTH='17' HEIGHT='17' VSPACE='2' ALIGN='absmiddle'> &nbsp;";	
var messageImg 	= "<IMG SRC='/access/images/icon_message.gif' ALT='Error' WIDTH='17' HEIGHT='17' VSPACE='2' ALIGN='absmiddle'> &nbsp;";	
var errorElementIdArray = new Array();
var preValidateAlwaysArray = new Array();
var pageSubmit = false;//Global variable to capture the page submit, either on hit of enter or onclick of a button.
var timer = "";
var canClose = true;

/*****************************************************************************************/
function getLabel(elem){
	if(elem.type==null||elem.type=="undefined"){
		return elem;
	}
	else{
		var lbl="";
		var lblname = elem.lblDesc;
		if(lblname==null||lbl=="undefined"){
			lbl = elem.name;
		}
		else{
			lbl = lblname;
		}
		return lbl;
	}
}

function alertMe(){
	var args = alertMe.arguments;
	var errMsg = getErrorMessage(args[0]);
	if(errMsg.indexOf("~")>=0){
		var msg = formulateMessage(errMsg, args);
		errMsg = msg;
	}		
	if(args[0]==errMsg){		
		//If the call does not contain any Error code or if
		// the error code is not defined.
		var tmp = "Error Code Not Defined "+args[0];
			if(isValidateON){
				validationErrors.push(tmp);		
			}else{
				displayMessages(tmp);
			}	
	}
	else{
		if(isValidateON){
			validationErrors.push(" "+errMsg);		
		}else{
			displayMessages(errImg+" "+errMsg);
		}	
	}
	setFocusonMessages();
	return true;
}

function formulateMessage(msg, argsArr){
	if(argsArr.length<=1){
		return msg;
	}
	else{
		var plHold = getOccurences(msg,'~');
		var argsLen = parseInt(argsArr.length,10);
		var plArgsLen = argsLen-1;
		var valn1 = (plArgsLen==plHold);
		if(valn1){
			var retMsg = "";
			var cnt=1;
			for(k=0;k<msg.length;k++){
				if(msg.charAt(k)=='~'){
					var lbl = getLabel(argsArr[cnt]);
					retMsg=retMsg+lbl;
					cnt = cnt+1;
				}
				else{
					retMsg = retMsg+msg.charAt(k);
				}
			}
			return retMsg;
		}
		else {			
			return msg;
		}
	}
}

function getOccurences(str, charac){
	var cnnt = 0;
	for(h=0;h<str.length;h++){
		if(str.charAt(h)==charac){
			cnnt = cnnt+1;
		}
	}
	return cnnt;
}

// SEC-520
function getErrorMessage(errCode){
	var errArray;
	var desc = errCode;
	var temp = errCode.substring(0,2);
	temp = temp.toLowerCase();
	try{
		temp = temp +"ErrorCodes";
		stripScripts(temp);		
		errArray = eval(temp);
	}catch(e){
		return errCode;
	}		
	for(j=0;j<errArray.length;j++){
		if(errArray[j][0]==errCode){
			desc = errArray[j][1];
			break;
		}
	}
	return desc;
}

function parseFunctionName(func){
	if(func.indexOf("~")>=0){//Specially for DC
		pos0 = 0;
		pos1 = func.indexOf("(");
		pos2 = func.indexOf("~");
		temp1 = func.substring(0,pos1+1);
		temp2 = func.substring(pos2+1,func.length);
		temp = temp1+temp2;		
		return temp;
	}
	else{	// Standard calls
		return func;
	}
}


/*
 * This function is used to submit the form if there are no client side errors
 * If you do not want this function to submit the form pass the form and  0 
 * ie., preValidate(frm,0)
 */


function preValidate(inputForm) {
	messageArray = new Array();
	messageString = "";
	var args = preValidate.arguments;
	clearMessages();
	var ret = validateForm(inputForm);

	len = validationErrors.length;
	if(ret)  {		    
		if(args.length>1&&args[1]==0){
			return true;
		}		
		enableAllFields(inputForm);
		inputForm.method = "POST";
		pageSubmit = true;
	    return true;
	}
	else 
	{
		var num = inputForm.length;	
		for(var i = 0; i<num; i++){
			var field = inputForm.elements[i];
			var name = field.name;
			var aType = field.type;
			if(aType == "textarea"){
				replaceTilda(field);
			}
		}
	  	if(len>0) {
	  	  for(i=0;i<len;i++)  {	        
		      messageArray.push(validationErrors[i]);
			}
			errorString = messageArray.join("<BR>"+errImg);
						
			displayMessages(errorString);
	   	}	 
   	 
	    return false;
	}
}

/*
 * This function is used to validate the client side errors
 */

function validateForm(thisForm){
	var num = thisForm.length;	
	isValidateON = true;
	validationErrors = new Array();
	var chek = true;	
	var ret;
	for(var i = 0; i<num; i++){
		var field = thisForm.elements[i];
		var name = field.name;
		var validate=field.validate;	
		if ((validate !=null) && (validate!="undefined")&&(validate!="null")){			
			var startPos;
			do{
				startPos=0;
				var fun;
				var endPos=validate.indexOf(";");
				if(endPos > 0){
					fun=validate.substring(startPos,endPos);				
					startPos=endPos+1;
					validate=validate.substring(startPos,validate.length);						
				}else{
					fun=validate;
				}
				var spcs = doTrim(fun);		
				if(spcs!=null&&spcs!="null"&&spcs!=""){
					var netfunc = parseFunctionName(fun);				
					ret=eval(netfunc);				
					if(ret!=null&&ret!="null"&&ret!="undefined"&&!ret) {						
						chek = false;
					}// 
				}				
			}while(endPos != -1);
		}
	}
	isValidateON = false;		
	return chek;
  }
//Function to open survey window
//Added by Rodolfo Acevedo, February 2015 for ILIES-153009 - Satisfaction Survey
//- use currentPageId to know if is coming from the footer or not, when from the footer the survey will have less questions
//- use doForward to trigger a new page action after the survey is submitted
//- use fwPageId to inidcate next page id to load if doForward = true
//- use fwPageAction to inidcate next page action to load if doForward = true
//- otherAttributes for future uses.
function openSurvey(currentPageId,doForward,fwPageId,fwPageAction,otherAttributes){
	var doModalDialog = false;
	
	var surveyPageAction = "AMSCFLoad";
	var dialogFeatures = null;
	var surveyPopupWindow = null;
	
	var confirmed = true;
	var survey_confirm = null;
	
	/**
	 * 1. If forward is true:
	 * 			SURVEY_CONFIRM_COUNT == 0 -> show survey
	 * 			SURVEY_CONFIRM_COUNT == 1 -> do forward
	 */
	if(doForward == true){
		survey_confirm = window.document.getElementById("SURVEY_CONFIRM_COUNT").value;
	} else {
		survey_confirm = 0;
	}
	/**
	 * 2. Show the survey
	 */
	if(survey_confirm == 0){
		//2.a Show confirm popup if required.
		//ABNSO - AFB app submission thank you page
		//ARTKY - RMC/RMB/MPR/AAP app submission thank you page
		//ADTHK - Document upload after application submission
		if(currentPageId === "ABNSO" || currentPageId === "ARTKY" || currentPageId === "ADTHK"){
			confirmed = false;
			var languageCode = document.getElementById("CurrentLanguageCode");
			var currentLngCode = languageCode === null ? "EN" : languageCode.value;
			var confirmStr = getErrorMessage("GL075" + currentLngCode);
			confirmed = window.confirm(confirmStr);
		}
		//2.b Show survey
		if(confirmed == true){
			var requestAttributes = "&source=" + currentPageId;
			if(otherAttributes != null){
				requestAttributes += otherAttributes;
			}
			var dialogURL = "/access/accessController?VALID_GET=Y&POP_UP=Y&PAGE_ACTION=" + surveyPageAction + requestAttributes;
			if(doModalDialog == true){
				dialogFeatures = "dialogWidth:1110px;dialogHeight:610px";
				surveyPopupWindow = openModalDialog1(dialogURL,"_blank",dialogFeatures);
			} else {
				dialogFeatures = 'toolbar=no,menubar=no,resizable=yes,scrollbars=yes,WIDTH=1200,HEIGHT=500,LEFT=153,TOP=86';
				surveyPopupWindow = openPopupWindow(dialogURL,"_blank",dialogFeatures);
			}
		}
		if(doForward == true){
			window.document.getElementById("SURVEY_CONFIRM_COUNT").value = 1;
		}
	}
	/**
	 * 3. Do forward
	 */
	else if(doForward == true && survey_confirm == 1){
		var fwURL = "/access/accessController?VALID_GET=Y" + "&CURRENT_PAGE_ID=" + fwPageId + "&PAGE_ACTION=" + fwPageAction;
		window.location = fwURL;
	}
	return false;
}
//Function to open a modal dialog
//Function added by Pardhasarathi on Dec 2014
function openModalDialog1(URL,winName,features){
	features = features+";scroll:yes;center=yes;help:no;status=no";
	
	if (window.showModalDialog)
		var modalVal = showModalDialog(URL,winName,features);
	else
		var modalVal = locShowModalDialog(URL,winName,features);
	
	return modalVal;
}

//This function is used if certian fields have been disabled on the page and the name/value pair has to sent to the server side.
function  enableAllFields(frm) {
	if(overrideResults == true) 
	{
	}
	else
	{
		for(var i=0; i< frm.length; i++){
			frm.elements[i].disabled= false;
		}
	}
}
//PHASE-2 NEW BUTTONS MOUSE OVER
function MouseRollover(e) {
    var v = e.src;
    var k =  v.substring(0,v.indexOf(".jpg"));
    k = k+"_hover.jpg";
    e.src = k;
}
function MouseOut(e) {
    var v = e.src;
    var k =  v.substring(0,v.indexOf("_hover.jpg"));
    k = k+".jpg";
    e.src = k;
}

//Function to check for mandatory fields - without popping the alerts
function isDataComplete(field) {
	if(field.type =="radio" || field.type =="checkbox"){
   	 	if(field.checked == true){
   	 		return true;
   	 	}
   	 	else return false;
   	}
	else
	{
    var val = field.value;  
    var thisval = null;
    if (val!=null) {
	   var vallen= val.length;
	   thisval = doTrim(val);	
	   if (thisval== null) {
	     thisvallen = 0;
	   } else {thisvallen = thisval.length;}
	   if (vallen >0 & thisvallen<=0) {	      
	     return false;
	   }
	} else {
		thisval = val;
	}
   if (thisval==null || thisval.length<=0) {
      return false; 
   }
   return true;
   }
}

//This function takes 2 arguments - first is a field name and the next is a 'SpecialChar'
//Checks to see that the value entered is AlphaNumeric or 'SpecialChar'
function isAlphaNumericSpecialChar(){
	var val = arguments[0].value;
	var specialChar = arguments[1];
	for (var i = 0; i < val.length; i++) {
		var ch = val.substring(i, i + 1);
		if (ch != specialChar && !isAlphaNum(ch,arguments[1])){
			//arguments[0].focus();
			return false;
		}
	}
}

//This function takes 2 arguments - first is a field name and the next is a 'SpecialChar'
//Checks to see that the value entered is Alpha(Letters) or 'SpecialChar'
function isAlphaSpecialChar(){
	var val = doTrim(arguments[0].value);
	var valid = arguments[1];
	
	for (var i=0; i< val.length ; i++) {
		var substr = val.substring(i,i+1);
		if (valid.indexOf(substr) == -1){
			if (substr < "a" || substr > "z"){
				if (substr < "A" || substr > "Z"){
					return false;	       				
	       		}
	       	}
	    }
	}
	
	return true;
}

/*
This function takes 2 arguments - first is a 'SingleChar' and the next is a 'SpecialChar'
Checks to see that the char entered is AlphaNumeric or 'SpecialChar'
Function is called by isAlphaNumericSpecialChar()
*/
function isAlphaNum(){
	var val = arguments[0];
	if(val < "0" || val > "9"){
		if (val < "a" || val > "z"){
			if (val < "A" || val > "Z"){
				return false;
			}
   		}
   	}
   	return true;
}	

function isAlphaOnly(){
	var val = arguments[0];
	for (var i = 0; i < val.length; i++) {
		var ch = val.substring(i, i + 1);
		if (!isAlphaChar(ch)){
			return false;
		}
	}
	return true;
}	

/*
Function to check if the given character is a Digit or not
param1		: the character that needs to be checked.
returns		:  true  - if it is a Digit
			   false - if it is not a digit
*/
	function isDigit (c){  
		return ((c >= "0") && (c <= "9"))
	}
	
/*
Function to Return true if all characters in string s are numbers.
param1		: The String that needs to be validated
returns		: true -if value contains only numbers;
			  false -if a non-numeric charecter is found.
*/
	function isInteger (s){   
		for (i = 0; i < s.length; i++)
		{           
			var c = s.charAt(i);
			if (!isDigit(c)) return false;
		}    
		return true;
	}


/*
//Function checks if the char passed is a Capital Alpha char
*/
function isAlphaChar(c){
	 return ((c >= "A" && c <= "Z") || (c >= "a" && c <= "z"))
}

//Function to check if the given value is Alphanumeric
function isAlphaNumericData(field,val) {
  	var rep2 = /[A-Za-z0-9]+([a-z]|[0-9])*\s*[A-Za-z0-9]*/;
  	var rep = /[^A-Za-z0-9\s]+/;
  	var test = val.match(rep);
  	var test2 = val.match(rep2);
  	var leng = val.length;

	for(var i=0;i<leng;i++){
		if(val.charAt(0)== " "){
  	    	val= val.substring(1);
  	    }
  	}
  	field.value=val;
	if ((test == null) && (test2!=null) && (val.charAt(0)!= " ") && val.charAt(leng-1) !== " ") {       
		return true; 
  	} else { 
    	return false;
  	}
}


//Trims the spaces from the value being sent
function doTrim(val) {
	var len = val.length;
	var result = null;
   	for (var i=0;i<len;i++) {
   	var curchar = val.charAt(i);
		if (curchar!=" ") {
	   		if (result == null) {
	     		result = curchar;
	   		} else {
	     		result = result + curchar;
	   		}	   
	 	}
   	}
   return result;
}

/* Calling this method from the onKeyUp event select the nextField as soon as the user enters the final character in this
// field, however shift+tab is disabled.  Calling it from onKeyPress selects the nextField after the user exceeds the 
//	maxLength attribute.
*/ 

function advance(thisField, nextField) {
	var val = thisField.value;
  	var code=event.keyCode;
	var length = thisField.value.length;
	var maxxed = thisField.maxLength;
  
  	if(code==16 || code==9 || code==37 || code==39 || code==8) return;
  	if (selectFlag) {
		thisField.value = '';
		setFocus(thisField);
		selectFlag=false;
		return;
	}
	if(length==maxxed){
		setFocus(nextField);
		nextField.select();
		selectFlag=false;
		//clearMonthDayYear(nextField);
	}
}	

// This function formats a date (passed as three fields) into one hidden field using the format "yyyy-mm-dd"
//and also validates the date
function formatDate(field1, field2, field3, targetField){
	var value1 = field1.value;
	var value2 = field2.value;
	var value3 = field3.value;
	var args = formatDate.arguments;

	if((value1==null && value2==null && value3==null) || (value1=="mm" && (value2=="dd" ||value2=="disableDay") && value3=="yyyy") || (value1=="" && ( value2=="" || value2=="disableDay") && value3=="")){
		targetField.value="";
		return true;
	}
	if(value2=="disableDay") value2="01";
	if(validateDate(field1,field2,field3)==false) return false;
	if(value1.length==1) value1 ="0"+value1;
	if(value2.length==1) value2 ="0"+value2;
	
	if(args.length > 4 && arguments[4]!= null && arguments[4] == "true"){
		targetField.value = value1+value2+value3;
	}
	else
	{
		targetField.value = value3+"-"+value1+"-"+value2;
	}
	return true;
}

//This function is used by function validateDate() to get the month numbers 
function getMonthNumber(month) {
	var retval = 0;
	if (month == "Jan") {
		retval = 1;
	} else if (month == "Feb") {
    	retval = 2;
	} else if (month == "Mar") {
    	retval = 3;
	} else if (month == "Apr") {
    	retval = 4;
	} else if (month == "May") {
    	retval = 5;
	} else if (month == "Jun") {
    	retval = 6;
	} else if (month == "Jul") {
    	retval = 7;
	} else if (month == "Aug") {
    	retval = 8;
	} else if (month == "Sep") {
    	retval = 9;
	} else if (month == "Oct") {
    	retval = 10;
	} else if (month == "Nov") {
    	retval = 11;
	} else if (month == "Dec") {
    	retval = 12;
	}
	return retval;
}

//Clears the field if it is a Date field
function clearMonthDayYear(field) {
	if(event.keyCode==8) return true;
 	var thisValue = field.value;
	if(selectFlag || thisValue=="mm" || thisValue=="dd" || thisValue=="yyyy"){
   		field.value = '';
   		selectFlag=false;
	}
}

//Function used to open a pop up window - given the required parameters
function openPopupWindow(theURL,winName,features) { //v2.0
  var win = window.open(theURL,winName,features);
  //added to give focus to pop-up window, in case a window with the same name
  //is already open
  win.focus();
  return win;
}

//Function used to setFocus on a given field - returns true if the field is disabled - Comment added by Malathi 
function setFocus(field){
	if(field == "undefined") return;
	try{
		if(field.disabled) return;
			field.focus();
	}catch(e) {}
}

//Sets value to the field and then submits the form
function doSubmit(formName, field, val) {
	field.value = val;	
	return preValidate(formName);
}

//Function used to submit the form
function submitForm(frm){
frm.method = "POST";
frm.submit();
}

//Resets the form
function doReset(formName){
	displayMessages(" ");
	resetInnerHTML();
	formName.reset();
	return false;
}

//Sets the value of 'selectFlag' to true
//In date fields if values mm/dd is available then it will clear the fields and not advance to the next field
function setSelectFlag() {
selectFlag=true;
}

//Function to set the selectFlag as false
function setSelectFlagFalse() {
selectFlag=false;
}

//Function to convert the field value to Upper Case
function toCaps(field) {
	field.value = (new String(field.value)).toUpperCase();
}

//Function to remove the leading and trailing spaces
function trimSpaces(obj){
	while(''+obj.value.charAt(obj.value.length-1)==' ')obj.value=obj.value.substring(0,obj.value.length-1);
	while(''+obj.value.charAt(0)==' ')obj.value=obj.value.substring(1,obj.value.length);
}

// Sorting functions - start
currentCol = 0
previousCol = -1

function CompareAlpha(a, b) {
	if (a[currentCol] < b[currentCol]) { return -1; }
	if (a[currentCol] > b[currentCol]) { return 1; }
	return 0;
}

function CompareAlphaIgnore(a, b) {
	strA = a[currentCol].toLowerCase();
	strB = b[currentCol].toLowerCase();
	if (strA < strB) { return -1; }
	else {
		if (strA > strB) { return 1; }
		else { return 0; }
	}
}

function CompareDate(a, b) {
	datA = new Date(a[currentCol]);
	datB = new Date(b[currentCol]);
	
	if(isNaN(datA) && isNaN(datB))return 0;
	else if(isNaN(datA)) return -1;
	else if(isNaN(datB)) return 1;
	
	if (datA < datB) { return -1; }
	else {
		if (datA > datB) { return 1; }
		else { return 0; }
	}
}

function CompareDateEuro(a, b) {
	strA = a[currentCol].split(".");
	strB = b[currentCol].split(".")
	datA = new Date(strA[2], strA[1], strA[0]);
	datB = new Date(strB[2], strB[1], strB[0]);
	if (datA < datB) { return -1; }
	else {
		if (datA > datB) { return 1; }
		else { return 0; }
	}
}

function CompareNumeric(a, b) {
	numA = a[currentCol]
	numB = b[currentCol]
	if(isNaN(numA) && isNaN(numB))return 0;
	else if(isNaN(numA)) return -1;
	else if(isNaN(numB)) return 1;
	else return (numA - numB);
}

function changeImage(table,colNo){
	var cols=table.rows(0).cells.length;
	var currImg="document.sortImage"+colNo+".src";
	var imgSrc=eval(currImg);
	var otherImg;
	var imgName;
	var isDesc=false;
	var pos=imgSrc.lastIndexOf("/");
	
	imgName=imgSrc.substring(pos+1,imgSrc.length);
	if(imgName=="bulletUnselected.gif"){
		imgSrc="/images/bulletRotated.gif";
	}else if(imgName=="bulletRotated.gif"){
		isDesc=true;
		imgSrc="/images/bulletDescending.gif";
	}else if(imgName=="bulletDescending.gif"){
		imgSrc="/images/bulletRotated.gif";
	}
	eval(currImg+"='"+imgSrc+"'");
	
	if(previousCol >=0 && previousCol!=colNo){
		otherImg="document.sortImage"+previousCol+".src='/images/bulletUnselected.gif'";
		eval(otherImg);
	}
	return isDesc;
}

function sortTable(table,colNo){
	var rowCount;
	var colCount;
	var isSortDesc=false;
	if(table!=null){
		rowCount=table.rows.length;
		if(rowCount <=0 || rowCount > 100) return false;

		colCount = table.rows(0).cells.length;
		if(colCount <=0 || colNo >=colCount) return false;

		isSortDesc=changeImage(table,colNo);
		dataType=eval("document.sortImage"+colNo+".dataType");
		
		sortData(table,colNo,dataType,isSortDesc);
	}
	return false;
}

function refreshSort(table){
	var colCount;
	var rowCount;
	
	rowCount=table.rows.length;
	if(rowCount <=0) return false;
	
	colCount = table.rows(0).cells.length;
	if(colCount <=0) return false;
	
	var currImg;
	var imgSrc;
	var pos;
	var imgName;
	var dataType;
	var isDesc=false;
	
	for(i=0;i < colCount;i++){
		if(eval("parent.document.sortImage"+i) !="[object]") continue
		
		currImg="parent.document.sortImage"+i+".src";
		imgSrc=eval(currImg);
		pos=imgSrc.lastIndexOf("/");
		imgName=imgSrc.substring(pos+1,imgSrc.length);
		if(imgName=="bulletUnselected.gif"){
			continue;
		}else if(imgName=="bulletDescending.gif"){
			isDesc=true;
		}
		dataType=eval("parent.document.sortImage"+i+".dataType");
		sortData(table,i,dataType,isDesc);
		break;
	}
	return;
}

function sortData(table,colNo,dataType,isSortDesc){
	var rowCount;
	var colCount;
	var bArray;
	var oldIndex;
	var bSort;

	rowCount=table.rows.length;
	if(rowCount <=0) return false;

	colCount = table.rows(0).cells.length;
	if(colCount <=0 || colNo >=colCount) return false;
	
	bArray=new Array();
	oldIndex = new Array();
	bSort = false;
	
	currentCol = colNo;
	sortArray = new Array(rowCount);
	htmlArray=new Array(rowCount);

	
	for (i=0; i < rowCount; i++) {
		sortArray[i] = new Array(colCount);
		htmlArray[i]=new Array(colCount);
		for (j=0; j < colCount; j++) {
			sortArray[i][j] = table.rows(i).cells(j).innerText;
			htmlArray[i][j] = table.rows(i).cells(j).innerHTML;
		}
	}
	
   for (i=0; i < sortArray.length; i++){
	   bArray[i] = sortArray[i][currentCol];
   }
	  
	switch (dataType) {
		case "A":
			sortArray.sort(CompareAlpha);
			break;
		case "AI":
			sortArray.sort(CompareAlphaIgnore);
			break;
		case "D":
			sortArray.sort(CompareDate);
			break;
		case "DE":
			sortArray.sort(CompareDateEuro);
			break;
		case "N":
			sortArray.sort(CompareNumeric);
			break;
		default:
			sortArray.sort()
	}
	
	if(isSortDesc) sortArray.reverse();
	
 	for (i=0; i < sortArray.length; i++) { 
        for(j=0; j < bArray.length; j++) {
            if (sortArray[i][currentCol] == bArray[j]) {
                for (c=0; c<i; c++)  if (oldIndex[c] == j) bSort=true;
                if (!bSort) oldIndex[i] = j;
	            bSort = false;
            }
        }
    }

	for (i=0; i < rowCount; i++) {
		for (j=0; j < colCount; j++) {
			table.rows(i).cells(j).innerHTML = htmlArray[oldIndex[i]][j]
		}
	}
	previousCol = colNo;
	
	return
}

/********************************************************************************
	*	Name		: changeImageById()
	*	Description : Function to change the images using ID while Sorting the table
	*	param1		: table	 - Id for the table that has to be sorted
	*	param1		: tableNo- table Number(Unique number for that table, if more than one table
	*								occurs in page) for the table that has to be sorted
	*	param1		: colNo	 - The sequence Number (in that table) for column which has to be sorted
	*	returns		: false
	*********************************************************************************/
	function changeImageById(table,tableNo,colNo){		
	var cols=table.rows(0).cells.length;
	currObj = document.getElementById("sortImage"+tableNo+colNo);	
	currSrc = currObj.src;
	var isDesc=false;
	if(currSrc.indexOf("bulletUnselected.gif")>=0){	
		currObj.src="/images/bulletRotated.gif";
	}
	else if(currSrc.indexOf("bulletRotated.gif")>=0){
		isDesc=true;
		currObj.src="/images/bulletDescending.gif";
	}	
	else if(currSrc.indexOf("bulletDescending")>=0){
		currObj.src="/images/bulletRotated.gif";
	}	
	for(k=0;k<cols;k++){			
		oObj = document.getElementById("sortImage"+tableNo+k);		
		if(oObj!=null&k!=colNo){
			oObj.src = "/images/bulletUnselected.gif";
		}	
	}	
	return isDesc;
}
 //sorting functions end

//To open a logout window on browser close
function openCloseWindow() {
    var control = document.form1.TIERSCONTROL.value;
    if (control == 0) {
    var closeWin = openPopupWindow("jsp/fw/FWCloseWindow.jsp","TIERSCloseWindow","HEIGHT=400,WIDTH=400");
	closeWin.focus();    
  }
}

//Sets the value of the flag 'TIERSCONTROL' to 1 on logout - to differentiate if logout is done using the logout button or
// the browser is being closed
function setLogout(){
    parent.document.form1.TIERSCONTROL.value = "1";
	parent.document.form1.method = "POST";
	parent.document.form1.submit();
}

//Function to move a text value to a list box
function addList(txt, val, listObj){		
	n = listObj.length;			
	if(!isOptionExists(listObj, val)){					
		listObj.options[n] = new Option(txt,val);
		return true;
	}
	return false;
}

/********************************************************************************
	*	Name		: isOptionExists()
	*	Description : Function to check if the Option already exists in the List Box
	*	param1		: The List Box Object which has to be checked 
	*	param2		: The value that needs to be checked for existence(duplication)
	*	returns		:  boolean
*************************************************************************************/
	function isOptionExists(elem, val){		
		for(i=0;i<elem.length;i++)	{
			v = elem.options[i].value;		
			if(v==val)		{
				return true;
			}			
		}
		return false;
	}
						

//This function always takes first field as a dropdown. It clears and disables all the other fields if the value of the 
//dropdown is equal to " ".

function disableFieldsOnSpace()
{
var cmbValArray = new Array(" ");
var count = arguments.length;
flag=true;
	for(var j=0;j<cmbValArray.length;j++){
		//if(arguments[0].value == cmbValArray[j] ){
		if(getElementValueOrValue(arguments[0]) == cmbValArray[j] ){
			for(i=1;i<count;i++){
				flag=false;
				if(arguments[i].type == "select-one"){
					arguments[i].selectedIndex=0;
				}					
				else if (arguments[i].defaultValue =="mm" || arguments[i].defaultValue =="dd" || arguments[i].defaultValue =="yyyy"){
					arguments[i].value= arguments[i].defaultValue;
				}
				else{
					arguments[i].value="";
				}
				arguments[i].disabled = true;
			}
		}
		else{
			if(flag){
				for(i=1;i<count;i++){
					arguments[i].disabled = false;
				}
			}	 
		} 
	}
}

//This function always takes first field as a dropdown. It clears and disables all the other fields if the value of the 
//dropdown is equal to one value in the given Array.
function disableFieldsOnYes()
{
var cmbValArray = new Array("Y","Yes","SS");
var count = arguments.length;
flag=true;
   	for(var j=0;j<cmbValArray.length;j++){
   		//if(arguments[0].value == cmbValArray[j] ){
		if(getElementValueOrValue(arguments[0]) == cmbValArray[j] ){
     		for(i=1;i<count;i++){
				flag=false;
				if(arguments[i].type == "select-one"){
					arguments[i].selectedIndex=0;
				}
				else if(arguments[i].type == "checkbox"){
					arguments[i].checked=false;
				}
				//else condition added by Malathi - to set default values to date fields before disabling
				else if (arguments[i].defaultValue =="mm" || arguments[i].defaultValue =="dd" || arguments[i].defaultValue =="yyyy")
				{
					arguments[i].value= arguments[i].defaultValue;
				}
				else
				{
					arguments[i].value="";
				}
				arguments[i].disabled = true;
       		}
    	}
		else
		{
			if(flag){
       			for(i=1;i<count;i++){
       				arguments[i].disabled = false;
       			}
			}
 
		} 
  	}
}

//This function always takes first field as a dropdown. It clears and disables all the other fields if the value 
//of the dropdown is an element in the Array cmbValArray
function disableFieldsOnNo()
{
var cmbValArray = new Array("N","No","Not Enrolled");
var count = arguments.length;
flag=true;
   	for(var j=0;j<cmbValArray.length;j++){
   		//if(arguments[0].value == cmbValArray[j] ){
		if(getElementValueOrValue(arguments[0]) == cmbValArray[j] ){
			for(i=1;i<count;i++){
				flag=false;
				if(arguments[i].type == "select-one"){
					arguments[i].selectedIndex=0;
				}
				else if(arguments[i].type == "checkbox"){
					arguments[i].checked=false;
				}
				//else condition added by Malathi - to set default values to date fields before disabling
				else if (arguments[i].defaultValue =="mm" || arguments[i].defaultValue =="dd" || arguments[i].defaultValue =="yyyy")
				{
					arguments[i].value= arguments[i].defaultValue;
				}
				else
				{
					arguments[i].value="";
				}
				arguments[i].disabled = true;
       		}
    	}
		else
		{
			if(flag){
       			for(i=1;i<count;i++){
       				arguments[i].disabled = false;
       			}
			}
 
		} 
  	}
}

function enableFieldsOnSpace(){
var tmpValArray = new Array();
var cmbValArray = new Array(" ");
var count = arguments.length;
for(var k=1;k<count;k++) {
	tmpValArray[k] = arguments[k].value;
}
flag=true;
	for(var j=0;j<cmbValArray.length;j++){
		//if(arguments[0].value == cmbValArray[j] ){
		if(getElementValueOrValue(arguments[0]) == cmbValArray[j] ){
			for(i=1;i<count;i++){
				flag=false;
				arguments[i].value= tmpValArray[i];
				arguments[i].disabled = false;
			}
		}
		else{
			if(flag){
				for(i=1;i<count;i++){						
					if (arguments[i].type == "select-one"){
						arguments[i].selectedIndex = 0;
					}
					else if(arguments[i].type == "checkbox"){
						arguments[i].checked=false;
					}
					else if (arguments[i].defaultValue=="mm" || arguments[i].defaultValue =="dd" || arguments[i].defaultValue=="yyyy"){
						arguments[i].value=arguments[i].defaultValue;
					}
					else{
						arguments[i].value="";
					} 						
					arguments[i].disabled = true;
				}
			}	 
		} 
	}
}
	
//This function always takes first field as a dropdown. It enables all the other fields if the value 
//of the dropdown is equal to one of the Array elements
function enableFieldsOnYes()
{
var tmpValArray = new Array();
var cmbValArray = new Array("YES","Y","AN","HR");
var count = arguments.length;
for(var k=1;k<count;k++) {
	tmpValArray[k] = arguments[k].value;
}
flag=true;
   	for(var j=0;j<cmbValArray.length;j++){
   		//if(arguments[0].value == cmbValArray[j] ){
		if(getElementValueOrValue(arguments[0]) == cmbValArray[j] ){
			for(i=1;i<count;i++){
				flag=false;
				arguments[i].value= tmpValArray[i];
				arguments[i].disabled = false;
       		}
    	}
		else
		{
			if(flag){
       			for(i=1;i<count;i++){
					if (arguments[i].type == "select-one"){
						arguments[i].selectedIndex = 0;
					}
					else if(arguments[i].type == "checkbox"){
						arguments[i].checked=false;
					}
					else if (arguments[i].defaultValue=="mm" || arguments[i].defaultValue =="dd" || arguments[i].defaultValue=="yyyy"){
						arguments[i].value=arguments[i].defaultValue;
					}
					else{
						arguments[i].value = "";
					}
       				arguments[i].disabled = true;
       			}
			}
		} 
  	}
}

function enableFieldsOnNo(){
var tmpValArray = new Array();
var cmbValArray = new Array("N","No","MR");
var count = arguments.length;
for(var k=1;k<count;k++) {
	tmpValArray[k] = arguments[k].value;
}
flag=true;
	for(var j=0;j<cmbValArray.length;j++){
		//if(arguments[0].value == cmbValArray[j] ){
		 if(getElementValueOrValue(arguments[0]) == cmbValArray[j] ){
			for(i=1;i<count;i++){
				flag=false;
				arguments[i].value= tmpValArray[i];
				arguments[i].disabled = false;
			}
		}
		else{
			if(flag){
				for(i=1;i<count;i++){									
					if (arguments[i].type == "select-one"){
						arguments[i].selectedIndex = 0;
					}
					else if(arguments[i].type == "checkbox"){
						arguments[i].checked=false;
					}
					else if (arguments[i].defaultValue=="mm" || arguments[i].defaultValue =="dd" || arguments[i].defaultValue=="yyyy"){
						arguments[i].value=arguments[i].defaultValue;
					}
					else{
						arguments[i].value="";
					} 
					arguments[i].disabled = true;
				}
			}	 
		} 
	}
}

function clearFields(){
	var len = arguments.length;
	for (i=0;i<len;i++){
		if(arguments[i].type=="radio" || arguments[i].type=="checkbox"){
			uncheckGroup(arguments[i]);
		}else if(arguments[i].type=="select-one") {
			arguments[i].selectedIndex=0;
		}else{
			arguments[i].value = "";
		}
	}
}

function uncheckGroup(chk){
	var chkBox = eval("document.form1."+chk.name);
	var len = chkBox.length;
	if(len > 0){
		for(i=0;i<len;i++){
			chkBox[i].checked = false;
			continue;
		}
	}else{
		chkBox.checked = false;
	}
}

/*
Description : Function to get the Radio Button Value
param1		: The radio button object
returns		: The Value of the selected radio button
*/
function getRadioButtonValue (radio){ 
	if(radio.length!=null){
    	for (i = 0; i < radio.length; i++){   
        	if (radio[i].checked) {
				return radio[i].value;
			}
		}
		return null;
	}
    else
	{
    	return radio.value;
	} 
}

//Function used to display the error messages in messageDisplay.jsp
function displayMessages(errorMessage) {
	var prevErrMsg="";
	var header="";
	var newErrorMessage = doTrim(errorMessage);
	if (newErrorMessage == null) {     
		errorMessage =  null;   
	}   
	
	if (errorMessage != null) {    
		var preErrHTML = document.all.errorSpanClient.innerHTML;   
		if(preErrHTML!=null&&preErrHTML!=""){        
			prevErrMsg=preErrHTML+"<BR>";   
		}   
		else
		{    
			prevErrMsg=preErrHTML;   
		}      
		if(errorMessage.indexOf("<BR>") >=0){
			header = "The following errors have occured:";
		}
		else{
			header = "The following error has occured:";
		}
		
		for (i=0; i< document.all.errorSpanClient.length;i++)
			document.all.errorSpanClient[i].innerHTML=errImg+prevErrMsg+errorMessage; 
		
		for (i=0; i< document.all.errorHeader.length;i++)
			document.all.errorHeader[i].innerHTML = header;     
		
		for (i=0; i< document.all.errorTableClient.length;i++)
			document.all.errorTableClient[i].style.display='inline'; 
	}   
	else 
	{   
		if ((document.all.errorSpanClient !=null) && (document.all.errorSpanClient!="undefined")&&(document.all.errorSpanClient!="null"))
			for (i=0; i< document.all.errorSpanClient.length;i++)
				document.all.errorSpanClient[i].innerHTML="";
		
		if ((document.all.errorHeader !=null) && (document.all.errorHeader!="undefined")&&(document.all.errorHeader!="null"))
			for (i=0; i< document.all.errorHeader.length;i++)
				document.all.errorHeader[i].innerHTML = "";     
		
		if ((document.all.errorTableClient !=null) && (document.all.errorTableClient!="undefined")&&(document.all.errorTableClient!="null"))
			for (i=0; i< document.all.errorTableClient.length;i++)
				document.all.errorTableClient[i].style.display='none';     
	} 		
}

//Function used for field level security
function resetElement(elem) {
	myType = elem.type;

    if (myType == 'hidden' || myType == 'password' || myType == 'text' || myType == 'textarea') {
    	elem.value = elem.defaultValue;
    }
        
    if (myType == 'select-one' || myType == 'select-multiple') {
		if(elem.options.length != null && elem.options.length != 0){
		var flag = false;
			for (var k=0, l=elem.options.length; k<l; k++) {				
				if (elem.options[k].defaultSelected) {
					flag = true;
					break;
				}
			}
			
			if (!flag) {
				elem.options[0].selected = true;
			} 
			else  
			{
				for (var k=0, l=elem.options.length; k<l; k++) {				
            		elem.options[k].selected =elem.options[k].defaultSelected;
            	}
			}
		}			
	}
	return false;
}

//Function used to return a boolean of prevalidateForm
function runValidations(thisForm){
	return preValidate(thisForm,0);
}

//ILIES-286792: Enter issue fix
var eventKey = "";
var eventTarget = "";
document.onkeydown = (event) => {
      eventKey = event.key;
      eventTarget = event.target.tagName;
}

//Function to set PAGE_ACTION value and submit form
function setActionFieldAndSubmit(frm,value,validate) {
	var validateFlag = false;
	//ILIES-286792: If Event key is Enter and Event Target type is not Button
	var defaultPageAction = document.getElementById("PAGE_ACTION");
	if(defaultPageAction){
		defaultPageAction = defaultPageAction.value;
	}
	
	if (eventKey && eventKey === "Enter" && defaultPageAction && eventTarget !== "BUTTON") {
		value = document.getElementById("PAGE_ACTION").value;
	}
	//ILIES-286792: ends here
   	frm.PAGE_ACTION.value = value;
   	
   	if (frmTarget !=null && frmTarget !=""){
   		frm.target = frmTarget;
   	}
   	if (validate == 'N' && pageSubmit == false) {
    	frm.method = "POST";
      	pageSubmit = true;
      	return true;
   	} else {
   		if(pageSubmit == false){
   			return preValidate(frm);
   		}else{
			return false;
   		}
   }
}   

//Added to fix accessibility changes
function setActionFieldAndSubmitLink(frm,value,validate) {
	var validateFlag = false;
//  	if(value == null){//If pageAction value is null - DO NOT SUBMIT THE PAGE
//   		return false;
//   	}
   	frm.PAGE_ACTION.value = value;
   	
   	if (frmTarget !=null && frmTarget !=""){
   		frm.target = frmTarget;
   	}
   	if (validate == 'N' && pageSubmit == false) {
    	frm.method = "POST";
      	pageSubmit = true;
      	frm.submit();
	  	return false;
   	} else {
   		if(pageSubmit == false){
   			return preValidate(frm);
   		}else{
			return false;
   		}
   }
}   

//1. Function to initialize scroll table

function initScrollTable(oElement) {
   resizeScrollTable(oElement);
   oElement.firstChild.syncTo = oElement.lastChild.uniqueID;
   oElement.firstChild.syncDirection = "horizontal";
}

//2. Functions to resize Scroll table
function resizeScrollTable(oElement) {
   var head = oElement.firstChild;
   var headTable = head.firstChild;
   var body = oElement.lastChild;
   var bodyTable = body.firstChild;
   
   var bodyTableHeight = Math.max(0, oElement.clientHeight - head.offsetHeight);
   body.style.height = bodyTableHeight;
   var scrollBarWidth = body.offsetWidth - body.clientWidth;
  
   // set width of the table in the head
   var headTableWidth = Math.max(0, Math.max(bodyTable.offsetWidth + scrollBarWidth, oElement.clientWidth));
   headTable.style.width = headTableWidth;

   // go through each cell in the head and resize
   var headCells = headTable.rows[0].cells;
   var bodyCells = bodyTable.rows[0].cells;
   
   for (var i = 0; i < bodyCells.length; i++)
      headCells[i].style.width = bodyCells[i].offsetWidth;
}

//Function to open a modal dialog
function openModalDialog(URL,winName,features){
	features = features+";scroll:no;center=yes;help:no;status=no";
	
	if (window.showModalDialog) 
		var modalVal = showModalDialog(URL,winName,features);
	
	return modalVal;
}

//Function to set a given value to a field
function setFieldValue(field,val){
	field.value = val;
}

/*This function is used to filter the options of one dropdown depending on the value selected in another drowdown(options of first dropdown should be related to the values of second dropdown ).
/It takes four parameters.
1.selected value of the first dropdown(filter criteria).
2.dropdown with same values as dropdown to be filtered(it should be hidden object)
3.dropdown to be filtered(second dropdown).
4.dropdown contains the all the corresponding values (common values same type of first dropdown) of the second dropdown.
*/
function selVal(selfield,hidCombo1,filteredCombo,hidCombo2){
var progfilter = selfield;
var dreason = hidCombo1;
var denialReason = filteredCombo;
var creason = hidCombo2;
var dval ;
var dtext ;
var count =  denialReason.options.length;
	for(var j=count-1;j>-1;j--){
		denialReason.options[j] = null;
	}
	for(var i=0;i<creason.options.length;i++){
		if(progfilter == creason.options[i].value){
			dval = dreason.options[i].value;
			dtext = dreason.options[i].text;
			var newopt = new Option(dtext,dval)
			denialReason.options[denialReason.options.length] = newopt;
		}
	}
}

// Function to clear the messages from the Message Display zone
function clearMessages(){
	displayMessages("");
}

//Function to get a handle to an Anchor Tag
//Used by disableTabs() and enableTabs()
function getLinkByID(tab) {
 if (!document.all) {
   return false;
 }
 var link = null;
 links = document.getElementsByTagName('a');
 for (var i=0;i<links.length;i++) {
	  link =  links[i];
	 if (tab == link.id) {
	   break;
	 }
 }
 return link;
}

/********************************************************************************
	*	Name		: getListText
	*	Description : Function called from redoList to get the Text for the given value of an Option
	*     param1		: valu - Value of Option
	*	param2		: selobj - Source List object
	*	returns		: Text of the Option 				  
	*********************************************************************************/
	function getListText(valu,selobj)	{		
		ret = "";		
		elem = selobj;			
		for(j=0;j<elem.length;j++){
			if(valu==elem.options[j].value){
				ret = elem.options[j].text;
				break;
			}
		}
		if(ret==""){
			ret = "N/A";
		}
		return ret;
	}

//Function to reset the innerHTML values when reset button is clicked. Called by doReset()
function resetInnerHTML() {
	var t = "";
	var args = glInnerHTMLArray.length;
	if(args!= null){
		for (i=0;i<args;i++){
			test = glInnerHTMLIDArray[i];
			t = document.getElementById(test);
			t.innerHTML = glInnerHTMLArray[i];
		}
	}
}

//Function to disable Address Group Custom Tag
function disableAddr(combo,thisForm){ 
    var addressArray = new Array();
    if (thisForm.locationType2 != null && thisForm.locationType2 != "undefined") 
    {
		addressArray = new Array  (thisForm.streetName2,thisForm.streetNumber,thisForm.strType,thisForm.fraction,thisForm.direction,thisForm.locationType,thisForm.aptNumber,thisForm.addressLine2,thisForm.city,thisForm.state,thisForm.zipCode4,thisForm.zipCode5,thisForm.county);
    }
    else if (thisForm.dwellingType != null && thisForm.dwellingType != "undefined") 
    {
    	addressArray = new Array(thisForm.streetName2,thisForm.streetNumber,thisForm.strType,thisForm.fraction,thisForm.direction,thisForm.dwellingType,thisForm.aptNumber,thisForm.addressLine2,thisForm.city,thisForm.state,thisForm.zipCode4,thisForm.zipCode5);
    } 
    var addressLen = addressArray.length
    for(var j=0;j<addressLen;j++){
    	disableFieldsOnYes(combo,addressArray[j]);
 	}
}

//Function to get todays date from the Server and not from the client machine
function getToday(){
	try
	{
		var sysDate = document.form1.SysDate.value;
		var today;

		if(sysDate != null && sysDate != ""){
			y = sysDate.substring(0,4);
			m = sysDate.substring(5,7);
			d = sysDate.substring(8);
			today = new Date(y, m-1, d);
			return today;
		}
		else{
			today = new Date(Calendar.getYear(), Calendar.getMonth(), Calendar.getDate());
		}
	}
	catch (Exception){}
}

//Function to allow enter key inside a text area
function textAreaEnter(){
	enterKey = true;
}

//Function to save the carriage returns entered in a textArea.
function textAreaBreak(tArea){
	var len = tArea.value.length;
	var val="";
	var a = 1;
	for(i=0;i<len;i++)
	{
		var t = tArea.value.charAt(i);
		var b;
		if(t == "\r" || t=="\n"){
			a=a+1;
			b = a%2;
			if(b != 0){
				val=val+"~";
			}
		}
		else
		{
			val = val+t;
		}
	}
	tArea.value = val;
}

//Function to replace ~ with carriage returns in a textArea.
function replaceTilda(tArea){
	var len = tArea.value.length;
	var val="";
	for(i=0;i<len;i++)
	{
		var t = tArea.value.charAt(i);
		if(t == "~"){
			val=val+"\r\n";
		}
		else
		{
			val = val+t;
		}
	}
	tArea.value = val;
}

//Functions added by Malathi to avoid duplicate(date) error messages
function validateDates(month,day,year) {
	var monthVal=month.value;
	var dayVal=day.value;
	if (dayVal=="disableDay") dayVal="01";
	var yearVal=year.value;
	var test = "";
	
  	if (validateMonth(month) && validateDay(day) && validateYear(year)) {
		var thisDateStr = monthVal + "/ " + dayVal + "/ " + yearVal;

		var thisDate = new Date( thisDateStr );
	
		var thisDateGMTString = thisDate.toGMTString();
		var thisDatefinalarray = thisDateGMTString.split( " " );
		var thisMonthNum = getMonthNumber(thisDatefinalarray[2]);
		
		if ( thisMonthNum == monthVal ) {
			return true;
		} else {
			return createErrorMessages(month,day,year);
		}
		return true;
  	}else{
			if (! validateMonth(month) || ! validateDay(day) || ! validateYear(year)){
				if(month.name != m.name){
				dateVal = true;
				}
			}
		return false;
	}
} 

//Functions added by Malathi to avoid duplicate(date) error messages
function createErrorMessages(month,day,year) {
	var monthVal=month.value;
	var dayVal=day.value;
	var yearVal=year.value;
  	if(monthVal==2) {
    	if (yearVal%4 ==0 && dayVal>29) {
    		 dateVal = true;
			 return false;
	    } else if (yearVal%4 !=0 && dayVal>28) {
    		 dateVal = true;
			 return false;
	    }     
	}else if ((monthVal==4 || monthVal == 6 || monthVal==9 || monthVal==11) && dayVal>30) {
	 	dateVal = true;
		return false;
	}
	return true;
}

//Function to validate the zip code
function checkZip(field1,field2,hidField,val){

	if(isZero(field1)){
		if(isZero(field2)){
			hidField.value = field1.value+field2.value;
			if(val == "N"){
				return isMaxSet(field1);
			}else if (val == "Y"){
				if(isComplete(hidField)){
					return isMaxSet(field1);
				}
			}
		}
		else return false;
	}
	else return false;
}

//Function to concatenate date(from date customtag) and time (from time customtag)
function formDate(aDate,aTime,tgt){
	var val = aTime.value;
	var pos = val.indexOf(" ");
	var a = val.substring(pos);
	var newDt = aDate.value +""+ a;
	tgt.value = newDt;
}

//Function to set the focus on the first field in a page
function setFocusOnFirstField(){
	if (document.forms.length > 0)
  	{
	var a = document.forms[0];
	var b = a.length;

	for(i=0;i<b;i++){
		try{
			//ILIES-210499 -  Buttons are displayed as images where buttons should be CSS
			//added 'submit', not to include buttons in focus list. 
			//Jaws reads only button name, when focus is on particular button
			if(a.elements[i].type != null && a.elements[i].type != "submit" && a.elements[i].type != "hidden" && a.elements[i].disabled != true && a.elements[i].style.visibility != "hidden" && a.elements[i].style.display != "none"){
				a.elements[i].focus();
				//pcr33902 
				//added this to highlight entire text selection if its the first element in the page
				//if statement helps avoid skipping of first element if it is a select box
				if(a.elements[i].type != "select-one"){
					a.elements[i].select();
				}
				return false;
			}
		}catch(Exception){}  
	}
	}
}

	/***********************************************************************
	*	Name		: getDefaultValues()
	*	Description : Function to get the default value of a form element
	*	param1		: elem  - Element whose default value needs to be
	*				  obtained
	*	returns		: Array of default values.
	***********************************************************************/
	function getDefaultValues(elem){
		var defArr = new Array();
		myType = elem.type;
		if (myType == 'hidden' || myType == 'password' || myType == 'text' || myType == 'textarea') {
			defArr.push( elem.defaultValue);
		}        
		if (myType == 'select-one' || myType == 'select-multiple') {
		var flag = false;
			for (var k=0, l=elem.options.length; k<l; k++) {				
				if (elem.options[k].defaultSelected) {
					flag = true;
					break;
				}
			}			
			if (!flag){
				;
			} 
			else{
				for (var k=0, l=elem.options.length; k<l; k++) {				
					if(elem.options[k].defaultSelected){
						defArr.push(elem.options[k].value);
					}
				}
			}
		}					
		return defArr;
	}

// Set value of Checkbox to "Y" (if checked) or "N"
function setCheckBoxValue(selectedCheckbox){
	if(selectedCheckbox.checked){
		selectedCheckbox.value = "Y";		
	}
	else{
		selectedCheckbox.value = "N";			
	}	
}
/*
	Function to set the checkbox value for the second parameter
*/

function setHiddenValue(selectedCheckbox, selectedHiddenField){
	if(selectedCheckbox.checked){
		selectedHiddenField.value = "Y";	
	}
	else{
		selectedHiddenField.value = "N";			
	}	
}
/*
	Function to set the radiobutton value for the second parameter
*/
function setHiddenRadioButtonValue(selectedRadioButton, selectedHiddenField){
	var val = getRadioButtonValue(selectedRadioButton);
	selectedHiddenField.value = val;
}

/*
 * Function used to return the element value if the 
 * given parameter  is a valid object/element in the
 * form or return the parameter as a value otherwise
 */
 function getElementValueOrValue(elem){
		try{
			if(elem.name!=null&&elem.value!=null&&elem.value!="undefined"){
				return elem.value;
			}
			else{
				return elem;
			}
		}catch(Exception){
			return elem;
		}
	}

/*
 * This function is used to preValidate the 
 * elements specified in the elemIDArray
 */
function preValidateElements(elemIDArray) {
messageArray = new Array();
messageString = "";
var args = preValidate.arguments;
var ret = validateElements(elemIDArray);
len = validationErrors.length;
	if(ret)  {		    
		return true;
	}
	else 
	{
		var num = elemIDArray.length;	
		for(var i = 0; i<num; i++){
			var field = document.getElementById(elemIDArray[i]);
			var name = field.name;
			var aType = field.type;
			if(aType == "textarea"){
				replaceTilda(field);
			}
		}
		if(len>0) {
			for(i=0;i<len;i++)  {	        
				messageArray.push(validationErrors[i]);
			}
			errorString = messageArray.join("<br>");						
			displayMessages(errorString);
		}	 
		return false;
	}
}

/*
 * This function is used to validate the client side errors for the  elements
 * specified in the elemIDArray
 */

function validateElements(elemIDArray){
var num = elemIDArray.length;	
isValidateON = true;
validationErrors = new Array();
var chek = true;	
var ret;
	for(var i = 0; i<num; i++){
		var field =document.getElementById(elemIDArray[i]);
		var name = field.name;
		var validate=field.validate;	
		if ((validate !=null) && (validate!="undefined")&&(validate!="null")){			
			var startPos;
			do{
				startPos=0;
				var fun;
				var endPos=validate.indexOf(";");
				if(endPos > 0){
					fun=validate.substring(startPos,endPos);				
					startPos=endPos+1;
					validate=validate.substring(startPos,validate.length);						
				}else{
					fun=validate;
				}
				var spcs = doTrim(fun);		
				if(spcs!=null&&spcs!="null"&&spcs!=""){
					var netfunc = parseFunctionName(fun);				
					ret=eval(netfunc);				
					if(ret!=null&&ret!="null"&&ret!="undefined"&&!ret) {						
						chek = false;
					}// 
				}				
			}while(endPos != -1);
		}
	}
	isValidateON = false;		
	return chek;
}

// To prepare query string for elements specified in the Element ID Array Input
function prepareElementRequestParams(elementIds){
var requestString = "";
	for(var i=0;i<elementIds.length;i++){
		var elem = document.getElementById(elementIds[i]);
		if(elem!=null){
			if(requestString==""){
				requestString+=elementIds[i]+"="+elem.value;
			}
			else{
				requestString+="&"+elementIds[i]+"="+elem.value;
			}
		}
	}
	return requestString;
}