
package gov.illinois.ies.business.batch.mu;

import gov.illinois.fw.batch.AbstractBatch;
import gov.illinois.fw.batch.Controller.TIERSBatchController;
import gov.illinois.framework.management.logging.ILog;
import gov.illinois.framework.factories.FwServiceFactory;
import gov.illinois.fw.batch.HelperClasses.BatchConstants;
import gov.illinois.framework.management.util.FwConstants;
import gov.illinois.framework.management.util.FwProperty;
import gov.illinois.fw.business.exceptions.TIERSBatchException;
import gov.illinois.fw.business.exceptions.TIERSException;
import gov.illinois.ies.business.rules.al.ALSOPUtil;
import gov.illinois.ies.business.rules.ed.AlMassUpdateManager;
import gov.illinois.ies.business.entities.dc.DcCasesCargo;
import gov.illinois.ies.business.entities.dc.DcCasesCollection;

import java.sql.Connection;
import java.sql.Timestamp;

public class GenerateSP004TriggerForMAABDCasesBatch extends AbstractBatch {

    private static GenerateSP004TriggerForMAABDCasesBatch batchInstance = null;
    private static TIERSBatchController tbc = null;
    private static ILog logger = (ILog) FwServiceFactory.getInstance().create(ILog.class);

    private Connection conn = null;
    private Timestamp beginDate = null;
    private int totalRecordsProcessed = 0;
    private int totalExceptions = 0;
    private DcCasesCollection dcCasesColl = null;
    private DcCasesCargo[] dcCasesRslts = null;
    private Object[] obj = null;
    private static String jobId = null;

    public static void main(String[] args) {
        try {
            batchInstance = new GenerateSP004TriggerForMAABDCasesBatch();
            batchInstance.init(args);
        } catch (Exception e) {
            batchInstance.writeExceptionRecord("Fatal Error at main", e.getMessage(), BatchConstants.REPORT_BODY, true);
            System.exit(BatchConstants.EXIT_FAILURE);
        }
    }

    private void init(String[] args) throws TIERSBatchException {
        try {
            if (args != null && args.length != 0) {
                jobId = args[0];
            } else {
                throw new TIERSException("No job id found for this batch: " + this.getClass().getName());
            }

            tbc = getTIERSBatchController();
            tbc.setJobId(jobId);
            tbc.setProgramName(this.getClass().getSimpleName());
            tbc.setOverWriteFlag(false);

            beginDate = ALSOPUtil.getTSfromString(tbc.getParameters().getAsOfDate());
            conn = tbc.getConnection();
            start();

        } catch (Exception e) {
            throw new TIERSBatchException("Exception during init: " + e.getMessage(), e);
        }
    }

    protected void preProcess() throws TIERSBatchException {}

    protected void process() throws TIERSBatchException {
        generateSP004TriggerForMAABDCases();
    }

    protected void postProcess() throws TIERSBatchException {
        try {
            tbc.insertSummaryRecord(totalRecordsProcessed, totalRecordsProcessed - totalExceptions, totalExceptions);
        } catch (Exception e) {
            throw new TIERSBatchException("Exception during postProcess: " + e.getMessage(), e);
        }
    }

    protected void stop() throws TIERSBatchException {}

    private void generateSP004TriggerForMAABDCases() throws TIERSBatchException {
        int valReturned;
        long caseNum;
        dcCasesColl = new DcCasesCollection(conn);
        obj = new Object[2];
        obj[0] = "SP004";
        obj[1] = beginDate;

        try {
            dcCasesRslts = (DcCasesCargo[]) dcCasesColl.select("findMAABDMedicalCasesByCutOffDt", obj);
        } catch (Exception e) {
            writeExceptionRecord("Exception during case selection", e.getMessage(), BatchConstants.REPORT_BODY, true);
            throw new TIERSBatchException(e.getMessage());
        }

        while (dcCasesRslts != null) {
            valReturned = dcCasesRslts.length;
            for (int i = 0; i < valReturned; i++) {
                try {
                    tbc.savepoint(conn, "savepointMAABD1");
                    caseNum = dcCasesRslts[i].getCaseNum();
                    totalRecordsProcessed++;
                    AlMassUpdateManager.insertMUTrigger(caseNum, "SP004", conn);
                    logicalCommit(conn);
                } catch (Exception ex) {
                    tbc.rollback(conn, "savepointMAABD1");
                    writeExceptionRecord("Insert of SP004 into Mass Update Table Failed for caseNum: " + dcCasesRslts[i].getCaseNum(), ex.getMessage(), BatchConstants.REPORT_BODY, true);
                    totalExceptions++;
                }
            }
            try {
                dcCasesRslts = (DcCasesCargo[]) dcCasesColl.next("findMAABDMedicalCasesByCutOffDt");
            } catch (Exception e1) {
                writeExceptionRecord("Prefetch Logic for findMAABDMedicalCasesByCutOffDt failed", e1.getMessage(), BatchConstants.REPORT_BODY, true);
                throw new TIERSBatchException(e1.getMessage());
            }
        }
    }
}
